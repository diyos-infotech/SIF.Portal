using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.Globalization;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;
using KLTS.Data;
using SIF.Portal.DAL;
namespace SIF.Portal
{
    public partial class EmployeePayments : System.Web.UI.Page
    {
        AppConfiguration config = new AppConfiguration();
        GridViewExportUtil gve = new GridViewExportUtil();
        string EmpIDPrefix = "";
        string CmpIDPrefix = "";
        string Elength = "";
        string Clength = "";
        string Fontstyle = "";
        string CFontstyle = "";
        string BranchID = "";
        string EmpID = "";

        protected void Page_Load(object sender, EventArgs e)
        {

            try
            {

                lblpayment.Text = "";
                GetWebConfigdata();
                if (!IsPostBack)
                {
                    if (Session["UserId"] != null && Session["AccessLevel"] != null)
                    {
                        lblDisplayUser.Text = Session["UserId"].ToString();
                        PreviligeUsers(Convert.ToInt32(Session["AccessLevel"]));
                        lblcname.Text = SqlHelper.Instance.GetCompanyname();
                    }
                    else
                    {
                        Response.Redirect("login.aspx");
                    }
                    ddlcname.Items.Add("--Select--");
                    LoadClientNames();
                    LoadClientList();
                   if(EmpID=="2")
                    {
                        btnpayment.Visible = false;
                    }
                    //month
                    var formatInfoinfo = new DateTimeFormatInfo();
                    string[] monthName = formatInfoinfo.MonthNames;
                    string month = monthName[DateTime.Now.Month - 1];

                    ddlmonth.Items.Add(month);
                    try
                    {
                        month = monthName[DateTime.Now.Month - 2];
                    }
                    catch (IndexOutOfRangeException ex)
                    {
                        month = monthName[12 - (2 - DateTime.Now.Month)];
                    }
                    ddlmonth.Items.Add(month);
                    try
                    {
                        month = monthName[DateTime.Now.Month - 3];
                    }
                    catch (IndexOutOfRangeException ex)
                    {
                        month = monthName[12 - (3 - DateTime.Now.Month)];
                    }
                    ddlmonth.Items.Add(month);

                    ddlmonth.Items.Insert(0, "-Select-");
                }
            }
            catch (Exception ex)
            {

                ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Your Session Expired');", true);
                Response.Redirect("~/Login.aspx");
            }
        }

        protected void GetWebConfigdata()
        {

            EmpIDPrefix = Session["EmpIDPrefix"].ToString();
            CmpIDPrefix = Session["CmpIDPrefix"].ToString();
            BranchID = Session["BranchID"].ToString();
           EmpID = Session["Emp_Id"].ToString();

        }

        protected void Fillcname()
        {
            if (ddlClients.SelectedIndex > 0)
            {
                ddlcname.SelectedValue = ddlClients.SelectedValue;
            }
            else
            {
                ddlcname.SelectedIndex = 0;
            }
        }

        protected void FillClientid()
        {
            if (ddlcname.SelectedIndex > 0)
            {
                ddlClients.SelectedValue = ddlcname.SelectedValue;
            }
            else
            {
                ddlClients.SelectedIndex = 0;
            }
        }

        protected void LoadClientNames()
        {
            DataTable DtClientids = GlobalData.Instance.LoadCNames(CmpIDPrefix,BranchID);
            if (DtClientids.Rows.Count > 0)
            {
                ddlcname.DataValueField = "Clientid";
                ddlcname.DataTextField = "clientname";
                ddlcname.DataSource = DtClientids;
                ddlcname.DataBind();
            }
            ddlcname.Items.Insert(0, "-Select-");

        }

        protected void LoadClientList()
        {
            DataTable DtClientNames = GlobalData.Instance.LoadCIds(CmpIDPrefix,BranchID);
            if (DtClientNames.Rows.Count > 0)
            {
                ddlClients.DataValueField = "Clientid";
                ddlClients.DataTextField = "Clientid";
                ddlClients.DataSource = DtClientNames;
                ddlClients.DataBind();
            }
            ddlClients.Items.Insert(0, "-Select-");
        }

        protected int GetMonth(string NameOfmonth)
        {
            int month = -1;
            var formatInfoinfo = new DateTimeFormatInfo();
            string[] monthName = formatInfoinfo.MonthNames;
            for (int i = 0; i < monthName.Length; i++)
            {
                if (monthName[i].CompareTo(NameOfmonth) == 0)
                {
                    month = i + 1;
                    break;
                }
            }
            return month;
        }

        protected void PreviligeUsers(int previligerid)
        {
            switch (previligerid)
            {
                case 1:
                    break;
                case 2:
                    AddEmployeeLink.Visible = true;
                    ModifyEmployeeLink.Visible = false;
                    DeleteEmployeeLink.Visible = false;
                    AssigningWorkerLink.Visible = false;
                    LoanLink.Visible = false;
                    PaymentLink.Visible = false;
                    //TrainingEmployeeLink.Visible = false;
                    //JobLeavingReasonsLink.Visible = false;
                    AttendanceLink.Visible = false;

                    CompanyInfoLink.Visible = false;
                    ReportsLink.Visible = false;
                    InventoryLink.Visible = false;
                    SettingsLink.Visible = false;

                    break;

                case 3:
                    AddEmployeeLink.Visible = false;
                    ModifyEmployeeLink.Visible = false;
                    DeleteEmployeeLink.Visible = false;
                    AssigningWorkerLink.Visible = false;
                    AttendanceLink.Visible = true;
                    LoanLink.Visible = true;
                    PaymentLink.Visible = true;
                    //TrainingEmployeeLink.Visible = false;
                    PostingOrderListLink.Visible = true;
                    //JobLeavingReasonsLink.Visible = false;

                    ClientsLink.Visible = true;
                    CompanyInfoLink.Visible = false;
                    InventoryLink.Visible = false;
                    ReportsLink.Visible = true;
                    SettingsLink.Visible = true;
                    break;

                case 4:

                    AddEmployeeLink.Visible = false;
                    ModifyEmployeeLink.Visible = false;
                    DeleteEmployeeLink.Visible = false;
                    AssigningWorkerLink.Visible = false;
                    LoanLink.Visible = true;
                    PaymentLink.Visible = true;
                    //TrainingEmployeeLink.Visible = false;
                    //JobLeavingReasonsLink.Visible = false;
                    AttendanceLink.Visible = false;

                    CompanyInfoLink.Visible = true;
                    ReportsLink.Visible = false;
                    InventoryLink.Visible = false;
                    SettingsLink.Visible = false;
                    break;
                case 5:

                    AddEmployeeLink.Visible = false;
                    ModifyEmployeeLink.Visible = false;
                    DeleteEmployeeLink.Visible = false;
                    AssigningWorkerLink.Visible = false;
                    LoanLink.Visible = true;
                    PaymentLink.Visible = true;
                    //TrainingEmployeeLink.Visible = false;
                    //JobLeavingReasonsLink.Visible = false;
                    AttendanceLink.Visible = true;

                    CompanyInfoLink.Visible = true;
                    ReportsLink.Visible = false;
                    InventoryLink.Visible = false;
                    SettingsLink.Visible = false;
                    break;
                case 6:

                    AddEmployeeLink.Visible = false;
                    ModifyEmployeeLink.Visible = false;
                    DeleteEmployeeLink.Visible = false;
                    AssigningWorkerLink.Visible = false;
                    LoanLink.Visible = false;
                    PaymentLink.Visible = false;
                    //TrainingEmployeeLink.Visible = false;
                    //JobLeavingReasonsLink.Visible = false;
                    AttendanceLink.Visible = true;

                    CompanyInfoLink.Visible = false;
                    ReportsLink.Visible = false;
                    InventoryLink.Visible = false;
                    SettingsLink.Visible = false;
                    break;
                default:
                    break;
            }
        }

        protected void ddlmonth_SelectedIndexChanged(object sender, EventArgs e)
        {
            ClearNonPaysheetGenerated();
            NonGeneratedPaysheetList();
            DisplayData();
            //GetBillingDuties();
        }


        public void GetBillingDuties()
        {
            int month = GetMonthBasedOnSelectionDateorMonth();


            #region  Begin Get Contract Id Based on The Last Day

            var ContractID = "";

            DateTime LastDay = DateTime.Now;
            if (Chk_Month.Checked == false)
            {
                LastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
            }
            if (Chk_Month.Checked == true)
            {
                LastDay = DateTime.Parse(Txt_Month.Text, CultureInfo.GetCultureInfo("en-gb"));
            }

            Hashtable HtGetContractID = new Hashtable();
            var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
            HtGetContractID.Add("@clientid", ddlClients.SelectedValue);
            HtGetContractID.Add("@LastDay", LastDay);
            DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

            if (DTContractID.Rows.Count > 0)
            {
                ContractID = DTContractID.Rows[0]["contractid"].ToString();

            }
            else
            {

            }

            #endregion  End Get Contract Id Based on The Last Day



            string qry = "select (select case PaymentType when 0 then '' when 1 then 'Lumpsum' end  from Contracts where ClientId = '" + ddlClients.SelectedValue + "' and contractid='" + ContractID + "') as Type, " +
                         " (select case isnull(PaymentType, 0) when 0 then  case  when isnull(SUM(cast(dutyhours as float)), 0) > 50000 then '' else isnull(SUM(cast(dutyhours as float)), 0) end " +
                         " when 1 then ''  end  from UnitBillBreakup u inner join Contracts c on c.ClientId = u.UnitId and c.contractid=u.contractid where UnitId = '" + ddlClients.SelectedValue + "' and MONTH = '" + month + "' and c.contractid='" + ContractID + "' group by c.PaymentType " +
                         " union all select 0)   as BillingDuties, " +
                         " (select  isnull(round(sum(NoOfDuties + ots + NHS + WO), 0), 0)    from EmpPaySheet  where ClientId = '" + ddlClients.SelectedValue + "' and MONTH = '" + month + "' and contractid='" + ContractID + "' ) as PaysheetDuties, " +
                         " ((select case isnull(PaymentType, 0) when 0 then case  when isnull(SUM(cast(dutyhours as float)), 0) > 50000 then '' else isnull(SUM(cast(dutyhours as float)), 0) end " +
                         " when 1 then ''  end from UnitBillBreakup u inner join Contracts c on c.ClientId = u.UnitId and c.contractid=u.contractid where UnitId = '" + ddlClients.SelectedValue + "' and MONTH = '" + month + "' and c.contractid='" + ContractID + "' group by c.PaymentType " +
                          " union all select 0 )- " +
                         " (select isnull(round(sum(NoOfDuties + ots + NHS + WO), 0), 0) from EmpPaySheet where ClientId = '" + ddlClients.SelectedValue + "' and MONTH = '" + month + "' and contractid='" + ContractID + "')) Difference ";


            DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(qry).Result;
            if (dt.Rows.Count > 0)
            {
                GvBillVsPaysheet.Visible = true;
                GvBillVsPaysheet.DataSource = dt;
                GvBillVsPaysheet.DataBind();



            }
            else
            {
                GvBillVsPaysheet.Visible = false;
                GvBillVsPaysheet.DataSource = null;
                GvBillVsPaysheet.DataBind();
            }

        }
        protected void DisplayData()
        {
            if (ddlClients.SelectedIndex > 0)
            {
                try
                {
                    int payMonth = 0;
                    if (ddlmonth.SelectedIndex >= 0)
                        payMonth = GetMonth(ddlmonth.SelectedValue);
                    else
                        return;

                    //selected months year
                    //int month = Timings.Instance.GetIdForSelectedMonth(ddlmonth.SelectedIndex);// GlobalData.Instance.GetMonth(ddlmonth.SelectedIndex);

                    int month = GetMonthBasedOnSelectionDateorMonth();

                    #region Begin New Code As on [28-10-2013]
                    #region Begin Code For Declaration As on [28-10-2013]
                    var SPName = "";
                    Hashtable HtPaysheet = new Hashtable();
                    var CLIENTID = "";
                    var MONTH = 0;
                    DataTable dt = null;

                    #endregion  End Code For Declaration As on [28-10-2013]

                    #region Begin Code Assign Values To the variables  As on [28-10-2013]
                    SPName = "GetEmppaysheetBasedonClientandmonth";
                    CLIENTID = ddlClients.SelectedValue;
                    MONTH = month;
                    #endregion  End Code Assign Values To the variables  As on [28-10-2013]

                    #region  Begin Code For HT Parameters as on [28-10-2013]
                    HtPaysheet.Add("@clientid", CLIENTID);
                    HtPaysheet.Add("@month", month);
                    #endregion End  Code For HT Parameters as on [28-10-2013]

                    #region  Begin Code For Calling Stored Procedure as on [28-10-2013]
                    dt =config.ExecuteAdaptorAsyncWithParams(SPName, HtPaysheet).Result;
                    #endregion End  Code For Calling Stored Procedure as on [28-10-2013]
                    #endregion  End New Code As on [28-10-2013]


                    if (dt.Rows.Count > 0)
                    {
                        gvattendancezero.DataSource = dt;
                        gvattendancezero.DataBind();
                        float totalActualamount = 0;
                        float totalDuties = 0;
                        float totalOts = 0;
                        float totalwo = 0;
                        float totalnhs = 0;
                        float totalnpots = 0;
                        float totaltempgross = 0;
                        float totalBasic = 0;
                        float totalDA = 0;
                        float totalHRA = 0;
                        float totalCCA = 0;
                        float totalConveyance = 0;
                        float totalWA = 0;
                        float totalOA = 0;
                        float totalGrass = 0;
                        float totalOTAmount = 0;
                        float totalPF = 0;
                        float totalESI = 0;
                        float totalProfTax = 0;
                        float totalSalAdv = 0;
                        float totalAdvDed = 0;
                        float totalWCDed = 0;
                        float totalUniformDed = 0;
                        float totalCanteenAdv = 0;

                        float totalLeaveEncashAmt = 0;
                        float totalGratuity = 0;
                        float totalBonus = 0;
                        float totalnfhs = 0;
                        float totalDed = 0;

                        float totalOtherDed = 0;
                        float totalIncentivs = 0;

                        float totalWoAmt = 0;
                        float totalNhsAmt = 0;
                        float totalNpotsAmt = 0;
                        float totalPenalty = 0;
                        float totalSecDepDed = 0;
                        float totalloanded = 0;
                        float totalTelephoneBillDed = 0;
                        float totalrc = 0;
                        float totalcs = 0;
                        float totalgeneralDed = 0;
                        float totalOwf = 0;
                        float totalPFESIContribution = 0;
                        float totalTDSDed = 0;
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            float actAmount = 0;
                            string actualAmount = dt.Rows[i]["ActualAmount"].ToString();
                            if (actualAmount.Trim().Length > 0)
                            {
                                actAmount = Convert.ToSingle(actualAmount);
                            }
                            if (actAmount >= 0)
                            {
                                totalActualamount += actAmount;
                                string duties = dt.Rows[i]["NoOfDuties"].ToString();
                                if (duties.Trim().Length > 0)
                                {
                                    totalDuties += Convert.ToSingle(duties);
                                }
                                string ots = dt.Rows[i]["OTs"].ToString();
                                if (ots.Trim().Length > 0)
                                {
                                    totalOts += Convert.ToSingle(ots);
                                }

                                string wos = dt.Rows[i]["wo"].ToString();
                                if (wos.Trim().Length > 0)
                                {
                                    totalwo += Convert.ToSingle(wos);
                                }
                                string nhs = dt.Rows[i]["nhs"].ToString();
                                if (nhs.Trim().Length > 0)
                                {
                                    totalnhs += Convert.ToSingle(nhs);
                                }
                                string npots = dt.Rows[i]["npots"].ToString();
                                if (npots.Trim().Length > 0)
                                {
                                    totalnpots += Convert.ToSingle(npots);
                                }
                                string ntempgross = dt.Rows[i]["tempgross"].ToString();
                                if (ntempgross.Trim().Length > 0)
                                {
                                    totaltempgross += Convert.ToSingle(ntempgross);
                                }

                                string strBasic = dt.Rows[i]["Basic"].ToString();
                                if (strBasic.Trim().Length > 0)
                                {
                                    totalBasic += Convert.ToSingle(strBasic);
                                }
                                string strDA = dt.Rows[i]["DA"].ToString();
                                if (strDA.Trim().Length > 0)
                                {
                                    totalDA += Convert.ToSingle(strDA);
                                }
                                string strhHRA = dt.Rows[i]["HRA"].ToString();
                                if (strhHRA.Trim().Length > 0)
                                {
                                    totalHRA += Convert.ToSingle(strhHRA);
                                }
                                string strCCA = dt.Rows[i]["CCA"].ToString();
                                if (strCCA.Trim().Length > 0)
                                {
                                    totalCCA += Convert.ToSingle(strCCA);
                                }
                                string strConveyance = dt.Rows[i]["Conveyance"].ToString();
                                if (strConveyance.Trim().Length > 0)
                                {
                                    totalConveyance += Convert.ToSingle(strConveyance);
                                }
                                string strWA = dt.Rows[i]["WashAllowance"].ToString();
                                if (strWA.Trim().Length > 0)
                                {
                                    totalWA += Convert.ToSingle(strWA);
                                }
                                string strOA = dt.Rows[i]["OtherAllowance"].ToString();
                                if (strOA.Trim().Length > 0)
                                {
                                    totalOA += Convert.ToSingle(strOA);
                                }


                                string strLeaveEncashAmt = dt.Rows[i]["LeaveEncashAmt"].ToString();
                                if (strCCA.Trim().Length > 0)
                                {
                                    totalLeaveEncashAmt += Convert.ToSingle(strLeaveEncashAmt);
                                }
                                string strGratuity = dt.Rows[i]["Gratuity"].ToString();
                                if (strGratuity.Trim().Length > 0)
                                {
                                    totalGratuity += Convert.ToSingle(strGratuity);
                                }
                                string strBonus = dt.Rows[i]["Bonus"].ToString();
                                if (strBonus.Trim().Length > 0)
                                {
                                    totalBonus += Convert.ToSingle(strBonus);
                                }
                                string strNfhs = dt.Rows[i]["Nfhs"].ToString();
                                if (strNfhs.Trim().Length > 0)
                                {
                                    totalnfhs += Convert.ToSingle(strNfhs);
                                }

                                string strGross = dt.Rows[i]["Gross"].ToString();
                                if (strGross.Trim().Length > 0)
                                {
                                    totalGrass += Convert.ToSingle(strGross);
                                }


                                string strIncentivs = dt.Rows[i]["Incentivs"].ToString();
                                if (strIncentivs.Trim().Length > 0)
                                {
                                    totalIncentivs += Convert.ToSingle(strIncentivs);
                                }

                                string strOTAmount = dt.Rows[i]["OTAmt"].ToString();
                                if (strOTAmount.Trim().Length > 0)
                                {
                                    totalOTAmount += Convert.ToSingle(strOTAmount);
                                }
                                string strPF = dt.Rows[i]["PF"].ToString();
                                if (strPF.Trim().Length > 0)
                                {
                                    totalPF += Convert.ToSingle(strPF);
                                }
                                string strESI = dt.Rows[i]["ESI"].ToString();
                                if (strESI.Trim().Length > 0)
                                {
                                    totalESI += Convert.ToSingle(strESI);
                                }
                                string strProfTax = dt.Rows[i]["ProfTax"].ToString();
                                if (strProfTax.Trim().Length > 0)
                                {
                                    totalProfTax += Convert.ToSingle(strProfTax);
                                }

                                string strSalAdv = dt.Rows[i]["SalAdvDed"].ToString();
                                if (strSalAdv.Trim().Length > 0)
                                {
                                    totalSalAdv += Convert.ToSingle(strSalAdv);
                                }

                                string strAdvDed = dt.Rows[i]["ADVDed"].ToString();
                                if (strAdvDed.Trim().Length > 0)
                                {
                                    totalAdvDed += Convert.ToSingle(strAdvDed);
                                }

                                string strWCDed = dt.Rows[i]["WCDed"].ToString();
                                if (strWCDed.Trim().Length > 0)
                                {
                                    totalWCDed += Convert.ToSingle(strWCDed);
                                }

                                string strUniformDed = dt.Rows[i]["UniformDed"].ToString();
                                if (strUniformDed.Trim().Length > 0)
                                {
                                    totalUniformDed += Convert.ToSingle(strUniformDed);
                                }

                                string strSecDepDed = dt.Rows[i]["SecurityDepDed"].ToString();
                                if (strSecDepDed.Trim().Length > 0)
                                {
                                    totalSecDepDed += Convert.ToSingle(strSecDepDed);
                                }

                                string strOtherDed = dt.Rows[i]["OtherDed"].ToString();
                                if (strOtherDed.Trim().Length > 0)
                                {
                                    totalOtherDed += Convert.ToSingle(strOtherDed);
                                }
                                string strCanteenAdv = dt.Rows[i]["CanteenAdv"].ToString();
                                if (strCanteenAdv.Trim().Length > 0)
                                {
                                    totalCanteenAdv += Convert.ToSingle(strCanteenAdv);
                                }

                                string strDed = dt.Rows[i]["TotalDeductions"].ToString();
                                if (strDed.Trim().Length > 0)
                                {
                                    totalDed += Convert.ToSingle(strDed);
                                }


                                //New code add as on 24/12/2013 by venkat

                                string strWoAmt = dt.Rows[i]["WOAmt"].ToString();
                                if (strWoAmt.Trim().Length > 0)
                                {
                                    totalWoAmt += Convert.ToSingle(strWoAmt);
                                }

                                string strNhsAmt = dt.Rows[i]["Nhsamt"].ToString();
                                if (strNhsAmt.Trim().Length > 0)
                                {
                                    totalNhsAmt += Convert.ToSingle(strNhsAmt);
                                }

                                string strNpotsAmt = dt.Rows[i]["Npotsamt"].ToString();
                                if (strNpotsAmt.Trim().Length > 0)
                                {
                                    totalNpotsAmt += Convert.ToSingle(strNpotsAmt);
                                }

                                string strPenalty = dt.Rows[i]["Penalty"].ToString();
                                if (strPenalty.Trim().Length > 0)
                                {
                                    totalPenalty += Convert.ToSingle(strPenalty);
                                }

                                string strLoanDed = dt.Rows[i]["LoanDed"].ToString();
                                if (strLoanDed.Trim().Length > 0)
                                {
                                    totalloanded += Convert.ToSingle(strLoanDed);
                                }

                                string strTelephoneBillDed = dt.Rows[i]["TelephoneBillDed"].ToString();
                                if (strTelephoneBillDed.Trim().Length > 0)
                                {
                                    totalTelephoneBillDed += Convert.ToSingle(strTelephoneBillDed);
                                }
                                string strPFESIContribution = dt.Rows[i]["PFESIContribution"].ToString();
                                if (strPFESIContribution.Trim().Length > 0)
                                {
                                    totalPFESIContribution += Convert.ToSingle(strPFESIContribution);
                                }

                                string strTDSDed = dt.Rows[i]["TDSDed"].ToString();
                                if (strTDSDed.Trim().Length > 0)
                                {
                                    totalTDSDed  += Convert.ToSingle(strTDSDed);
                                }


                            }
                        }


                        

                        //4
                        Label lblTotalDuties = gvattendancezero.FooterRow.FindControl("lblTotalDuties") as Label;
                        lblTotalDuties.Text = Math.Round(totalDuties).ToString();
                        //5
                        Label lblTotalOTs = gvattendancezero.FooterRow.FindControl("lblTotalOTs") as Label;
                        lblTotalOTs.Text = Math.Round(totalOts).ToString();

                        if (totalOts > 0)
                        {
                            gvattendancezero.Columns[5].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[5].Visible = false;
                        }
                        //6
                        Label lblTotalwos = gvattendancezero.FooterRow.FindControl("lblTotalwos") as Label;
                        lblTotalwos.Text = Math.Round(totalwo).ToString();

                        if (totalwo > 0)
                        {
                            gvattendancezero.Columns[6].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[6].Visible = false;
                        }
                        //7
                        Label lblTotalNhs = gvattendancezero.FooterRow.FindControl("lblTotalNhs") as Label;
                        lblTotalNhs.Text = Math.Round(totalnhs).ToString();

                        if (totalnhs > 0)
                        {
                            gvattendancezero.Columns[7].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[7].Visible = false;
                        }

                       
                        //8
                        Label lblTotalNpots = gvattendancezero.FooterRow.FindControl("lblTotalNpots") as Label;
                        lblTotalNpots.Text = Math.Round(totalnpots).ToString();

                        if (totalnpots > 0)
                        {
                            gvattendancezero.Columns[8].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[8].Visible = false;
                        }
                        //9
                        Label lblTotaltempgross = gvattendancezero.FooterRow.FindControl("lblTotaltempgross") as Label;
                        lblTotaltempgross.Text = Math.Round(totaltempgross).ToString();

                        //10
                        Label lblTotalBasic = gvattendancezero.FooterRow.FindControl("lblTotalBasic") as Label;
                        lblTotalBasic.Text = Math.Round(totalBasic).ToString();

                        //11
                        Label lblTotalDA = gvattendancezero.FooterRow.FindControl("lblTotalDA") as Label;
                        lblTotalDA.Text = Math.Round(totalDA).ToString();

                        if (totalDA > 0)
                        {
                            gvattendancezero.Columns[11].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[11].Visible = false;

                        }
                        //12
                        Label lblTotalHRA = gvattendancezero.FooterRow.FindControl("lblTotalHRA") as Label;
                        lblTotalHRA.Text = Math.Round(totalHRA).ToString();

                        if (totalHRA > 0)
                        {
                            gvattendancezero.Columns[12].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[12].Visible = false;

                        }

                        //13
                        Label lblTotalCCA = gvattendancezero.FooterRow.FindControl("lblTotalCCA") as Label;
                        lblTotalCCA.Text = Math.Round(totalCCA).ToString();

                        if (totalCCA > 0)
                        {
                            gvattendancezero.Columns[13].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[13].Visible = false;

                        }
                        //14
                        Label lblTotalConveyance = gvattendancezero.FooterRow.FindControl("lblTotalConveyance") as Label;
                        lblTotalConveyance.Text = Math.Round(totalConveyance).ToString();

                        if (totalConveyance > 0)
                        {
                            gvattendancezero.Columns[14].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[14].Visible = false;

                        }
                        //15
                        Label lblTotalWA = gvattendancezero.FooterRow.FindControl("lblTotalWA") as Label;
                        lblTotalWA.Text = Math.Round(totalWA).ToString();

                        if (totalWA > 0)
                        {
                            gvattendancezero.Columns[15].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[15].Visible = false;

                        }
                        //16
                        Label lblTotalOA = gvattendancezero.FooterRow.FindControl("lblTotalOA") as Label;
                        lblTotalOA.Text = Math.Round(totalOA).ToString();

                        if (totalOA > 0)
                        {
                            gvattendancezero.Columns[16].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[16].Visible = false;

                        }

                        //17
                        Label lblTotalLeaveEncashAmt = gvattendancezero.FooterRow.FindControl("lblTotalLeaveEncashAmt") as Label;
                        lblTotalLeaveEncashAmt.Text = Math.Round(totalLeaveEncashAmt).ToString();

                        if (totalLeaveEncashAmt > 0)
                        {
                            gvattendancezero.Columns[17].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[17].Visible = false;

                        }
                        //18
                        Label lblTotalGratuity = gvattendancezero.FooterRow.FindControl("lblTotalGratuity") as Label;
                        lblTotalGratuity.Text = Math.Round(totalGratuity).ToString();

                        if (totalGratuity > 0)
                        {
                            gvattendancezero.Columns[18].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[18].Visible = false;

                        }
                        //19
                        Label lblTotalBonus = gvattendancezero.FooterRow.FindControl("lblTotalBonus") as Label;
                        lblTotalBonus.Text = Math.Round(totalBonus).ToString();

                        if (totalBonus > 0)
                        {
                            gvattendancezero.Columns[19].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[19].Visible = false;

                        }
                        //20
                        Label lblTotalNfhs = gvattendancezero.FooterRow.FindControl("lblTotalNfhs") as Label;
                        lblTotalNfhs.Text = Math.Round(totalnfhs).ToString();

                        if (totalnfhs > 0)
                        {
                            gvattendancezero.Columns[20].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[20].Visible = false;

                        }
                        //21
                        Label lblTotalrc = gvattendancezero.FooterRow.FindControl("lblTotalrc") as Label;
                        lblTotalrc.Text = Math.Round(totalrc).ToString();
                        //22
                        Label lblTotalcs = gvattendancezero.FooterRow.FindControl("lblTotalcs") as Label;
                        lblTotalcs.Text = Math.Round(totalcs).ToString();
                        //23
                        Label lblTotalGross = gvattendancezero.FooterRow.FindControl("lblTotalGross") as Label;
                        lblTotalGross.Text = Math.Round(totalGrass).ToString();

                        //24
                        Label lblTotalOTAmount = gvattendancezero.FooterRow.FindControl("lblTotalOTAmount") as Label;
                        lblTotalOTAmount.Text = Math.Round(totalOTAmount).ToString();
                        if (totalOTAmount > 0)
                        {
                            gvattendancezero.Columns[24].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[24].Visible = false;

                        }

                        //25
                        Label lblTotalWOAmount = gvattendancezero.FooterRow.FindControl("lblTotalWOAmount") as Label;
                        lblTotalWOAmount.Text = Math.Round(totalWoAmt).ToString();

                        if (totalWoAmt > 0)
                        {
                            gvattendancezero.Columns[25].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[25].Visible = false;

                        }

                        //26
                        Label lblTotalNhsAmount = gvattendancezero.FooterRow.FindControl("lblTotalNhsAmount") as Label;
                        lblTotalNhsAmount.Text = Math.Round(totalNhsAmt).ToString();

                        if (totalNhsAmt > 0)
                        {
                            gvattendancezero.Columns[26].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[26].Visible = false;

                        }

                        //27
                        Label lblTotalNpotsAmount = gvattendancezero.FooterRow.FindControl("lblTotalNpotsAmount") as Label;
                        lblTotalNpotsAmount.Text = Math.Round(totalNpotsAmt).ToString();

                        if (totalNpotsAmt > 0)
                        {
                            gvattendancezero.Columns[27].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[27].Visible = false;

                        }
                        //28
                        Label lblTotalIncentivs = gvattendancezero.FooterRow.FindControl("lblTotalIncentivs") as Label;
                        lblTotalIncentivs.Text = Math.Round(totalIncentivs).ToString();

                        if (totalIncentivs > 0)
                        {
                            gvattendancezero.Columns[28].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[28].Visible = false;

                        }
                       
                        //29
                        Label lblTotalPF = gvattendancezero.FooterRow.FindControl("lblTotalPF") as Label;
                        lblTotalPF.Text = Math.Round(totalPF).ToString();

                        //30
                        Label lblTotalESI = gvattendancezero.FooterRow.FindControl("lblTotalESI") as Label;
                        lblTotalESI.Text = Math.Round(totalESI).ToString();
                        //31
                        Label lblTotalProfTax = gvattendancezero.FooterRow.FindControl("lblTotalProfTax") as Label;
                        lblTotalProfTax.Text = Math.Round(totalProfTax).ToString();
                        if (totalProfTax > 0)
                        {
                            gvattendancezero.Columns[31].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[31].Visible = false;

                        }
                        //32
                        Label lblTotalSalAdv = gvattendancezero.FooterRow.FindControl("lblTotalsaladv") as Label;
                        lblTotalSalAdv.Text = Math.Round(totalSalAdv).ToString();
                        if (totalSalAdv > 0)
                        {
                            gvattendancezero.Columns[32].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[32].Visible = false;

                        }
                        //33
                        Label lblTotaladvded = gvattendancezero.FooterRow.FindControl("lblTotaladvded") as Label;
                        lblTotaladvded.Text = Math.Round(totalAdvDed).ToString();
                        if (totalAdvDed > 0)
                        {
                            gvattendancezero.Columns[33].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[33].Visible = false;

                        }
                        //34
                        Label lblTotalwcded = gvattendancezero.FooterRow.FindControl("lblTotalwcded") as Label;
                        lblTotalwcded.Text = Math.Round(totalWCDed).ToString();
                        if (totalWCDed > 0)
                        {
                            gvattendancezero.Columns[34].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[34].Visible = false;

                        }

                        //35
                        Label lblTotalSecDepDed = gvattendancezero.FooterRow.FindControl("lblTotalSecDepDed") as Label;
                        lblTotalSecDepDed.Text = Math.Round(totalSecDepDed).ToString();

                        if (totalSecDepDed > 0)
                        {
                            gvattendancezero.Columns[36].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[36].Visible = false;

                        }

                        //36
                        Label lblTotalOtherDed = gvattendancezero.FooterRow.FindControl("lblTotalOtherDed") as Label;
                        lblTotalOtherDed.Text = Math.Round(totalOtherDed).ToString();

                        if (totalOtherDed > 0)
                        {
                            gvattendancezero.Columns[36].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[36].Visible = false;

                        }

                        //37
                        Label lblTotaltotalloanded = gvattendancezero.FooterRow.FindControl("lblTotaltotalloanded") as Label;
                        lblTotaltotalloanded.Text = Math.Round(totalloanded).ToString();

                        if (totalloanded > 0)
                        {
                            gvattendancezero.Columns[36].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[36].Visible = false;

                        }

                        //38
                        Label lblTotalGeneralDed = gvattendancezero.FooterRow.FindControl("lblTotalGeneralDed") as Label;
                        lblTotalGeneralDed.Text = Math.Round(totalgeneralDed).ToString();

                        if (totalloanded > 0)
                        {
                            gvattendancezero.Columns[38].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[38].Visible = false;

                        }
                        //39
                        Label lblTotalCanteenAdv = gvattendancezero.FooterRow.FindControl("lblTotalcantadv") as Label;
                        lblTotalCanteenAdv.Text = Math.Round(totalCanteenAdv).ToString();

                        if (totalCanteenAdv > 0)
                        {
                            gvattendancezero.Columns[39].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[39].Visible = false;

                        }

                        //40
                        Label lblTotalowf = gvattendancezero.FooterRow.FindControl("lblTotalowf") as Label;
                        lblTotalowf.Text = Math.Round(totalOwf).ToString();

                        if (totalOwf > 0)
                        {
                            gvattendancezero.Columns[40].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[40].Visible = false;

                        }
                        //41
                        Label lblTotalPenalty = gvattendancezero.FooterRow.FindControl("lblTotalPenalty") as Label;
                        lblTotalPenalty.Text = Math.Round(totalPenalty).ToString();

                        if (totalPenalty > 0)
                        {
                            gvattendancezero.Columns[41].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[41].Visible = false;

                        }


                        //42
                        Label lblTotalTelephoneBillDed = gvattendancezero.FooterRow.FindControl("lblTotalTelephoneBillDed") as Label;
                        lblTotalTelephoneBillDed.Text = Math.Round(totalTelephoneBillDed).ToString();

                        if (totalTelephoneBillDed > 0)
                        {
                            gvattendancezero.Columns[42].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[42].Visible = false;

                        }
                        //43
                        Label lblTotalPFESIContribution = gvattendancezero.FooterRow.FindControl("lblTotalPFESIContribution") as Label;
                        lblTotalPFESIContribution.Text = Math.Round(totalPFESIContribution).ToString();

                        if (totalPFESIContribution > 0)
                        {
                            gvattendancezero.Columns[43].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[43].Visible = false;

                        }

                        Label lblTotalTDSDed = gvattendancezero.FooterRow.FindControl("lblTotalTDSDed") as Label;
                        lblTotalTDSDed.Text = Math.Round(totalTDSDed ).ToString();

                        if (totalTDSDed  > 0)
                        {
                            gvattendancezero.Columns[44].Visible = true;
                        }
                        else
                        {
                            gvattendancezero.Columns[44].Visible = false;

                        }
                        //45
                        Label lblTotalDeductions = gvattendancezero.FooterRow.FindControl("lblTotalDeductions") as Label;
                        lblTotalDeductions.Text = Math.Round(totalDed).ToString();

                        //46
                        Label tot = gvattendancezero.FooterRow.FindControl("lblTotalNetAmount") as Label;
                        tot.Text = Math.Round(totalActualamount).ToString();
                        //New code add as on 12/06/2018 by MaheshGoud

                        //Label lblTotalUniformDed = gvattendancezero.FooterRow.FindControl("lblTotalUniformDed") as Label;
                        //lblTotalUniformDed.Text = Math.Round(totalUniformDed).ToString();
                        //if (totalUniformDed > 0)
                        //{

                        //    gvattendancezero.Columns[35].Visible = true;
                        //}
                        //else
                        //{
                        //    gvattendancezero.Columns[35].Visible = false;

                        //}

                       
                       

                    }
                    else
                    {
                        gvattendancezero.DataSource = null;
                        gvattendancezero.DataBind();
                    }
                }
                catch (Exception ex)
                {
                }
            }
        }

        public void NonGeneratedPaysheetList()
        {
            var month = 0;
            month = GetMonthBasedOnSelectionDateorMonth();

            string qry = "select Timings from emppaysheet where clientid='" + ddlClients.SelectedValue + "' and month='" + month + "'";
            DataTable dts = config.ExecuteAdaptorAsyncWithQueryParams(qry).Result;
            string date = "";

            if (dts.Rows.Count > 0)
            {
                date = dts.Rows[0]["Timings"].ToString();
                PnlNonGeneratedPaysheet.Visible = true;

                lblPaysheetGeneratedTime.Text = "<b>Paysheet generated on  " + date + "</b>";

            }
            else
            {
                lblPaysheetGeneratedTime.Text = "";
            }

            string query = "";
            DataTable dt = null;

            query = "select wagetype from contracts where clientid='" + ddlClients.SelectedValue + "'";
            dt = config.ExecuteAdaptorAsyncWithQueryParams(query).Result;

            string WageType = "";

            if (dt.Rows.Count > 0)
            {
                WageType = dt.Rows[0]["wagetype"].ToString();

            }

            if (WageType == "2")
            {
                query = "select ea.Design,d.design as Designation,ClientId,NoOfDuties,MONTH from EmpAttendance ea inner join Designations d on d.DesignId=ea.Design  " +
                               " where ea.Design not in (select Designations from contractdetailssw where clientid='" + ddlClients.SelectedValue + "') and ea.Design>0 and (NoOfDuties+OT)>0  and ClientId='" + ddlClients.SelectedValue + "' and MONTH='" + month + "'  group by ea.Design,ClientId,NoOfDuties,MONTH,d.design";

                dt = config.ExecuteAdaptorAsyncWithQueryParams(query).Result;

                if (dt.Rows.Count > 0)
                {
                    PnlNonGeneratedPaysheet.Visible = true;
                    lblText.Visible = true;
                    lblReason.Visible = true;
                    GvNonGeneratedEmp.Visible = true;
                    GvEmpList.Visible = true;
                    lblEmplist.Visible = true;

                    lblText.Text = "Paysheet is not generated for the employees with the following Designations";
                    lblReason.Text = "(<b>Reason : Please check the designation of the employees given in the below table. <br> Update the Salary Structure in Contracts Special Wages Table ,<br> or change the designation of the employee(s) in attendance. </b>)";

                    GvNonGeneratedEmp.DataSource = dt;
                    GvNonGeneratedEmp.DataBind();

                    lblEmplist.Text = "List of employees for whom paysheet is not generated are ";

                    string Empetails = "select ea.EmpId,ea.Design,d.design as Designation,ClientId,NoOfDuties,MONTH,(empfname+' '+empmname+' '+emplname) as empname from EmpAttendance ea inner join Designations d on d.DesignId=ea.Design inner join empdetails ed on ed.empid=ea.empid  " +
                               " where ea.Design not in (select Designations from contractdetailssw  where clientid='" + ddlClients.SelectedValue + "') and ea.Design>0 and (NoOfDuties+OT)>0  and ClientId='" + ddlClients.SelectedValue + "' and MONTH='" + month + "' ";
                    DataTable dtEmpetails = config.ExecuteAdaptorAsyncWithQueryParams(Empetails).Result;

                    if (dtEmpetails.Rows.Count > 0)
                    {
                        GvEmpList.DataSource = dtEmpetails;
                        GvEmpList.DataBind();
                    }
                    else
                    {
                        GvEmpList.DataSource = null;
                        GvEmpList.DataBind();
                        lblText.Text = "";
                        lblReason.Text = "";
                        lblEmplist.Text = "";
                    }


                }
                else
                {
                    GvEmpList.DataSource = null;
                    GvEmpList.DataBind();
                    GvNonGeneratedEmp.DataSource = null;
                    GvNonGeneratedEmp.DataBind();
                    lblText.Text = "";
                    lblReason.Text = "";
                    lblEmplist.Text = "";
                }
            }

            else
            {
                GvEmpList.DataSource = null;
                GvEmpList.DataBind();
                GvNonGeneratedEmp.DataSource = null;
                GvNonGeneratedEmp.DataBind();
                lblText.Text = "";
                lblReason.Text = "";
                lblEmplist.Text = "";
            }

        }

        public void getpaysheetVsbills()
        {

            GvBillVsPaysheet.DataSource = null;
            GvBillVsPaysheet.DataBind();

            int month = GetMonthBasedOnSelectionDateorMonth();


            string sqlqry = "select 'Total Bill Amount' as Text1,isnull(round((ub.GrandTotal ),0),0) as grandtotal,'Total Billing Duties' as Text2,isnull(round(sum(cast(ubb.DutyHours as float)),0),0) as dutyhours from unitbill ub left join UnitBillBreakup ubb on ub.unitid=ubb.UnitId and ub.month=ubb.month where ub.Month='" + month + "' and ub.unitid='" + ddlClients.SelectedValue + "' group by grandtotal " +
                            " union " +
                            "select 'Total Paysheet Amount' as Text1,round(sum(ActualAmount),0) as ActualAmount,'Total Paysheet Duties' as Text2,round(sum(NoOfDuties+ots+ots1+nhs+wo),0) as NoOfDuties from EmpPaySheet where clientid='" + ddlClients.SelectedValue + "' and MONTH='" + month + "'" +
                            " union " +
                            "select 'Difference' as Text1, (select round(sum(cast(GrandTotal as float) ),0)as grandtotal from UnitBill  where Month='" + month + "' and unitid='" + ddlClients.SelectedValue + "')-(select round(sum(ActualAmount),0) as ActualAmount from EmpPaySheet where MONTH='" + month + "' and clientid='" + ddlClients.SelectedValue + "')" +
                            ",'' as Text2,(select isnull(round(sum(cast(DutyHours as float)),0),0) as dutyhours from UnitBill ub  left join UnitBillBreakup ubb on ub.unitid=ubb.UnitId and ub.month=ubb.month where ub.unitid='" + ddlClients.SelectedValue + "' and  ub.Month='" + month + "')-(Select round(sum(NoOfDuties+ots+ots1+nhs+wo),0) as NoOfDuties from EmpPaySheet where clientid='" + ddlClients.SelectedValue + "' and MONTH='" + month + "')";
            //" union " +
            //"select 'No PF' as Text1,( select COUNT(Pf) from EmpPaySheet where clientid='" + ddlClients.SelectedValue + "' and MONTH='" + month + "' and PF=0)," +
            //"'No ESI' as Text2,(select count(esi) from EmpPaySheet where clientid='" + ddlClients.SelectedValue + "' and MONTH='" + month + "' and esi=0 )";

            DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(sqlqry).Result;
            if (dt.Rows.Count > 0)
            {

                GvBillVsPaysheet.DataSource = dt;
                GvBillVsPaysheet.DataBind();
                GvBillVsPaysheet.HeaderRow.Visible = false;


                if ((dt.Rows[1]["grandtotal"].ToString().Length > 0 || dt.Rows[1]["dutyhours"].ToString().Length > 0) && (dt.Rows[0]["grandtotal"].ToString().Length > 0 || dt.Rows[0]["dutyhours"].ToString().Length > 0))
                {
                    GvBillVsPaysheet.Visible = true;
                }
                else
                {
                    GvBillVsPaysheet.Visible = false;

                }
            }
            else
            {
                GvBillVsPaysheet.Visible = false;
                GvBillVsPaysheet.DataSource = null;
                GvBillVsPaysheet.DataBind();
                GvBillVsPaysheet.HeaderRow.Visible = false;
            }

        }

        public string GetMonthNew()
        {
            //string month = "";
            //string year = "";
            string DateVal = "";
            //DateTime date;

            var testDate = 0;
            string EnteredDate = "";

            #region Validation

            if (Txt_Month.Text.Trim().Length > 0)
            {

                try
                {

                    testDate = GlobalData.Instance.CheckEnteredDate(Txt_Month.Text);
                    if (testDate > 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid  DATE.Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return "0";
                    }
                    EnteredDate = DateTime.Parse(Txt_Month.Text, CultureInfo.GetCultureInfo("en-gb")).ToString();
                }
                catch (Exception ex)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid  DATE.Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                    return "0";
                }
            }
            #endregion


            #region  Month Get Based on the Control Selection
            int month = 0;
            if (Chk_Month.Checked == false)
            {
                month = Timings.Instance.GetIdForSelectedMonth(ddlmonth.SelectedIndex);
                DateVal = monthval(month);

            }
            if (Chk_Month.Checked == true)
            {
                DateTime date = DateTime.Parse(Txt_Month.Text, CultureInfo.GetCultureInfo("en-gb"));
                month = Timings.Instance.GetIdForEnteredMOnth(date);
                DateVal = monthval(month);
            }
            return DateVal;

            #endregion


        }


        public string monthval(int month)
        {
            string monthnew = "";

            if (month.ToString().Length == 3)
            {
                monthnew = month.ToString().Substring(1, 2) + 0 + month.ToString().Substring(0, 1);
            }
            else
            {
                monthnew = month.ToString().Substring(2, 2) + month.ToString().Substring(0, 2);
            }

            return monthnew;

        }

        protected void btnpayment_Click(object sender, EventArgs e)
        {
            try
            {
                var month = 0;
                month = GetMonthBasedOnSelectionDateorMonth();
                var monthnew = "0";
                monthnew = GetMonthNew();

                string QueryWages = "select wagetype from contracts where clientid='" + ddlClients.SelectedValue + "'";
                DataTable dtWages = config.ExecuteAdaptorAsyncWithQueryParams(QueryWages).Result;

                string WagesType = "";

                if (dtWages.Rows.Count > 0)
                {

                    WagesType = dtWages.Rows[0]["wagetype"].ToString();
                }



                #region  Begin Code For Validations as on [18-03-2014]
                if (ddlClients.SelectedIndex == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Select Client Id');", true);
                    return;
                }
                if (Chk_Month.Checked == false)
                {
                    if (ddlmonth.SelectedIndex == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Select Month');", true);
                        return;
                    }
                }
                if (Chk_Month.Checked == true)
                {
                    if (Txt_Month.Text.Trim().Length == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Enter Month');", true);
                        return;
                    }
                }
                #endregion End Code For Validations as on [18-03-2014]

                #region  Begin Code For Variable Declarations as on [18-03-2014]
                var ClientID = "";

                DateTime LastDay = DateTime.Now;
                if (Chk_Month.Checked == false)
                {
                    LastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                }
                if (Chk_Month.Checked == true)
                {
                    LastDay = DateTime.Parse(Txt_Month.Text, CultureInfo.GetCultureInfo("en-gb"));
                }
                DataTable DtEmppaysheet = null;
                Hashtable HTEmppaysheet = new Hashtable();

                var Gendays = 0;
                var G_Sdays = 0;

                var ContractID = "";
                var bBillDates = 0;
                var bPaySheetDates = 0;

                #endregion End Code For Variable Declarations    as on [18-03-2014]




                #region  Begin Get Contract Id Based on The Last Day


                Hashtable HtGetContractID = new Hashtable();
                var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                HtGetContractID.Add("@clientid", ddlClients.SelectedValue);
                HtGetContractID.Add("@LastDay", LastDay);
                DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                if (DTContractID.Rows.Count > 0)
                {
                    ContractID = DTContractID.Rows[0]["contractid"].ToString();
                    bBillDates = int.Parse(DTContractID.Rows[0]["BillDates"].ToString());
                    bPaySheetDates = int.Parse(DTContractID.Rows[0]["PaySheetDates"].ToString());
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "", "alert('Contract Details Are Not  Avaialable For This Client.');", true);
                    return;
                }

                #endregion  End Get Contract Id Based on The Last Day


                if (Chk_Month.Checked == false)
                {
                    //Gendays = Timings.Instance.GetNoofDaysForSelectedMonth(ddlmonth.SelectedIndex, bBillDates);
                    Gendays = Timings.Instance.GetNoofDaysForSelectedMonth(ddlmonth.SelectedIndex, bPaySheetDates);
                }

                //New Code when select month in Textbox
                if (Chk_Month.Checked == true)
                {
                    DateTime mGendays = DateTime.Now;
                    DateTime date = DateTime.Parse(Txt_Month.Text, CultureInfo.GetCultureInfo("en-gb"));
                    mGendays = DateTime.Parse(date.ToString());
                    // Gendays = Timings.Instance.GetNoofDaysForEnteredMonth(mGendays, bBillDates);
                    Gendays = Timings.Instance.GetNoofDaysForEnteredMonth(mGendays, bPaySheetDates);
                }
                G_Sdays = Timings.Instance.Get_GS_Days(month, Gendays);

                var SPName = "";

                if (WagesType != "3")
                {
                    SPName = "IMGenratePaysheet";
                }
                else
                {
                    SPName = "IMGenrateSalary";

                }

                #region  Begin Code For Assign Values To the  Variable  as on [18-03-2014]


                HTEmppaysheet.Add("@Gendays", Gendays);
                HTEmppaysheet.Add("@G_Sdays", G_Sdays);
                HTEmppaysheet.Add("@clientid", ddlClients.SelectedValue);
                HTEmppaysheet.Add("@month", month);
                HTEmppaysheet.Add("@lastday", LastDay);
                HTEmppaysheet.Add("@monthnew", monthnew);
                #endregion End Code For  Assign Values To the Variable  as on [18-03-2014]

                #region Begin Code For Calling Stored procedure as on [18-03-2014]
                DtEmppaysheet = config.ExecuteAdaptorAsyncWithParams(SPName, HTEmppaysheet).Result;
                #endregion  end Code For Calling Stored procedure as on [18-03-2014]

                #region Begin Code For Resulted Messages as on [ 18-03-2014]
                if (DtEmppaysheet.Rows.Count <= 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert(' Attendance Not  avaialable For This client');", true);
                    return;
                }
                else
                {
                    DisplayData();
                }
                #endregion End Code For Resulted Messages as on [ 18-03-2014]

                // NonGeneratedPaysheetList();


            }
            catch (Exception ex)
            {
                lblpayment.Text = ex.Message;
            }
        }

        public int GetMonthBasedOnSelectionDateorMonth()
        {

            var testDate = 0;
            string EnteredDate = "";

            #region Validation

            if (Txt_Month.Text.Trim().Length > 0)
            {

                try
                {

                    testDate = GlobalData.Instance.CheckEnteredDate(Txt_Month.Text);
                    if (testDate > 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid  DATE.Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return 0;
                    }
                    EnteredDate = DateTime.Parse(Txt_Month.Text, CultureInfo.GetCultureInfo("en-gb")).ToString();
                }
                catch (Exception ex)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid  DATE.Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                    return 0;
                }
            }
            #endregion


            #region  Month Get Based on the Control Selection
            int month = 0;
            if (Chk_Month.Checked == false)
            {
                month = Timings.Instance.GetIdForSelectedMonth(ddlmonth.SelectedIndex);
                //return month;
            }
            if (Chk_Month.Checked == true)
            {
                DateTime date = DateTime.Parse(Txt_Month.Text, CultureInfo.GetCultureInfo("en-gb"));
                month = Timings.Instance.GetIdForEnteredMOnth(date);
                return month;
            }
            return month;

            #endregion
        }

        protected void gvattendancezero_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            gvattendancezero.PageIndex = e.NewPageIndex;
            gvattendancezero.DataBind();
        }

        protected void btnEmpWageSlip_Click(object sender, EventArgs e)
        {
            try
            {
                 if (ddlClients.SelectedIndex <= 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
                return;
            }

            var formatInfoinfo = new DateTimeFormatInfo();
            string[] monthName = formatInfoinfo.MonthNames;
            int payMonth = GetMonth(ddlmonth.SelectedValue);

            int month = GetMonthBasedOnSelectionDateorMonth();
            string selectmonth = string.Empty;

            int Fontsize = int.Parse(ddlfontSize.SelectedValue);
            string fontsyle = "verdana";

            string selectclientaddress = "select * from clients where clientid= '" + ddlClients.SelectedValue + "'";
            DataTable dtclientaddress = config.ExecuteAdaptorAsyncWithQueryParams(selectclientaddress).Result;
            string AddrHno = ""; string AddrColony = ""; string AddrArea = ""; string AddrStreet = ""; string Addrcity = ""; string Addrstate = ""; string Addrpin = "";
            if (dtclientaddress.Rows.Count > 0)
            {

                AddrHno = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                AddrStreet = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                AddrArea = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                AddrColony = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                Addrcity = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                Addrstate = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                Addrpin = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
            }

            string[] ClientAdress = new string[7];
            if (AddrHno.Length > 0)
            {
                ClientAdress[0] = AddrHno;
            }
            else
            {
                ClientAdress[0] = "";
            }
            if (AddrStreet.Length > 0)
            {
                ClientAdress[1] = AddrStreet;
            }
            else
            {
                ClientAdress[1] = "";
            }
            if (AddrArea.Length > 0)
            {
                ClientAdress[2] = AddrArea;
            }
            else
            {
                ClientAdress[2] = "";
            }
            if (AddrColony.Length > 0)
            {
                ClientAdress[3] = AddrArea;
            }
            else
            {
                ClientAdress[3] = "";
            }
            if (Addrcity.Length > 0)
            {
                ClientAdress[4] = AddrColony;
            }
            else
            {
                ClientAdress[4] = "";
            }
            if (Addrstate.Length > 0)
            {
                ClientAdress[5] = Addrcity;
            }
            else
            {
                ClientAdress[5] = "";
            }
            if (Addrpin.Length > 0)
            {
                ClientAdress[6] = Addrstate;
            }
            else
            {
                ClientAdress[6] = "";
            }


            string Address1 = string.Empty;

            for (int i = 0; i < 7; i++)
            {
                Address1 += "  " + ClientAdress[i];
            }

            var spname = "EMPWAGESLIPS";
            Hashtable ht = new Hashtable();
            ht.Add("@clientid", ddlClients.SelectedValue);
            ht.Add("@month", month);
            DataTable dt =config.ExecuteAdaptorAsyncWithParams(spname, ht).Result;


            MemoryStream ms = new MemoryStream();

            int slipsCount = 0;
            string UANNumber = "";

            if (dt.Rows.Count > 0)
            {
                Document document = new Document(PageSize.LEGAL);
                var writer = PdfWriter.GetInstance(document, ms);
                document.Open();
                BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                string imagepath1 = Server.MapPath("images");

                string strQry = "Select * from CompanyInfo  where   ClientidPrefix='" + CmpIDPrefix + "'";
                DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                string companyName = "Your Company Name";
                string companyAddress = "Your Company Address";
                string PFNOForms = "";
                string TotalPFNOForms = "";
                if (compInfo.Rows.Count > 0)
                {
                    companyName = compInfo.Rows[0]["CompanyName"].ToString();
                    companyAddress = compInfo.Rows[0]["Address"].ToString();
                    //PFNOForms = compInfo.Rows[0]["PFNoForms"].ToString();
                }

                float forConvert = 0;
                float forConvert1 = 0;
                float forConvert5 = 0;

                float PFEmployer = 0;
                float ESIEmployer = 0;





                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    PFEmployer = 0;
                    ESIEmployer = 0;

                    if (dt.Rows[i]["ActualAmount"].ToString().Trim().Length > 0)
                        forConvert = Convert.ToSingle(dt.Rows[i]["ActualAmount"].ToString());

                    forConvert = Convert.ToSingle(dt.Rows[i]["noofduties"].ToString()) + Convert.ToSingle(dt.Rows[i]["wo"].ToString()) + Convert.ToSingle(dt.Rows[i]["ots"].ToString()) + Convert.ToSingle(dt.Rows[i]["nhs"].ToString());


                    if (forConvert > 0)
                    {


                        strQry = "Select p.EmpEpfNo,e.EmpESINo from EMPESICodes AS e INNER JOIN EMPEPFCodes as p ON e.Empid = p.Empid AND e.Empid='" + dt.Rows[i]["EmpId"].ToString() + "'";
                        string pfNo = "";
                        string esiNo = "";
                        DataTable PfTable = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                        if (PfTable.Rows.Count > 0)
                        {
                            pfNo = PfTable.Rows[0]["EmpEpfNo"].ToString();
                            esiNo = PfTable.Rows[0]["EmpESINo"].ToString();
                        }

                        float totalotrate = 0;
                        float totalcdBasic = 0;
                        float totalcdDA = 0;
                        float totalcdHRA = 0;
                        float totaltempgross2 = 0;
                        float totalcdNFhs = 0;
                        float totaltempgross1 = 0;
                        float totaltempgross = 0;
                        float totalcdBonus = 0;
                        float totalcdCCA = 0;
                        float totalcdGratuity = 0;
                        float totalcdotherAllowance = 0;
                        float totalcdLeaveAmount = 0;
                        float totalcdConveyance = 0;
                        float totalcdWashAllowance = 0;
                        float totalstandradamt = 0;
                        float totalcdMedicalallw = 0;
                        float totalcdfoodallw = 0;
                        float totalcdSplAllowance = 0;

                        float totalcdTravelAllw = 0;
                        float totalcdPerformanceallw = 0;
                        float totalcdMobileallw = 0;

                        //float totalcdTravellingAllowance = 0;
                        //float totalcdPerformanceAllowance = 0;

                        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
                        #region

                        string imagepath = Server.MapPath("~/assets/BillLogo.png");




                        PdfPTable tablewageslip = new PdfPTable(5);
                        tablewageslip.TotalWidth = 550f;
                        tablewageslip.LockedWidth = true;
                        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f };
                        tablewageslip.SetWidths(width);


                        //if (File.Exists(imagepath))
                        //{
                        //    iTextSharp.text.Image paysheetlogo = iTextSharp.text.Image.GetInstance(imagepath);
                        //    paysheetlogo.ScaleAbsolute(45f, 45f);
                        //    PdfPCell companylogo = new PdfPCell();
                        //    Paragraph cmplogo = new Paragraph();
                        //    cmplogo.Add(new Chunk(paysheetlogo, -7, 10));
                        //    companylogo.AddElement(cmplogo);
                        //    companylogo.HorizontalAlignment = 0;
                        //    companylogo.Colspan = 3;
                        //    companylogo.PaddingTop = 16;
                        //    companylogo.Border = 0;
                        //    tablewageslip.AddCell(companylogo);
                        //}

                        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(fontsyle, Fontsize - 2, Font.NORMAL, BaseColor.BLACK)));
                        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        cellspace.Colspan = 5;
                        cellspace.Border = 0;
                        tablewageslip.AddCell(cellspace);

                        PdfPCell cellHead1 = new PdfPCell(new Phrase("Pay Slip  ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead1.HorizontalAlignment = 1;
                        cellHead1.Colspan = 5;
                        cellHead1.Border = 0;
                        //cellHead1.PaddingTop = -55;
                        tablewageslip.AddCell(cellHead1);

                        PdfPCell cellHead2 = new PdfPCell(new Phrase("M/s " + companyName, FontFactory.GetFont(fontsyle, 13, Font.NORMAL, BaseColor.BLACK)));
                        cellHead2.HorizontalAlignment = 1;
                        cellHead2.Colspan = 5;
                        cellHead2.Border = 0;
                        // cellHead2.PaddingTop = -42;
                        tablewageslip.AddCell(cellHead2);

                        PdfPCell cellHead31 = new PdfPCell(new Phrase(companyAddress, FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead31.HorizontalAlignment = 1;
                        cellHead31.Colspan = 5;
                        cellHead31.Border = 0;
                        cellHead31.SetLeading(0, 1.2f);
                        tablewageslip.AddCell(cellHead31);



                        PdfPCell cellHead4 = new PdfPCell(new Phrase("Pay Slip for month of " + GetMonthName() + " " + GetMonthOfYear(), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead4.HorizontalAlignment = 1;
                        cellHead4.Colspan = 5;
                        cellHead4.Border = 0;
                        //cellHead4.PaddingTop = -13;
                        tablewageslip.AddCell(cellHead4);



                        PdfPCell cellHead5 = new PdfPCell(new Phrase("NAME : " + dt.Rows[i]["EmpmName"].ToString() + "            S/o : " + dt.Rows[i]["EmpfatherName"].ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead5.HorizontalAlignment = 0;
                        cellHead5.Colspan = 3;
                        cellHead5.PaddingTop = 5;
                        // cellHead5.MinimumHeight = 20;
                        tablewageslip.AddCell(cellHead5);



                        PdfPCell cellHead7 = new PdfPCell(new Phrase("Work Location : " + ddlcname.SelectedItem, FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead7.HorizontalAlignment = 0;
                        cellHead7.Colspan = 2;
                        tablewageslip.AddCell(cellHead7);

                        //////PdfPCell cellfat = new PdfPCell(new Phrase("ccc, FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //////cellfat.HorizontalAlignment = 0;
                        //////cellfat.Colspan = 1;
                        //////cellfat.SetLeading(0, 1.2f);
                        // tablewageslip.AddCell(cellfat);
                        PdfPCell cellHead51 = new PdfPCell(new Phrase("Employee ID -  " + dt.Rows[i]["Empid"].ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead51.HorizontalAlignment = 0;
                        cellHead51.Colspan = 3;
                        cellHead51.SetLeading(0, 1.2f);
                        tablewageslip.AddCell(cellHead51);

                        PdfPCell cellHead711 = new PdfPCell(new Phrase("Designation - " + dt.Rows[i]["Desgn"].ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead711.HorizontalAlignment = 0;
                        cellHead711.Colspan = 2;
                        //cellHead711.MinimumHeight = 20;
                        tablewageslip.AddCell(cellHead711);

                        PdfPCell cellHead71 = new PdfPCell(new Phrase("Bank Account No - " + dt.Rows[i]["EmpBankAcNo"].ToString() + " & Bank Name - " + dt.Rows[i]["Bankname"].ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead71.HorizontalAlignment = 0;
                        cellHead71.Colspan = 3;
                        //cellHead71.MinimumHeight = 20;
                        tablewageslip.AddCell(cellHead71);


                        PdfPCell cellHead101 = new PdfPCell(new Phrase("EPF No - " + pfNo, FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead101.HorizontalAlignment = 0;
                        cellHead101.Colspan = 2;
                        tablewageslip.AddCell(cellHead101);


                        forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());
                        if (forConvert > 0)
                        {

                            PdfPCell cellHead111 = new PdfPCell(new Phrase("Duties - " + forConvert.ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHead111.HorizontalAlignment = 0;
                            cellHead111.Colspan = 1;
                            //cellHead111.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHead111);
                        }
                        else
                        {
                            PdfPCell cellHead111 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHead111.HorizontalAlignment = 0;
                            cellHead111.Colspan = 1;
                            //cellHead111.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHead111);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["Wo"].ToString());
                        if (forConvert > 0)
                        {

                            PdfPCell cellHead111 = new PdfPCell(new Phrase("WO - " + forConvert.ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHead111.HorizontalAlignment = 0;
                            cellHead111.Colspan = 1;
                            //cellHead111.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHead111);
                        }
                        else
                        {
                            PdfPCell cellHead111 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHead111.HorizontalAlignment = 0;
                            cellHead111.Colspan = 1;
                            //cellHead111.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHead111);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["ots"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellHead1112 = new PdfPCell(new Phrase("OTs - " + forConvert.ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHead1112.HorizontalAlignment = 0;
                            cellHead1112.Colspan = 1;
                            //cellHead1112.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHead1112);
                        }

                        else
                        {
                            PdfPCell cellHead11124 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHead11124.HorizontalAlignment = 0;
                            cellHead11124.Colspan = 1;
                            //cellHead11124.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHead11124);

                        }



                        //


                        PdfPCell cellHead121 = new PdfPCell(new Phrase("ESI No - " + esiNo, FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead121.HorizontalAlignment = 0;
                        cellHead121.Colspan = 2;
                        tablewageslip.AddCell(cellHead121);




                        forConvert = Convert.ToSingle(dt.Rows[i]["nhs"].ToString());
                        if (forConvert > 0)
                        {

                            PdfPCell cellHead111 = new PdfPCell(new Phrase("NHs - " + forConvert.ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHead111.HorizontalAlignment = 0;
                            cellHead111.Colspan = 1;
                            //cellHead111.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHead111);
                        }
                        else
                        {
                            PdfPCell cellHead111 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHead111.HorizontalAlignment = 0;
                            cellHead111.Colspan = 1;
                            //cellHead111.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHead111);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["npots"].ToString());
                        if (forConvert > 0)
                        {

                            PdfPCell cellHead111 = new PdfPCell(new Phrase("Spl Duties - " + forConvert.ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHead111.HorizontalAlignment = 0;
                            cellHead111.Colspan = 2;
                            //cellHead111.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHead111);
                        }
                        else
                        {
                            PdfPCell cellHead111 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHead111.HorizontalAlignment = 0;
                            cellHead111.Colspan = 2;
                            //cellHead111.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHead111);

                        }


                        UANNumber = dt.Rows[i]["EmpUANNumber"].ToString();


                        if (UANNumber.Trim().Length > 0)
                        {

                            PdfPCell cellHeadUANNo = new PdfPCell(new Phrase("UAN No - " + UANNumber, FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHeadUANNo.HorizontalAlignment = 0;
                            cellHeadUANNo.Colspan = 2;
                            //cellHead71.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHeadUANNo);
                        }

                        else
                        {
                            PdfPCell cellHeadUANNo = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHeadUANNo.HorizontalAlignment = 0;
                            cellHeadUANNo.Colspan = 2;
                            //cellHead71.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHeadUANNo);
                        }





                        BaseColor color = new BaseColor(221, 226, 222);



                        PdfPTable tableEarnings = new PdfPTable(3);
                        tableEarnings.TotalWidth = 330;
                        tableEarnings.LockedWidth = true;
                        float[] width1 = new float[] { 2f, 2f, 2f };

                        tableEarnings.SetWidths(width1);

                        PdfPCell cellHead9 = new PdfPCell(new Phrase("Description", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead9.HorizontalAlignment = 1;
                        cellHead9.Colspan = 1;
                        cellHead9.MinimumHeight = 20;
                        cellHead9.BackgroundColor = color;
                        tableEarnings.AddCell(cellHead9);




                        PdfPCell cellHead1011 = new PdfPCell(new Phrase("Standard Amount", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead1011.HorizontalAlignment = 1;
                        cellHead1011.Colspan = 1;
                        cellHead1011.BackgroundColor = color;
                        tableEarnings.AddCell(cellHead1011);


                        PdfPCell cellHead10 = new PdfPCell(new Phrase("Earnings Amount", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead10.HorizontalAlignment = 1;
                        cellHead10.Colspan = 1;
                        cellHead10.BackgroundColor = color;
                        tableEarnings.AddCell(cellHead10);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Basic"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdBasic"].ToString());



                        if (forConvert > 0)
                        {
                            PdfPCell cellbascic = new PdfPCell(new Phrase("Basic", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbascic.HorizontalAlignment = 0;
                            cellbascic.Colspan = 1;
                            //cellbascic.MinimumHeight = 20;
                            tableEarnings.AddCell(cellbascic);

                            PdfPCell cellbascic11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbascic11.HorizontalAlignment = 2;
                            cellbascic11.Colspan = 1;
                            tableEarnings.AddCell(cellbascic11);
                            totalcdBasic += forConvert1;



                            PdfPCell cellbascic1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbascic1.HorizontalAlignment = 2;
                            cellbascic1.Colspan = 1;
                            tableEarnings.AddCell(cellbascic1);
                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["DA"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdDA"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellDearness = new PdfPCell(new Phrase("Dearness Allowance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellDearness.HorizontalAlignment = 0;
                            cellDearness.Colspan = 1;
                            //cellDearness.MinimumHeight = 20;
                            tableEarnings.AddCell(cellDearness);


                            PdfPCell cellbascic111 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbascic111.HorizontalAlignment = 2;
                            cellbascic111.Colspan = 1;
                            tableEarnings.AddCell(cellbascic111);
                            totalcdDA += forConvert1;


                            PdfPCell cellDearness1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellDearness1.HorizontalAlignment = 2;
                            cellDearness1.Colspan = 1;
                            tableEarnings.AddCell(cellDearness1);
                        }



                        forConvert = Convert.ToSingle(dt.Rows[i]["HRA"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdHRA"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellHRA = new PdfPCell(new Phrase("HRA", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHRA.HorizontalAlignment = 0;
                            cellHRA.Colspan = 1;
                            //cellHRA.MinimumHeight = 20;
                            tableEarnings.AddCell(cellHRA);


                            PdfPCell ccellHRA11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            ccellHRA11.HorizontalAlignment = 2;
                            ccellHRA11.Colspan = 1;
                            tableEarnings.AddCell(ccellHRA11);
                            totalcdHRA += forConvert1;



                            PdfPCell ccellHRA1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            ccellHRA1.HorizontalAlignment = 2;
                            ccellHRA1.Colspan = 1;
                            tableEarnings.AddCell(ccellHRA1);
                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["WashAllowance"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdWashAllowance"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellWAAmt = new PdfPCell(new Phrase("Wash Allowance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellWAAmt.HorizontalAlignment = 0;
                            cellWAAmt.Colspan = 1;
                            //cellWAAmt.MinimumHeight = 20;
                            tableEarnings.AddCell(cellWAAmt);
                            totalcdWashAllowance += forConvert1;


                            PdfPCell cellWAAmt11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellWAAmt11.HorizontalAlignment = 2;
                            cellWAAmt11.Colspan = 1;
                            //////cellWAAmt11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellWAAmt11);


                            PdfPCell cellWAAmt112 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellWAAmt112.HorizontalAlignment = 2;
                            cellWAAmt112.Colspan = 1;
                            //cellWAAmt112.MinimumHeight = 20;
                            tableEarnings.AddCell(cellWAAmt112);
                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdConveyance"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellConveyance = new PdfPCell(new Phrase("Conveyance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellConveyance.HorizontalAlignment = 0;
                            cellConveyance.Colspan = 1;
                            //cellConveyance.MinimumHeight = 20;
                            tableEarnings.AddCell(cellConveyance);


                            PdfPCell cellConveyance11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellConveyance11.HorizontalAlignment = 2;
                            cellConveyance11.Colspan = 1;
                            tableEarnings.AddCell(cellConveyance11);
                            totalcdConveyance += forConvert1;


                            PdfPCell cellConveyance1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellConveyance1.HorizontalAlignment = 2;
                            cellConveyance1.Colspan = 1;
                            tableEarnings.AddCell(cellConveyance1);
                        }



                        forConvert = Convert.ToSingle(dt.Rows[i]["Bonus"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdBonus"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellbonus = new PdfPCell(new Phrase("Bonus", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbonus.HorizontalAlignment = 0;
                            cellbonus.Colspan = 1;
                            //cellbonus.MinimumHeight = 20;
                            tableEarnings.AddCell(cellbonus);

                            PdfPCell cellbonus11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbonus11.HorizontalAlignment = 2;
                            cellbonus11.Colspan = 1;
                            tableEarnings.AddCell(cellbonus11);
                            totalcdBonus += forConvert1;


                            PdfPCell cellbonus1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbonus1.HorizontalAlignment = 2;
                            cellbonus1.Colspan = 1;
                            tableEarnings.AddCell(cellbonus1);
                        }



                        forConvert = Convert.ToSingle(dt.Rows[i]["LeaveEncashAmt"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdLeaveAmount"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellLeave = new PdfPCell(new Phrase("Leave Wage", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellLeave.HorizontalAlignment = 0;
                            cellLeave.Colspan = 1;
                            //cellLeave.MinimumHeight = 20;
                            tableEarnings.AddCell(cellLeave);


                            PdfPCell cellLeave11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellLeave11.HorizontalAlignment = 2;
                            cellLeave11.Colspan = 1;
                            tableEarnings.AddCell(cellLeave11);
                            totalcdLeaveAmount += forConvert1;


                            PdfPCell cellLeave1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellLeave1.HorizontalAlignment = 2;
                            cellLeave1.Colspan = 1;
                            tableEarnings.AddCell(cellLeave1);
                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdotherAllowance"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellOTher = new PdfPCell(new Phrase("Other Allowance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher.HorizontalAlignment = 0;
                            cellOTher.Colspan = 1;
                            //cellOTher.MinimumHeight = 20;
                            tableEarnings.AddCell(cellOTher);

                            PdfPCell cellOTher11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher11.HorizontalAlignment = 2;
                            cellOTher11.Colspan = 1;
                            tableEarnings.AddCell(cellOTher11);
                            totalcdotherAllowance += forConvert1;



                            PdfPCell cellOTher1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher1.HorizontalAlignment = 2;
                            cellOTher1.Colspan = 1;
                            tableEarnings.AddCell(cellOTher1);
                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["MedicalAllowance"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdMedicalAllowance"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellOTher = new PdfPCell(new Phrase("Medical Allowance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher.HorizontalAlignment = 0;
                            cellOTher.Colspan = 1;
                            //cellOTher.MinimumHeight = 20;
                            tableEarnings.AddCell(cellOTher);

                            PdfPCell cellOTher11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher11.HorizontalAlignment = 2;
                            cellOTher11.Colspan = 1;
                            tableEarnings.AddCell(cellOTher11);
                            totalcdMedicalallw += forConvert1;



                            PdfPCell cellOTher1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher1.HorizontalAlignment = 2;
                            cellOTher1.Colspan = 1;
                            tableEarnings.AddCell(cellOTher1);
                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["FoodAllowance"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdFoodAllowance"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellOTher = new PdfPCell(new Phrase("Food Allowance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher.HorizontalAlignment = 0;
                            cellOTher.Colspan = 1;
                            //cellOTher.MinimumHeight = 20;
                            tableEarnings.AddCell(cellOTher);

                            PdfPCell cellOTher11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher11.HorizontalAlignment = 2;
                            cellOTher11.Colspan = 1;
                            tableEarnings.AddCell(cellOTher11);
                            totalcdfoodallw += forConvert1;



                            PdfPCell cellOTher1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher1.HorizontalAlignment = 2;
                            cellOTher1.Colspan = 1;
                            tableEarnings.AddCell(cellOTher1);
                        }
                        forConvert = Convert.ToSingle(dt.Rows[i]["SplAllowance"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdSplAllowance"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellOThers = new PdfPCell(new Phrase("Spl. Allw", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOThers.HorizontalAlignment = 0;
                            cellOThers.Colspan = 1;
                            //cellOTher.MinimumHeight = 20;
                            tableEarnings.AddCell(cellOThers);

                            PdfPCell cellOTher11s = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher11s.HorizontalAlignment = 2;
                            cellOTher11s.Colspan = 1;
                            tableEarnings.AddCell(cellOTher11s);
                            totalcdSplAllowance += forConvert1;



                            PdfPCell cellOTher1s = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher1s.HorizontalAlignment = 2;
                            cellOTher1s.Colspan = 1;
                            tableEarnings.AddCell(cellOTher1s);
                        }


                        //for contracts

                        forConvert = Convert.ToSingle(dt.Rows[i]["TravelAllw"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdTravelAllw"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellOThers = new PdfPCell(new Phrase("Travel. Allw", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOThers.HorizontalAlignment = 0;
                            cellOThers.Colspan = 1;
                            //cellOTher.MinimumHeight = 20;
                            tableEarnings.AddCell(cellOThers);

                            PdfPCell cellOTher11s = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher11s.HorizontalAlignment = 2;
                            cellOTher11s.Colspan = 1;
                            tableEarnings.AddCell(cellOTher11s);
                            totalcdTravelAllw += forConvert1;



                            PdfPCell cellOTher1s = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher1s.HorizontalAlignment = 2;
                            cellOTher1s.Colspan = 1;
                            tableEarnings.AddCell(cellOTher1s);
                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["PerformanceAllw"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdPerformanceAllw"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellOThers = new PdfPCell(new Phrase("Performance. Allw", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOThers.HorizontalAlignment = 0;
                            cellOThers.Colspan = 1;
                            //cellOTher.MinimumHeight = 20;
                            tableEarnings.AddCell(cellOThers);

                            PdfPCell cellOTher11s = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher11s.HorizontalAlignment = 2;
                            cellOTher11s.Colspan = 1;
                            tableEarnings.AddCell(cellOTher11s);
                            totalcdPerformanceallw += forConvert1;



                            PdfPCell cellOTher1s = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher1s.HorizontalAlignment = 2;
                            cellOTher1s.Colspan = 1;
                            tableEarnings.AddCell(cellOTher1s);
                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["MobileAllw"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdMobileAllw"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellOThers = new PdfPCell(new Phrase("Mobile. Allw", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOThers.HorizontalAlignment = 0;
                            cellOThers.Colspan = 1;
                            //cellOTher.MinimumHeight = 20;
                            tableEarnings.AddCell(cellOThers);

                            PdfPCell cellOTher11s = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher11s.HorizontalAlignment = 2;
                            cellOTher11s.Colspan = 1;
                            tableEarnings.AddCell(cellOTher11s);
                            totalcdMobileallw += forConvert1;



                            PdfPCell cellOTher1s = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher1s.HorizontalAlignment = 2;
                            cellOTher1s.Colspan = 1;
                            tableEarnings.AddCell(cellOTher1s);
                        }



                        //end for contracts


                        //for individual



                        //emdd individual




                        //forConvert = Convert.ToSingle(dt.Rows[i]["Specialallowance"].ToString());
                        //forConvert1 = Convert.ToSingle(dt.Rows[i]["cdSpecialallowance"].ToString());

                        //if (forConvert > 0)
                        //{
                        //    PdfPCell cellSplAllow = new PdfPCell(new Phrase("Spl Allowance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellSplAllow.HorizontalAlignment = 0;
                        //    cellSplAllow.Colspan = 1;
                        //    //cellSplAllow.MinimumHeight = 20;
                        //    tableEarnings.AddCell(cellSplAllow);


                        //    PdfPCell cellSplAllow11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellSplAllow11.HorizontalAlignment = 2;
                        //    cellSplAllow11.Colspan = 1;
                        //    tableEarnings.AddCell(cellSplAllow11);


                        //    PdfPCell cellSplAllow1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellSplAllow1.HorizontalAlignment = 2;
                        //    cellSplAllow1.Colspan = 1;
                        //    tableEarnings.AddCell(cellSplAllow1);
                        //}



                        forConvert = Convert.ToSingle(dt.Rows[i]["Gratuity"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdGratuity"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellGratuity = new PdfPCell(new Phrase("Gratuity", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellGratuity.HorizontalAlignment = 0;
                            cellGratuity.Colspan = 1;
                            //cellGratuity.MinimumHeight = 20;
                            tableEarnings.AddCell(cellGratuity);


                            PdfPCell cellGratuity11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellGratuity11.HorizontalAlignment = 2;
                            cellGratuity11.Colspan = 1;
                            tableEarnings.AddCell(cellGratuity11);
                            totalcdGratuity += forConvert1;



                            PdfPCell cellGratuity1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellGratuity1.HorizontalAlignment = 2;
                            cellGratuity1.Colspan = 1;
                            tableEarnings.AddCell(cellGratuity1);
                        }



                        forConvert = Convert.ToSingle(dt.Rows[i]["CCA"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdCCA"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellCCA = new PdfPCell(new Phrase("CCA", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellCCA.HorizontalAlignment = 0;
                            cellCCA.Colspan = 1;
                            //cellCCA.MinimumHeight = 20;
                            tableEarnings.AddCell(cellCCA);
                            totalcdCCA += forConvert1;




                            PdfPCell cellCCA11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellCCA11.HorizontalAlignment = 2;
                            cellCCA11.Colspan = 1;
                            //cellCCA11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellCCA11);


                            PdfPCell cellCCA1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellCCA1.HorizontalAlignment = 2;
                            cellCCA1.Colspan = 1;
                            //cellCCA1.MinimumHeight = 20;
                            tableEarnings.AddCell(cellCCA1);
                        }




                        forConvert = Convert.ToSingle(dt.Rows[i]["Incentivs"].ToString());
                        //forConvert1 = Convert.ToSingle(dt.Rows[i]["cdCCA"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellCCA = new PdfPCell(new Phrase("Incentives", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellCCA.HorizontalAlignment = 0;
                            cellCCA.Colspan = 1;
                            //cellCCA.MinimumHeight = 20;
                            tableEarnings.AddCell(cellCCA);





                            PdfPCell cellCCA11 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellCCA11.HorizontalAlignment = 2;
                            cellCCA11.Colspan = 1;
                            //cellCCA11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellCCA11);


                            PdfPCell cellCCA1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellCCA1.HorizontalAlignment = 2;
                            cellCCA1.Colspan = 1;
                            //cellCCA1.MinimumHeight = 20;
                            tableEarnings.AddCell(cellCCA1);
                        }

                        //forConvert = Convert.ToSingle(dt.Rows[i]["OTAmt"].ToString());
                        //if (forConvert > 0)
                        //{
                        //    PdfPCell cellOT = new PdfPCell(new Phrase("OT Allowance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellOT.HorizontalAlignment = 0;
                        //    cellOT.Colspan = 1;
                        //    cellOT.MinimumHeight = 20;
                        //    tableEarnings.AddCell(cellOT);


                        //    PdfPCell cellOT1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellOT1.HorizontalAlignment = 2;
                        //    cellOT1.Colspan = 1;
                        //    tableEarnings.AddCell(cellOT1);
                        //}

                        forConvert = Convert.ToSingle(dt.Rows[i]["Nhsamt"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["tempgross"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellNHSAmt = new PdfPCell(new Phrase("NHS Amount", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellNHSAmt.HorizontalAlignment = 0;
                            cellNHSAmt.Colspan = 1;
                            //cellNHSAmt.MinimumHeight = 20;
                            tableEarnings.AddCell(cellNHSAmt);


                            PdfPCell cellNHSAmt11 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellNHSAmt11.HorizontalAlignment = 2;
                            cellNHSAmt11.Colspan = 1;
                            //cellNHSAmt11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellNHSAmt11);
                            // totaltempgross += forConvert1;



                            PdfPCell cellNHSAmt1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellNHSAmt1.HorizontalAlignment = 2;
                            cellNHSAmt1.Colspan = 1;
                            //cellNHSAmt1.MinimumHeight = 20;
                            tableEarnings.AddCell(cellNHSAmt1);
                        }



                        ///nhs,Wo 've same components in contractdetailssw
                        forConvert = Convert.ToSingle(dt.Rows[i]["WOAmt"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["tempgross"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellWOAmt = new PdfPCell(new Phrase("WO Amt", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellWOAmt.HorizontalAlignment = 0;
                            cellWOAmt.Colspan = 1;
                            //cellWOAmt.MinimumHeight = 20;
                            tableEarnings.AddCell(cellWOAmt);

                            PdfPCell cellWOAmt11 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellWOAmt11.HorizontalAlignment = 2;
                            cellWOAmt11.Colspan = 1;
                            //cellWOAmt11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellWOAmt11);
                            // totaltempgross1 += forConvert1;


                            PdfPCell cellWOAmt1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellWOAmt1.HorizontalAlignment = 2;
                            cellWOAmt1.Colspan = 1;
                            //cellWOAmt1.MinimumHeight = 20;
                            tableEarnings.AddCell(cellWOAmt1);
                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["Nfhs"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdNFhs"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellNFHSAmt = new PdfPCell(new Phrase("NFHS Amt", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellNFHSAmt.HorizontalAlignment = 0;
                            cellNFHSAmt.Colspan = 1;
                            //cellNFHSAmt.MinimumHeight = 20;
                            tableEarnings.AddCell(cellNFHSAmt);

                            PdfPCell cellNFHSAmt11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellNFHSAmt11.HorizontalAlignment = 2;
                            cellNFHSAmt11.Colspan = 1;
                            //cellNFHSAmt11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellNFHSAmt11);
                            totalcdNFhs += forConvert1;



                            PdfPCell cellNFHSAmt1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellNFHSAmt1.HorizontalAlignment = 2;
                            cellNFHSAmt1.Colspan = 1;
                            //cellNFHSAmt1.MinimumHeight = 20;
                            tableEarnings.AddCell(cellNFHSAmt1);
                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["npotsamt"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["tempgross"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellSplDutiesAmt = new PdfPCell(new Phrase("Spl Duties Amt", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellSplDutiesAmt.HorizontalAlignment = 0;
                            cellSplDutiesAmt.Colspan = 1;
                            //cellSplDutiesAmt.MinimumHeight = 20;
                            tableEarnings.AddCell(cellSplDutiesAmt);

                            PdfPCell cellSplDutiesAmt11 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellSplDutiesAmt11.HorizontalAlignment = 2;
                            cellSplDutiesAmt11.Colspan = 1;
                            //cellSplDutiesAmt11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellSplDutiesAmt11);
                            // totaltempgross2 += forConvert1;

                            PdfPCell cellSplDutiesAmt1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellSplDutiesAmt1.HorizontalAlignment = 2;
                            cellSplDutiesAmt1.Colspan = 1;
                            //cellSplDutiesAmt1.MinimumHeight = 20;
                            tableEarnings.AddCell(cellSplDutiesAmt1);
                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["Otamt"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellIncentives = new PdfPCell(new Phrase("OT Amt  ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellIncentives.HorizontalAlignment = 0;
                            cellIncentives.Colspan = 1;
                            //cellIncentives.MinimumHeight = 20;
                            tableEarnings.AddCell(cellIncentives);

                            forConvert1 = Convert.ToSingle(dt.Rows[i]["otrate"].ToString());
                            PdfPCell cellotrate11 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellotrate11.HorizontalAlignment = 2;
                            cellotrate11.Colspan = 1;
                            //cellIncentives11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellotrate11);
                            // totalotrate += forConvert1;

                            PdfPCell cellotamt1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellotamt1.HorizontalAlignment = 2;
                            cellotamt1.Colspan = 1;
                            tableEarnings.AddCell(cellotamt1);
                        }



                        PdfPCell ChildTable1 = new PdfPCell(tableEarnings);
                        ChildTable1.Colspan = 3;
                        ChildTable1.BorderWidthLeft = 0;
                        ChildTable1.BorderWidthRight = 0;
                        ChildTable1.BorderWidthLeft = 0;
                        ChildTable1.BorderWidthLeft = 0;
                        tablewageslip.AddCell(ChildTable1);



                        PdfPTable tableDeductions = new PdfPTable(2);
                        tableDeductions.TotalWidth = 220;
                        tableDeductions.LockedWidth = true;
                        float[] width2 = new float[] { 2f, 2f };
                        tableDeductions.SetWidths(width2);


                        PdfPCell cellHead11 = new PdfPCell(new Phrase("Deductions", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead11.HorizontalAlignment = 1;
                        cellHead11.Colspan = 1;
                        cellHead11.MinimumHeight = 20;
                        cellHead11.BackgroundColor = color;
                        tableDeductions.AddCell(cellHead11);


                        PdfPCell cellHead12 = new PdfPCell(new Phrase("Amount", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead12.HorizontalAlignment = 1;
                        cellHead12.Colspan = 1;
                        cellHead12.BackgroundColor = color;
                        tableDeductions.AddCell(cellHead12);

                        forConvert = Convert.ToSingle(dt.Rows[i]["PF"].ToString());
                        PFEmployer = Convert.ToSingle(dt.Rows[i]["PFEmpr"].ToString());

                        if ((forConvert+PFEmployer) > 0)
                        {

                            PdfPCell cellPF2 = new PdfPCell(new Phrase("PF Contribution", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellPF2.HorizontalAlignment = 0;
                            cellPF2.Colspan = 1;
                            //cellPF2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellPF2);


                            PdfPCell cellPF = new PdfPCell(new Phrase((forConvert+PFEmployer).ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellPF.HorizontalAlignment = 2;
                            cellPF.Colspan = 1;
                            tableDeductions.AddCell(cellPF);
                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["ESI"].ToString());
                        ESIEmployer= Convert.ToSingle(dt.Rows[i]["ESIEmpr"].ToString());

                        if ((forConvert+ESIEmployer) > 0)
                        {

                            PdfPCell cellESI2 = new PdfPCell(new Phrase("ESI Contribution", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellESI2.HorizontalAlignment = 0;
                            cellESI2.Colspan = 1;
                            //cellESI2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellESI2);


                            PdfPCell cellESI3 = new PdfPCell(new Phrase((forConvert+ESIEmployer).ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellESI3.HorizontalAlignment = 2;
                            cellESI3.Colspan = 1;
                            tableDeductions.AddCell(cellESI3);
                        }

                        //forConvert = Convert.ToSingle(dt.Rows[i]["PFEmpr"].ToString());
                        //if(forConvert>0)
                        //{
                        //    PdfPCell cellPFEmpr = new PdfPCell(new Phrase("PF Empr Contribution", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellPFEmpr.HorizontalAlignment = 0;
                        //    cellPFEmpr.Colspan = 1;
                        //    //cellESI2.MinimumHeight = 20;
                        //    tableDeductions.AddCell(cellPFEmpr);


                        //    PdfPCell cellPFEmpr1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellPFEmpr1.HorizontalAlignment = 2;
                        //    cellPFEmpr1.Colspan = 1;
                        //    tableDeductions.AddCell(cellPFEmpr1);
                        //}

                        //forConvert = Convert.ToSingle(dt.Rows[i]["ESIEmpr"].ToString());
                        //if (forConvert > 0)
                        //{

                        //    PdfPCell cellESIEmpr = new PdfPCell(new Phrase("ESI Empr Contribution", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellESIEmpr.HorizontalAlignment = 0;
                        //    cellESIEmpr.Colspan = 1;
                        //    //cellESI2.MinimumHeight = 20;
                        //    tableDeductions.AddCell(cellESIEmpr);


                        //    PdfPCell cellESIEmpr1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellESIEmpr1.HorizontalAlignment = 2;
                        //    cellESIEmpr1.Colspan = 1;
                        //    tableDeductions.AddCell(cellESIEmpr1);
                        //}


                        forConvert = Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell ccellHRA2 = new PdfPCell(new Phrase("Professional Tax", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            ccellHRA2.HorizontalAlignment = 0;
                            ccellHRA2.Colspan = 1;
                            //ccellHRA2.MinimumHeight = 20;
                            tableDeductions.AddCell(ccellHRA2);


                            PdfPCell ccellHRA3 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            ccellHRA3.HorizontalAlignment = 2;
                            ccellHRA3.Colspan = 1;
                            tableDeductions.AddCell(ccellHRA3);
                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["Penalty"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell ccellHRA2 = new PdfPCell(new Phrase("Penalty", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            ccellHRA2.HorizontalAlignment = 0;
                            ccellHRA2.Colspan = 1;
                            //ccellHRA2.MinimumHeight = 20;
                            tableDeductions.AddCell(ccellHRA2);


                            PdfPCell ccellHRA3 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            ccellHRA3.HorizontalAlignment = 2;
                            ccellHRA3.Colspan = 1;
                            tableDeductions.AddCell(ccellHRA3);
                        }



                        forConvert = Convert.ToSingle(dt.Rows[i]["TDS"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellTDS2 = new PdfPCell(new Phrase("TDS", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellTDS2.HorizontalAlignment = 0;
                            cellTDS2.Colspan = 1;
                            //cellTDS2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellTDS2);


                            PdfPCell cellTDS3 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellTDS3.HorizontalAlignment = 2;
                            cellTDS3.Colspan = 1;
                            tableDeductions.AddCell(cellTDS3);
                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["SecurityDepDed"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellTDS2 = new PdfPCell(new Phrase("Security Dep", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellTDS2.HorizontalAlignment = 0;
                            cellTDS2.Colspan = 1;
                            //cellTDS2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellTDS2);


                            PdfPCell cellTDS3 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellTDS3.HorizontalAlignment = 2;
                            cellTDS3.Colspan = 1;
                            tableDeductions.AddCell(cellTDS3);
                        }


                        forConvert = 0;

                        if (forConvert > 0)
                        {
                            PdfPCell cellAdvances2 = new PdfPCell(new Phrase("Advances", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellAdvances2.HorizontalAlignment = 0;
                            cellAdvances2.Colspan = 1;
                            //cellAdvances2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellAdvances2);


                            PdfPCell cellAdvances3 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellAdvances3.HorizontalAlignment = 2;
                            cellAdvances3.Colspan = 1;
                            tableDeductions.AddCell(cellAdvances3);

                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["Fines"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellFines2 = new PdfPCell(new Phrase("Fines/Damage", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellFines2.HorizontalAlignment = 0;
                            cellFines2.Colspan = 1;
                            cellFines2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellFines2);


                            PdfPCell cellFines3 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellFines3.HorizontalAlignment = 2;
                            cellFines3.Colspan = 1;
                            tableDeductions.AddCell(cellFines3);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell celluniformded = new PdfPCell(new Phrase("Uniform", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            celluniformded.HorizontalAlignment = 0;
                            celluniformded.Colspan = 1;
                            // celluniformded.MinimumHeight = 20;
                            tableDeductions.AddCell(celluniformded);


                            PdfPCell celluniformded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            celluniformded1.HorizontalAlignment = 2;
                            celluniformded1.Colspan = 1;
                            tableDeductions.AddCell(celluniformded1);

                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellsaladvded = new PdfPCell(new Phrase("Salary Advance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellsaladvded.HorizontalAlignment = 0;
                            cellsaladvded.Colspan = 1;
                            //cellsaladvded.MinimumHeight = 20;
                            tableDeductions.AddCell(cellsaladvded);


                            PdfPCell cellsaladvded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellsaladvded1.HorizontalAlignment = 2;
                            cellsaladvded1.Colspan = 1;
                            tableDeductions.AddCell(cellsaladvded1);

                        }
                        forConvert = Convert.ToSingle(dt.Rows[i]["atmded"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellsaladvded = new PdfPCell(new Phrase("ATM Ded", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellsaladvded.HorizontalAlignment = 0;
                            cellsaladvded.Colspan = 1;
                            //cellsaladvded.MinimumHeight = 20;
                            tableDeductions.AddCell(cellsaladvded);


                            PdfPCell cellsaladvded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellsaladvded1.HorizontalAlignment = 2;
                            cellsaladvded1.Colspan = 1;
                            tableDeductions.AddCell(cellsaladvded1);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["WCded"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell celltrngfeeded = new PdfPCell(new Phrase("WC Ded", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            celltrngfeeded.HorizontalAlignment = 0;
                            celltrngfeeded.Colspan = 1;
                            //celltrngfeeded.MinimumHeight = 20;
                            tableDeductions.AddCell(celltrngfeeded);


                            PdfPCell celltrngfeeded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            celltrngfeeded1.HorizontalAlignment = 2;
                            celltrngfeeded1.Colspan = 1;
                            tableDeductions.AddCell(celltrngfeeded1);

                        }




                        forConvert = Convert.ToSingle(dt.Rows[i]["Advded"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellbnkfeeded = new PdfPCell(new Phrase("Adv Ded", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbnkfeeded.HorizontalAlignment = 0;
                            cellbnkfeeded.Colspan = 1;
                            //cellbnkfeeded.MinimumHeight = 20;
                            tableDeductions.AddCell(cellbnkfeeded);


                            PdfPCell cellbnkfeeded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbnkfeeded1.HorizontalAlignment = 2;
                            cellbnkfeeded1.Colspan = 1;
                            tableDeductions.AddCell(cellbnkfeeded1);

                        }
                        //idcardded 

                        forConvert = Convert.ToSingle(dt.Rows[i]["IDCardDed"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellbnkfeeded = new PdfPCell(new Phrase("ID Card Ded", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbnkfeeded.HorizontalAlignment = 0;
                            cellbnkfeeded.Colspan = 1;
                            //cellbnkfeeded.MinimumHeight = 20;
                            tableDeductions.AddCell(cellbnkfeeded);

                            PdfPCell cellbnkfeeded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbnkfeeded1.HorizontalAlignment = 2;
                            cellbnkfeeded1.Colspan = 1;
                            tableDeductions.AddCell(cellbnkfeeded1);
                        }
                        forConvert = Convert.ToSingle(dt.Rows[i]["Extra"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellbnkfeeded = new PdfPCell(new Phrase("Extra", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbnkfeeded.HorizontalAlignment = 0;
                            cellbnkfeeded.Colspan = 1;
                            //cellbnkfeeded.MinimumHeight = 20;
                            tableDeductions.AddCell(cellbnkfeeded);

                            PdfPCell cellbnkfeeded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbnkfeeded1.HorizontalAlignment = 2;
                            cellbnkfeeded1.Colspan = 1;
                            tableDeductions.AddCell(cellbnkfeeded1);

                        }



                        forConvert = Convert.ToSingle(dt.Rows[i]["FireChargeDed"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellbnkfeeded = new PdfPCell(new Phrase("Fire Charges", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbnkfeeded.HorizontalAlignment = 0;
                            cellbnkfeeded.Colspan = 1;
                            //cellbnkfeeded.MinimumHeight = 20;
                            tableDeductions.AddCell(cellbnkfeeded);


                            PdfPCell cellbnkfeeded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbnkfeeded1.HorizontalAlignment = 2;
                            cellbnkfeeded1.Colspan = 1;
                            tableDeductions.AddCell(cellbnkfeeded1);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["SecurityDepositDed"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellsecdepded = new PdfPCell(new Phrase("Security Deposit", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellsecdepded.HorizontalAlignment = 0;
                            cellsecdepded.Colspan = 1;
                            //cellsecdepded.MinimumHeight = 20;
                            tableDeductions.AddCell(cellsecdepded);


                            PdfPCell cellsecdepded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellsecdepded1.HorizontalAlignment = 2;
                            cellsecdepded1.Colspan = 1;
                            tableDeductions.AddCell(cellsecdepded1);

                        }
                        forConvert = Convert.ToSingle(dt.Rows[i]["OtherDedn"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellOtherDed = new PdfPCell(new Phrase("Other Deductions", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOtherDed.HorizontalAlignment = 0;
                            cellOtherDed.Colspan = 1;
                            //cellOtherDed.MinimumHeight = 20;
                            tableDeductions.AddCell(cellOtherDed);


                            PdfPCell cellOtherDed1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOtherDed1.HorizontalAlignment = 2;
                            cellOtherDed1.Colspan = 1;
                            tableDeductions.AddCell(cellOtherDed1);

                        }


                        //OWF or SBS
                        forConvert = Convert.ToSingle(dt.Rows[i]["owf"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellSBS = new PdfPCell(new Phrase("Lab. Welfare Fund", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellSBS.HorizontalAlignment = 0;
                            cellSBS.Colspan = 1;
                            //cellSBS.MinimumHeight = 20;
                            tableDeductions.AddCell(cellSBS);


                            PdfPCell cellSBS1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellSBS1.HorizontalAlignment = 2;
                            cellSBS1.Colspan = 1;
                            tableDeductions.AddCell(cellSBS1);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["CanteenAdv"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellempty2 = new PdfPCell(new Phrase("CA", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellempty2.HorizontalAlignment = 0;
                            cellempty2.Colspan = 1;
                            //cellempty2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellempty2);


                            PdfPCell cellempty3 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellempty3.HorizontalAlignment = 2;
                            cellempty3.Colspan = 1;
                            tableDeductions.AddCell(cellempty3);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["TelephoneBillDed"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellTelephoneBillDed = new PdfPCell(new Phrase("Telephone Bill Ded", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellTelephoneBillDed.HorizontalAlignment = 0;
                            cellTelephoneBillDed.Colspan = 1;
                            tableDeductions.AddCell(cellTelephoneBillDed);


                            PdfPCell cellTelephoneBillDed2 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellTelephoneBillDed2.HorizontalAlignment = 2;
                            cellTelephoneBillDed2.Colspan = 1;
                            tableDeductions.AddCell(cellTelephoneBillDed2);

                        }

                            forConvert = Convert.ToSingle(dt.Rows[i]["PFESIContribution"].ToString());
                            if (forConvert > 0)
                            {
                                PdfPCell cellPFESIContribution = new PdfPCell(new Phrase("PF & ESI Contribution", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                                cellPFESIContribution.HorizontalAlignment = 0;
                                cellPFESIContribution.Colspan = 1;
                                tableDeductions.AddCell(cellPFESIContribution);


                                PdfPCell cellPFESIContribution2 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                                cellPFESIContribution2.HorizontalAlignment = 2;
                                cellPFESIContribution2.Colspan = 1;
                                tableDeductions.AddCell(cellPFESIContribution2);

                            }

                            forConvert = Convert.ToSingle(dt.Rows[i]["TDSDed"].ToString());
                            if (forConvert > 0)
                            {
                                PdfPCell cellPFESIContribution = new PdfPCell(new Phrase("TDS Ded", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                                cellPFESIContribution.HorizontalAlignment = 0;
                                cellPFESIContribution.Colspan = 1;
                                tableDeductions.AddCell(cellPFESIContribution);


                                PdfPCell cellPFESIContribution2 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                                cellPFESIContribution2.HorizontalAlignment = 2;
                                cellPFESIContribution2.Colspan = 1;
                                tableDeductions.AddCell(cellPFESIContribution2);

                            }



                            PdfPCell ChildTable2 = new PdfPCell(tableDeductions);
                        ChildTable2.Colspan = 2;
                        ChildTable2.BorderWidthLeft = 0;
                        ChildTable2.BorderWidthRight = 0;
                        ChildTable2.BorderWidthLeft = 0;
                        ChildTable2.BorderWidthLeft = 0;
                        tablewageslip.AddCell(ChildTable2);




                        totalstandradamt = totalcdBasic + totalcdDA + totalcdLeaveAmount + totalcdConveyance + totalcdWashAllowance + totalcdHRA + totalcdNFhs + totalcdBonus + totalcdCCA + totalcdGratuity + totalcdotherAllowance + totalcdfoodallw + totalcdMedicalallw + totalcdSplAllowance + totalcdTravelAllw + totalcdPerformanceallw + totalcdMobileallw;


                        PdfPCell cellgrans = new PdfPCell(new Phrase("Total", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellgrans.HorizontalAlignment = 0;
                        cellgrans.Colspan = 1;
                        //cellSplDutiesAmt.MinimumHeight = 20;
                        tablewageslip.AddCell(cellgrans);

                        PdfPCell cellgrans1 = new PdfPCell(new Phrase(totalstandradamt.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellgrans1.HorizontalAlignment = 2;
                        cellgrans1.Colspan = 1;
                        //cellSplDutiesAmt11.MinimumHeight = 20;
                        tablewageslip.AddCell(cellgrans1);

                        forConvert5 = (Convert.ToSingle(dt.Rows[i]["Otamt"].ToString()) + Convert.ToSingle(dt.Rows[i]["npotsamt"].ToString()) + Convert.ToSingle(dt.Rows[i]["Nfhs"].ToString()) + Convert.ToSingle(dt.Rows[i]["WOAmt"].ToString()) + Convert.ToSingle(dt.Rows[i]["Nhsamt"].ToString()) + Convert.ToSingle(dt.Rows[i]["CCA"].ToString()) + Convert.ToSingle(dt.Rows[i]["Gratuity"].ToString()) + Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString()) + Convert.ToSingle(dt.Rows[i]["LeaveEncashAmt"].ToString()) + Convert.ToSingle(dt.Rows[i]["Bonus"].ToString()) + Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString()) + Convert.ToSingle(dt.Rows[i]["WashAllowance"].ToString()) + Convert.ToSingle(dt.Rows[i]["HRA"].ToString()) + Convert.ToSingle(dt.Rows[i]["Basic"].ToString()) + Convert.ToSingle(dt.Rows[i]["DA"].ToString()) + Convert.ToSingle(dt.Rows[i]["incentivs"].ToString()) + Convert.ToSingle(dt.Rows[i]["FoodAllowance"].ToString()) + Convert.ToSingle(dt.Rows[i]["TravelAllw"].ToString()) + Convert.ToSingle(dt.Rows[i]["PerformanceAllw"].ToString()) + Convert.ToSingle(dt.Rows[i]["MobileAllw"].ToString()) + Convert.ToSingle(dt.Rows[i]["SplAllowance"].ToString()) + Convert.ToSingle(dt.Rows[i]["MedicalAllowance"].ToString()));
                        PdfPCell cellgrans2 = new PdfPCell(new Phrase(forConvert5.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellgrans2.HorizontalAlignment = 2;
                        cellgrans2.Colspan = 1;
                        //cellSplDutiesAmt1.MinimumHeight = 20;
                        tablewageslip.AddCell(cellgrans2);


                        PdfPCell cellTotalDed = new PdfPCell(new Phrase("Total Deductions", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellTotalDed.HorizontalAlignment = 0;
                        cellTotalDed.Colspan = 1;
                        tablewageslip.AddCell(cellTotalDed);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Deductions"].ToString());
                        PdfPCell cellTotalDed1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellTotalDed1.HorizontalAlignment = 2;
                        cellTotalDed1.Colspan = 1;
                        tablewageslip.AddCell(cellTotalDed1);






                        PdfPCell cellTotal = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellTotal.HorizontalAlignment = 0;
                        cellTotal.Colspan = 1;
                        // cellTotal.MinimumHeight = 20;
                        tablewageslip.AddCell(cellTotal);

                        PdfPCell cellTotal11 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellTotal11.HorizontalAlignment = 2;
                        cellTotal11.Colspan = 1;
                        //cellTotal11.MinimumHeight = 20;
                        tablewageslip.AddCell(cellTotal11);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Actualamount"].ToString());
                        string gtotal = NumberToEnglish.Instance.changeNumericToWords(forConvert.ToString("#"));

                        PdfPCell cellTotal1 = new PdfPCell(new Phrase("Rs. " + forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellTotal1.HorizontalAlignment = 2;
                        cellTotal1.Colspan = 1;
                        tablewageslip.AddCell(cellTotal1);

                        PdfPCell cellEmptycell = new PdfPCell(new Phrase("  ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellEmptycell.HorizontalAlignment = 0;
                        cellEmptycell.Colspan = 2;
                        //cellIncentives.MinimumHeight = 20;
                        tablewageslip.AddCell(cellEmptycell);




                        PdfPCell cellInWords = new PdfPCell(new Phrase("Rupees " + gtotal.Trim() + " Only", FontFactory.GetFont(fontsyle, Fontsize, Font.ITALIC, BaseColor.BLACK)));
                        cellInWords.HorizontalAlignment = 0;
                        cellInWords.Colspan = 5;
                        cellInWords.Border = 0;
                        tablewageslip.AddCell(cellInWords);


                        PdfPCell cellemptycell = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellemptycell.HorizontalAlignment = 0;
                        cellemptycell.Colspan = 5;
                        cellemptycell.BorderWidthLeft = 0;
                        cellemptycell.BorderWidthRight = 0;
                        cellemptycell.BorderWidthTop = 0;
                        cellemptycell.BorderWidthBottom = .5f;
                        tablewageslip.AddCell(cellemptycell);

                        PdfPCell companyname1 = new PdfPCell(new Phrase("''This is computer generated wage slip, requires no signature''", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLDITALIC, BaseColor.BLACK)));
                        companyname1.HorizontalAlignment = 2;
                        companyname1.Colspan = 5;
                        companyname1.Border = 0;
                        companyname1.PaddingBottom = 30;
                        tablewageslip.AddCell(companyname1);

                        PdfPCell cellcmnyadd1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize + 2, Font.NORMAL, BaseColor.BLACK)));
                        cellcmnyadd1.HorizontalAlignment = 2;
                        cellcmnyadd1.Colspan = 5;
                        cellcmnyadd1.MinimumHeight = 10;
                        cellcmnyadd1.Border = 0;
                        cellcmnyadd1.PaddingTop = 60;
                        //  tablewageslip.AddCell(cellcmnyadd1);





                        PdfPCell cellsignature = new PdfPCell(new Phrase("Employer Seal & Sign", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellsignature.HorizontalAlignment = 2;
                        cellsignature.Colspan = 3;
                        cellsignature.Border = 0;
                        // tablewageslip.AddCell(cellsignature);


                        document.Add(tablewageslip);

                        if (ChkPerOne.Checked == true)
                        {
                            slipsCount++;
                            if (slipsCount == 2)
                            {
                                slipsCount = 0;
                                document.NewPage();
                            }
                        }
                        else
                        {
                            slipsCount++;
                            if (slipsCount == 3)
                            {
                                slipsCount = 0;
                                document.NewPage();
                            }
                        }



                        #endregion Basic Information of the Employee

                    }
                }

                string filename = ddlcname.SelectedItem.Text + "/WageSlips for-" + GetMonthName() + " -" + GetMonthOfYear() + ".pdf";

                document.Close();
                Response.ContentType = "application/pdf";
                Response.AddHeader("content-disposition", "attachment;filename=\"" + filename + "\"");
                Response.Buffer = true;
                Response.Clear();
                Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                Response.OutputStream.Flush();
                Response.End();

             }
         }
            catch (Exception ex)
            {
                
                
            }

        }

        protected void btnGameshaWageSlip_Click(object sender, EventArgs e)
        {
            if (ddlClients.SelectedIndex <= 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
                return;
            }

            var formatInfoinfo = new DateTimeFormatInfo();
            string[] monthName = formatInfoinfo.MonthNames;
            int payMonth = GetMonth(ddlmonth.SelectedValue);

            int month = GetMonthBasedOnSelectionDateorMonth();
            string selectmonth = string.Empty;

            int Fontsize = 12;
            string fontsyle = "verdana";

            string selectclientaddress = "select * from clients where clientid= '" + ddlClients.SelectedValue + "'";
            DataTable dtclientaddress = config.ExecuteAdaptorAsyncWithQueryParams(selectclientaddress).Result;
            string AddrHno = ""; string AddrColony = ""; string AddrArea = ""; string AddrStreet = ""; string Addrcity = ""; string Addrstate = ""; string Addrpin = "";
            if (dtclientaddress.Rows.Count > 0)
            {

                AddrHno = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                AddrStreet = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                AddrArea = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                AddrColony = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                Addrcity = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                Addrstate = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                Addrpin = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
            }

            string[] ClientAdress = new string[7];
            if (AddrHno.Length > 0)
            {
                ClientAdress[0] = AddrHno;
            }
            else
            {
                ClientAdress[0] = "";
            }
            if (AddrStreet.Length > 0)
            {
                ClientAdress[1] = AddrStreet;
            }
            else
            {
                ClientAdress[1] = "";
            }
            if (AddrArea.Length > 0)
            {
                ClientAdress[2] = AddrArea;
            }
            else
            {
                ClientAdress[2] = "";
            }
            if (AddrColony.Length > 0)
            {
                ClientAdress[3] = AddrArea;
            }
            else
            {
                ClientAdress[3] = "";
            }
            if (Addrcity.Length > 0)
            {
                ClientAdress[4] = AddrColony;
            }
            else
            {
                ClientAdress[4] = "";
            }
            if (Addrstate.Length > 0)
            {
                ClientAdress[5] = Addrcity;
            }
            else
            {
                ClientAdress[5] = "";
            }
            if (Addrpin.Length > 0)
            {
                ClientAdress[6] = Addrstate;
            }
            else
            {
                ClientAdress[6] = "";
            }


            string Address1 = string.Empty;

            for (int i = 0; i < 7; i++)
            {
                Address1 += "  " + ClientAdress[i];
            }



            selectmonth = "select isnull(EmpDetails.oldempid,'') as EmpId,eps.empid as mainempid,Designations.design as Desgn,TempGross as salaryrate,  Eps.NoOfDuties,Eps.WO,Eps.NHS,Eps.Basic,Eps.DA,Eps.Bonus,'0' as TDS,'0' as Fines,EmpDetails.EmpfatherName,  Eps.HRA,Eps.CCA,Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,(Eps.RC + Eps.CS + Eps.PLAmount + Eps.Incentivs + (isnull(eps.addlamount, 0))) as Others,Eps.LeaveEncashAmt,Eps.Woamt,eps.npotsamt, Eps.NhsAmt,Eps.Nfhs,Eps.Gratuity,Eps.PF,(Eps.ESI-eps.ESIONOT) as esi,Eps.OTAmt,Eps.ProfTax,isnull(EmpDetails.EmpUANNumber,'') as EmpUANNumber,Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed, 0 as PoliceVerfDed,0 as FireChargeDed,0 as SecurityDepositDed,0 as BankFeesDed,eps.npots,eps.npotsamt, Eps.OtherDed as OtherDedn,Eps.OWF,(Eps.Gross+eps.woamt+eps.nhsamt+eps.npotsamt) as GrossAmt,((Eps.PF+eps.ESI+eps.SalAdvDed+eps.UniformDed+eps.OtherDed+eps.SecurityDepDed-eps.ESIONOT)) as Deductions,(Eps.ActualAmount-Eps.Otamt) as netamount,Eps.OWF,ISNULL(Eps.PFESIContribution,0) as PFESIContribution," +
                         " (EmpDetails.Empfname + ' ' + EmpDetails.EmpMname + ' ' + EmpDetails.emplname) as EmpmName ,CONVERT(VARCHAR(10), isnull(EmpDetails.EmpDtofJoining, '01/01/1900'), 104) as EmpDtofJoining, " +
                         " EmpDetails.UnitId, EmpDetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,Eps.ots," +
                         " case isnull(CDSW.Basic,0) when 0 then isnull(ess.Basic,0) else isnull(CDSW.Basic,0) end  as cdBasic,case isnull(CDSW.DA,0) when 0 then isnull(ess.da,0) else isnull(CDSW.DA,0) end cdDA," +
                         " case isnull(CDSW.Bonus,0) when 0 then isnull(ess.Bonus,0) else isnull(CDSW.Bonus,0) end cdBonus,case isnull(CDSW.HRA,0) when 0 then isnull(ess.HRA,0) else isnull(CDSW.HRA,0) end cdHRA," +
                         " case isnull(CDSW.CCA,0) when 0 then isnull(ess.CCA,0) else isnull(CDSW.CCA,0) end cdCCA,case isnull(CDSW.Conveyance,0) when 0 then isnull(ess.Conveyance,0) else isnull(CDSW.Conveyance,0) end cdConveyance," +
                         " case isnull(CDSW.WashAllowance,0) when 0 then isnull(ess.WashAllowance,0) else isnull(CDSW.WashAllowance,0) end cdWashallowance,case isnull(CDSW.OtherAllowance,0) when 0 then isnull(ess.otherallowance,0) else cdsw.otherallowance end cdOtherAllowance,case isnull(CDSW.NFhs,0) when 0 then isnull(ess.NFhs,0) else cdsw.NFhs end cdNFhs, " +
                         " case isnull(CDSW.LeaveAmount,0) when 0 then isnull(ess.LeaveAmount,0) else isnull(CDSW.LeaveAmount,0) end cdLeaveAmount,case isnull(CDSW.Gratuity,0) when 0 then isnull(ess.Gratuity,0) else isnull(CDSW.Gratuity,0) end cdGratuity,eps.tempgross,case isnull(cdsw.otrate,0) when 0 then eps.tempgross else cdsw.otrate end otrate" +
                         " from EmpDetails inner JOIN EmpPaySheet eps ON EmpDetails.EmpId = Eps.empid " +
                         " left JOIN ContractDetailsSW CDSW ON CDSW.ClientID = Eps.ClientId AND CDSW.ContractId = Eps.ContractId  AND CDSW.Designations = Eps.Desgn " +
                         " left join EmpSalaryStructure ess on eps.EmpId=ess.empid INNER JOIN Designations ON Designations.designid = Eps.desgn " +
                         " AND Eps.ClientId = '" + ddlClients.SelectedValue + "'  AND Eps.Month = '" + month + "' order by EPS.EmpId";
            DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(selectmonth).Result;


            MemoryStream ms = new MemoryStream();

            int slipsCount = 0;
            string UANNumber = "";

            if (dt.Rows.Count > 0)
            {
                Document document = new Document(PageSize.LEGAL);
                var writer = PdfWriter.GetInstance(document, ms);
                document.Open();
                BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                string imagepath1 = Server.MapPath("images");

                string strQry = "Select * from CompanyInfo  where   ClientidPrefix='" + CmpIDPrefix + "'";
                DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                string companyName = "Your Company Name";
                string companyAddress = "Your Company Address";
                string PFNOForms = "";
                string TotalPFNOForms = "";
                if (compInfo.Rows.Count > 0)
                {
                    companyName = compInfo.Rows[0]["CompanyName"].ToString();
                    companyAddress = compInfo.Rows[0]["Address"].ToString();
                    //PFNOForms = compInfo.Rows[0]["PFNoForms"].ToString();
                }

                float forConvert = 0;
                float forConvert1 = 0;




                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (dt.Rows[i]["netamount"].ToString().Trim().Length > 0)
                        forConvert = Convert.ToSingle(dt.Rows[i]["netamount"].ToString());
                    if (forConvert > 0)
                    {


                        strQry = "Select p.EmpEpfNo,e.EmpESINo from EMPESICodes AS e INNER JOIN EMPEPFCodes as p ON e.Empid = p.Empid AND e.Empid='" + dt.Rows[i]["mainempid"].ToString() + "'";
                        string pfNo = "";
                        string esiNo = "";
                        DataTable PfTable = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                        if (PfTable.Rows.Count > 0)
                        {
                            pfNo = PfTable.Rows[0]["EmpEpfNo"].ToString();
                            esiNo = PfTable.Rows[0]["EmpESINo"].ToString();
                        }

                        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
                        #region

                        PdfPTable tablewageslip = new PdfPTable(5);
                        tablewageslip.TotalWidth = 550f;
                        tablewageslip.LockedWidth = true;
                        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f };
                        tablewageslip.SetWidths(width);

                        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(fontsyle, Fontsize - 2, Font.NORMAL, BaseColor.BLACK)));
                        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        cellspace.Colspan = 5;
                        cellspace.Border = 0;
                        cellspace.PaddingTop = 20;
                        tablewageslip.AddCell(cellspace);

                        PdfPCell cellHead1 = new PdfPCell(new Phrase("FORM-XIX - Wage Slip  ", FontFactory.GetFont(fontsyle, Fontsize + 1, Font.BOLD, BaseColor.BLACK)));
                        cellHead1.HorizontalAlignment = 1;
                        cellHead1.Colspan = 5;
                        cellHead1.Border = 0;
                        tablewageslip.AddCell(cellHead1);

                        PdfPCell cellHead2 = new PdfPCell(new Phrase("M/s " + companyName, FontFactory.GetFont(fontsyle, 13, Font.BOLD, BaseColor.BLACK)));
                        cellHead2.HorizontalAlignment = 1;
                        cellHead2.Colspan = 5;
                        cellHead2.Border = 0;
                        tablewageslip.AddCell(cellHead2);

                        PdfPCell cellHead31 = new PdfPCell(new Phrase(companyAddress, FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellHead31.HorizontalAlignment = 1;
                        cellHead31.Colspan = 5;
                        cellHead31.Border = 0;
                        tablewageslip.AddCell(cellHead31);



                        PdfPCell cellHead4 = new PdfPCell(new Phrase("Pay Slip for month of " + GetMonthName() + " " + GetMonthOfYear(), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellHead4.HorizontalAlignment = 1;
                        cellHead4.Colspan = 5;
                        cellHead4.Border = 0;
                        tablewageslip.AddCell(cellHead4);



                        PdfPCell cellHead5 = new PdfPCell();
                        Paragraph CcellHead5 = new Paragraph();
                        CcellHead5.Add(new Chunk("NAME: ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        CcellHead5.Add(new Chunk(dt.Rows[i]["EmpmName"].ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellHead5.AddElement(CcellHead5);
                        cellHead5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellHead5.Colspan = 3;
                        cellHead5.MinimumHeight = 20;
                        tablewageslip.AddCell(cellHead5);


                        PdfPCell cellHead7 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead7.HorizontalAlignment = 0;
                        cellHead7.Colspan = 2;
                        tablewageslip.AddCell(cellHead7);

                        PdfPCell cellHead51 = new PdfPCell();
                        Paragraph CcellHead51 = new Paragraph();
                        CcellHead51.Add(new Chunk("Employee ID -  ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        CcellHead51.Add(new Chunk(dt.Rows[i]["Empid"].ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        CcellHead51.Add(new Chunk("\nFather Name : ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        CcellHead51.Add(new Chunk(dt.Rows[i]["EmpfatherName"].ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellHead51.AddElement(CcellHead51);
                        cellHead51.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellHead51.Colspan = 3;
                        cellHead51.MinimumHeight = 20;
                        tablewageslip.AddCell(cellHead51);






                        PdfPCell cellHead711 = new PdfPCell();
                        Paragraph CcellHead711 = new Paragraph();
                        CcellHead711.Add(new Chunk("Designation - ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        CcellHead711.Add(new Chunk(dt.Rows[i]["Desgn"].ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellHead711.AddElement(CcellHead711);
                        cellHead711.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellHead711.Colspan = 2;
                        cellHead711.MinimumHeight = 20;
                        tablewageslip.AddCell(cellHead711);

                        PdfPCell cellHead71 = new PdfPCell();
                        Paragraph CcellHead71 = new Paragraph();
                        CcellHead71.Add(new Chunk("Bank Account No - ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        CcellHead71.Add(new Chunk(dt.Rows[i]["EmpBankAcNo"].ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellHead71.AddElement(CcellHead71);
                        cellHead71.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellHead71.Colspan = 3;
                        cellHead71.MinimumHeight = 20;
                        tablewageslip.AddCell(cellHead71);



                        PdfPCell cellHead101 = new PdfPCell();
                        Paragraph CcellHead101 = new Paragraph();
                        CcellHead101.Add(new Chunk("E.P.F Number - ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        CcellHead101.Add(new Chunk(pfNo, FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellHead101.AddElement(CcellHead101);
                        cellHead101.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellHead101.Colspan = 2;
                        cellHead101.MinimumHeight = 20;
                        tablewageslip.AddCell(cellHead101);





                        forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());
                        if (forConvert > 0)
                        {

                            PdfPCell cellduties = new PdfPCell();
                            Paragraph celldutiesC = new Paragraph();
                            celldutiesC.Add(new Chunk("Duties - ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            celldutiesC.Add(new Chunk(forConvert.ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellduties.AddElement(celldutiesC);
                            cellduties.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cellduties.Colspan = 1;
                            cellduties.MinimumHeight = 20;
                            tablewageslip.AddCell(cellduties);
                        }
                        else
                        {
                            PdfPCell celldutiesCC = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            celldutiesCC.HorizontalAlignment = 0;
                            celldutiesCC.Colspan = 1;
                            //cellHead111.MinimumHeight = 20;
                            tablewageslip.AddCell(celldutiesCC);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["Wo"].ToString());
                        if (forConvert > 0)
                        {


                            PdfPCell cellwo = new PdfPCell();
                            Paragraph cellwoC = new Paragraph();
                            cellwoC.Add(new Chunk("WO - ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellwoC.Add(new Chunk(forConvert.ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellwo.AddElement(cellwoC);
                            cellwo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cellwo.Colspan = 1;
                            cellwo.MinimumHeight = 20;
                            tablewageslip.AddCell(cellwo);


                        }
                        else
                        {
                            PdfPCell cellwoCC = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellwoCC.HorizontalAlignment = 0;
                            cellwoCC.Colspan = 1;
                            //cellHead111.MinimumHeight = 20;
                            tablewageslip.AddCell(cellwoCC);

                        }

                        PdfPCell cellHead112 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellHead112.HorizontalAlignment = 0;
                        cellHead112.Colspan = 1;
                        //cellHead111.MinimumHeight = 20;
                        tablewageslip.AddCell(cellHead112);

                        //forConvert = Convert.ToSingle(dt.Rows[i]["ots"].ToString());

                        //if (forConvert > 0)
                        //{
                        //    PdfPCell cellHead1112 = new PdfPCell(new Phrase("OTs - " + forConvert.ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellHead1112.HorizontalAlignment = 0;
                        //    cellHead1112.Colspan = 1;
                        //    //cellHead1112.MinimumHeight = 20;
                        //    tablewageslip.AddCell(cellHead1112);
                        //}

                        //else
                        //{
                        //    PdfPCell cellHead11124 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellHead11124.HorizontalAlignment = 0;
                        //    cellHead11124.Colspan = 1;
                        //    //cellHead11124.MinimumHeight = 20;
                        //    tablewageslip.AddCell(cellHead11124);

                        //}



                        UANNumber = dt.Rows[i]["EmpUANNumber"].ToString();


                        if (UANNumber.Trim().Length > 0)
                        {

                            PdfPCell cellHeadUANNo = new PdfPCell();
                            Paragraph CcellHeadUANNo = new Paragraph();
                            CcellHeadUANNo.Add(new Chunk("UAN No - ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            CcellHeadUANNo.Add(new Chunk(UANNumber, FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellHeadUANNo.AddElement(CcellHeadUANNo);
                            cellHeadUANNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cellHeadUANNo.Colspan = 2;
                            //cellHeadUANNo.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHeadUANNo);


                        }

                        else
                        {
                            PdfPCell cellHeadUANNo = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHeadUANNo.HorizontalAlignment = 0;
                            cellHeadUANNo.Colspan = 2;
                            //cellHead71.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHeadUANNo);
                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["nhs"].ToString());
                        if (forConvert > 0)
                        {


                            PdfPCell cellnhs = new PdfPCell();
                            Paragraph Ccellnhs = new Paragraph();
                            Ccellnhs.Add(new Chunk("NHs - ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            Ccellnhs.Add(new Chunk(forConvert.ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellnhs.AddElement(Ccellnhs);
                            cellnhs.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cellnhs.Colspan = 1;
                            //cellHeadUANNo.MinimumHeight = 20;
                            tablewageslip.AddCell(cellnhs);


                        }
                        else
                        {
                            PdfPCell cellnhsv = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellnhsv.HorizontalAlignment = 0;
                            cellnhsv.Colspan = 1;
                            //cellHead111.MinimumHeight = 20;
                            tablewageslip.AddCell(cellnhsv);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["npots"].ToString());
                        if (forConvert > 0)
                        {

                            PdfPCell cellHead11c1 = new PdfPCell();
                            Paragraph CcellHead11c1 = new Paragraph();
                            CcellHead11c1.Add(new Chunk("Spl Duties - ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            CcellHead11c1.Add(new Chunk(forConvert.ToString(), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellHead11c1.AddElement(CcellHead11c1);
                            cellHead11c1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cellHead11c1.Colspan = 2;
                            //cellHeadUANNo.MinimumHeight = 20;
                            tablewageslip.AddCell(cellHead11c1);

                        }
                        else
                        {
                            PdfPCell CcellHead11c1v = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            CcellHead11c1v.HorizontalAlignment = 0;
                            CcellHead11c1v.Colspan = 2;
                            //cellHead111.MinimumHeight = 20;
                            tablewageslip.AddCell(CcellHead11c1v);

                        }


                        PdfPCell cellHead111 = new PdfPCell();
                        Paragraph CcellHead111 = new Paragraph();
                        CcellHead111.Add(new Chunk("ESI Number - ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        CcellHead111.Add(new Chunk(esiNo, FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellHead111.AddElement(CcellHead111);
                        cellHead111.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellHead111.Colspan = 2;
                        //cellHeadUANNo.MinimumHeight = 20;
                        tablewageslip.AddCell(cellHead111);




                        BaseColor color = new BaseColor(221, 226, 222);



                        PdfPTable tableEarnings = new PdfPTable(3);
                        tableEarnings.TotalWidth = 330;
                        tableEarnings.LockedWidth = true;
                        float[] width1 = new float[] { 2f, 2f, 2f };

                        tableEarnings.SetWidths(width1);

                        PdfPCell cellHead9 = new PdfPCell(new Phrase("Description", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellHead9.HorizontalAlignment = 1;
                        cellHead9.Colspan = 1;
                        cellHead9.MinimumHeight = 20;
                        cellHead9.BackgroundColor = color;
                        tableEarnings.AddCell(cellHead9);




                        PdfPCell cellHead1011 = new PdfPCell(new Phrase("Standard Amount", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellHead1011.HorizontalAlignment = 1;
                        cellHead1011.Colspan = 1;
                        cellHead1011.BackgroundColor = color;
                        tableEarnings.AddCell(cellHead1011);


                        PdfPCell cellHead10 = new PdfPCell(new Phrase("Earnings Amount", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellHead10.HorizontalAlignment = 1;
                        cellHead10.Colspan = 1;
                        cellHead10.BackgroundColor = color;
                        tableEarnings.AddCell(cellHead10);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Basic"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdBasic"].ToString());



                        if (forConvert > 0)
                        {
                            PdfPCell cellbascic = new PdfPCell(new Phrase("Basic", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbascic.HorizontalAlignment = 0;
                            cellbascic.Colspan = 1;
                            //cellbascic.MinimumHeight = 20;
                            tableEarnings.AddCell(cellbascic);

                            PdfPCell cellbascic11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbascic11.HorizontalAlignment = 2;
                            cellbascic11.Colspan = 1;
                            tableEarnings.AddCell(cellbascic11);


                            PdfPCell cellbascic1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellbascic1.HorizontalAlignment = 2;
                            cellbascic1.Colspan = 1;
                            tableEarnings.AddCell(cellbascic1);
                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["DA"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdDA"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellDearness = new PdfPCell(new Phrase("Dearness Allowance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellDearness.HorizontalAlignment = 0;
                            cellDearness.Colspan = 1;
                            //cellDearness.MinimumHeight = 20;
                            tableEarnings.AddCell(cellDearness);


                            PdfPCell cellbascic111 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbascic111.HorizontalAlignment = 2;
                            cellbascic111.Colspan = 1;
                            tableEarnings.AddCell(cellbascic111);


                            PdfPCell cellDearness1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellDearness1.HorizontalAlignment = 2;
                            cellDearness1.Colspan = 1;
                            tableEarnings.AddCell(cellDearness1);
                        }



                        forConvert = Convert.ToSingle(dt.Rows[i]["HRA"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdHRA"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellHRA = new PdfPCell(new Phrase("HRA", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellHRA.HorizontalAlignment = 0;
                            cellHRA.Colspan = 1;
                            //cellHRA.MinimumHeight = 20;
                            tableEarnings.AddCell(cellHRA);


                            PdfPCell ccellHRA11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            ccellHRA11.HorizontalAlignment = 2;
                            ccellHRA11.Colspan = 1;
                            tableEarnings.AddCell(ccellHRA11);


                            PdfPCell ccellHRA1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            ccellHRA1.HorizontalAlignment = 2;
                            ccellHRA1.Colspan = 1;
                            tableEarnings.AddCell(ccellHRA1);
                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["WashAllowance"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdWashAllowance"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellWAAmt = new PdfPCell(new Phrase("Wash Allowance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellWAAmt.HorizontalAlignment = 0;
                            cellWAAmt.Colspan = 1;
                            //cellWAAmt.MinimumHeight = 20;
                            tableEarnings.AddCell(cellWAAmt);


                            PdfPCell cellWAAmt11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellWAAmt11.HorizontalAlignment = 2;
                            cellWAAmt11.Colspan = 1;
                            //////cellWAAmt11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellWAAmt11);


                            PdfPCell cellWAAmt112 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellWAAmt112.HorizontalAlignment = 2;
                            cellWAAmt112.Colspan = 1;
                            //cellWAAmt112.MinimumHeight = 20;
                            tableEarnings.AddCell(cellWAAmt112);
                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdConveyance"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellConveyance = new PdfPCell(new Phrase("Conveyance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellConveyance.HorizontalAlignment = 0;
                            cellConveyance.Colspan = 1;
                            //cellConveyance.MinimumHeight = 20;
                            tableEarnings.AddCell(cellConveyance);


                            PdfPCell cellConveyance11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellConveyance11.HorizontalAlignment = 2;
                            cellConveyance11.Colspan = 1;
                            tableEarnings.AddCell(cellConveyance11);


                            PdfPCell cellConveyance1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellConveyance1.HorizontalAlignment = 2;
                            cellConveyance1.Colspan = 1;
                            tableEarnings.AddCell(cellConveyance1);
                        }



                        forConvert = Convert.ToSingle(dt.Rows[i]["Bonus"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdBonus"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellbonus = new PdfPCell(new Phrase("Bonus", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbonus.HorizontalAlignment = 0;
                            cellbonus.Colspan = 1;
                            //cellbonus.MinimumHeight = 20;
                            tableEarnings.AddCell(cellbonus);

                            PdfPCell cellbonus11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbonus11.HorizontalAlignment = 2;
                            cellbonus11.Colspan = 1;
                            tableEarnings.AddCell(cellbonus11);

                            PdfPCell cellbonus1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellbonus1.HorizontalAlignment = 2;
                            cellbonus1.Colspan = 1;
                            tableEarnings.AddCell(cellbonus1);
                        }



                        forConvert = Convert.ToSingle(dt.Rows[i]["LeaveEncashAmt"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdLeaveAmount"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellLeave = new PdfPCell(new Phrase("Leave Wage", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellLeave.HorizontalAlignment = 0;
                            cellLeave.Colspan = 1;
                            //cellLeave.MinimumHeight = 20;
                            tableEarnings.AddCell(cellLeave);


                            PdfPCell cellLeave11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellLeave11.HorizontalAlignment = 2;
                            cellLeave11.Colspan = 1;
                            tableEarnings.AddCell(cellLeave11);

                            PdfPCell cellLeave1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellLeave1.HorizontalAlignment = 2;
                            cellLeave1.Colspan = 1;
                            tableEarnings.AddCell(cellLeave1);
                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdotherAllowance"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellOTher = new PdfPCell(new Phrase("Other Allowance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher.HorizontalAlignment = 0;
                            cellOTher.Colspan = 1;
                            //cellOTher.MinimumHeight = 20;
                            tableEarnings.AddCell(cellOTher);

                            PdfPCell cellOTher11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOTher11.HorizontalAlignment = 2;
                            cellOTher11.Colspan = 1;
                            tableEarnings.AddCell(cellOTher11);


                            PdfPCell cellOTher1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellOTher1.HorizontalAlignment = 2;
                            cellOTher1.Colspan = 1;
                            tableEarnings.AddCell(cellOTher1);
                        }


                        //forConvert = Convert.ToSingle(dt.Rows[i]["Specialallowance"].ToString());
                        //forConvert1 = Convert.ToSingle(dt.Rows[i]["cdSpecialallowance"].ToString());

                        //if (forConvert > 0)
                        //{
                        //    PdfPCell cellSplAllow = new PdfPCell(new Phrase("Spl Allowance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellSplAllow.HorizontalAlignment = 0;
                        //    cellSplAllow.Colspan = 1;
                        //    //cellSplAllow.MinimumHeight = 20;
                        //    tableEarnings.AddCell(cellSplAllow);


                        //    PdfPCell cellSplAllow11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellSplAllow11.HorizontalAlignment = 2;
                        //    cellSplAllow11.Colspan = 1;
                        //    tableEarnings.AddCell(cellSplAllow11);


                        //    PdfPCell cellSplAllow1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellSplAllow1.HorizontalAlignment = 2;
                        //    cellSplAllow1.Colspan = 1;
                        //    tableEarnings.AddCell(cellSplAllow1);
                        //}



                        forConvert = Convert.ToSingle(dt.Rows[i]["Gratuity"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdGratuity"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellGratuity = new PdfPCell(new Phrase("Gratuity", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellGratuity.HorizontalAlignment = 0;
                            cellGratuity.Colspan = 1;
                            //cellGratuity.MinimumHeight = 20;
                            tableEarnings.AddCell(cellGratuity);


                            PdfPCell cellGratuity11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellGratuity11.HorizontalAlignment = 2;
                            cellGratuity11.Colspan = 1;
                            tableEarnings.AddCell(cellGratuity11);


                            PdfPCell cellGratuity1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellGratuity1.HorizontalAlignment = 2;
                            cellGratuity1.Colspan = 1;
                            tableEarnings.AddCell(cellGratuity1);
                        }



                        forConvert = Convert.ToSingle(dt.Rows[i]["CCA"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdCCA"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellCCA = new PdfPCell(new Phrase("CCA", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellCCA.HorizontalAlignment = 0;
                            cellCCA.Colspan = 1;
                            //cellCCA.MinimumHeight = 20;
                            tableEarnings.AddCell(cellCCA);


                            PdfPCell cellCCA11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellCCA11.HorizontalAlignment = 2;
                            cellCCA11.Colspan = 1;
                            //cellCCA11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellCCA11);


                            PdfPCell cellCCA1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellCCA1.HorizontalAlignment = 2;
                            cellCCA1.Colspan = 1;
                            //cellCCA1.MinimumHeight = 20;
                            tableEarnings.AddCell(cellCCA1);
                        }

                        //forConvert = Convert.ToSingle(dt.Rows[i]["OTAmt"].ToString());
                        //if (forConvert > 0)
                        //{
                        //    PdfPCell cellOT = new PdfPCell(new Phrase("OT Allowance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellOT.HorizontalAlignment = 0;
                        //    cellOT.Colspan = 1;
                        //    cellOT.MinimumHeight = 20;
                        //    tableEarnings.AddCell(cellOT);


                        //    PdfPCell cellOT1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        //    cellOT1.HorizontalAlignment = 2;
                        //    cellOT1.Colspan = 1;
                        //    tableEarnings.AddCell(cellOT1);
                        //}

                        forConvert = Convert.ToSingle(dt.Rows[i]["Nhsamt"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["tempgross"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellNHSAmt = new PdfPCell(new Phrase("NHS Amount", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellNHSAmt.HorizontalAlignment = 0;
                            cellNHSAmt.Colspan = 1;
                            //cellNHSAmt.MinimumHeight = 20;
                            tableEarnings.AddCell(cellNHSAmt);


                            PdfPCell cellNHSAmt11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellNHSAmt11.HorizontalAlignment = 2;
                            cellNHSAmt11.Colspan = 1;
                            //cellNHSAmt11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellNHSAmt11);


                            PdfPCell cellNHSAmt1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellNHSAmt1.HorizontalAlignment = 2;
                            cellNHSAmt1.Colspan = 1;
                            //cellNHSAmt1.MinimumHeight = 20;
                            tableEarnings.AddCell(cellNHSAmt1);
                        }



                        ///nhs,Wo 've same components in contractdetailssw
                        forConvert = Convert.ToSingle(dt.Rows[i]["WOAmt"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["tempgross"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellWOAmt = new PdfPCell(new Phrase("WO Amt", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellWOAmt.HorizontalAlignment = 0;
                            cellWOAmt.Colspan = 1;
                            //cellWOAmt.MinimumHeight = 20;
                            tableEarnings.AddCell(cellWOAmt);

                            PdfPCell cellWOAmt11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellWOAmt11.HorizontalAlignment = 2;
                            cellWOAmt11.Colspan = 1;
                            //cellWOAmt11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellWOAmt11);


                            PdfPCell cellWOAmt1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellWOAmt1.HorizontalAlignment = 2;
                            cellWOAmt1.Colspan = 1;
                            //cellWOAmt1.MinimumHeight = 20;
                            tableEarnings.AddCell(cellWOAmt1);
                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["Nfhs"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["cdNFhs"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellNFHSAmt = new PdfPCell(new Phrase("NFHS Amt", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellNFHSAmt.HorizontalAlignment = 0;
                            cellNFHSAmt.Colspan = 1;
                            //cellNFHSAmt.MinimumHeight = 20;
                            tableEarnings.AddCell(cellNFHSAmt);

                            PdfPCell cellNFHSAmt11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellNFHSAmt11.HorizontalAlignment = 2;
                            cellNFHSAmt11.Colspan = 1;
                            //cellNFHSAmt11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellNFHSAmt11);


                            PdfPCell cellNFHSAmt1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellNFHSAmt1.HorizontalAlignment = 2;
                            cellNFHSAmt1.Colspan = 1;
                            //cellNFHSAmt1.MinimumHeight = 20;
                            tableEarnings.AddCell(cellNFHSAmt1);
                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["npotsamt"].ToString());
                        forConvert1 = Convert.ToSingle(dt.Rows[i]["tempgross"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellSplDutiesAmt = new PdfPCell(new Phrase("Spl Duties Amt", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellSplDutiesAmt.HorizontalAlignment = 0;
                            cellSplDutiesAmt.Colspan = 1;
                            //cellSplDutiesAmt.MinimumHeight = 20;
                            tableEarnings.AddCell(cellSplDutiesAmt);

                            PdfPCell cellSplDutiesAmt11 = new PdfPCell(new Phrase(forConvert1.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellSplDutiesAmt11.HorizontalAlignment = 2;
                            cellSplDutiesAmt11.Colspan = 1;
                            //cellSplDutiesAmt11.MinimumHeight = 20;
                            tableEarnings.AddCell(cellSplDutiesAmt11);


                            PdfPCell cellSplDutiesAmt1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellSplDutiesAmt1.HorizontalAlignment = 2;
                            cellSplDutiesAmt1.Colspan = 1;
                            //cellSplDutiesAmt1.MinimumHeight = 20;
                            tableEarnings.AddCell(cellSplDutiesAmt1);
                        }




                        PdfPCell ChildTable1 = new PdfPCell(tableEarnings);
                        ChildTable1.Colspan = 3;
                        ChildTable1.BorderWidthLeft = 0;
                        ChildTable1.BorderWidthRight = 0;
                        ChildTable1.BorderWidthLeft = 0;
                        ChildTable1.BorderWidthLeft = 0;
                        tablewageslip.AddCell(ChildTable1);



                        PdfPTable tableDeductions = new PdfPTable(2);
                        tableDeductions.TotalWidth = 220;
                        tableDeductions.LockedWidth = true;
                        float[] width2 = new float[] { 2f, 2f };
                        tableDeductions.SetWidths(width2);


                        PdfPCell cellHead11 = new PdfPCell(new Phrase("Deductions", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellHead11.HorizontalAlignment = 1;
                        cellHead11.Colspan = 1;
                        cellHead11.MinimumHeight = 20;
                        cellHead11.BackgroundColor = color;
                        tableDeductions.AddCell(cellHead11);


                        PdfPCell cellHead12 = new PdfPCell(new Phrase("Amount", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellHead12.HorizontalAlignment = 1;
                        cellHead12.Colspan = 1;
                        cellHead12.BackgroundColor = color;
                        tableDeductions.AddCell(cellHead12);

                        forConvert = Convert.ToSingle(dt.Rows[i]["PF"].ToString());
                        if (forConvert > 0)
                        {

                            PdfPCell cellPF2 = new PdfPCell(new Phrase("Provident Fund", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellPF2.HorizontalAlignment = 0;
                            cellPF2.Colspan = 1;
                            //cellPF2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellPF2);


                            PdfPCell cellPF = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellPF.HorizontalAlignment = 2;
                            cellPF.Colspan = 1;
                            tableDeductions.AddCell(cellPF);
                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["ESI"].ToString());
                        if (forConvert > 0)
                        {

                            PdfPCell cellESI2 = new PdfPCell(new Phrase("ESI Contribution", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellESI2.HorizontalAlignment = 0;
                            cellESI2.Colspan = 1;
                            //cellESI2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellESI2);


                            PdfPCell cellESI3 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellESI3.HorizontalAlignment = 2;
                            cellESI3.Colspan = 1;
                            tableDeductions.AddCell(cellESI3);
                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell ccellHRA2 = new PdfPCell(new Phrase("Professional Tax", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            ccellHRA2.HorizontalAlignment = 0;
                            ccellHRA2.Colspan = 1;
                            //ccellHRA2.MinimumHeight = 20;
                            tableDeductions.AddCell(ccellHRA2);


                            PdfPCell ccellHRA3 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            ccellHRA3.HorizontalAlignment = 2;
                            ccellHRA3.Colspan = 1;
                            tableDeductions.AddCell(ccellHRA3);
                        }



                        forConvert = Convert.ToSingle(dt.Rows[i]["TDS"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellTDS2 = new PdfPCell(new Phrase("TDS", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellTDS2.HorizontalAlignment = 0;
                            cellTDS2.Colspan = 1;
                            //cellTDS2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellTDS2);


                            PdfPCell cellTDS3 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellTDS3.HorizontalAlignment = 2;
                            cellTDS3.Colspan = 1;
                            tableDeductions.AddCell(cellTDS3);
                        }


                        forConvert = 0;

                        if (forConvert > 0)
                        {
                            PdfPCell cellAdvances2 = new PdfPCell(new Phrase("Advances", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellAdvances2.HorizontalAlignment = 0;
                            cellAdvances2.Colspan = 1;
                            //cellAdvances2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellAdvances2);


                            PdfPCell cellAdvances3 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellAdvances3.HorizontalAlignment = 2;
                            cellAdvances3.Colspan = 1;
                            tableDeductions.AddCell(cellAdvances3);

                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["Fines"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellFines2 = new PdfPCell(new Phrase("Fines/Damage", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellFines2.HorizontalAlignment = 0;
                            cellFines2.Colspan = 1;
                            cellFines2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellFines2);


                            PdfPCell cellFines3 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellFines3.HorizontalAlignment = 2;
                            cellFines3.Colspan = 1;
                            tableDeductions.AddCell(cellFines3);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell celluniformded = new PdfPCell(new Phrase("Uniform", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            celluniformded.HorizontalAlignment = 0;
                            celluniformded.Colspan = 1;
                            // celluniformded.MinimumHeight = 20;
                            tableDeductions.AddCell(celluniformded);


                            PdfPCell celluniformded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            celluniformded1.HorizontalAlignment = 2;
                            celluniformded1.Colspan = 1;
                            tableDeductions.AddCell(celluniformded1);

                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellsaladvded = new PdfPCell(new Phrase("Salary Advance", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellsaladvded.HorizontalAlignment = 0;
                            cellsaladvded.Colspan = 1;
                            //cellsaladvded.MinimumHeight = 20;
                            tableDeductions.AddCell(cellsaladvded);


                            PdfPCell cellsaladvded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellsaladvded1.HorizontalAlignment = 2;
                            cellsaladvded1.Colspan = 1;
                            tableDeductions.AddCell(cellsaladvded1);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["BankFeesDed"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell celltrngfeeded = new PdfPCell(new Phrase("Bank Charges", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            celltrngfeeded.HorizontalAlignment = 0;
                            celltrngfeeded.Colspan = 1;
                            //celltrngfeeded.MinimumHeight = 20;
                            tableDeductions.AddCell(celltrngfeeded);


                            PdfPCell celltrngfeeded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            celltrngfeeded1.HorizontalAlignment = 2;
                            celltrngfeeded1.Colspan = 1;
                            tableDeductions.AddCell(celltrngfeeded1);

                        }




                        forConvert = Convert.ToSingle(dt.Rows[i]["PoliceVerfDed"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellbnkfeeded = new PdfPCell(new Phrase("Police Verf Fee", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbnkfeeded.HorizontalAlignment = 0;
                            cellbnkfeeded.Colspan = 1;
                            //cellbnkfeeded.MinimumHeight = 20;
                            tableDeductions.AddCell(cellbnkfeeded);


                            PdfPCell cellbnkfeeded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellbnkfeeded1.HorizontalAlignment = 2;
                            cellbnkfeeded1.Colspan = 1;
                            tableDeductions.AddCell(cellbnkfeeded1);

                        }


                        forConvert = Convert.ToSingle(dt.Rows[i]["FireChargeDed"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellbnkfeeded = new PdfPCell(new Phrase("Fire Charges", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellbnkfeeded.HorizontalAlignment = 0;
                            cellbnkfeeded.Colspan = 1;
                            //cellbnkfeeded.MinimumHeight = 20;
                            tableDeductions.AddCell(cellbnkfeeded);


                            PdfPCell cellbnkfeeded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellbnkfeeded1.HorizontalAlignment = 2;
                            cellbnkfeeded1.Colspan = 1;
                            tableDeductions.AddCell(cellbnkfeeded1);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["SecurityDepositDed"].ToString());

                        if (forConvert > 0)
                        {
                            PdfPCell cellsecdepded = new PdfPCell(new Phrase("Security Deposit", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellsecdepded.HorizontalAlignment = 0;
                            cellsecdepded.Colspan = 1;
                            //cellsecdepded.MinimumHeight = 20;
                            tableDeductions.AddCell(cellsecdepded);


                            PdfPCell cellsecdepded1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellsecdepded1.HorizontalAlignment = 2;
                            cellsecdepded1.Colspan = 1;
                            tableDeductions.AddCell(cellsecdepded1);

                        }
                        forConvert = Convert.ToSingle(dt.Rows[i]["OtherDedn"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellOtherDed = new PdfPCell(new Phrase("Other Deductions", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellOtherDed.HorizontalAlignment = 0;
                            cellOtherDed.Colspan = 1;
                            //cellOtherDed.MinimumHeight = 20;
                            tableDeductions.AddCell(cellOtherDed);


                            PdfPCell cellOtherDed1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellOtherDed1.HorizontalAlignment = 2;
                            cellOtherDed1.Colspan = 1;
                            tableDeductions.AddCell(cellOtherDed1);

                        }


                        //OWF or SBS
                        forConvert = Convert.ToSingle(dt.Rows[i]["owf"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellSBS = new PdfPCell(new Phrase("Lab. Welfare Fund", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellSBS.HorizontalAlignment = 0;
                            cellSBS.Colspan = 1;
                            //cellSBS.MinimumHeight = 20;
                            tableDeductions.AddCell(cellSBS);


                            PdfPCell cellSBS1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellSBS1.HorizontalAlignment = 2;
                            cellSBS1.Colspan = 1;
                            tableDeductions.AddCell(cellSBS1);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["TDS"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellempty2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellempty2.HorizontalAlignment = 0;
                            cellempty2.Colspan = 1;
                            //cellempty2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellempty2);


                            PdfPCell cellempty3 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellempty3.HorizontalAlignment = 2;
                            cellempty3.Colspan = 1;
                            tableDeductions.AddCell(cellempty3);

                        }

                        forConvert = Convert.ToSingle(dt.Rows[i]["PFESIContribution"].ToString());
                        if (forConvert > 0)
                        {
                            PdfPCell cellPFESIContribution = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                            cellPFESIContribution.HorizontalAlignment = 0;
                            cellPFESIContribution.Colspan = 1;
                            //cellempty2.MinimumHeight = 20;
                            tableDeductions.AddCell(cellPFESIContribution);


                            PdfPCell cellPFESIContribution2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                            cellPFESIContribution2.HorizontalAlignment = 2;
                            cellPFESIContribution2.Colspan = 1;
                            tableDeductions.AddCell(cellPFESIContribution2);

                        }



                        PdfPCell ChildTable2 = new PdfPCell(tableDeductions);
                        ChildTable2.Colspan = 2;
                        ChildTable2.BorderWidthLeft = 0;
                        ChildTable2.BorderWidthRight = 0;
                        ChildTable2.BorderWidthLeft = 0;
                        ChildTable2.BorderWidthLeft = 0;
                        tablewageslip.AddCell(ChildTable2);



                        PdfPCell cellIncentives = new PdfPCell(new Phrase("Gross", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellIncentives.HorizontalAlignment = 0;
                        cellIncentives.Colspan = 1;
                        //cellIncentives.MinimumHeight = 20;
                        tablewageslip.AddCell(cellIncentives);

                        //forConvert1 = Convert.ToSingle(dt.Rows[i]["otrate"].ToString());
                        PdfPCell cellotrate11 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellotrate11.HorizontalAlignment = 2;
                        cellotrate11.Colspan = 1;
                        //cellIncentives11.MinimumHeight = 20;
                        tablewageslip.AddCell(cellotrate11);

                        forConvert = Convert.ToSingle(dt.Rows[i]["GrossAmt"].ToString());
                        PdfPCell cellotamt1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellotamt1.HorizontalAlignment = 2;
                        cellotamt1.Colspan = 1;
                        tablewageslip.AddCell(cellotamt1);


                        PdfPCell cellTotalDed = new PdfPCell(new Phrase("Total Deductions", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellTotalDed.HorizontalAlignment = 0;
                        cellTotalDed.Colspan = 1;
                        tablewageslip.AddCell(cellTotalDed);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Deductions"].ToString());
                        PdfPCell cellTotalDed1 = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellTotalDed1.HorizontalAlignment = 2;
                        cellTotalDed1.Colspan = 1;
                        tablewageslip.AddCell(cellTotalDed1);






                        PdfPCell cellTotal = new PdfPCell(new Phrase("Grand Total  ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellTotal.HorizontalAlignment = 0;
                        cellTotal.Colspan = 1;
                        // cellTotal.MinimumHeight = 20;
                        tablewageslip.AddCell(cellTotal);

                        PdfPCell cellTotal11 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellTotal11.HorizontalAlignment = 2;
                        cellTotal11.Colspan = 1;
                        //cellTotal11.MinimumHeight = 20;
                        tablewageslip.AddCell(cellTotal11);

                        //forConvert = Convert.ToSingle(dt.Rows[i]["netamount"].ToString());
                        forConvert = Convert.ToSingle(dt.Rows[i]["GrossAmt"].ToString());
                        forConvert = forConvert - Convert.ToSingle(dt.Rows[i]["Deductions"].ToString());
                        string gtotal = NumberToEnglish.Instance.changeNumericToWords(forConvert.ToString("#"));

                        PdfPCell cellTotal1 = new PdfPCell(new Phrase("Rs. " + forConvert.ToString("0.00"), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellTotal1.HorizontalAlignment = 2;
                        cellTotal1.Colspan = 1;
                        tablewageslip.AddCell(cellTotal1);

                        PdfPCell cellEmptycell = new PdfPCell(new Phrase("  ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellEmptycell.HorizontalAlignment = 0;
                        cellEmptycell.Colspan = 2;
                        //cellIncentives.MinimumHeight = 20;
                        tablewageslip.AddCell(cellEmptycell);




                        PdfPCell cellInWords = new PdfPCell(new Phrase("Rupees in Words " + gtotal.Trim(), FontFactory.GetFont(fontsyle, Fontsize, Font.BOLDITALIC, BaseColor.BLACK)));
                        cellInWords.HorizontalAlignment = 0;
                        cellInWords.Colspan = 5;
                        cellInWords.Border = 0;
                        tablewageslip.AddCell(cellInWords);


                        PdfPCell cellemptycell = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                        cellemptycell.HorizontalAlignment = 0;
                        cellemptycell.Colspan = 5;
                        cellemptycell.BorderWidthLeft = 0;
                        cellemptycell.BorderWidthRight = 0;
                        cellemptycell.BorderWidthTop = 0;
                        cellemptycell.BorderWidthBottom = .5f;
                        tablewageslip.AddCell(cellemptycell);

                        PdfPCell cellcmnyadd1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize + 2, Font.NORMAL, BaseColor.BLACK)));
                        cellcmnyadd1.HorizontalAlignment = 2;
                        cellcmnyadd1.Colspan = 5;
                        cellcmnyadd1.MinimumHeight = 10;
                        cellcmnyadd1.Border = 0;
                        cellcmnyadd1.PaddingBottom = 10;
                        tablewageslip.AddCell(cellcmnyadd1);

                        PdfPCell companyname1 = new PdfPCell(new Phrase("Employee Signature  ", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        companyname1.HorizontalAlignment = 0;
                        companyname1.Colspan = 2;
                        companyname1.Border = 0;
                        companyname1.PaddingTop = 50;
                        tablewageslip.AddCell(companyname1);



                        PdfPCell cellsignature = new PdfPCell(new Phrase("Employer Seal & Sign", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        cellsignature.HorizontalAlignment = 2;
                        cellsignature.Colspan = 3;
                        cellsignature.Border = 0;
                        cellsignature.PaddingTop = 50;
                        tablewageslip.AddCell(cellsignature);

                        PdfPCell mt = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
                        mt.HorizontalAlignment = 0;
                        mt.Colspan = 5;
                        mt.Border = 0;
                        mt.PaddingTop = 20;
                        //tablewageslip.AddCell(mt);

                        document.Add(tablewageslip);

                        slipsCount++;
                        if (slipsCount == 2)
                        {
                            slipsCount = 0;
                            document.NewPage();
                        }



                        #endregion Basic Information of the Employee

                    }
                }

                string filename = ddlcname.SelectedItem.Text + "/WageSlips for-" + GetMonthName() + " -" + GetMonthOfYear() + ".pdf";

                document.Close();
                Response.ContentType = "application/pdf";
                Response.AddHeader("content-disposition", "attachment;filename= " + filename);
                Response.Buffer = true;
                Response.Clear();
                Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                Response.OutputStream.Flush();
                Response.End();

            }

        }

        protected void btnEmployeeWageSlip_Click(object sender, EventArgs e)
        {

            if (ddlClients.SelectedIndex <= 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
                return;
            }

            var formatInfoinfo = new DateTimeFormatInfo();
            string[] monthName = formatInfoinfo.MonthNames;
            int payMonth = GetMonth(ddlmonth.SelectedValue);
            //int month = GetMonthAndYear();
            int month = GetMonthBasedOnSelectionDateorMonth();
            string selectmonth = string.Empty;
            if (ddlnoofattendance.SelectedIndex == 0)
            {

                selectmonth = "select Eps.EmpId,Designations.design as Desgn,TempGross as salaryrate,  Eps.NoOfDuties,Eps.WO,Eps.NHS,Eps.Basic,Eps.DA,Eps.Bonus," +
                    "  Eps.HRA,Eps.CCA,Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,(Eps.RC+Eps.CS+Eps.PLAmount+Eps.Incentivs) as Others,Eps.LeaveEncashAmt,Eps.Woamt,Eps.NhsAmt,Eps.Nfhs,Eps.Gratuity,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax," +
                  "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.SecurityDepDed,(Eps.Penalty+Eps.OtherDed+Eps.Mobilededn+Eps.OWF) as OtherDedn,Eps.OWF,Eps.Gross,Eps.TotalDeductions as Deductions,Eps.ActualAmount, " +
                  "  Eps.OWF, (EmpDetails.Empfname +' ' + EmpDetails.EmpMname + ' ' + EmpDetails.emplname) as EmpmName ,CONVERT(VARCHAR(10),isnull( EmpDetails.EmpDtofJoining,'01/01/1900'), 104) as  EmpDtofJoining," +
                  "EmpDetails.UnitId, EmpDetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT,ISNULL(Eps.PFESIContribution,0) as PFESIContribution   from EmpPaySheet as Eps " +
                  " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN Designations ON Designations.designid=Eps.desgn INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND" +

                  " EmpAttendance.ClientId=Eps.ClientId  AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
                  ddlClients.SelectedValue + "' and  EmpAttendance.Design=Eps.Desgn AND Eps.Month=" + month;
            }
            if (ddlnoofattendance.SelectedIndex == 1)
            {
                selectmonth = "select Eps.EmpId,Designations.design as Desgn,TempGross as salaryrate,  Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.Bonus,Eps.Incentivs," +
                    "  Eps.HRA,Eps.CCA,Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax," +
                  "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.SecurityDepDed,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.TotalDeductions as Deductions,Eps.ActualAmount, " +
                  "  Eps.OWF, (EmpDetails.Empfname +' ' + EmpDetails.EmpMname + ' ' + EmpDetails.emplname) as EmpmName , CONVERT(VARCHAR(10),isnull( EmpDetails.EmpDtofJoining,'01/01/1900'), 104) as  EmpDtofJoining," +
                  "EmpDetails.UnitId, EmpDetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT,ISNULL(Eps.PFESIContribution,0) as PFESIContribution  from EmpPaySheet as Eps " +
                  " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN Designations ON Designations.designid=Eps.desgn INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND" +

                  " EmpAttendance.ClientId=Eps.ClientId  and  Eps.NoofDuties>10 AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
                  ddlClients.SelectedValue + "' and  EmpAttendance.Design=Eps.Desgn AND Eps.Month=" + month;
            }


            if (ddlnoofattendance.SelectedIndex == 2)
            {
                selectmonth = "select Eps.EmpId,Eps.Desgn,TempGross as salaryrate,  Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.Bonus,Eps.Incentivs," +
                    "  Eps.HRA,Eps.CCA,Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax," +
                  "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.SecurityDepDed,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.TotalDeductions as Deductions,Eps.ActualAmount, " +
                  "  Eps.OWF, (EmpDetails.Empfname +' ' + EmpDetails.EmpMname + ' ' + EmpDetails.emplname) as EmpmName ,CONVERT(VARCHAR(10),isnull( EmpDetails.EmpDtofJoining,'01/01/1900'), 104) as  EmpDtofJoining," +
                  "EmpDetails.UnitId, EmpDetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT,ISNULL(Eps.PFESIContribution,0) as PFESIContribution  from EmpPaySheet as Eps " +
                  " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND " +
                  " EmpAttendance.ClientId=Eps.ClientId   AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
                  ddlClients.SelectedValue + "' and  EmpAttendance.Design=Eps.Desgn AND Eps.Month=" + month;
            }


            DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(selectmonth).Result;
            MemoryStream ms = new MemoryStream();
            if (dt.Rows.Count > 0)
            {
                Document document = new Document(PageSize.LEGAL);
                PdfWriter writer = PdfWriter.GetInstance(document, ms);
                document.Open();
                document.AddTitle("FaMS");
                document.AddAuthor("DIYOS");
                document.AddSubject("Wage Slips");
                document.AddKeywords("Keyword1, keyword2, …");//
                string strQry = "Select * from CompanyInfo  where   ClientidPrefix='" + CmpIDPrefix + "'";
                DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                string companyName = "Your Company Name";
                string companyAddress = "Your Company Address";
                if (compInfo.Rows.Count > 0)
                {
                    companyName = compInfo.Rows[0]["CompanyName"].ToString();
                    companyAddress = compInfo.Rows[0]["Address"].ToString();
                }
                float forConvert = 0;
                int slipsCount = 0;
                bool hasPages = false;
                for (int i = 0, j = 0; i < dt.Rows.Count; i++)
                {
                    if (dt.Rows[i]["ActualAmount"].ToString().Trim().Length > 0)
                        forConvert = Convert.ToSingle(dt.Rows[i]["ActualAmount"].ToString());
                    if (forConvert > 0)
                    {
                        hasPages = true;
                        strQry = "Select p.EmpEpfNo,e.EmpESINo from EMPESICodes AS e INNER JOIN EMPEPFCodes as p ON e.Empid = p.Empid AND e.Empid='" + dt.Rows[i]["EmpId"].ToString() + "'";
                        string pfNo = "";
                        string esiNo = "";
                        DataTable PfTable = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                        if (PfTable.Rows.Count > 0)
                        {
                            pfNo = PfTable.Rows[0]["EmpEpfNo"].ToString();
                            esiNo = PfTable.Rows[0]["EmpESINo"].ToString();
                        }
                        PdfPTable Maintable = new PdfPTable(2);
                        Maintable.TotalWidth = 500f;
                        Maintable.LockedWidth = true;
                        float[] width = new float[] { 2f, 2f };
                        Maintable.SetWidths(width);
                        uint FONT_SIZE = 8;
                        #region  Table Headings

                        PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
                        cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        cellemp.Colspan = 2;
                        cellemp.Border = 0;

                        PdfPCell Heading = new PdfPCell(new Phrase("Form-XIV\n(see Rule 76)\nEmployment-cum-Wage Card", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
                        Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Heading.Colspan = 2;
                        Heading.Border = 3;// 15;
                        Maintable.AddCell(Heading);

                        PdfPCell employerName = new PdfPCell(new Phrase("Employer Name : " + companyName, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        employerName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        employerName.Border = 1;
                        Maintable.AddCell(employerName);

                        PdfPCell payMonthCell = new PdfPCell(new Phrase("For the Month of  : " + monthName[payMonth - 1].ToString() + "-" + DateTime.Now.Year.ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        payMonthCell.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        payMonthCell.Border = 0;
                        Maintable.AddCell(payMonthCell);

                        PdfPCell employerAddress = new PdfPCell(new Phrase("Employer Address :" + companyAddress, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        employerAddress.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        employerAddress.Border = 0;
                        //employerAddress.Colspan = 2;
                        Maintable.AddCell(employerAddress);

                        PdfPCell PfNo = new PdfPCell(new Phrase("PF No.  : " + pfNo, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        PfNo.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        PfNo.Border = 0;
                        Maintable.AddCell(PfNo);

                        PdfPCell UnitID = new PdfPCell(new Phrase("Unit Name  : " + ddlcname.SelectedItem/*dt.Rows[i]["UnitId"].ToString()*/, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        UnitID.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        UnitID.Border = 0;
                        Maintable.AddCell(UnitID);

                        PdfPCell ESINo = new PdfPCell(new Phrase("ESI No.  : " + esiNo, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        ESINo.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        ESINo.Border = 0;
                        Maintable.AddCell(ESINo);

                        PdfPCell EmpId = new PdfPCell(new Phrase("SI.No. in the register of workman employed: " + " \nEmp Code  : " + dt.Rows[i]["EmpId"].ToString() + "     " + "Date of entry into service : " + dt.Rows[i]["EmpDtofJoining"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        EmpId.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        EmpId.Border = 0;
                        Maintable.AddCell(EmpId);

                        PdfPCell AccountNo = new PdfPCell(new Phrase("Bank Acc no.  : " + dt.Rows[i]["EmpBankAcNo"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        AccountNo.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        AccountNo.Border = 0;
                        Maintable.AddCell(AccountNo);

                        PdfPCell EmpName = new PdfPCell(new Phrase("Emp Name  : " + dt.Rows[i]["EmpmName"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        EmpName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        EmpName.Border = 2;
                        Maintable.AddCell(EmpName);

                        PdfPCell design = new PdfPCell(new Phrase("Designation  : " + dt.Rows[i]["Desgn"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        design.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        design.Border = 2;
                        Maintable.AddCell(design);
                        //Maintable.AddCell(cellemp);
                        document.Add(Maintable);
                        #endregion

                        #region Table Data

                        PdfPTable DetailsTable = new PdfPTable(6);
                        DetailsTable.TotalWidth = 500f;
                        DetailsTable.LockedWidth = true;
                        float[] DetailsWidth = new float[] { 1f, 1f, 1f, 1f, 1f, 1f };
                        DetailsTable.SetWidths(DetailsWidth);
                        //Row one
                        //PdfPCell totHours = new PdfPCell(new Phrase("Total Hrs  : " + "-", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        //totHours.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //totHours.Border = 0;
                        //DetailsTable.AddCell(totHours);
                        forConvert = Convert.ToSingle(dt.Rows[i]["salaryrate"].ToString());
                        PdfPCell salrate = new PdfPCell(new Phrase("Salary rate: " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        salrate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        salrate.Border = 0;
                        DetailsTable.AddCell(salrate);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Basic"].ToString());
                        PdfPCell CBasic = new PdfPCell(new Phrase("Basic  : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CBasic.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CBasic.Border = 0;
                        DetailsTable.AddCell(CBasic);

                        forConvert = Convert.ToSingle(dt.Rows[i]["WashAllowance"].ToString());
                        PdfPCell CWA = new PdfPCell(new Phrase("WA    : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CWA.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CWA.Border = 0;
                        DetailsTable.AddCell(CWA);


                        forConvert = Convert.ToSingle(dt.Rows[i]["Bonus"].ToString());
                        PdfPCell CBonus = new PdfPCell(new Phrase("Bonus        : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CBonus.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CBonus.Border = 0;
                        DetailsTable.AddCell(CBonus);

                        forConvert = Convert.ToSingle(dt.Rows[i]["PF"].ToString());
                        PdfPCell CPF = new PdfPCell(new Phrase("PF      : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CPF.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CPF.Border = 0;
                        DetailsTable.AddCell(CPF);


                        forConvert = Convert.ToSingle(dt.Rows[i]["CanteenAdv"].ToString());
                        PdfPCell COWFDed = new PdfPCell(new Phrase("Mess Ded. : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        COWFDed.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        COWFDed.Border = 0;
                        DetailsTable.AddCell(COWFDed);


                        //Row Two
                        float noofduties = float.Parse(dt.Rows[i]["NoOfDuties"].ToString());
                        PdfPCell CDuties = new PdfPCell(new Phrase("Duties       : " + dt.Rows[i]["NoOfDuties"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CDuties.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CDuties.Border = 0;
                        DetailsTable.AddCell(CDuties);

                        forConvert = Convert.ToSingle(dt.Rows[i]["DA"].ToString());
                        PdfPCell CDA = new PdfPCell(new Phrase("DA     : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CDA.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CDA.Border = 0;
                        DetailsTable.AddCell(CDA);

                        forConvert = Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString());
                        PdfPCell CAllowance = new PdfPCell(new Phrase("Allowance : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CAllowance.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CAllowance.Border = 0;
                        DetailsTable.AddCell(CAllowance);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Gratuity"].ToString());
                        PdfPCell CGratuity = new PdfPCell(new Phrase("Gratuity     : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CGratuity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CGratuity.Border = 0;
                        DetailsTable.AddCell(CGratuity);

                        forConvert = Convert.ToSingle(dt.Rows[i]["ESI"].ToString());
                        PdfPCell CESI = new PdfPCell(new Phrase("ESI     : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CESI.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CESI.Border = 0;
                        DetailsTable.AddCell(CESI);

                        forConvert = Convert.ToSingle(dt.Rows[i]["OtherDedn"].ToString());
                        PdfPCell COtherDed = new PdfPCell(new Phrase("Other Ded  : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        COtherDed.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        COtherDed.Border = 0; //2 = BOTTOM BORDER
                        DetailsTable.AddCell(COtherDed);

                        //Row Three
                        float noofots = Convert.ToSingle(dt.Rows[i]["OT"].ToString());
                        forConvert = Convert.ToSingle(dt.Rows[i]["OT"].ToString());
                        PdfPCell COT = new PdfPCell(new Phrase("OT            : " + forConvert.ToString(""), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        COT.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        COT.Border = 0;
                        DetailsTable.AddCell(COT);



                        forConvert = Convert.ToSingle(dt.Rows[i]["HRA"].ToString());
                        PdfPCell CHRA = new PdfPCell(new Phrase("HRA   : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CHRA.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CHRA.Border = 0;
                        DetailsTable.AddCell(CHRA);

                        forConvert = Convert.ToSingle(dt.Rows[i]["OTAmt"].ToString());
                        PdfPCell COTAmt = new PdfPCell(new Phrase("OT Amt.   : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        COTAmt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        COTAmt.Border = 0;
                        DetailsTable.AddCell(COTAmt);

                        forConvert = Convert.ToSingle(dt.Rows[i]["LeaveEncashAmt"].ToString());
                        PdfPCell COWF = new PdfPCell(new Phrase("LA             :" + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        COWF.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        COWF.Border = 0;
                        DetailsTable.AddCell(COWF);

                        forConvert = Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString());
                        PdfPCell CPT = new PdfPCell(new Phrase("PT      : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CPT.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CPT.Border = 0;
                        DetailsTable.AddCell(CPT);


                        forConvert = Convert.ToSingle(dt.Rows[i]["Gross"].ToString());
                        forConvert = forConvert + Convert.ToSingle(dt.Rows[i]["OTAmt"].ToString());
                        PdfPCell CGross = new PdfPCell(new Phrase("Gross        : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CGross.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CGross.Border = 0;
                        DetailsTable.AddCell(CGross);

                        forConvert = Convert.ToSingle(dt.Rows[i]["WO"].ToString());
                        PdfPCell CLeaves = new PdfPCell(new Phrase("WO          : " + forConvert.ToString(""), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CLeaves.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CLeaves.Border = 0;
                        DetailsTable.AddCell(CLeaves);

                        forConvert = Convert.ToSingle(dt.Rows[i]["CCA"].ToString());
                        PdfPCell CCCA = new PdfPCell(new Phrase("CCA   : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CCCA.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CCCA.Border = 0;
                        DetailsTable.AddCell(CCCA);

                        forConvert = Convert.ToSingle(dt.Rows[i]["WOAmt"].ToString());
                        PdfPCell CNFHAmt = new PdfPCell(new Phrase("WO Amt  : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CNFHAmt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CNFHAmt.Border = 0;
                        DetailsTable.AddCell(CNFHAmt);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Others"].ToString());
                        PdfPCell CWOAmt = new PdfPCell(new Phrase("Others       :  " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CWOAmt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CWOAmt.Border = 0;
                        DetailsTable.AddCell(CWOAmt);


                        forConvert = 0;
                        if (dt.Rows[i]["SalAdvDed"].ToString().Length > 0)
                        {
                            forConvert = Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString());
                        }
                        PdfPCell CSalAdv = new PdfPCell(new Phrase("Sal. Adv    : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CSalAdv.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CSalAdv.Border = 0;
                        DetailsTable.AddCell(CSalAdv);


                        forConvert = Convert.ToSingle(dt.Rows[i]["NHS"].ToString());
                        PdfPCell CNFH = new PdfPCell(new Phrase("NHS         : " + forConvert.ToString(""), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CNFH.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CNFH.Border = 2;
                        DetailsTable.AddCell(CNFH);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString());
                        PdfPCell CConv = new PdfPCell(new Phrase("Conv.  : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CConv.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CConv.Border = 2;
                        DetailsTable.AddCell(CConv);


                        forConvert = Convert.ToSingle(dt.Rows[i]["Nhsamt"].ToString());
                        PdfPCell CCLPL = new PdfPCell(new Phrase("NHS Amt  : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CCLPL.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CCLPL.Border = 2;
                        DetailsTable.AddCell(CCLPL);


                        forConvert = Convert.ToSingle(dt.Rows[i]["Nfhs"].ToString());
                        PdfPCell CRegFee = new PdfPCell(new Phrase("NFH Amt    : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CRegFee.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CRegFee.Border = 2;
                        DetailsTable.AddCell(CRegFee);


                        forConvert = 0;
                        if (dt.Rows[i]["UniformDed"].ToString().Length > 0)
                        {
                            forConvert = Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString());
                        }
                        PdfPCell CUnifDed = new PdfPCell(new Phrase("Unif. Ded  : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CUnifDed.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CUnifDed.Border = 2;
                        DetailsTable.AddCell(CUnifDed);

                        forConvert = 0;
                        if (dt.Rows[i]["PFESIContribution"].ToString().Length > 0)
                        {
                            forConvert = Convert.ToSingle(dt.Rows[i]["PFESIContribution"].ToString());
                        }
                        PdfPCell CPFESIContribution = new PdfPCell(new Phrase("PF ESI Contribution  : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CPFESIContribution.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CPFESIContribution.Border = 2;
                        DetailsTable.AddCell(CPFESIContribution);


                        forConvert = Convert.ToSingle(dt.Rows[i]["Deductions"].ToString());
                        PdfPCell CTotDed = new PdfPCell(new Phrase("Total Ded : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CTotDed.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CTotDed.Border = 0;
                        DetailsTable.AddCell(CTotDed);

                        //PdfPCell CRegFee = new PdfPCell(new Phrase("Reg. Fee    : " + "-", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        //CRegFee.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //CRegFee.Border = 0;
                        //DetailsTable.AddCell(CRegFee);

                        forConvert = Convert.ToSingle(dt.Rows[i]["ActualAmount"].ToString());
                        PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay     : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CNetPay.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CNetPay.Border = 2;
                        DetailsTable.AddCell(CNetPay);
                        #endregion

                        DetailsTable.AddCell(cellemp);
                        PdfPCell CEmpty = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CEmpty.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CEmpty.Border = 0;
                        CEmpty.Colspan = 6;
                        DetailsTable.AddCell(CEmpty);

                        PdfPCell CAuthority = new PdfPCell(new Phrase("Authorised signatory ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CAuthority.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        CAuthority.Border = 0;
                        CAuthority.Colspan = 6;
                        DetailsTable.AddCell(CAuthority);

                        DetailsTable.AddCell(CEmpty);
                        //DetailsTable.AddCell(CEmpty);
                        // DetailsTable.AddCell(CEmpty);
                        // DetailsTable.AddCell(CEmpty);
                        //DetailsTable.AddCell(CEmpty);

                        document.Add(DetailsTable);
                        slipsCount++;
                        if (slipsCount == 4)
                        {
                            slipsCount = 0;
                            document.NewPage();
                        }
                    }
                }

                if (hasPages)
                {
                    document.Close();
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=Wage Slips.pdf");
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
            }
        }

        protected void btnEmployeeWageSliponlydts_Click(object sender, EventArgs e)
        {

            if (ddlClients.SelectedIndex <= 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
                return;
            }

            var formatInfoinfo = new DateTimeFormatInfo();
            string[] monthName = formatInfoinfo.MonthNames;
            int payMonth = GetMonth(ddlmonth.SelectedValue);
            //int month = GetMonthAndYear();
            int month = GetMonthBasedOnSelectionDateorMonth();
            string selectmonth = string.Empty;
            if (ddlnoofattendance.SelectedIndex == 0)
            {

                selectmonth = "select Eps.EmpId,Designations.design as Desgn,TempGross as salaryrate,  Eps.NoOfDuties,Eps.WO,Eps.NHS,Eps.Basic,Eps.DA,Eps.Bonus," +
                    "  Eps.HRA,Eps.CCA,Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,(Eps.RC+Eps.CS+Eps.PLAmount+Eps.Incentivs) as Others,Eps.LeaveEncashAmt,Eps.Woamt,Eps.NhsAmt,Eps.Nfhs,Eps.Gratuity,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax," +
                  "Eps.SalAdvDed,Eps.Pfonduties,Eps.Esionduties,Eps.PFONOT,Eps.ESIONOT,Eps.CanteenAdv,Eps.UniformDed,Eps.LoanDed,Eps.AdvDed,Eps.WCDed,Eps.SecDepDedn,(Eps.Penalty+Eps.OtherDed+Eps.Mobilededn+Eps.OWF) as OtherDedn,Eps.OWF,Eps.Gross,Eps.TotalDeductions as Deductions,Eps.ActualAmount, " +
                  "  Eps.OWF, (EmpDetails.Empfname +' ' + EmpDetails.EmpMname + ' ' + EmpDetails.emplname) as EmpmName ,CONVERT(VARCHAR(10),isnull( EmpDetails.EmpDtofJoining,'01/01/1900'), 104) as  EmpDtofJoining," +
                  "EmpDetails.UnitId, EmpDetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT,ISNULL(Eps.PFESIContribution,0) as PFESIContribution from EmpPaySheet as Eps " +
                  " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN Designations ON Designations.designid=Eps.desgn INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND" +

                  " EmpAttendance.ClientId=Eps.ClientId  AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
                  ddlClients.SelectedValue + "' and  EmpAttendance.Design=Eps.Desgn AND Eps.Month=" + month;
            }
            if (ddlnoofattendance.SelectedIndex == 1)
            {
                selectmonth = "select Eps.EmpId,Designations.design as Desgn,TempGross as salaryrate,  Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.Bonus,Eps.Incentivs," +
                    "  Eps.HRA,Eps.CCA,Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax," +
                  "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.LoanDed,Eps.AdvDed,Eps.WCDed,Eps.SecDepDedn,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.TotalDeductions as Deductions,Eps.ActualAmount, " +
                  "  Eps.OWF, (EmpDetails.Empfname +' ' + EmpDetails.EmpMname + ' ' + EmpDetails.emplname) as EmpmName ,CiONVERT(VARCHAR(10),isnull( EmpDetails.EmpDtofJoining,'01/01/1900'), 104) as  EmpDtofJoining," +
                  "EmpDetails.UnitId, EmpDetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT,ISNULL(Eps.PFESIContribution,0) as PFESIContribution from EmpPaySheet as Eps " +
                  " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN Designations ON Designations.designid=Eps.desgn INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND" +

                  " EmpAttendance.ClientId=Eps.ClientId  and  Eps.NoofDuties>10 AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
                  ddlClients.SelectedValue + "' and  EmpAttendance.Design=Eps.Desgn AND Eps.Month=" + month;
            }


            if (ddlnoofattendance.SelectedIndex == 2)
            {
                selectmonth = "select Eps.EmpId,Eps.Desgn,TempGross as salaryrate,  Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.Bonus,Eps.Incentivs," +
                    "  Eps.HRA,Eps.CCA,Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax," +
                  "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.LoanDed,Eps.AdvDed,Eps.WCDed,Eps.SecDepDedn,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.TotalDeductions as Deductions,Eps.ActualAmount, " +
                  "  Eps.OWF, (EmpDetails.Empfname +' ' + EmpDetails.EmpMname + ' ' + EmpDetails.emplname) as EmpmName ,CONVERT(VARCHAR(10),isnull( EmpDetails.EmpDtofJoining,'01/01/1900'), 104) as  EmpDtofJoining," +
                  "EmpDetails.UnitId, EmpDetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT,ISNULL(Eps.PFESIContribution,0) as PFESIContribution from EmpPaySheet as Eps " +
                  " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND " +
                  " EmpAttendance.ClientId=Eps.ClientId   AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
                  ddlClients.SelectedValue + "' and  EmpAttendance.Design=Eps.Desgn AND Eps.Month=" + month;
            }


            DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(selectmonth).Result;
            MemoryStream ms = new MemoryStream();
            if (dt.Rows.Count > 0)
            {
                Document document = new Document(PageSize.LEGAL);
                PdfWriter writer = PdfWriter.GetInstance(document, ms);
                document.Open();
                document.AddTitle("FaMS");
                document.AddAuthor("DIYOS");
                document.AddSubject("Wage Slips");
                document.AddKeywords("Keyword1, keyword2, …");//
                string strQry = "Select * from CompanyInfo  where   ClientidPrefix='" + CmpIDPrefix + "'";
                DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                string companyName = "Your Company Name";
                string companyAddress = "Your Company Address";
                if (compInfo.Rows.Count > 0)
                {
                    companyName = compInfo.Rows[0]["CompanyName"].ToString();
                    companyAddress = compInfo.Rows[0]["Address"].ToString();
                }
                float forConvert = 0;
                int slipsCount = 0;
                bool hasPages = false;
                for (int i = 0, j = 0; i < dt.Rows.Count; i++)
                {
                    if (dt.Rows[i]["ActualAmount"].ToString().Trim().Length > 0)
                        forConvert = Convert.ToSingle(dt.Rows[i]["ActualAmount"].ToString());
                    if (forConvert > 0)
                    {
                        hasPages = true;
                        strQry = "Select p.EmpEpfNo,e.EmpESINo from EMPESICodes AS e INNER JOIN EMPEPFCodes as p ON e.Empid = p.Empid AND e.Empid='" + dt.Rows[i]["EmpId"].ToString() + "'";
                        string pfNo = "";
                        string esiNo = "";
                        DataTable PfTable = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                        if (PfTable.Rows.Count > 0)
                        {
                            pfNo = PfTable.Rows[0]["EmpEpfNo"].ToString();
                            esiNo = PfTable.Rows[0]["EmpESINo"].ToString();
                        }
                        PdfPTable Maintable = new PdfPTable(2);
                        Maintable.TotalWidth = 500f;
                        Maintable.LockedWidth = true;
                        float[] width = new float[] { 2f, 2f };
                        Maintable.SetWidths(width);
                        uint FONT_SIZE = 8;
                        #region  Table Headings

                        PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
                        cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        cellemp.Colspan = 2;
                        cellemp.Border = 0;

                        PdfPCell Heading = new PdfPCell(new Phrase("Form-XIV\n(see Rule 76)\nEmployment-cum-Wage Card", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
                        Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Heading.Colspan = 2;
                        Heading.Border = 3;// 15;
                        Maintable.AddCell(Heading);

                        PdfPCell employerName = new PdfPCell(new Phrase("Employer Name : " + companyName, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        employerName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        employerName.Border = 1;
                        Maintable.AddCell(employerName);

                        PdfPCell payMonthCell = new PdfPCell(new Phrase("For the Month of  : " + monthName[payMonth - 1].ToString() + "-" + DateTime.Now.Year.ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        payMonthCell.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        payMonthCell.Border = 0;
                        Maintable.AddCell(payMonthCell);

                        PdfPCell employerAddress = new PdfPCell(new Phrase("Employer Address :" + companyAddress, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        employerAddress.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        employerAddress.Border = 0;
                        //employerAddress.Colspan = 2;
                        Maintable.AddCell(employerAddress);

                        PdfPCell PfNo = new PdfPCell(new Phrase("PF No.  : " + pfNo, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        PfNo.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        PfNo.Border = 0;
                        Maintable.AddCell(PfNo);

                        PdfPCell UnitID = new PdfPCell(new Phrase("Unit Name  : " + ddlcname.SelectedItem/*dt.Rows[i]["UnitId"].ToString()*/, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        UnitID.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        UnitID.Border = 0;
                        Maintable.AddCell(UnitID);

                        PdfPCell ESINo = new PdfPCell(new Phrase("ESI No.  : " + esiNo, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        ESINo.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        ESINo.Border = 0;
                        Maintable.AddCell(ESINo);

                        PdfPCell EmpId = new PdfPCell(new Phrase("SI.No. in the register of workman employed: " + " \nEmp Code  : " + dt.Rows[i]["EmpId"].ToString() + "     " + "Date of entry into service : " + dt.Rows[i]["EmpDtofJoining"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        EmpId.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        EmpId.Border = 0;
                        Maintable.AddCell(EmpId);

                        PdfPCell AccountNo = new PdfPCell(new Phrase("Bank Acc no.  : " + dt.Rows[i]["EmpBankAcNo"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        AccountNo.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        AccountNo.Border = 0;
                        Maintable.AddCell(AccountNo);

                        PdfPCell EmpName = new PdfPCell(new Phrase("Emp Name  : " + dt.Rows[i]["EmpmName"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        EmpName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        EmpName.Border = 2;
                        Maintable.AddCell(EmpName);

                        PdfPCell design = new PdfPCell(new Phrase("Designation  : " + dt.Rows[i]["Desgn"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        design.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        design.Border = 2;
                        Maintable.AddCell(design);
                        //Maintable.AddCell(cellemp);
                        document.Add(Maintable);
                        #endregion

                        #region Table Data

                        PdfPTable DetailsTable = new PdfPTable(6);
                        DetailsTable.TotalWidth = 500f;
                        DetailsTable.LockedWidth = true;
                        float[] DetailsWidth = new float[] { 1f, 1f, 1f, 1f, 1f, 1f };
                        DetailsTable.SetWidths(DetailsWidth);
                        //Row one
                        //PdfPCell totHours = new PdfPCell(new Phrase("Total Hrs  : " + "-", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        //totHours.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //totHours.Border = 0;
                        //DetailsTable.AddCell(totHours);
                        forConvert = Convert.ToSingle(dt.Rows[i]["salaryrate"].ToString());
                        PdfPCell salrate = new PdfPCell(new Phrase("Salary rate: " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        salrate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        salrate.Border = 0;
                        DetailsTable.AddCell(salrate);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Basic"].ToString());
                        PdfPCell CBasic = new PdfPCell(new Phrase("Basic  : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CBasic.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CBasic.Border = 0;
                        DetailsTable.AddCell(CBasic);

                        forConvert = Convert.ToSingle(dt.Rows[i]["WashAllowance"].ToString());
                        PdfPCell CWA = new PdfPCell(new Phrase("WA    : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CWA.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CWA.Border = 0;
                        DetailsTable.AddCell(CWA);


                        forConvert = Convert.ToSingle(dt.Rows[i]["Bonus"].ToString());
                        PdfPCell CBonus = new PdfPCell(new Phrase("Bonus        : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CBonus.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CBonus.Border = 0;
                        DetailsTable.AddCell(CBonus);

                        forConvert = Convert.ToSingle(dt.Rows[i]["PFonduties"].ToString());
                        PdfPCell CPF = new PdfPCell(new Phrase("PF      : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CPF.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CPF.Border = 0;
                        DetailsTable.AddCell(CPF);


                        forConvert = Convert.ToSingle(dt.Rows[i]["CanteenAdv"].ToString());
                        PdfPCell COWFDed = new PdfPCell(new Phrase("Mess Ded. : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        COWFDed.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        COWFDed.Border = 0;
                        DetailsTable.AddCell(COWFDed);




                        //Row Two
                        float noofduties = float.Parse(dt.Rows[i]["NoOfDuties"].ToString());
                        PdfPCell CDuties = new PdfPCell(new Phrase("Duties       : " + dt.Rows[i]["NoOfDuties"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CDuties.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CDuties.Border = 0;
                        DetailsTable.AddCell(CDuties);

                        forConvert = Convert.ToSingle(dt.Rows[i]["DA"].ToString());
                        PdfPCell CDA = new PdfPCell(new Phrase("DA     : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CDA.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CDA.Border = 0;
                        DetailsTable.AddCell(CDA);

                        forConvert = Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString());
                        PdfPCell CAllowance = new PdfPCell(new Phrase("Allowance : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CAllowance.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CAllowance.Border = 0;
                        DetailsTable.AddCell(CAllowance);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Gratuity"].ToString());
                        PdfPCell CGratuity = new PdfPCell(new Phrase("Gratuity     : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CGratuity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CGratuity.Border = 0;
                        DetailsTable.AddCell(CGratuity);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Esionduties"].ToString());
                        PdfPCell CESI = new PdfPCell(new Phrase("ESI     : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CESI.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CESI.Border = 0;
                        DetailsTable.AddCell(CESI);

                        forConvert = Convert.ToSingle(dt.Rows[i]["OtherDedn"].ToString());
                        PdfPCell COtherDed = new PdfPCell(new Phrase("Other Ded  : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        COtherDed.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        COtherDed.Border = 0; //2 = BOTTOM BORDER
                        DetailsTable.AddCell(COtherDed);

                        //Row Three
                        float noofots = Convert.ToSingle(dt.Rows[i]["OT"].ToString());
                        forConvert = Convert.ToSingle(dt.Rows[i]["OT"].ToString());
                        PdfPCell COT = new PdfPCell(new Phrase("OT            : " + "-", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        COT.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        COT.Border = 0;
                        DetailsTable.AddCell(COT);



                        forConvert = Convert.ToSingle(dt.Rows[i]["HRA"].ToString());
                        PdfPCell CHRA = new PdfPCell(new Phrase("HRA   : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CHRA.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CHRA.Border = 0;
                        DetailsTable.AddCell(CHRA);

                        forConvert = Convert.ToSingle(dt.Rows[i]["OTAmt"].ToString());
                        PdfPCell COTAmt = new PdfPCell(new Phrase("OT Amt.   : " + "-", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        COTAmt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        COTAmt.Border = 0;
                        DetailsTable.AddCell(COTAmt);

                        forConvert = Convert.ToSingle(dt.Rows[i]["LeaveEncashAmt"].ToString());
                        PdfPCell COWF = new PdfPCell(new Phrase("LA             : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        COWF.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        COWF.Border = 0;
                        DetailsTable.AddCell(COWF);

                        forConvert = Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString());
                        PdfPCell CPT = new PdfPCell(new Phrase("PT      : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CPT.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CPT.Border = 0;
                        DetailsTable.AddCell(CPT);


                        forConvert = Convert.ToSingle(dt.Rows[i]["Gross"].ToString());
                        //forConvert = forConvert + Convert.ToSingle(dt.Rows[i]["OTAmt"].ToString());
                        PdfPCell CGross = new PdfPCell(new Phrase("Gross        : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CGross.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CGross.Border = 0;
                        DetailsTable.AddCell(CGross);

                        forConvert = Convert.ToSingle(dt.Rows[i]["WO"].ToString());
                        PdfPCell CLeaves = new PdfPCell(new Phrase("WO          : " + forConvert.ToString(""), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CLeaves.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CLeaves.Border = 0;
                        DetailsTable.AddCell(CLeaves);

                        forConvert = Convert.ToSingle(dt.Rows[i]["CCA"].ToString());
                        PdfPCell CCCA = new PdfPCell(new Phrase("CCA   : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CCCA.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CCCA.Border = 0;
                        DetailsTable.AddCell(CCCA);

                        forConvert = Convert.ToSingle(dt.Rows[i]["WOAmt"].ToString());
                        PdfPCell CNFHAmt = new PdfPCell(new Phrase("WO Amt  : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CNFHAmt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CNFHAmt.Border = 0;
                        DetailsTable.AddCell(CNFHAmt);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Others"].ToString());
                        PdfPCell CWOAmt = new PdfPCell(new Phrase("Others       : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CWOAmt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CWOAmt.Border = 0;
                        DetailsTable.AddCell(CWOAmt);


                        forConvert = 0;
                        if (dt.Rows[i]["SalAdvDed"].ToString().Length > 0)
                        {
                            forConvert = Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString());
                        }
                        PdfPCell CSalAdv = new PdfPCell(new Phrase("Sal. Adv    : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CSalAdv.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CSalAdv.Border = 0;
                        DetailsTable.AddCell(CSalAdv);

                        forConvert = 0;
                        if (dt.Rows[i]["PFESIContribution"].ToString().Length > 0)
                        {
                            forConvert = Convert.ToSingle(dt.Rows[i]["PFESIContribution"].ToString());
                        }
                        PdfPCell CSPFESIContribution = new PdfPCell(new Phrase("PF & ESI Contribution   : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CSPFESIContribution.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CSPFESIContribution.Border = 0;
                        DetailsTable.AddCell(CSPFESIContribution);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Deductions"].ToString());
                        forConvert = forConvert - Convert.ToSingle(dt.Rows[i]["pfONOT"].ToString());
                        forConvert = forConvert - Convert.ToSingle(dt.Rows[i]["ESIONOT"].ToString());
                        PdfPCell CTotDed = new PdfPCell(new Phrase("Total Ded : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CTotDed.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CTotDed.Border = 0;
                        DetailsTable.AddCell(CTotDed);

                        forConvert = Convert.ToSingle(dt.Rows[i]["NHS"].ToString());
                        PdfPCell CNFH = new PdfPCell(new Phrase("NHS         : " + forConvert.ToString(""), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CNFH.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CNFH.Border = 2;
                        DetailsTable.AddCell(CNFH);

                        forConvert = Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString());
                        PdfPCell CConv = new PdfPCell(new Phrase("Conv.  : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CConv.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CConv.Border = 2;
                        DetailsTable.AddCell(CConv);


                        forConvert = Convert.ToSingle(dt.Rows[i]["Nhsamt"].ToString());
                        PdfPCell CCLPL = new PdfPCell(new Phrase("NHS Amt  : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CCLPL.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CCLPL.Border = 2;
                        DetailsTable.AddCell(CCLPL);


                        forConvert = Convert.ToSingle(dt.Rows[i]["Nfhs"].ToString());
                        PdfPCell CRegFee = new PdfPCell(new Phrase("NFH Amt    : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CRegFee.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CRegFee.Border = 2;
                        DetailsTable.AddCell(CRegFee);


                        forConvert = 0;
                        if (dt.Rows[i]["UniformDed"].ToString().Length > 0)
                        {
                            forConvert = Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString());
                        }
                        PdfPCell CUnifDed = new PdfPCell(new Phrase("Unif. Ded  : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CUnifDed.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CUnifDed.Border = 2;
                        DetailsTable.AddCell(CUnifDed);


                        //PdfPCell CRegFee = new PdfPCell(new Phrase("Reg. Fee    : " + "-", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        //CRegFee.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //CRegFee.Border = 0;
                        //DetailsTable.AddCell(CRegFee);










                        forConvert = Convert.ToSingle(dt.Rows[i]["ActualAmount"].ToString());

                        forConvert = forConvert - Convert.ToSingle(dt.Rows[i]["OTAmt"].ToString());

                        forConvert = forConvert + Convert.ToSingle(dt.Rows[i]["pfONOT"].ToString());
                        forConvert = forConvert + Convert.ToSingle(dt.Rows[i]["ESIONOT"].ToString());
                        PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay     : " + forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CNetPay.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CNetPay.Border = 2;
                        DetailsTable.AddCell(CNetPay);
                        #endregion

                        DetailsTable.AddCell(cellemp);
                        PdfPCell CEmpty = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CEmpty.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CEmpty.Border = 0;
                        CEmpty.Colspan = 6;
                        DetailsTable.AddCell(CEmpty);

                        PdfPCell CAuthority = new PdfPCell(new Phrase("Authorised signatory ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        CAuthority.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        CAuthority.Border = 0;
                        CAuthority.Colspan = 6;
                        DetailsTable.AddCell(CAuthority);

                        DetailsTable.AddCell(CEmpty);
                        //DetailsTable.AddCell(CEmpty);
                        //DetailsTable.AddCell(CEmpty);
                        //DetailsTable.AddCell(CEmpty);
                        //DetailsTable.AddCell(CEmpty);

                        document.Add(DetailsTable);
                        slipsCount++;
                        if (slipsCount == 4)
                        {
                            slipsCount = 0;
                            document.NewPage();
                        }
                    }
                }

                if (hasPages)
                {
                    document.Close();
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=Wage Slips.pdf");
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
            }
        }

        protected string GetPaymentPeriod()
        {
            string period = "";
            string fromDate = "";
            string toDate = "";
            string selectstartingdate = "select ContractStartDate,ContractEndDate,BillDates from contracts where clientid = '" +
                ddlClients.SelectedValue + "'";
            DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(selectstartingdate).Result;

            if (dt.Rows.Count > 0)
            {
                string ContractStartDate = dt.Rows[0]["ContractStartDate"].ToString();
                string ContractEndDate = dt.Rows[0]["ContractEndDate"].ToString();
                string strBillDates = dt.Rows[0]["BillDates"].ToString();
                int bBillDates = 0;
                if (strBillDates.Length > 0)
                {
                    int temp1 = Convert.ToInt32(strBillDates);
                    bBillDates = temp1;

                }
                DateTime CSdate = DateTime.Parse(ContractStartDate);
                DateTime CurrentDate = DateTime.Now.Date;
                DateTime lastDay = DateTime.Now.Date;

                #region Begin Old Code as on 21-03-2014 By Venkat

                if (Chk_Month.Checked == false)
                {
                    if (ddlmonth.SelectedIndex == 1)
                    {
                        CurrentDate = CurrentDate.AddMonths(0);
                        lastDay = GlobalData.Instance.GetLastDayOfNextMonth();
                    }
                    else if (ddlmonth.SelectedIndex == 2)
                    {
                        CurrentDate = CurrentDate.AddMonths(-1);
                        lastDay = GlobalData.Instance.GetLastDayOfThisMonth();
                    }
                    else if (ddlmonth.SelectedIndex == 3)
                    {
                        CurrentDate = CurrentDate.AddMonths(-2);
                        lastDay = GlobalData.Instance.GetLastDayOfPreviousMonth();
                    }
                }
                #endregion
                #region Begin New Code as on 21-03-2014 By Venkat

                if (Chk_Month.Checked == true)
                {
                    if (Chk_Month.Checked == true)
                    {
                        DateTime date = Convert.ToDateTime(Txt_Month.Text, CultureInfo.GetCultureInfo("en-gb"));
                        DateTime startdate = new DateTime(date.Year, date.Month, 1);
                        DateTime enddate = new DateTime(date.Year, date.Month, DateTime.DaysInMonth(date.Year, date.Month));
                        CurrentDate = startdate;
                        lastDay = enddate;
                    }
                }

                #endregion

                DateTime CEdate = DateTime.Parse(ContractEndDate);

                int status = 0;

                if (CSdate <= lastDay)
                {
                    status = 1;

                    if (bBillDates == 1)
                    {

                        if (CSdate.Day <= 15)
                        {
                            fromDate = (new DateTime(CurrentDate.Year, CurrentDate.Month, CSdate.Day).ToString("dd/MM/yyyy"));
                            DateTime tempDate = CurrentDate.AddMonths(1);

                            if (CSdate.Day == 1)
                            {
                                fromDate = (new DateTime(tempDate.Year, tempDate.Month, CSdate.Day /* - 1*/).ToString("dd/MM/yyyy"));
                            }
                            else
                            {
                                fromDate = (new DateTime(tempDate.Year, tempDate.Month, CSdate.Day).ToString("dd/MM/yyyy"));

                            }
                        }


                        else
                        {

                            if (CSdate.Month <= CurrentDate.Month - 1)
                            {
                                if (CurrentDate.Month == 1)
                                {
                                    fromDate = (new DateTime(CurrentDate.Year, CurrentDate.Month + 11, CSdate.Day).ToString("dd/MM/yyyy"));
                                }
                                else
                                {
                                    fromDate = (new DateTime(CurrentDate.Year, CurrentDate.Month - 1, CSdate.Day).ToString("dd/MM/yyyy"));

                                }
                                DateTime tempDate = CurrentDate.AddMonths(0);

                                if (CurrentDate.Day == 1)
                                {
                                    toDate = (new DateTime(tempDate.Year, tempDate.Month, CSdate.Day).ToString("dd/MM/yyyy"));
                                }
                                else
                                {
                                    toDate = (new DateTime(tempDate.Year, tempDate.Month, CSdate.Day - 1).ToString("dd/MM/yyyy"));

                                }
                            }

                            if (CSdate.Month != 0)
                            {
                                if (CurrentDate.Month == 1)
                                {
                                    fromDate = (new DateTime(CurrentDate.Year, CurrentDate.Month + 11, CSdate.Day).ToString("dd/MM/yyyy"));
                                }
                                else
                                {
                                    fromDate = (new DateTime(CurrentDate.Year, CurrentDate.Month - 1, CSdate.Day).ToString("dd/MM/yyyy"));
                                }
                                DateTime tempDate = CurrentDate.AddMonths(0);
                                //toDate = (new DateTime(tempDate.Year, tempDate.Month, CSdate.Day /* - 1*/).ToString("dd/MM/yyyy"));

                                if (CurrentDate.Day == 1)
                                {
                                    toDate = (new DateTime(tempDate.Year, tempDate.Month, CSdate.Day).ToString("dd/MM/yyyy"));
                                }
                                else
                                {
                                    toDate = (new DateTime(tempDate.Year, tempDate.Month, CSdate.Day - 1).ToString("dd/MM/yyyy"));

                                }


                            }
                        }

                    }

                    //new for payment from and to--
                    if (bBillDates == 2)
                    {
                        if (CurrentDate.Month == 1)
                        {
                            fromDate = (new DateTime(CurrentDate.Year, 12, 26).ToString("dd/MM/yyyy"));
                        }
                        else

                            fromDate = (new DateTime(CurrentDate.Year, CurrentDate.Month - 1, 26).ToString("dd/MM/yyyy"));
                        DateTime tempDate = CurrentDate.AddMonths(1);


                        if (tempDate.Month == 1)
                        {
                            toDate = (new DateTime(tempDate.Year, 12, 25).ToString("dd/MM/yyyy"));
                        }
                        else
                        {
                            toDate = (new DateTime(tempDate.Year, tempDate.Month - 1, 25).ToString("dd/MM/yyyy"));
                        }

                    }

                    if (bBillDates == 3)
                    {
                        if (CurrentDate.Month == 1)
                        {
                            fromDate = (new DateTime(CurrentDate.Year, 12, 21).ToString("dd/MM/yyyy"));
                        }
                        else

                            fromDate = (new DateTime(CurrentDate.Year, CurrentDate.Month - 1, 21).ToString("dd/MM/yyyy"));
                        DateTime tempDate = CurrentDate.AddMonths(1);


                        if (tempDate.Month == 1)
                        {
                            toDate = (new DateTime(tempDate.Year, 12, 20).ToString("dd/MM/yyyy"));
                        }
                        else
                        {
                            toDate = (new DateTime(tempDate.Year, tempDate.Month - 1, 20).ToString("dd/MM/yyyy"));
                        }

                    }


                    if (bBillDates == 0)
                    {
                        fromDate = (new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, 1).ToString("dd/MM/yyyy"));

                        if (CSdate.Day == 1)
                        {
                            toDate = (new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month)).ToString("dd/MM/yyyy"));
                        }
                        else
                        {
                            toDate = (new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month)).ToString("dd/MM/yyyy"));

                        }
                    }

                    // end new



                    if (status == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There Is No Valid Contract for this month ');", true);
                    }
                }
                else
                {
                }
            }
            else
            {
            }
            if (fromDate.Length > 0 && toDate.Length > 0)
            {
                period = fromDate + " to " + toDate;
            }
            return period;
        }

        //protected void btnonlyduties_Click(object sender, EventArgs e)
        //{
        //    int titleofdocumentindex = 0;
        //    if (ddlClients.SelectedIndex <= 0)
        //    {
        //        ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
        //        return;
        //    }

        //    int payMonth = GetMonth(ddlmonth.SelectedValue);
        //    //int month = GetMonthAndYear();

        //    int month = GetMonthBasedOnSelectionDateorMonth();

        //    string selectmonth = string.Empty;
        //    string SelectmonthWithbankacno = string.Empty;
        //    string SelectmonthWithoutbankacno = string.Empty;
        //    DataTable dt = null;


        //    var clientid = ddlClients.SelectedValue;
        //    var Paysheetoption = ddlpaymenttype.SelectedIndex;
        //    var Noofattendance = ddlnoofattendance.SelectedIndex;
        //    var pfesioptions = ddl_Pf_Esi_Options.SelectedIndex;

        //    var SPName = "";
        //    Hashtable HTPaysheet = new Hashtable();
        //    SPName = "IMEPaysheetpdfs";
        //    HTPaysheet.Add("@ClientId", clientid);
        //    HTPaysheet.Add("@month", month);
        //    HTPaysheet.Add("@PaymentOption", Paysheetoption);
        //    HTPaysheet.Add("@Attendance", Noofattendance);
        //    HTPaysheet.Add("@PfesiOptions", pfesioptions);
        //    dt = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTPaysheet);

        //    MemoryStream ms = new MemoryStream();
        //    if (dt.Rows.Count > 0)
        //    {
        //        Document document = new Document(PageSize.LEGAL.Rotate());
        //        PdfWriter writer = PdfWriter.GetInstance(document, ms);
        //        document.Open();
        //        document.AddTitle("FaMS");
        //        document.AddAuthor("WebWonders");
        //        document.AddSubject("Wage Sheet");
        //        document.AddKeywords("Keyword1, keyword2, …");//
        //        float forConvert;
        //        string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
        //        DataTable compInfo = SqlHelper.Instance.GetTableByQuery(strQry);
        //        string companyName1 = "Your Company Name";
        //        string companyAddress = "Your Company Address";
        //        if (compInfo.Rows.Count > 0)
        //        {
        //            companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
        //            companyAddress = compInfo.Rows[0]["Address"].ToString();
        //        }

        //        #region Variables for table cells counting

        //        int dts = 0;
        //        int nhs = 0;
        //        int tempgross = 0;
        //        int basic = 0;
        //        int da = 0;
        //        int hra = 0;
        //        int cca = 0;
        //        int conveyance = 0;
        //        int washallowance = 0;
        //        int otherallowance = 0;
        //        int leavewages = 0;
        //        int gratuity = 0;
        //        int bonus = 0;
        //        int nfhs = 0;
        //        int rc = 0;
        //        int cs = 0;
        //        int gross = 0;
        //        int nhsamt = 0;
        //        int incentivs = 0;
        //        int pf = 0;
        //        int esi = 0;
        //        int GenDedn = 0;
        //        int SecDepDedn = 0;
        //        int proftax = 0;
        //        int salAdvDed = 0;
        //        int uniformDed = 0;
        //        int otherDed = 0;
        //        int canteenAdv = 0;
        //        int penalty = 0;
        //        int owf = 0;
        //        int totalDeductions = 0;
        //        int netpay = 0;


        //        float dts1 = 0;
        //        float nhs1 = 0;
        //        float tempgross1 = 0;
        //        float basic1 = 0;
        //        float da1 = 0;
        //        float hra1 = 0;
        //        float cca1 = 0;
        //        float conveyance1 = 0;
        //        float washallowance1 = 0;
        //        float otherallowance1 = 0;
        //        float leavewages1 = 0;
        //        float gratuity1 = 0;
        //        float bonus1 = 0;
        //        float nfhs1 = 0;
        //        float rc1 = 0;
        //        float cs1 = 0;
        //        float gross1 = 0;
        //        float nhsamt1 = 0;
        //        float incentivs1 = 0;
        //        float pf1 = 0;
        //        float esi1 = 0;
        //        float proftax1 = 0;
        //        float GenDedn1 = 0;
        //        float SecDepDedn1 = 0;
        //        float salAdvDed1 = 0;
        //        float uniformDed1 = 0;
        //        float otherDed1 = 0;
        //        float canteenAdv1 = 0;
        //        float penalty1 = 0;
        //        float owf1 = 0;
        //        float totalDeductions1 = 0;
        //        float netpay1 = 0;





        //        #endregion


        //        #region Data for counting tablecells

        //        for (int i = 0; i < dt.Rows.Count; i++)
        //        {
        //            dts1 = float.Parse(dt.Rows[i]["NoOfDuties"].ToString());
        //            if (dts1 != 0)
        //            {
        //                dts1 += 1;
        //                if (dts1 > 0)
        //                {
        //                    dts = 1;
        //                }
        //            }


        //            nhs1 = float.Parse(dt.Rows[i]["nhs"].ToString());
        //            if (nhs1 != 0)
        //            {
        //                nhs1 += 1;
        //                if (nhs1 > 0)
        //                {
        //                    nhs = 1;
        //                }
        //            }

        //            tempgross1 = float.Parse(dt.Rows[i]["tempgross"].ToString());
        //            if (tempgross1 != 0)
        //            {
        //                tempgross1 += 1;
        //                if (tempgross1 > 0)
        //                {
        //                    tempgross = 1;
        //                }
        //            }

        //            basic1 = float.Parse(dt.Rows[i]["basic"].ToString());
        //            if (basic1 != 0)
        //            {
        //                basic1 += 1;
        //                if (basic1 > 0)
        //                {
        //                    basic = 1;
        //                }
        //            }
        //            da1 = float.Parse(dt.Rows[i]["da"].ToString());
        //            if (da1 != 0)
        //            {
        //                da1 += 1;
        //                if (da1 > 0)
        //                {
        //                    da = 1;
        //                }
        //            }
        //            hra1 = float.Parse(dt.Rows[i]["hra"].ToString());
        //            if (hra1 != 0)
        //            {
        //                hra1 += 1;
        //                if (hra1 > 0)
        //                {
        //                    hra = 1;
        //                }
        //            }
        //            cca1 = float.Parse(dt.Rows[i]["cca"].ToString());
        //            if (cca1 != 0)
        //            {
        //                cca1 += 1;
        //                if (cca1 > 0)
        //                {
        //                    cca = 1;
        //                }
        //            }
        //            conveyance1 = float.Parse(dt.Rows[i]["Conveyance"].ToString());
        //            if (conveyance1 != 0)
        //            {
        //                conveyance1 += 1;
        //                if (conveyance1 > 0)
        //                {
        //                    conveyance = 1;
        //                }
        //            }

        //            washallowance1 = float.Parse(dt.Rows[i]["washallowance"].ToString());
        //            if (washallowance1 != 0)
        //            {
        //                washallowance1 += 1;
        //                if (washallowance1 > 0)
        //                {
        //                    washallowance = 1;
        //                }
        //            }
        //            otherallowance1 = float.Parse(dt.Rows[i]["otherallowance"].ToString());
        //            if (otherallowance1 != 0)
        //            {
        //                otherallowance1 += 1;
        //                if (otherallowance1 > 0)
        //                {
        //                    otherallowance = 1;
        //                }
        //            }
        //            leavewages1 = float.Parse(dt.Rows[i]["Leavewages"].ToString());
        //            if (leavewages1 != 0)
        //            {
        //                leavewages1 += 1;
        //                if (leavewages1 > 0)
        //                {
        //                    leavewages = 1;
        //                }
        //            }
        //            gratuity1 = float.Parse(dt.Rows[i]["gratuity"].ToString());
        //            if (gratuity1 != 0)
        //            {
        //                gratuity1 += 1;
        //                if (gratuity1 > 0)
        //                {
        //                    gratuity = 1;
        //                }
        //            }
        //            bonus1 = float.Parse(dt.Rows[i]["bonus"].ToString());
        //            if (bonus1 != 0)
        //            {
        //                bonus1 += 1;
        //                if (bonus1 > 0)
        //                {
        //                    bonus = 1;
        //                }
        //            }

        //            nfhs1 = float.Parse(dt.Rows[i]["nfhs"].ToString());
        //            if (nfhs1 != 0)
        //            {
        //                nfhs1 += 1;
        //                if (nfhs1 > 0)
        //                {
        //                    nfhs = 1;
        //                }
        //            }
        //            rc1 = float.Parse(dt.Rows[i]["rc"].ToString());
        //            if (rc1 != 0)
        //            {
        //                rc1 += 1;
        //                if (rc1 > 0)
        //                {
        //                    rc = 1;
        //                }
        //            }

        //            cs1 = float.Parse(dt.Rows[i]["cs"].ToString());
        //            if (cs1 != 0)
        //            {
        //                cs1 += 1;
        //                if (cs1 > 0)
        //                {
        //                    cs = 1;
        //                }
        //            }
        //            gross1 = float.Parse(dt.Rows[i]["gross"].ToString());
        //            if (gross1 != 0)
        //            {
        //                gross1 += 1;
        //                if (gross1 > 0)
        //                {
        //                    gross = 1;
        //                }
        //            }
        //            nhsamt1 = float.Parse(dt.Rows[i]["nhsamt"].ToString());
        //            if (nhsamt1 != 0)
        //            {
        //                nhsamt1 += 1;
        //                if (nhsamt1 > 0)
        //                {
        //                    nhsamt = 1;
        //                }
        //            }

        //            incentivs1 = float.Parse(dt.Rows[i]["incentivs"].ToString());
        //            if (incentivs1 != 0)
        //            {
        //                incentivs1 += 1;
        //                if (incentivs1 > 0)
        //                {
        //                    incentivs = 1;
        //                }
        //            }
        //            pf1 = float.Parse(dt.Rows[i]["Pfonduties"].ToString());
        //            if (pf1 != 0)
        //            {
        //                pf1 += 1;
        //                if (pf1 > 0)
        //                {
        //                    pf = 1;
        //                }
        //            }
        //            esi1 = float.Parse(dt.Rows[i]["Esionduties"].ToString());
        //            if (esi1 != 0)
        //            {
        //                esi1 += 1;
        //                if (esi1 > 0)
        //                {
        //                    esi = 1;
        //                }
        //            }

        //            GenDedn1 = float.Parse(dt.Rows[i]["GenDedn"].ToString());
        //            if (GenDedn1 != 0)
        //            {
        //                GenDedn1 += 1;
        //                if (GenDedn1 > 0)
        //                {
        //                    GenDedn = 1;
        //                }
        //            }


        //            SecDepDedn1 = float.Parse(dt.Rows[i]["SecDepDedn"].ToString());
        //            if (SecDepDedn1 != 0)
        //            {
        //                SecDepDedn1 += 1;
        //                if (SecDepDedn1 > 0)
        //                {
        //                    SecDepDedn = 1;
        //                }
        //            }


        //            proftax1 = float.Parse(dt.Rows[i]["proftax"].ToString());
        //            if (proftax1 != 0)
        //            {
        //                proftax1 += 1;
        //                if (proftax1 > 0)
        //                {
        //                    proftax = 1;
        //                }
        //            }
        //            salAdvDed1 = float.Parse(dt.Rows[i]["salAdvDed"].ToString());
        //            if (salAdvDed1 != 0)
        //            {
        //                salAdvDed1 += 1;
        //                if (salAdvDed1 > 0)
        //                {
        //                    salAdvDed = 1;
        //                }
        //            }
        //            uniformDed1 = int.Parse(dt.Rows[i]["uniformDed"].ToString());
        //            if (uniformDed1 != 0)
        //            {
        //                uniformDed1 += 1;
        //                if (uniformDed1 > 0)
        //                {
        //                    uniformDed = 1;
        //                }
        //            }
        //            otherDed1 = int.Parse(dt.Rows[i]["otherDed"].ToString());
        //            if (otherDed1 != 0)
        //            {
        //                otherDed1 += 1;
        //                if (otherDed1 > 0)
        //                {
        //                    otherDed = 1;
        //                }
        //            }
        //            canteenAdv1 = float.Parse(dt.Rows[i]["canteenAdv"].ToString());
        //            if (canteenAdv1 != 0)
        //            {
        //                canteenAdv1 += 1;
        //                if (canteenAdv1 > 0)
        //                {
        //                    canteenAdv = 1;
        //                }
        //            }

        //            penalty1 = float.Parse(dt.Rows[i]["penalty"].ToString());
        //            if (penalty1 != 0)
        //            {
        //                penalty1 += 1;
        //                if (penalty1 > 0)
        //                {
        //                    penalty = 1;
        //                }
        //            }

        //            owf1 = float.Parse(dt.Rows[i]["owf"].ToString());
        //            if (owf1 != 0)
        //            {
        //                owf1 += 1;
        //                if (owf1 > 0)
        //                {
        //                    owf = 1;
        //                }
        //            }

        //            totalDeductions1 = float.Parse(dt.Rows[i]["Totaldeduct"].ToString());
        //            if (totalDeductions1 != 0)
        //            {
        //                totalDeductions1 += 1;
        //                if (totalDeductions1 > 0)
        //                {
        //                    totalDeductions = 1;
        //                }
        //            }
        //            netpay1 = float.Parse(dt.Rows[i]["NetAmount"].ToString());
        //            if (netpay1 != 0)
        //            {
        //                netpay1 += 1;
        //                if (netpay1 > 0)
        //                {
        //                    netpay = 1;
        //                }
        //            }

        //        }

        //        #endregion

        //        int sno = 1;
        //        int empid = 1;
        //        int empname = 1;
        //        int design = 1;
        //        int bankacno = 1;

        //        int tableCells = dts + nhs + tempgross + basic + da + hra + cca + conveyance + washallowance + otherallowance + leavewages +
        //                        gratuity + bonus + nfhs + rc + cs + gross + nhsamt + incentivs + pf + esi + proftax + salAdvDed + uniformDed + otherDed + canteenAdv +
        //                         penalty + owf + totalDeductions + netpay + sno + empid + empname + design + bankacno + GenDedn + SecDepDedn;




        //        #region variables for total

        //        float totalDuties = 0;
        //        float totalnhs = 0;
        //        float totaltempgross = 0;
        //        float totalBasic = 0;
        //        float totalDA = 0;
        //        float totalHRA = 0;
        //        float totalCCA = 0;
        //        float totalConveyance = 0;
        //        float totalWA = 0;
        //        float totalOA = 0;
        //        float totalLw = 0;
        //        float totalGratuity = 0;
        //        float totalbonus = 0;
        //        float totalNfhs = 0;
        //        float totalRc = 0;
        //        float totalCs = 0;
        //        float totalGross = 0;
        //        float totalnhsamt = 0;
        //        float totalIncentivs = 0;
        //        float totalPF = 0;
        //        float totalESI = 0;
        //        float totalGenDedn = 0;
        //        float totalSecDepDedn = 0;
        //        float totalProfTax = 0;
        //        float totalSalAdv = 0;
        //        float totalUniforDed = 0;
        //        float totalOtherdedn = 0;
        //        float totalCanteenAdv = 0;
        //        float totalPenalty = 0;
        //        float totalowf = 0;
        //        float totalDed = 0;
        //        float totalNetpay = 0;

        //        #endregion

        //        #region variables for  Grand  total


        //        float GrandtotalDuties = 0;
        //        float Grandtotalnhs = 0;
        //        float Grandtotaltempgross = 0;
        //        float GrandtotalBasic = 0;
        //        float GrandtotalDA = 0;
        //        float GrandtotalHRA = 0;
        //        float GrandtotalCCA = 0;
        //        float GrandtotalConveyance = 0;
        //        float GrandtotalWA = 0;
        //        float GrandtotalOA = 0;
        //        float GrandtotalLw = 0;
        //        float GrandtotalGratuity = 0;
        //        float Grandtotalbonus = 0;
        //        float GrandtotalNfhs = 0;
        //        float GrandtotalRc = 0;
        //        float GrandtotalCs = 0;
        //        float GrandtotalGross = 0;
        //        float Grandtotalnhsamt = 0;
        //        float GrandtotalIncentivs = 0;
        //        float GrandtotalPF = 0;
        //        float GrandtotalESI = 0;
        //        float GrandtotalGenDedn = 0;
        //        float GrandtotalSecDepDedn = 0;
        //        float GrandtotalProfTax = 0;
        //        float GrandtotalSalAdv = 0;
        //        float GrandtotalUniforDed = 0;
        //        float GrandtotalOtherdedn = 0;
        //        float GrandtotalCanteenAdv = 0;
        //        float GrandtotalPenalty = 0;
        //        float Grandtotalowf = 0;
        //        float GrandtotalDed = 0;
        //        float GrandtotalNetpay = 0;

        //        #endregion

        //        int nextpagerecordscount = 0;
        //        int targetpagerecors = 8;
        //        int secondpagerecords = targetpagerecors + 3;
        //        bool nextpagehasPages = false;
        //        int j = 0;
        //        PdfPTable SecondtablecheckbyFooter = null;
        //        PdfPTable SecondtableFooter = null;
        //        PdfPTable SecondtableGrandtotalFooter = null;
        //        for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
        //        {
        //            nextpagehasPages = true;


        //            #region Titles of Document
        //            PdfPTable Maintable = new PdfPTable(27);
        //            if (tableCells > 20)
        //            {
        //                Maintable.TotalWidth = 980f;
        //            }
        //            else
        //            {
        //                Maintable.TotalWidth = 850f;
        //            }
        //            Maintable.LockedWidth = true;
        //            float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };


        //            Maintable.SetWidths(width);
        //            uint FONT_SIZE = 8;

        //            //Company Name & vage act details

        //            PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
        //            cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            cellemp.Colspan = 27;
        //            cellemp.Border = 0;

        //            PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
        //            Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            Heading.Colspan = 27;
        //            Heading.Border = 0;
        //            Maintable.AddCell(Heading);


        //            PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 15, Font.BOLD, BaseColor.BLACK)));
        //            actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            actDetails.Colspan = 27;
        //            actDetails.Border = 0;// 15;
        //            Maintable.AddCell(actDetails);

        //            Maintable.AddCell(cellemp);
        //            #endregion


        //            #region Sub Headings

        //            PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 20, Font.BOLD, BaseColor.BLACK)));
        //            companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            companyName.Colspan = 27;
        //            companyName.Border = 0;// 15;
        //            Maintable.AddCell(companyName);

        //            PdfPCell address = new PdfPCell(new Phrase(companyAddress, FontFactory.GetFont("Arial Black", 10, Font.BOLD, BaseColor.BLACK)));
        //            address.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            address.Colspan = 27;
        //            address.Border = 0;// 15;
        //            Maintable.AddCell(address);

        //            PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        //            paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            paySheet.Colspan = 27;
        //            paySheet.Border = 0;// 15;
        //            Maintable.AddCell(paySheet);

        //            PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CClient.Colspan = 11;
        //            CClient.Border = 0;// 15;
        //            Maintable.AddCell(CClient);



        //            PdfPCell CDates = new PdfPCell(new Phrase("Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //            CDates.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CDates.Colspan = 8;
        //            CDates.Border = 0;// 15;
        //            Maintable.AddCell(CDates);

        //            // PdfPCell CPaySheetDate = new PdfPCell(new Phrase("Pay Sheet Date :  " + DateTime.Now.Date.ToString("dd/MM/yyyy"), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            PdfPCell CPaySheetDate = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CPaySheetDate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CPaySheetDate.Colspan = 1;
        //            CPaySheetDate.Border = 0;// 15;
        //            Maintable.AddCell(CPaySheetDate);

        //            PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :   " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CPayMonth.Colspan = 7;
        //            CPayMonth.Border = 0;// 15;
        //            Maintable.AddCell(CPayMonth);


        //            //                string Clientaddress = "";
        //            //                string queryaddress = @"select isnull(ClientAddrHno,'')+'  '+isnull(ClientAddrStreet,'')+'  '+isnull(ClientAddrColony,'')+'  '+isnull(ClientAddrArea,'')+
        //            //		            '  '+isnull(ClientAddrCity,'')+'  '+isnull(ClientAddrState,'')+'  '+isnull(ClientAddrPin,'') as Address from Clients where ClientId='" + ddlClients.SelectedValue+"'";
        //            //                DataTable dtaddress = SqlHelper.Instance.GetTableByQuery(queryaddress);
        //            //                if (dtaddress.Rows.Count > 0)
        //            //                {
        //            //                    Clientaddress = dtaddress.Rows[0]["Address"].ToString();
        //            //                }

        //            PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlcname.SelectedItem + " ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CClientName.Colspan = 27;
        //            CClientName.Border = 0;// 15;
        //            Maintable.AddCell(CClientName);

        //            Maintable.AddCell(cellemp);
        //            //document.Add(Maintable);

        //            if (titleofdocumentindex == 0)
        //            {
        //                document.Add(Maintable);
        //                titleofdocumentindex = 1;
        //            }

        //            #endregion


        //            #region Table Headings

        //            PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableHeadings.TotalWidth = 980f;
        //            }
        //            else
        //            {
        //                SecondtableHeadings.TotalWidth = 850f;
        //            }
        //            SecondtableHeadings.LockedWidth = true;
        //            float[] SecondHeadingsWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 31)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 5f };
        //            }
        //            #endregion

        //            SecondtableHeadings.SetWidths(SecondHeadingsWidth);

        //            //Cell Headings
        //            //1
        //            PdfPCell sNo = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            //sNo.Colspan = 1;
        //            sNo.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(sNo);

        //            //2
        //            PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpId.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpId);

        //            //3
        //            PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpName.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpName);

        //            //4
        //            PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CDesgn.Border = 15;
        //            SecondtableHeadings.AddCell(CDesgn);

        //            //5
        //            if (dts != 0)
        //            {
        //                PdfPCell CDuties = new PdfPCell(new Phrase("Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CDuties.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CDuties.Border = 15;
        //                SecondtableHeadings.AddCell(CDuties);
        //            }

        //            //5
        //            if (nhs != 0)
        //            {
        //                PdfPCell Cnhs = new PdfPCell(new Phrase("NHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cnhs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cnhs.Border = 15;
        //                SecondtableHeadings.AddCell(Cnhs);
        //            }
        //            //6
        //            if (tempgross != 0)
        //            {
        //                PdfPCell Ctempgross = new PdfPCell(new Phrase("S. Rate", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Ctempgross.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Ctempgross.Border = 15;
        //                SecondtableHeadings.AddCell(Ctempgross);
        //            }

        //            //6
        //            if (basic != 0)
        //            {
        //                PdfPCell CBasic = new PdfPCell(new Phrase("Basic", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CBasic.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CBasic.Border = 15;
        //                SecondtableHeadings.AddCell(CBasic);
        //            }
        //            //7
        //            if (da != 0)
        //            {
        //                PdfPCell CDa = new PdfPCell(new Phrase("DA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CDa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CDa.Border = 15;
        //                SecondtableHeadings.AddCell(CDa);
        //            }

        //            //8
        //            if (hra != 0)
        //            {
        //                PdfPCell CHRa = new PdfPCell(new Phrase("HRA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CHRa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CHRa.Border = 15;
        //                SecondtableHeadings.AddCell(CHRa);
        //            }

        //            //9
        //            if (cca != 0)
        //            {
        //                PdfPCell CCca = new PdfPCell(new Phrase("CCA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CCca.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CCca.Border = 15;
        //                SecondtableHeadings.AddCell(CCca);
        //            }

        //            //10
        //            if (conveyance != 0)
        //            {
        //                PdfPCell Cconveyance = new PdfPCell(new Phrase("Conv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cconveyance.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cconveyance.Border = 15;
        //                SecondtableHeadings.AddCell(Cconveyance);
        //            }

        //            //11
        //            if (washallowance != 0)
        //            {
        //                PdfPCell Cwa = new PdfPCell(new Phrase("WA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cwa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                Cwa.Border = 15;
        //                SecondtableHeadings.AddCell(Cwa);
        //            }

        //            //12
        //            if (otherallowance != 0)
        //            {
        //                PdfPCell COa = new PdfPCell(new Phrase("OA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COa.Border = 15;
        //                SecondtableHeadings.AddCell(COa);
        //            }

        //            //13
        //            if (leavewages != 0)
        //            {
        //                PdfPCell CLa = new PdfPCell(new Phrase("LA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CLa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CLa.Border = 15;
        //                SecondtableHeadings.AddCell(CLa);
        //            }

        //            //14
        //            if (gratuity != 0)
        //            {
        //                PdfPCell CGratuity = new PdfPCell(new Phrase("Gratuity", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CGratuity.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CGratuity.Border = 15;
        //                SecondtableHeadings.AddCell(CGratuity);
        //            }

        //            //15
        //            if (bonus != 0)
        //            {
        //                PdfPCell CBonus = new PdfPCell(new Phrase("Bonus", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CBonus.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CBonus.Border = 15;
        //                SecondtableHeadings.AddCell(CBonus);
        //            }




        //            //16
        //            if (nfhs != 0)
        //            {
        //                PdfPCell CNfhs = new PdfPCell(new Phrase("NFHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNfhs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNfhs.Border = 15;
        //                SecondtableHeadings.AddCell(CNfhs);
        //            }

        //            //17
        //            if (rc != 0)
        //            {
        //                PdfPCell CRc = new PdfPCell(new Phrase("R.C", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CRc.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CRc.Border = 15;
        //                SecondtableHeadings.AddCell(CRc);
        //            }

        //            //18
        //            if (cs != 0)
        //            {
        //                PdfPCell CCs = new PdfPCell(new Phrase("C.S", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CCs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CCs.Border = 15;
        //                SecondtableHeadings.AddCell(CCs);
        //            }



        //            //19
        //            if (gross != 0)
        //            {
        //                PdfPCell CGross = new PdfPCell(new Phrase("Gross", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CGross.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CGross.Border = 15;
        //                SecondtableHeadings.AddCell(CGross);
        //            }

        //            //19 A
        //            if (nhsamt != 0)
        //            {
        //                PdfPCell Cnhsamt = new PdfPCell(new Phrase("NHs Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cnhsamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cnhsamt.Border = 15;
        //                SecondtableHeadings.AddCell(Cnhsamt);
        //            }


        //            //20
        //            if (incentivs != 0)
        //            {
        //                PdfPCell CIncentivs = new PdfPCell(new Phrase("Incentivs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CIncentivs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CIncentivs.Border = 15;
        //                SecondtableHeadings.AddCell(CIncentivs);
        //            }



        //            //21
        //            if (pf != 0)
        //            {
        //                PdfPCell CPF = new PdfPCell(new Phrase("PF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPF.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPF.Border = 15;
        //                SecondtableHeadings.AddCell(CPF);
        //            }

        //            //22
        //            if (esi != 0)
        //            {
        //                PdfPCell CESI = new PdfPCell(new Phrase("ESI", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CESI.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CESI.Border = 15;
        //                SecondtableHeadings.AddCell(CESI);
        //            }


        //            if (SecDepDedn != 0)
        //            {
        //                PdfPCell CSecDepDedn = new PdfPCell(new Phrase("Sec Dep Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CSecDepDedn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CSecDepDedn.Border = 15;
        //                SecondtableHeadings.AddCell(CSecDepDedn);
        //            }

        //            if (GenDedn != 0)
        //            {
        //                PdfPCell CGenDedn = new PdfPCell(new Phrase("Gen Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CGenDedn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CGenDedn.Border = 15;
        //                SecondtableHeadings.AddCell(CGenDedn);
        //            }


        //            //23
        //            if (proftax != 0)
        //            {
        //                PdfPCell CPT = new PdfPCell(new Phrase("PT", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPT.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPT.Border = 15;
        //                SecondtableHeadings.AddCell(CPT);
        //            }

        //            //24
        //            if (salAdvDed != 0)
        //            {
        //                PdfPCell CSalAdv = new PdfPCell(new Phrase("Sal Adv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CSalAdv.Border = 15;
        //                SecondtableHeadings.AddCell(CSalAdv);
        //            }

        //            //25
        //            if (uniformDed != 0)
        //            {
        //                PdfPCell CUnifDed = new PdfPCell(new Phrase("Unif. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CUnifDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CUnifDed.Border = 15;
        //                SecondtableHeadings.AddCell(CUnifDed);
        //            }

        //            //26
        //            if (otherDed != 0)
        //            {
        //                PdfPCell COtherDed = new PdfPCell(new Phrase("Other Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COtherDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COtherDed.Border = 15;
        //                SecondtableHeadings.AddCell(COtherDed);
        //            }

        //            //27
        //            if (canteenAdv != 0)
        //            {
        //                PdfPCell Ccanteended = new PdfPCell(new Phrase("Mess. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Ccanteended.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Ccanteended.Border = 15;
        //                SecondtableHeadings.AddCell(Ccanteended);
        //            }



        //            //28
        //            if (penalty != 0)
        //            {
        //                PdfPCell CPenalty = new PdfPCell(new Phrase("Penalty", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPenalty.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPenalty.Border = 15;
        //                SecondtableHeadings.AddCell(CPenalty);
        //            }

        //            //28 A
        //            if (owf != 0)
        //            {
        //                PdfPCell Cowf = new PdfPCell(new Phrase("OWF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cowf.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cowf.Border = 15;
        //                SecondtableHeadings.AddCell(Cowf);
        //            }

        //            //29
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell CTotDed = new PdfPCell(new Phrase("Tot Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CTotDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CTotDed.Border = 15;
        //                SecondtableHeadings.AddCell(CTotDed);
        //            }

        //            //30
        //            if (netpay != 0)
        //            {
        //                PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNetPay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNetPay.Border = 15;
        //                SecondtableHeadings.AddCell(CNetPay);
        //            }

        //            //31
        //            PdfPCell CSignature = new PdfPCell(new Phrase("Bank A/c No./ Signature", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CSignature.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CSignature.Border = 15;
        //            SecondtableHeadings.AddCell(CSignature);


        //            #endregion


        //            #region Table Data

        //            PdfPTable Secondtable = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                Secondtable.TotalWidth = 980f;
        //            }
        //            else
        //            {
        //                Secondtable.TotalWidth = 850f;
        //            }

        //            Secondtable.LockedWidth = true;
        //            float[] SecondWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 31)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 5f };
        //            }
        //            #endregion

        //            Secondtable.SetWidths(SecondWidth);




        //            int rowCount = 0;
        //            int pageCount = 0;
        //            int i = nextpagei;

        //            // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
        //            {
        //                float ForconvertOt = 0;
        //                forConvert = 0;
        //                if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
        //                    forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());

        //                if (forConvert > 0)
        //                {

        //                    if (nextpagerecordscount == 0)
        //                    {
        //                        document.Add(SecondtableHeadings);
        //                    }

        //                    nextpagerecordscount++;

        //                    //1
        //                    PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n \n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CSNo.Border = 15;
        //                    Secondtable.AddCell(CSNo);

        //                    //2
        //                    PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpId1.Border = 15;
        //                    Secondtable.AddCell(CEmpId1);

        //                    //3
        //                    PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpName"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpName1.Border = 15;
        //                    Secondtable.AddCell(CEmpName1);

        //                    //4
        //                    PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Design"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpDesgn.Border = 15;
        //                    Secondtable.AddCell(CEmpDesgn);

        //                    //5
        //                    if (dts != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());
        //                        totalDuties += forConvert;
        //                        GrandtotalDuties += forConvert;

        //                        PdfPCell CNoOfDuties = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNoOfDuties.Border = 15;
        //                        Secondtable.AddCell(CNoOfDuties);
        //                    }

        //                    //5 AA
        //                    if (nhs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["nhs"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["nhs"].ToString());
        //                        totalnhs += forConvert;
        //                        Grandtotalnhs += forConvert;

        //                        PdfPCell CNoofnhs = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNoofnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNoofnhs.Border = 15;
        //                        Secondtable.AddCell(CNoofnhs);
        //                    }
        //                    //5 A
        //                    if (tempgross != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["tempgross"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["tempgross"].ToString()));
        //                        totaltempgross += forConvert;
        //                        Grandtotaltempgross += forConvert;
        //                        PdfPCell Ctempgross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Ctempgross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Ctempgross1.Border = 15;
        //                        Secondtable.AddCell(Ctempgross1);
        //                    }

        //                    //6
        //                    if (basic != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Basic"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Basic"].ToString()));
        //                        totalBasic += forConvert;
        //                        GrandtotalBasic += forConvert;
        //                        PdfPCell CBasic1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CBasic1.Border = 15;
        //                        Secondtable.AddCell(CBasic1);
        //                    }

        //                    //7
        //                    if (da != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["DA"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["DA"].ToString()));
        //                        totalDA += forConvert;
        //                        GrandtotalDA += forConvert;

        //                        PdfPCell CDa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CDa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CDa1.Border = 15;
        //                        Secondtable.AddCell(CDa1);
        //                    }

        //                    //8
        //                    if (hra != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["HRA"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["HRA"].ToString()));
        //                        totalHRA += forConvert;
        //                        GrandtotalHRA += forConvert;

        //                        PdfPCell CHRA1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CHRA1.Border = 15;
        //                        Secondtable.AddCell(CHRA1);
        //                    }

        //                    //9
        //                    if (cca != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["cca"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cca"].ToString()));
        //                        totalCCA += forConvert;

        //                        GrandtotalCCA += forConvert;

        //                        PdfPCell Ccca = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Ccca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Ccca.Border = 15;
        //                        Secondtable.AddCell(Ccca);
        //                    }

        //                    //10
        //                    if (conveyance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Conveyance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString()));
        //                        totalConveyance += forConvert;
        //                        GrandtotalConveyance += forConvert;

        //                        PdfPCell CConveyance = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CConveyance.Border = 15;
        //                        Secondtable.AddCell(CConveyance);
        //                    }


        //                    //11
        //                    if (washallowance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["washallowance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["washallowance"].ToString()));
        //                        totalWA += forConvert;
        //                        GrandtotalWA += forConvert;

        //                        PdfPCell CWa = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CWa.Border = 15;
        //                        Secondtable.AddCell(CWa);
        //                    }

        //                    //12
        //                    if (otherallowance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["OtherAllowance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString()));
        //                        totalOA += forConvert;
        //                        GrandtotalOA += forConvert;
        //                        PdfPCell COA = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        COA.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        COA.Border = 15;
        //                        Secondtable.AddCell(COA);
        //                    }

        //                    //13
        //                    if (leavewages != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Leavewages"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Leavewages"].ToString()));
        //                        totalLw += forConvert;
        //                        GrandtotalLw += forConvert;
        //                        PdfPCell CLa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CLa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CLa1.Border = 15;
        //                        Secondtable.AddCell(CLa1);
        //                    }
        //                    //14
        //                    if (gratuity != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Gratuity"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gratuity"].ToString()));
        //                        totalGratuity += forConvert;
        //                        GrandtotalGratuity += forConvert;
        //                        PdfPCell CGratuity1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CGratuity1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CGratuity1.Border = 15;
        //                        Secondtable.AddCell(CGratuity1);
        //                    }

        //                    //15
        //                    if (bonus != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["bonus"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["bonus"].ToString()));
        //                        totalbonus += forConvert;

        //                        Grandtotalbonus += forConvert;
        //                        PdfPCell Cbonus = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cbonus.Border = 15;
        //                        Secondtable.AddCell(Cbonus);
        //                    }



        //                    //16
        //                    if (nfhs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Nfhs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Nfhs"].ToString()));
        //                        totalNfhs += forConvert;
        //                        GrandtotalNfhs += forConvert;
        //                        PdfPCell CNfhs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNfhs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNfhs1.Border = 15;
        //                        Secondtable.AddCell(CNfhs1);
        //                    }

        //                    //17
        //                    if (rc != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["RC"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["RC"].ToString()));
        //                        totalRc += forConvert;
        //                        GrandtotalRc += forConvert;
        //                        PdfPCell CRc1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CRc1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CRc1.Border = 15;
        //                        Secondtable.AddCell(CRc1);
        //                    }

        //                    //18
        //                    if (cs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["cs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cs"].ToString()));
        //                        totalCs += forConvert;
        //                        GrandtotalCs += forConvert;
        //                        PdfPCell CCs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CCs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CCs1.Border = 15;
        //                        Secondtable.AddCell(CCs1);
        //                    }


        //                    //19
        //                    if (gross != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Gross"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gross"].ToString()));
        //                        totalGross += forConvert;
        //                        GrandtotalGross += forConvert;

        //                        PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CGross1.Border = 15;
        //                        Secondtable.AddCell(CGross1);
        //                    }

        //                    //19
        //                    if (nhsamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["nhsamt"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["nhsamt"].ToString()));
        //                        totalnhsamt += forConvert;
        //                        Grandtotalnhsamt += forConvert;

        //                        PdfPCell Cnhsamt1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cnhsamt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cnhsamt1.Border = 15;
        //                        Secondtable.AddCell(Cnhsamt1);
        //                    }

        //                    //20
        //                    if (incentivs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Incentivs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Incentivs"].ToString()));
        //                        totalIncentivs += forConvert;
        //                        GrandtotalIncentivs += forConvert;
        //                        PdfPCell CIncentivs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CIncentivs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CIncentivs1.Border = 15;
        //                        Secondtable.AddCell(CIncentivs1);
        //                    }

        //                    //21
        //                    if (pf != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Pfonduties"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Pfonduties"].ToString()));
        //                        totalPF += forConvert;
        //                        GrandtotalPF += forConvert;

        //                        PdfPCell CPF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CPF1.Border = 15;
        //                        Secondtable.AddCell(CPF1);
        //                    }

        //                    //22
        //                    if (esi != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Esionduties"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Esionduties"].ToString()));
        //                        totalESI += forConvert;

        //                        GrandtotalESI += forConvert;

        //                        PdfPCell CESI1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CESI1.Border = 15;
        //                        Secondtable.AddCell(CESI1);
        //                    }



        //                    if (SecDepDedn != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["SecDepDedn"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SecDepDedn"].ToString()));
        //                        totalSecDepDedn += forConvert;
        //                        GrandtotalSecDepDedn += forConvert;

        //                        PdfPCell CSecDepDedn1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSecDepDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CSecDepDedn1.Border = 15;
        //                        Secondtable.AddCell(CSecDepDedn1);
        //                    }


        //                    if (GenDedn != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["GenDedn"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["GenDedn"].ToString()));
        //                        totalGenDedn += forConvert;
        //                        GrandtotalGenDedn += forConvert;

        //                        PdfPCell CGenDedn1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CGenDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CGenDedn1.Border = 15;
        //                        Secondtable.AddCell(CGenDedn1);
        //                    }

        //                    //23
        //                    if (proftax != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["ProfTax"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString()));
        //                        totalProfTax += forConvert;
        //                        GrandtotalProfTax += forConvert;

        //                        PdfPCell CProTax1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CProTax1.Border = 15;
        //                        Secondtable.AddCell(CProTax1);
        //                    }

        //                    //24
        //                    if (salAdvDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["SalAdvDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString()));
        //                        totalSalAdv += forConvert;
        //                        GrandtotalSalAdv += forConvert;

        //                        PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CSalAdv1.Border = 15;
        //                        Secondtable.AddCell(CSalAdv1);
        //                    }

        //                    //25
        //                    if (uniformDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["UniformDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString()));
        //                        totalUniforDed += forConvert;
        //                        GrandtotalUniforDed += forConvert;

        //                        PdfPCell CUnifDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CUnifDed1.Border = 15;
        //                        Secondtable.AddCell(CUnifDed1);
        //                    }

        //                    //26
        //                    if (otherDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["OtherDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherDed"].ToString()));
        //                        totalOtherdedn += forConvert;
        //                        GrandtotalOtherdedn += forConvert;

        //                        PdfPCell COtherDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        COtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        COtherDed1.Border = 15;
        //                        Secondtable.AddCell(COtherDed1);
        //                    }

        //                    //27
        //                    if (canteenAdv != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["CanteenAdv"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["CanteenAdv"].ToString()));
        //                        totalCanteenAdv += forConvert;
        //                        GrandtotalCanteenAdv += forConvert;

        //                        PdfPCell CCanteended = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CCanteended.Border = 15;
        //                        Secondtable.AddCell(CCanteended);
        //                    }



        //                    //28
        //                    if (penalty != 0)
        //                    {
        //                        if (dt.Rows[i]["Penalty"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Penalty"].ToString()));
        //                        totalPenalty += forConvert;
        //                        GrandtotalPenalty += forConvert;

        //                        PdfPCell CPenalty1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CPenalty1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CPenalty1.Border = 15;
        //                        Secondtable.AddCell(CPenalty1);
        //                    }

        //                    //28 A
        //                    if (owf != 0)
        //                    {
        //                        if (dt.Rows[i]["owf"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["owf"].ToString()));
        //                        totalowf += forConvert;
        //                        Grandtotalowf += forConvert;

        //                        PdfPCell Cowf1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cowf1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cowf1.Border = 15;
        //                        Secondtable.AddCell(Cowf1);
        //                    }



        //                    //29
        //                    if (totalDeductions != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Totaldeduct"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Totaldeduct"].ToString()));
        //                        totalDed += forConvert;
        //                        GrandtotalDed += forConvert;

        //                        PdfPCell CTotDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CTotDed1.Border = 15;
        //                        Secondtable.AddCell(CTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //                    }

        //                    //30
        //                    if (netpay != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["NetAmount"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["NetAmount"].ToString()));
        //                        if (forConvert <= 0)
        //                        {
        //                            forConvert = 0;
        //                        }
        //                        totalNetpay += forConvert;
        //                        GrandtotalNetpay += forConvert;
        //                        PdfPCell CNetPay1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNetPay1.Border = 15;
        //                        Secondtable.AddCell(CNetPay1);
        //                    }

        //                    //31
        //                    string EmpBankAcNo = dt.Rows[i]["EmpBankAcNo"].ToString();
        //                    PdfPCell CSignature1 = new PdfPCell(new Phrase(EmpBankAcNo, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CSignature1.Border = 15;
        //                    CSignature1.MinimumHeight = 25;
        //                    Secondtable.AddCell(CSignature1);
        //                }


        //            }
        //            #endregion

        //            #region Table Total values

        //            SecondtableFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableFooter.TotalWidth = 980f;
        //            }
        //            else
        //            {
        //                SecondtableFooter.TotalWidth = 850f;
        //            }
        //            SecondtableFooter.LockedWidth = true;
        //            float[] SecondFooterWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 31)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 5f };
        //            }
        //            #endregion

        //            SecondtableFooter.SetWidths(SecondFooterWidth);

        //            //1
        //            PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSNo.Border = 15;
        //            SecondtableFooter.AddCell(FCSNo);
        //            //2
        //            PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpId1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpId1);
        //            //3
        //            PdfPCell FCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpName1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpName1);
        //            //4
        //            PdfPCell FCEmpDesgn = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpDesgn.Border = 15;
        //            FCEmpDesgn.Colspan = 0;
        //            SecondtableFooter.AddCell(FCEmpDesgn);
        //            //5
        //            if (dts != 0)
        //            {
        //                PdfPCell FCNoOfDuties = new PdfPCell(new Phrase(totalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNoOfDuties.Border = 15;
        //                SecondtableFooter.AddCell(FCNoOfDuties);
        //            }

        //            //5 AA
        //            if (nhs != 0)
        //            {
        //                PdfPCell FCNoOfnhs = new PdfPCell(new Phrase(totalnhs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCNoOfnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNoOfnhs.Border = 15;
        //                SecondtableFooter.AddCell(FCNoOfnhs);
        //            }

        //            //5 A
        //            if (tempgross != 0)
        //            {
        //                PdfPCell FCtempgross1 = new PdfPCell(new Phrase(totaltempgross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCtempgross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCtempgross1.Border = 15;
        //                SecondtableFooter.AddCell(FCtempgross1);
        //            }



        //            //6
        //            if (basic != 0)
        //            {
        //                PdfPCell FCBasic1 = new PdfPCell(new Phrase(totalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCBasic1.Border = 15;
        //                SecondtableFooter.AddCell(FCBasic1);
        //            }


        //            //7
        //            if (da != 0)
        //            {
        //                PdfPCell FDa = new PdfPCell(new Phrase(totalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FDa.Border = 15;
        //                SecondtableFooter.AddCell(FDa);
        //            }


        //            //8
        //            if (hra != 0)
        //            {

        //                PdfPCell FCHRA1 = new PdfPCell(new Phrase(totalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCHRA1.Border = 15;
        //                SecondtableFooter.AddCell(FCHRA1);
        //            }

        //            //9
        //            if (cca != 0)
        //            {
        //                PdfPCell FCcca = new PdfPCell(new Phrase(totalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCcca.Border = 15;
        //                SecondtableFooter.AddCell(FCcca);
        //            }

        //            //10
        //            if (conveyance != 0)
        //            {
        //                PdfPCell FCConveyance = new PdfPCell(new Phrase(totalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCConveyance.Border = 15;
        //                SecondtableFooter.AddCell(FCConveyance);
        //            }


        //            //11
        //            if (washallowance != 0)
        //            {
        //                PdfPCell FCWa = new PdfPCell(new Phrase(totalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCWa.Border = 15;
        //                SecondtableFooter.AddCell(FCWa);
        //            }

        //            //12
        //            if (otherallowance != 0)
        //            {
        //                PdfPCell FCOa = new PdfPCell(new Phrase(totalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCOa.Border = 15;
        //                SecondtableFooter.AddCell(FCOa);
        //            }


        //            //13
        //            if (leavewages != 0)
        //            {
        //                PdfPCell FLa = new PdfPCell(new Phrase(totalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FLa.Border = 15;
        //                SecondtableFooter.AddCell(FLa);
        //            }

        //            //14
        //            if (gratuity != 0)
        //            {
        //                PdfPCell FGratuity = new PdfPCell(new Phrase(totalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FGratuity.Border = 15;
        //                SecondtableFooter.AddCell(FGratuity);
        //            }

        //            //15
        //            if (bonus != 0)
        //            {
        //                PdfPCell Fbonus = new PdfPCell(new Phrase(totalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Fbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                Fbonus.Border = 15;
        //                SecondtableFooter.AddCell(Fbonus);
        //            }

        //            //16
        //            if (nfhs != 0)
        //            {
        //                PdfPCell FNfhs = new PdfPCell(new Phrase(totalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FNfhs.Border = 15;
        //                SecondtableFooter.AddCell(FNfhs);
        //            }

        //            //17
        //            if (rc != 0)
        //            {
        //                PdfPCell FRc = new PdfPCell(new Phrase(totalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FRc.Border = 15;
        //                SecondtableFooter.AddCell(FRc);
        //            }

        //            //18
        //            if (cs != 0)
        //            {
        //                PdfPCell FCs = new PdfPCell(new Phrase(totalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCs.Border = 15;
        //                SecondtableFooter.AddCell(FCs);
        //            }


        //            //19
        //            if (gross != 0)
        //            {
        //                PdfPCell FCGross1 = new PdfPCell(new Phrase(totalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCGross1.Border = 15;
        //                SecondtableFooter.AddCell(FCGross1);
        //            }

        //            //19
        //            if (nhsamt != 0)
        //            {
        //                PdfPCell FCnhsamt1 = new PdfPCell(new Phrase(totalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCnhsamt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCnhsamt1.Border = 15;
        //                SecondtableFooter.AddCell(FCnhsamt1);
        //            }


        //            //20
        //            if (incentivs != 0)
        //            {
        //                PdfPCell FIncentivs = new PdfPCell(new Phrase(totalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FIncentivs.Border = 15;
        //                SecondtableFooter.AddCell(FIncentivs);
        //            }


        //            //21
        //            if (pf != 0)
        //            {
        //                PdfPCell FCPF1 = new PdfPCell(new Phrase(totalPF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCPF1.Border = 15;
        //                SecondtableFooter.AddCell(FCPF1);
        //            }

        //            //22
        //            if (esi != 0)
        //            {
        //                PdfPCell FCESI1 = new PdfPCell(new Phrase(totalESI.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCESI1.Border = 15;
        //                SecondtableFooter.AddCell(FCESI1);
        //            }

        //            if (SecDepDedn != 0)
        //            {
        //                PdfPCell FCSecDepDedn1 = new PdfPCell(new Phrase(totalSecDepDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCSecDepDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCSecDepDedn1.Border = 15;
        //                SecondtableFooter.AddCell(FCSecDepDedn1);
        //            }

        //            if (GenDedn != 0)
        //            {
        //                PdfPCell FCGenDedn1 = new PdfPCell(new Phrase(totalGenDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCGenDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCGenDedn1.Border = 15;
        //                SecondtableFooter.AddCell(FCGenDedn1);
        //            }




        //            //23
        //            if (proftax != 0)
        //            {
        //                PdfPCell FCProTax1 = new PdfPCell(new Phrase(totalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCProTax1.Border = 15;
        //                SecondtableFooter.AddCell(FCProTax1);
        //            }

        //            //24
        //            if (salAdvDed != 0)
        //            {
        //                PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCSalAdv1.Border = 15;
        //                SecondtableFooter.AddCell(FCSalAdv1);
        //            }

        //            //25
        //            if (uniformDed != 0)
        //            {
        //                PdfPCell FCUnifDed1 = new PdfPCell(new Phrase(totalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCUnifDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCUnifDed1);
        //            }

        //            //26
        //            if (otherDed != 0)
        //            {
        //                PdfPCell FCOtherDed1 = new PdfPCell(new Phrase(totalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCOtherDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCOtherDed1);
        //            }

        //            //27
        //            if (canteenAdv != 0)
        //            {
        //                PdfPCell FCCanteended = new PdfPCell(new Phrase(totalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCCanteended.Border = 15;
        //                SecondtableFooter.AddCell(FCCanteended);
        //            }


        //            //28
        //            if (penalty != 0)
        //            {
        //                PdfPCell FPenalty = new PdfPCell(new Phrase(totalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FPenalty.Border = 15;
        //                SecondtableFooter.AddCell(FPenalty);
        //            }

        //            //28 A
        //            if (owf != 0)
        //            {
        //                PdfPCell Fowf = new PdfPCell(new Phrase(totalowf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Fowf.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                Fowf.Border = 15;
        //                SecondtableFooter.AddCell(Fowf);
        //            }



        //            //29
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCTotDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //            }

        //            //30
        //            if (netpay != 0)
        //            {
        //                PdfPCell FCNetPay1 = new PdfPCell(new Phrase(totalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtableFooter.AddCell(FCNetPay1);
        //            }

        //            //31
        //            PdfPCell FCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtableFooter.AddCell(FCSignature1);

        //            #endregion

        //            SecondtableGrandtotalFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableGrandtotalFooter.TotalWidth = 980f;
        //            }
        //            else
        //            {
        //                SecondtableGrandtotalFooter.TotalWidth = 850f;
        //            }
        //            SecondtableGrandtotalFooter.LockedWidth = true;
        //            float[] SecondGrandtotalFooterWidth = new float[] { };
        //            #region Table Cells

        //            if (tableCells == 31)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 5f };
        //            }
        //            #endregion
        //            SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

        //            SecondtablecheckbyFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtablecheckbyFooter.TotalWidth = 980f;
        //            }
        //            else
        //            {
        //                SecondtablecheckbyFooter.TotalWidth = 850f;
        //            }
        //            SecondtablecheckbyFooter.LockedWidth = true;
        //            float[] SecondcheckbyFooterWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 31)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 5f };
        //            }
        //            #endregion

        //            SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);

        //            #region Table   Grand   Total  Footer

        //            //1
        //            PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSNo.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCSNo);

        //            //2
        //            PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpId1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpId1);

        //            //3
        //            PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpName1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpName1);

        //            //4
        //            PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("Grand  Total: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpDesgn.Border = 15;
        //            //FCEmpDesgn.Colspan = 4;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);

        //            //5
        //            if (dts != 0)
        //            {
        //                PdfPCell GFCNoOfDuties = new PdfPCell(new Phrase(GrandtotalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNoOfDuties.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCNoOfDuties);
        //            }

        //            //5 AA
        //            if (nhs != 0)
        //            {
        //                PdfPCell GFCNoOfnhs = new PdfPCell(new Phrase(Grandtotalnhs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNoOfnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNoOfnhs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCNoOfnhs);
        //            }

        //            //5 A
        //            if (tempgross != 0)
        //            {
        //                PdfPCell GFCtempgross1 = new PdfPCell(new Phrase(Grandtotaltempgross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCtempgross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCtempgross1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCtempgross1);
        //            }


        //            //6
        //            if (basic != 0)
        //            {
        //                PdfPCell GFCBasic1 = new PdfPCell(new Phrase(GrandtotalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCBasic1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCBasic1);
        //            }


        //            //7
        //            if (da != 0)
        //            {
        //                PdfPCell GFDa = new PdfPCell(new Phrase(GrandtotalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFDa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFDa);
        //            }


        //            //8
        //            if (hra != 0)
        //            {
        //                PdfPCell GFCHRA1 = new PdfPCell(new Phrase(GrandtotalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCHRA1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCHRA1);
        //            }

        //            //9
        //            if (cca != 0)
        //            {
        //                PdfPCell GFCcca = new PdfPCell(new Phrase(GrandtotalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCcca.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCcca);
        //            }

        //            //10
        //            if (conveyance != 0)
        //            {
        //                PdfPCell GFCConveyance = new PdfPCell(new Phrase(GrandtotalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCConveyance.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCConveyance);
        //            }


        //            //11
        //            if (washallowance != 0)
        //            {
        //                PdfPCell GFCWa = new PdfPCell(new Phrase(GrandtotalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCWa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCWa);
        //            }

        //            //12
        //            if (otherallowance != 0)
        //            {
        //                PdfPCell GFCOa = new PdfPCell(new Phrase(GrandtotalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOa);
        //            }

        //            //13
        //            if (leavewages != 0)
        //            {
        //                PdfPCell GFLa = new PdfPCell(new Phrase(GrandtotalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFLa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFLa);
        //            }

        //            //14
        //            if (gratuity != 0)
        //            {
        //                PdfPCell GFGratuity = new PdfPCell(new Phrase(GrandtotalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFGratuity.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFGratuity);
        //            }

        //            //15
        //            if (bonus != 0)
        //            {
        //                PdfPCell GFbonus = new PdfPCell(new Phrase(Grandtotalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFbonus.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFbonus);
        //            }


        //            //16
        //            if (nfhs != 0)
        //            {
        //                PdfPCell GFNfhs = new PdfPCell(new Phrase(GrandtotalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFNfhs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFNfhs);
        //            }

        //            //17
        //            if (rc != 0)
        //            {
        //                PdfPCell GFRc = new PdfPCell(new Phrase(GrandtotalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFRc.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFRc);
        //            }

        //            //18
        //            if (cs != 0)
        //            {
        //                PdfPCell GFCs = new PdfPCell(new Phrase(GrandtotalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCs);
        //            }


        //            //19
        //            if (gross != 0)
        //            {
        //                PdfPCell GFCGross1 = new PdfPCell(new Phrase(GrandtotalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCGross1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCGross1);
        //            }

        //            //19
        //            if (nhsamt != 0)
        //            {
        //                PdfPCell GFCnhsamt1 = new PdfPCell(new Phrase(Grandtotalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCnhsamt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCnhsamt1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCnhsamt1);
        //            }



        //            //20
        //            if (incentivs != 0)
        //            {
        //                PdfPCell GFIncentivs = new PdfPCell(new Phrase(GrandtotalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFIncentivs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFIncentivs);
        //            }



        //            //21
        //            if (pf != 0)
        //            {
        //                PdfPCell GFCPF1 = new PdfPCell(new Phrase(GrandtotalPF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCPF1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCPF1);
        //            }

        //            //22
        //            if (esi != 0)
        //            {
        //                PdfPCell GFCESI1 = new PdfPCell(new Phrase(GrandtotalESI.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCESI1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCESI1);
        //            }


        //            if (SecDepDedn != 0)
        //            {
        //                PdfPCell GFCSecDepDedn1 = new PdfPCell(new Phrase(GrandtotalSecDepDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCSecDepDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCSecDepDedn1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCSecDepDedn1);
        //            }

        //            if (GenDedn != 0)
        //            {
        //                PdfPCell GFCGenDedn1 = new PdfPCell(new Phrase(GrandtotalGenDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCGenDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCGenDedn1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCGenDedn1);
        //            }

        //            //23
        //            if (proftax != 0)
        //            {
        //                PdfPCell GFCProTax1 = new PdfPCell(new Phrase(GrandtotalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCProTax1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCProTax1);
        //            }

        //            //24
        //            if (salAdvDed != 0)
        //            {
        //                PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCSalAdv1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
        //            }

        //            //25
        //            if (uniformDed != 0)
        //            {
        //                PdfPCell GFCUnifDed1 = new PdfPCell(new Phrase(GrandtotalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCUnifDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCUnifDed1);
        //            }

        //            //26
        //            if (otherDed != 0)
        //            {
        //                PdfPCell GFCOtherDed1 = new PdfPCell(new Phrase(GrandtotalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOtherDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOtherDed1);
        //            }


        //            //27
        //            if (canteenAdv != 0)
        //            {
        //                PdfPCell GFCCanteended = new PdfPCell(new Phrase(GrandtotalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCCanteended.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCCanteended);
        //            }

        //            //28
        //            if (penalty != 0)
        //            {
        //                PdfPCell GFPenalty = new PdfPCell(new Phrase(GrandtotalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFPenalty.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFPenalty);
        //            }

        //            //28 A
        //            if (owf != 0)
        //            {
        //                PdfPCell GFowf = new PdfPCell(new Phrase(Grandtotalowf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFowf.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFowf.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFowf);
        //            }

        //            //29
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(GrandtotalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCTotDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //            }

        //            //30
        //            if (netpay != 0)
        //            {
        //                PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(GrandtotalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtablecheckbyFooter.AddCell(GFCNetPay1);
        //            }

        //            //31
        //            PdfPCell GFCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtablecheckbyFooter.AddCell(GFCSignature1);
        //            #endregion


        //            #region   Footer Headings
        //            //1
        //            PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHCheckedbybr1.Border = 0;
        //            FHCheckedbybr1.Rowspan = 0;
        //            FHCheckedbybr1.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            //2
        //            PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHApprovedbr2.Border = 0;
        //            FHApprovedbr2.Colspan = tableCells;

        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


        //            //1
        //            PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedby.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FHCheckedby.Border = 0;
        //            FHCheckedby.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedby);
        //            //2
        //            PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Gross  Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedBy.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //            FHApprovedBy.Border = 0;
        //            FHApprovedBy.PaddingTop = -5;
        //            FHApprovedBy.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHApprovedBy);



        //            #endregion

        //            document.Add(Secondtable);

        //            if (nextpagerecordscount == targetpagerecors)
        //            {
        //                targetpagerecors = secondpagerecords;
        //                document.Add(SecondtableFooter);
        //                document.NewPage();
        //                nextpagerecordscount = 0;
        //                #region  Zero variables

        //                totalNetpay = 0;
        //                totalDuties = 0;
        //                totalnhs = 0;
        //                totaltempgross = 0;
        //                totalBasic = 0;
        //                totalDA = 0;
        //                totalHRA = 0;
        //                totalCCA = 0;
        //                totalConveyance = 0;
        //                totalWA = 0;
        //                totalOA = 0;
        //                totalGross = 0;
        //                totalPF = 0;
        //                totalESI = 0;
        //                totalGenDedn = 0;
        //                totalSecDepDedn = 0;
        //                totalProfTax = 0;
        //                totalDed = 0;
        //                totalSalAdv = 0;
        //                totalUniforDed = 0;
        //                totalCanteenAdv = 0;
        //                totalOtherdedn = 0;
        //                totalbonus = 0;

        //                totalLw = 0;
        //                totalGratuity = 0;
        //                totalNfhs = 0;
        //                totalRc = 0;
        //                totalCs = 0;
        //                totalIncentivs = 0;
        //                totalPenalty = 0;
        //                totalowf = 0;


        //                #endregion
        //            }
        //        }

        //        if (nextpagerecordscount >= 0)
        //        {
        //            //document.Add(SecondtableFooter);
        //            document.Add(SecondtableGrandtotalFooter);
        //            document.Add(SecondtablecheckbyFooter);
        //        }
        //        document.Close();
        //        if (nextpagehasPages)
        //        {

        //            Response.ContentType = "application/pdf";
        //            Response.AddHeader("content-disposition", "attachment;filename=Duties.pdf");
        //            Response.Buffer = true;
        //            Response.Clear();
        //            Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        //            Response.OutputStream.Flush();
        //            Response.End();
        //        }
        //    }
        //}


        //    protected void btnonlyots_Click(object sender, EventArgs e)
        //    {
        //        int titleofdocumentindex = 0;
        //        if (ddlClients.SelectedIndex <= 0)
        //        {
        //            ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
        //            return;
        //        }

        //        int payMonth = GetMonth(ddlmonth.SelectedValue);
        //        //int month = GetMonthAndYear();

        //        int month = GetMonthBasedOnSelectionDateorMonth();

        //        string selectmonth = string.Empty;
        //        string SelectmonthWithbankacno = string.Empty;
        //        string SelectmonthWithoutbankacno = string.Empty;
        //        DataTable dt = null;

        //        var clientid = ddlClients.SelectedValue;
        //        var Paysheetoption = ddlpaymenttype.SelectedIndex ;
        //        var Noofattendance =ddlnoofattendance.SelectedIndex;
        //        var pfesioptions = ddl_Pf_Esi_Options.SelectedIndex;

        //        var SPName = "";
        //        Hashtable HTPaysheet = new Hashtable();
        //        SPName = "IMEPaysheetpdfs";
        //        HTPaysheet.Add("@ClientId", clientid);
        //        HTPaysheet.Add("@month", month);
        //        HTPaysheet.Add("@PaymentOption", Paysheetoption);
        //        HTPaysheet.Add("@Attendance", Noofattendance);
        //        HTPaysheet.Add("@PfesiOptions", pfesioptions);
        //        dt = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTPaysheet);

        //        MemoryStream ms = new MemoryStream();
        //        if (dt.Rows.Count > 0)
        //        {
        //            Document document = new Document(PageSize.LEGAL.Rotate());
        //            PdfWriter writer = PdfWriter.GetInstance(document, ms);
        //            document.Open();
        //            document.AddTitle("FaMS");
        //            document.AddAuthor("WebWonders");
        //            document.AddSubject("Wage Sheet");
        //            document.AddKeywords("Keyword1, keyword2, …");//
        //            float forConvert;
        //            string strQry = "Select * from CompanyInfo    where   ClientidPrefix='" + CmpIDPrefix + "'";
        //            DataTable compInfo = SqlHelper.Instance.GetTableByQuery(strQry);
        //            string companyName1 = "Your Company Name";
        //            string companyAddress = "Your Company Address";
        //            if (compInfo.Rows.Count > 0)
        //            {
        //                companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
        //                companyAddress = compInfo.Rows[0]["Address"].ToString();
        //            }


        //            #region Variables for table cells counting

        //            int ots = 0;
        //            int othrs = 0;
        //            int srate = 0;
        //            int otamt = 0;
        //            int pf = 0;
        //            int esi = 0;
        //            int deductions = 0;
        //            int netpay = 0;

        //            float ots1 = 0;
        //            float othrs1 = 0;
        //            float srate1 = 0;
        //            float otamt1 = 0;
        //            float pf1 = 0;
        //            float esi1 = 0;
        //            float deductions1 = 0;
        //            float netpay1 = 0;


        //            #endregion


        //            #region Data for counting tablecells

        //            for (int i = 0; i < dt.Rows.Count; i++)
        //            {
        //                ots1 = float.Parse(dt.Rows[i]["Duties"].ToString());
        //                if (ots1 != 0)
        //                {
        //                    ots1 += 1;
        //                    if (ots1 > 0)
        //                    {
        //                        ots = 1;
        //                    }
        //                }

        //                othrs1 = float.Parse(dt.Rows[i]["Dutyhrs"].ToString());
        //                if (othrs1 != 0)
        //                {
        //                   othrs1 += 1;
        //                   if (othrs1 > 0)
        //                   {
        //                       othrs = 1;
        //                    }
        //                }
        //                srate1 = float.Parse(dt.Rows[i]["Salrate"].ToString());
        //                if (srate1 != 0)
        //                {
        //                    srate1 += 1;
        //                    if (srate1 > 0)
        //                    {
        //                        srate = 1;
        //                    }
        //                }
        //                otamt1 = float.Parse(dt.Rows[i]["Amount"].ToString());
        //                if (otamt1 != 0)
        //                {
        //                    otamt1 += 1;
        //                    if (otamt1 > 0)
        //                    {
        //                        otamt = 1;
        //                    }
        //                }


        //                pf1 = float.Parse(dt.Rows[i]["PF"].ToString());
        //                if (pf1 != 0)
        //                {
        //                    pf1 += 1;
        //                    if (pf1 > 0)
        //                    {
        //                        pf = 1;
        //                    }
        //                }
        //                esi1 = float.Parse(dt.Rows[i]["Esi"].ToString());
        //                if (esi1 != 0)
        //                {
        //                    esi1 += 1;
        //                    if (esi1 > 0)
        //                    {
        //                        esi = 1;
        //                    }
        //                }

        //                deductions1 = float.Parse(dt.Rows[i]["TOtaldeduct"].ToString());
        //                if (deductions1 != 0)
        //                {
        //                    deductions1 += 1;
        //                    if (deductions1 > 0)
        //                    {
        //                        deductions = 1;
        //                    }
        //                }
        //                netpay1 = float.Parse(dt.Rows[i]["ActualAmount"].ToString());
        //                if (netpay1 != 0)
        //                {
        //                    netpay1 += 1;
        //                    if (netpay1 > 0)
        //                    {
        //                        netpay = 1;
        //                    }
        //                }

        //            }

        //            #endregion

        //            int sno = 1;
        //            int empid = 1;
        //            int empname = 1;
        //            int design = 1;
        //            int bankacno = 1;

        //            int tableCells = ots + othrs + srate + otamt + pf + esi + deductions + netpay + sno + empid + empname + design + bankacno;


        //            #region variables for total



        //            float totalOts = 0;
        //            float totalOThrs = 0;
        //            float totalSRate = 0;
        //            float totalOTAmount = 0;
        //            float totalPF = 0;
        //            float totalESI = 0;
        //            float totalDed = 0;
        //            float totalActualamount = 0;

        //            #endregion


        //            #region variables for  Grand  total


        //            float GrandtotalOts = 0;
        //            float GrandtotalOThrs = 0;
        //            float GrandtotalSRate = 0;
        //            float GrandtotalOTAmount = 0;
        //            float GrandtotalPF = 0;
        //            float GrandtotalESI = 0;
        //            float GrandtotalDed = 0;
        //            float GrandtotalActualamount = 0;

        //            #endregion


        //            int nextpagerecordscount = 0;
        //            int targetpagerecors = 8;
        //            int secondpagerecords = targetpagerecors + 3;
        //            bool nextpagehasPages = false;
        //            int j = 0;
        //            PdfPTable SecondtablecheckbyFooter = null;
        //            PdfPTable SecondtableFooter = null;
        //            PdfPTable SecondtableGrandtotalFooter = null;

        //            for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
        //            {
        //                nextpagehasPages = true;

        //                #region Titles of Document
        //                PdfPTable Maintable = new PdfPTable(15);
        //                Maintable.TotalWidth = 800f;
        //                Maintable.LockedWidth = true;
        //                float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f};
        //                Maintable.SetWidths(width);
        //                uint FONT_SIZE = 8;

        //                //Company Name & vage act details

        //                PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
        //                cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                cellemp.Colspan = 15;
        //                cellemp.Border = 0;

        //                PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
        //                Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Heading.Colspan = 15;
        //                Heading.Border = 0;
        //                Maintable.AddCell(Heading);

        //                PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 15, Font.BOLD, BaseColor.BLACK)));
        //                actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                actDetails.Colspan = 15;
        //                actDetails.Border = 0;// 15;
        //                Maintable.AddCell(actDetails);

        //                Maintable.AddCell(cellemp);
        //                #endregion

        //                #region PDF Sub Headings

        //                PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 20, Font.BOLD, BaseColor.BLACK)));
        //                companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                companyName.Colspan = 15;
        //                companyName.Border = 0;// 15;
        //                Maintable.AddCell(companyName);

        //                PdfPCell address = new PdfPCell(new Phrase(companyAddress, FontFactory.GetFont("Arial Black", 10, Font.BOLD, BaseColor.BLACK)));
        //                address.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                address.Colspan = 27;
        //                address.Border = 0;// 15;
        //                Maintable.AddCell(address);

        //                PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        //                paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                paySheet.Colspan = 15;
        //                paySheet.Border = 0;// 15;
        //                Maintable.AddCell(paySheet);

        //                PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //                CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CClient.Colspan = 7;
        //                CClient.Border = 0;// 15;
        //                Maintable.AddCell(CClient);


        //                PdfPCell CDates = new PdfPCell(new Phrase("Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //                CDates.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CDates.Colspan = 5;
        //                CDates.Border = 0;// 15;
        //                Maintable.AddCell(CDates);


        //                PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :  " + GetMonthName()+" - "+GetMonthOfYear(), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //                CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CPayMonth.Colspan = 3;
        //                CPayMonth.Border = 0;// 15;
        //                Maintable.AddCell(CPayMonth);


        ////                string Clientaddress = "";
        ////                string queryaddress = @"select isnull(ClientAddrHno,'')+'  '+isnull(ClientAddrStreet,'')+'  '+isnull(ClientAddrColony,'')+'  '+isnull(ClientAddrArea,'')+
        ////		            '  '+isnull(ClientAddrCity,'')+'  '+isnull(ClientAddrState,'')+'  '+isnull(ClientAddrPin,'') as Address from Clients where ClientId='" + ddlClients.SelectedValue + "'";
        ////                DataTable dtaddress = SqlHelper.Instance.GetTableByQuery(queryaddress);
        ////                if (dtaddress.Rows.Count > 0)
        ////                {
        ////                    Clientaddress = dtaddress.Rows[0]["Address"].ToString();
        ////                }

        //                PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlcname.SelectedItem + " ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //                CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CClientName.Colspan = 15;
        //                CClientName.Border = 0;// 15;
        //                Maintable.AddCell(CClientName);

        //                Maintable.AddCell(cellemp);
        //                //document.Add(Maintable);

        //                if (titleofdocumentindex == 0)
        //                {
        //                    document.Add(Maintable);
        //                    titleofdocumentindex = 1;
        //                }

        //                #endregion

        //                #region Table Headings



        //                PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
        //                SecondtableHeadings.TotalWidth = 800f;
        //                SecondtableHeadings.LockedWidth = true;
        //                float[] SecondHeadingsWidth = new float[] { };

        //                #region Table Cells

        //                if (tableCells == 13)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 12)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 11)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 10)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f,2f, 2f, 7f };
        //                }
        //                if (tableCells == 9)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f,2f, 2f, 7f };
        //                }
        //                if (tableCells == 8)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //                }

        //                if (tableCells == 7)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //                }

        //                if (tableCells == 6)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //                }
        //                #endregion

        //                SecondtableHeadings.SetWidths(SecondHeadingsWidth);

        //                //Cell Headings
        //                //1
        //                PdfPCell sNo = new PdfPCell(new Phrase("S.No ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                //sNo.Colspan = 1;
        //                sNo.Border = 15;// 15;
        //                SecondtableHeadings.AddCell(sNo);
        //                //2
        //                PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CEmpId.Border = 15;// 15;
        //                SecondtableHeadings.AddCell(CEmpId);
        //                //3
        //                PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CEmpName.Border = 15;// 15;
        //                SecondtableHeadings.AddCell(CEmpName);
        //                //4
        //                PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CDesgn.Border = 15;
        //                SecondtableHeadings.AddCell(CDesgn);

        //                //5
        //                if (ots != 0)
        //                {
        //                    PdfPCell COTs = new PdfPCell(new Phrase("OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    COTs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    COTs.Border = 15;
        //                    SecondtableHeadings.AddCell(COTs);
        //                }

        //               // 6
        //                if (othrs != 0)
        //                {
        //                PdfPCell COthrs = new PdfPCell(new Phrase("OT Hrs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COthrs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COthrs.Border = 15;
        //                SecondtableHeadings.AddCell(COthrs);
        //                }

        //                //7
        //                if (srate != 0)
        //                {
        //                    PdfPCell CSrate = new PdfPCell(new Phrase("S.Rate", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CSrate.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CSrate.Border = 15;
        //                    SecondtableHeadings.AddCell(CSrate);
        //                }

        //                //8
        //                if (otamt != 0)
        //                {
        //                    PdfPCell Cotamt = new PdfPCell(new Phrase("OT Amount", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    Cotamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    Cotamt.Border = 15;
        //                    SecondtableHeadings.AddCell(Cotamt);
        //                }

        //                //9
        //                if (pf != 0)
        //                {
        //                    PdfPCell CPF = new PdfPCell(new Phrase("PF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CPF.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CPF.Border = 15;
        //                    SecondtableHeadings.AddCell(CPF);
        //                }

        //                //10
        //                if (esi != 0)
        //                {
        //                    PdfPCell CESI = new PdfPCell(new Phrase("ESI", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CESI.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CESI.Border = 15;
        //                    SecondtableHeadings.AddCell(CESI);
        //                }

        //                //11
        //                if (deductions != 0)
        //                {
        //                    PdfPCell CTotDed = new PdfPCell(new Phrase("Tot Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CTotDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CTotDed.Border = 15;
        //                    SecondtableHeadings.AddCell(CTotDed);
        //                }

        //                //12
        //                if (netpay != 0)
        //                {
        //                    PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CNetPay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CNetPay.Border = 15;
        //                    SecondtableHeadings.AddCell(CNetPay);
        //                }

        //                //13
        //                PdfPCell CSignature = new PdfPCell(new Phrase("Bank A/c No./ Signature", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CSignature.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CSignature.Border = 15;
        //                SecondtableHeadings.AddCell(CSignature);


        //                #endregion

        //                #region Table Data

        //                PdfPTable Secondtable = new PdfPTable(tableCells);
        //                Secondtable.TotalWidth = 800f;
        //                Secondtable.LockedWidth = true;
        //                float[] SecondWidth = new float[] { };

        //                #region Table Cells

        //                if (tableCells == 13)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 12)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 11)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 10)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 9)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 8)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //                }

        //                if (tableCells == 7)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //                }

        //                if (tableCells == 6)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //                }
        //                #endregion

        //                Secondtable.SetWidths(SecondWidth);

        //                int rowCount = 0;
        //                int pageCount = 0;
        //                int i = nextpagei;

        //                // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
        //                {
        //                    forConvert = 0;
        //                    if (dt.Rows[i]["Duties"].ToString().Trim().Length > 0)
        //                        forConvert = Convert.ToSingle(dt.Rows[i]["Duties"].ToString());
        //                    if (forConvert > 0)
        //                    {

        //                        if (nextpagerecordscount == 0)
        //                        {
        //                            document.Add(SecondtableHeadings);
        //                        }

        //                        nextpagerecordscount++;
        //                        //1
        //                        PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n \n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                        CSNo.Border = 15;
        //                        Secondtable.AddCell(CSNo);
        //                        //2
        //                        PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                        CEmpId1.Border = 15;
        //                        Secondtable.AddCell(CEmpId1);
        //                        //3
        //                        PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpName"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                        CEmpName1.Border = 15;
        //                        Secondtable.AddCell(CEmpName1);
        //                        //4
        //                        PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Design"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                        CEmpDesgn.Border = 15;
        //                        Secondtable.AddCell(CEmpDesgn);

        //                        //5
        //                        if (ots != 0)
        //                        {
        //                            if (dt.Rows[i]["Duties"].ToString().Trim().Length > 0)
        //                                forConvert = Convert.ToSingle(dt.Rows[i]["Duties"].ToString());
        //                            totalOts += forConvert;
        //                            GrandtotalOts += forConvert;
        //                            PdfPCell CNoOfots = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CNoOfots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CNoOfots.Border = 15;
        //                            Secondtable.AddCell(CNoOfots);
        //                        }

        //                        //6
        //                        if (othrs != 0)
        //                        {
        //                          forConvert = 0;
        //                           if (dt.Rows[i]["Dutyhrs"].ToString().Trim().Length > 0)
        //                               forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Dutyhrs"].ToString()));
        //                           totalOThrs += forConvert;
        //                           GrandtotalOThrs += forConvert;
        //                           PdfPCell COthrs = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                           COthrs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                           COthrs.Border = 15;
        //                           Secondtable.AddCell(COthrs);
        //                       }

        //                        //7

        //                        if (srate != 0)
        //                        {
        //                            forConvert = 0;

        //                            if (dt.Rows[i]["Salrate"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Salrate"].ToString()));
        //                            totalSRate += forConvert;
        //                            GrandtotalSRate += forConvert;

        //                            PdfPCell CSrate = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CSrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CSrate.Border = 15;
        //                            Secondtable.AddCell(CSrate);
        //                        }

        //                        //8
        //                        if (otamt != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["Amount"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Amount"].ToString()));
        //                            totalOTAmount += forConvert;
        //                            GrandtotalOTAmount += forConvert;
        //                            PdfPCell Cottamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            Cottamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            Cottamt.Border = 15;
        //                            Secondtable.AddCell(Cottamt);
        //                        }



        //                        //9
        //                        if (pf != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["PF"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PF"].ToString()));
        //                            totalPF += forConvert;
        //                            GrandtotalPF += forConvert;

        //                            PdfPCell CPF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CPF1.Border = 15;
        //                            Secondtable.AddCell(CPF1);
        //                        }

        //                        //10
        //                        if (esi != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["ESI"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESI"].ToString()));
        //                            totalESI += forConvert;

        //                            GrandtotalESI += forConvert;

        //                            PdfPCell CESI1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CESI1.Border = 15;
        //                            Secondtable.AddCell(CESI1);
        //                        }


        //                        //11
        //                        if (deductions != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["TOtaldeduct"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TOtaldeduct"].ToString()));
        //                            totalDed += forConvert;
        //                            GrandtotalDed += forConvert;

        //                            PdfPCell CTotDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CTotDed1.Border = 15;
        //                            Secondtable.AddCell(CTotDed1);
        //                        }

        //                        //12
        //                        if (netpay != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["ActualAmount"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ActualAmount"].ToString()));
        //                            if (forConvert <= 0)
        //                            {
        //                                forConvert = 0;
        //                            }
        //                            totalActualamount += forConvert;
        //                            GrandtotalActualamount += forConvert;
        //                            PdfPCell CNetPay1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CNetPay1.Border = 15;
        //                            Secondtable.AddCell(CNetPay1);
        //                        }

        //                        //13
        //                        string EmpBankAcNo = dt.Rows[i]["EmpBankAcNo"].ToString();
        //                        PdfPCell CSignature1 = new PdfPCell(new Phrase(EmpBankAcNo, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                        CSignature1.Border = 15;
        //                        CSignature1.MinimumHeight = 25;
        //                        Secondtable.AddCell(CSignature1);
        //                    }


        //                }
        //                #endregion

        //                #region Table Total values

        //                SecondtableFooter = new PdfPTable(tableCells);
        //                SecondtableFooter.TotalWidth = 800f;
        //                SecondtableFooter.LockedWidth = true;
        //                float[] SecondFooterWidth = new float[] {};

        //                #region Table Cells

        //                if (tableCells == 13)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 12)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 11)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 10)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 9)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 8)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //                }

        //                if (tableCells == 7)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //                }

        //                if (tableCells == 6)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //                }
        //                #endregion

        //                SecondtableFooter.SetWidths(SecondFooterWidth);
        //                //1
        //                PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                FCSNo.Border = 15;
        //                SecondtableFooter.AddCell(FCSNo);

        //                //2
        //                PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                FCEmpId1.Border = 15;
        //                SecondtableFooter.AddCell(FCEmpId1);

        //                //3
        //                PdfPCell FCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                FCEmpName1.Border = 15;
        //                SecondtableFooter.AddCell(FCEmpName1);

        //                //4
        //                PdfPCell FCEmpDesgn = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                FCEmpDesgn.Border = 15;
        //                //FCEmpDesgn.Colspan = 4;
        //                SecondtableFooter.AddCell(FCEmpDesgn);


        //                //5
        //                if (ots != 0)
        //                {
        //                    PdfPCell FCNoOfots = new PdfPCell(new Phrase(totalOts.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCNoOfots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCNoOfots.Border = 15;
        //                    SecondtableFooter.AddCell(FCNoOfots);
        //                }

        //                //6
        //                if (othrs != 0)
        //                {
        //                PdfPCell FCOthrs = new PdfPCell(new Phrase(totalOThrs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCOthrs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCOthrs.Border = 15;
        //                SecondtableFooter.AddCell(FCOthrs);
        //                }


        //                //7
        //                if (srate != 0)
        //                {
        //                    PdfPCell FSrate = new PdfPCell(new Phrase(totalSRate.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FSrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FSrate.Border = 15;
        //                    SecondtableFooter.AddCell(FSrate);
        //                }

        //                //8
        //                if (otamt != 0)
        //                {
        //                    PdfPCell FCottamt = new PdfPCell(new Phrase(totalOTAmount.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCottamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCottamt.Border = 15;
        //                    SecondtableFooter.AddCell(FCottamt);
        //                }

        //                //9
        //                if (pf != 0)
        //                {
        //                    PdfPCell FCPF1 = new PdfPCell(new Phrase(totalPF.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCPF1.Border = 15;
        //                    SecondtableFooter.AddCell(FCPF1);
        //                }

        //                //10
        //                if (esi != 0)
        //                {
        //                    PdfPCell FCESI1 = new PdfPCell(new Phrase(totalESI.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCESI1.Border = 15;
        //                    SecondtableFooter.AddCell(FCESI1);
        //                }


        //                //11
        //                if (deductions != 0)
        //                {
        //                    PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalDed.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCTotDed1.Border = 15;
        //                    SecondtableFooter.AddCell(FCTotDed1);
        //                }

        //                //12
        //                if (netpay != 0)
        //                {
        //                    PdfPCell FCNetPay1 = new PdfPCell(new Phrase(totalActualamount.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCNetPay1.Border = 15;
        //                    //FCNetPay1.Colspan = 2;
        //                    SecondtableFooter.AddCell(FCNetPay1);
        //                }

        //                //13
        //                PdfPCell FCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                FCSignature1.Border = 15;
        //                //FCSignature1.MinimumHeight = 25;
        //                SecondtableFooter.AddCell(FCSignature1);
        //                #endregion


        //                SecondtableGrandtotalFooter = new PdfPTable(tableCells);
        //                SecondtableGrandtotalFooter.TotalWidth = 800f;
        //                SecondtableGrandtotalFooter.LockedWidth = true;
        //                float[] SecondGrandtotalFooterWidth = new float[] {};
        //                #region Table Cells

        //                if (tableCells == 13)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 12)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 11)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 10)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 9)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 8)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //                }

        //                if (tableCells == 7)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //                }

        //                if (tableCells == 6)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //                }
        //                #endregion
        //                SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);



        //                SecondtablecheckbyFooter = new PdfPTable(tableCells);
        //                SecondtablecheckbyFooter.TotalWidth = 800f;
        //                SecondtablecheckbyFooter.LockedWidth = true;
        //                float[] SecondcheckbyFooterWidth = new float[] {};
        //                #region Table Cells

        //                if (tableCells == 13)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 12)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 11)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 10)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 9)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //                }
        //                if (tableCells == 8)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //                }

        //                if (tableCells == 7)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //                }

        //                if (tableCells == 6)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //                }
        //                #endregion
        //                SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);

        //                #region Table   Grand   Total  Footer

        //                //1
        //                PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                GFCSNo.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCSNo);

        //                //2
        //                PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                GFCEmpId1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCEmpId1);

        //                //3
        //                PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                GFCEmpName1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCEmpName1);

        //                //4
        //                PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("Grand  Totals: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                GFCEmpDesgn.Border = 15;
        //                //FCEmpDesgn.Colspan = 4;
        //                SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);


        //                //5
        //                if (ots != 0)
        //                {
        //                    PdfPCell GFCNoOfots = new PdfPCell(new Phrase(GrandtotalOts.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCNoOfots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCNoOfots.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCNoOfots);
        //                }

        //                //6
        //                if (othrs != 0)
        //                {
        //                    PdfPCell GFOThrs = new PdfPCell(new Phrase(GrandtotalOThrs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFOThrs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFOThrs.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFOThrs);
        //                }


        //                //7
        //                if (srate != 0)
        //                {
        //                    PdfPCell GFSrate = new PdfPCell(new Phrase(GrandtotalSRate.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFSrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFSrate.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFSrate);
        //                }


        //                //8
        //                if (otamt != 0)
        //                {
        //                    PdfPCell GFCottamt = new PdfPCell(new Phrase(GrandtotalOTAmount.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCottamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCottamt.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCottamt);
        //                }



        //                //9
        //                if (pf != 0)
        //                {
        //                    PdfPCell GFCPF1 = new PdfPCell(new Phrase(GrandtotalPF.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCPF1.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCPF1);
        //                }

        //                //10
        //                if (esi != 0)
        //                {
        //                    PdfPCell GFCESI1 = new PdfPCell(new Phrase(GrandtotalESI.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCESI1.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCESI1);
        //                }


        //                //11
        //                if (deductions != 0)
        //                {
        //                    PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(GrandtotalDed.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCTotDed1.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCTotDed1);
        //                }

        //                //12
        //                if (netpay != 0)
        //                {
        //                    PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(GrandtotalActualamount.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCNetPay1.Border = 15;
        //                    //FCNetPay1.Colspan = 2;
        //                    SecondtablecheckbyFooter.AddCell(GFCNetPay1);
        //                }
        //                //13
        //                PdfPCell GFCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                GFCSignature1.Border = 15;
        //                //FCSignature1.MinimumHeight = 25;
        //                SecondtablecheckbyFooter.AddCell(GFCSignature1);
        //                #endregion

        //                #region   Footer Headings




        //                //1
        //                PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                FHCheckedbybr1.Border = 0;
        //                FHCheckedbybr1.Rowspan = 0;
        //                FHCheckedbybr1.Colspan = tableCells;
        //                SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //                //2
        //                PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                FHApprovedbr2.Border = 0;
        //                FHApprovedbr2.Colspan = tableCells;

        //                SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
        //                SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //                SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


        //                //1
        //                PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FHCheckedby.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                FHCheckedby.Border = 0;
        //                //FHCheckedby.Rowspan = 0;
        //                FHCheckedby.Colspan = tableCells;
        //                SecondtablecheckbyFooter.AddCell(FHCheckedby);
        //                //2
        //                PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Gross  Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FHApprovedBy.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FHApprovedBy.Border = 0;
        //                FHApprovedBy.PaddingTop = -7;
        //                FHApprovedBy.Colspan = tableCells;
        //                SecondtablecheckbyFooter.AddCell(FHApprovedBy);



        //                #endregion

        //                document.Add(Secondtable);


        //                if (nextpagerecordscount == targetpagerecors)
        //                {
        //                    targetpagerecors = secondpagerecords;
        //                    document.Add(SecondtableFooter);
        //                    document.NewPage();
        //                    nextpagerecordscount = 0;

        //                    #region  Zero variables

        //                    totalActualamount = 0;
        //                    totalOts = 0;
        //                    totalOThrs = 0;
        //                    totalSRate = 0;
        //                    totalOTAmount = 0;
        //                    totalPF = 0;
        //                    totalESI = 0;
        //                    totalDed = 0;

        //                    #endregion
        //                }
        //            }

        //            if (nextpagerecordscount >= 0)
        //            {
        //               // document.Add(SecondtableFooter);
        //                document.Add(SecondtableGrandtotalFooter);
        //                document.Add(SecondtablecheckbyFooter);
        //            }
        //            document.Close();
        //            if (nextpagehasPages)
        //            {

        //                Response.ContentType = "application/pdf";
        //                Response.AddHeader("content-disposition", "attachment;filename=OTs.pdf");
        //                Response.Buffer = true;
        //                Response.Clear();
        //                Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        //                Response.OutputStream.Flush();
        //                Response.End();
        //            }
        //        }
        //    }

        //protected void btnonlyWos_Click(object sender, EventArgs e)
        //{
        //    int titleofdocumentindex = 0;
        //    if (ddlClients.SelectedIndex <= 0)
        //    {
        //        ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
        //        return;
        //    }

        //    int payMonth = GetMonth(ddlmonth.SelectedValue);
        //    //int month = GetMonthAndYear();

        //    int month = GetMonthBasedOnSelectionDateorMonth();

        //    string selectmonth = string.Empty;
        //    string SelectmonthWithbankacno = string.Empty;
        //    string SelectmonthWithoutbankacno = string.Empty;
        //    DataTable dt = null;

        //    var clientid = ddlClients.SelectedValue;
        //    var Paysheetoption = ddlpaymenttype.SelectedIndex;
        //    var Noofattendance = ddlnoofattendance.SelectedIndex;
        //    var pfesioptions = ddl_Pf_Esi_Options.SelectedIndex;

        //    var SPName = "";
        //    Hashtable HTPaysheet = new Hashtable();
        //    SPName = "IMEPaysheetpdfs";
        //    HTPaysheet.Add("@ClientId", clientid);
        //    HTPaysheet.Add("@month", month);
        //    HTPaysheet.Add("@PaymentOption", Paysheetoption);
        //    HTPaysheet.Add("@Attendance", Noofattendance);
        //    HTPaysheet.Add("@PfesiOptions", pfesioptions);
        //    dt = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTPaysheet);

        //    MemoryStream ms = new MemoryStream();
        //    if (dt.Rows.Count > 0)
        //    {
        //        Document document = new Document(PageSize.LEGAL.Rotate());
        //        PdfWriter writer = PdfWriter.GetInstance(document, ms);
        //        document.Open();
        //        document.AddTitle("FaMS");
        //        document.AddAuthor("WebWonders");
        //        document.AddSubject("Wage Sheet");
        //        document.AddKeywords("Keyword1, keyword2, …");//
        //        float forConvert;
        //        string strQry = "Select * from CompanyInfo    where   ClientidPrefix='" + CmpIDPrefix + "'";
        //        DataTable compInfo = SqlHelper.Instance.GetTableByQuery(strQry);
        //        string companyName1 = "Your Company Name";
        //        string companyAddress = "Your Company Address";
        //        if (compInfo.Rows.Count > 0)
        //        {
        //            companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
        //            companyAddress = compInfo.Rows[0]["Address"].ToString();
        //        }


        //        #region Variables for table cells counting

        //        int wos = 0;
        //        int wohrs = 0;
        //        int srate = 0;
        //        int woamt = 0;
        //        int pf = 0;
        //        int esi = 0;
        //        int deductions = 0;
        //        int netpay = 0;

        //        float wos1 = 0;
        //        float wohrs1 = 0;
        //        float srate1 = 0;
        //        float woamt1 = 0;
        //        float pf1 = 0;
        //        float esi1 = 0;
        //        float deductions1 = 0;
        //        float netpay1 = 0;


        //        #endregion


        //        #region Data for counting tablecells

        //        for (int i = 0; i < dt.Rows.Count; i++)
        //        {
        //            wos1 = float.Parse(dt.Rows[i]["Duties"].ToString());
        //            if (wos1 != 0)
        //            {
        //                wos1 += 1;
        //                if (wos1 > 0)
        //                {
        //                    wos = 1;
        //                }
        //            }

        //            wohrs1 = float.Parse(dt.Rows[i]["Dutyhrs"].ToString());
        //            if (wohrs1 != 0)
        //            {
        //                wohrs1 += 1;
        //                if (wohrs1 > 0)
        //                {
        //                    wohrs = 1;
        //                }
        //            }
        //            srate1 = float.Parse(dt.Rows[i]["Salrate"].ToString());
        //            if (srate1 != 0)
        //            {
        //                srate1 += 1;
        //                if (srate1 > 0)
        //                {
        //                    srate = 1;
        //                }
        //            }
        //            woamt1 = float.Parse(dt.Rows[i]["Amount"].ToString());
        //            if (woamt1 != 0)
        //            {
        //                woamt1 += 1;
        //                if (woamt1 > 0)
        //                {
        //                    woamt = 1;
        //                }
        //            }


        //            pf1 = float.Parse(dt.Rows[i]["PF"].ToString());
        //            if (pf1 != 0)
        //            {
        //                pf1 += 1;
        //                if (pf1 > 0)
        //                {
        //                    pf = 1;
        //                }
        //            }
        //            esi1 = float.Parse(dt.Rows[i]["Esi"].ToString());
        //            if (esi1 != 0)
        //            {
        //                esi1 += 1;
        //                if (esi1 > 0)
        //                {
        //                    esi = 1;
        //                }
        //            }

        //            deductions1 = float.Parse(dt.Rows[i]["TOtaldeduct"].ToString());
        //            if (deductions1 != 0)
        //            {
        //                deductions1 += 1;
        //                if (deductions1 > 0)
        //                {
        //                    deductions = 1;
        //                }
        //            }
        //            netpay1 = float.Parse(dt.Rows[i]["ActualAmount"].ToString());
        //            if (netpay1 != 0)
        //            {
        //                netpay1 += 1;
        //                if (netpay1 > 0)
        //                {
        //                    netpay = 1;
        //                }
        //            }

        //        }

        //        #endregion

        //        int sno = 1;
        //        int empid = 1;
        //        int empname = 1;
        //        int design = 1;
        //        int bankacno = 1;

        //        int tableCells = wos + wohrs + srate + woamt + pf + esi + deductions + netpay + sno + empid + empname + design + bankacno;


        //        #region variables for total



        //        float totalwos = 0;
        //        float totalwohrs = 0;
        //        float totalSRate = 0;
        //        float totalwoAmount = 0;
        //        float totalPF = 0;
        //        float totalESI = 0;
        //        float totalDed = 0;
        //        float totalActualamount = 0;

        //        #endregion


        //        #region variables for  Grand  total


        //        float Grandtotalwos = 0;
        //        float Grandtotalwohrs = 0;
        //        float GrandtotalSRate = 0;
        //        float GrandtotalwoAmount = 0;
        //        float GrandtotalPF = 0;
        //        float GrandtotalESI = 0;
        //        float GrandtotalDed = 0;
        //        float GrandtotalActualamount = 0;

        //        #endregion


        //        int nextpagerecordscount = 0;
        //        int targetpagerecors = 10;
        //        int secondpagerecords = targetpagerecors + 3;
        //        bool nextpagehasPages = false;
        //        int j = 0;
        //        PdfPTable SecondtablecheckbyFooter = null;
        //        PdfPTable SecondtableFooter = null;
        //        PdfPTable SecondtableGrandtotalFooter = null;

        //        for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
        //        {
        //            nextpagehasPages = true;

        //            #region Titles of Document
        //            PdfPTable Maintable = new PdfPTable(15);
        //            Maintable.TotalWidth = 800f;
        //            Maintable.LockedWidth = true;
        //            float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        //            Maintable.SetWidths(width);
        //            uint FONT_SIZE = 8;

        //            //Company Name & vage act details

        //            PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
        //            cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            cellemp.Colspan = 15;
        //            cellemp.Border = 0;

        //            PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
        //            Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            Heading.Colspan = 15;
        //            Heading.Border = 0;
        //            Maintable.AddCell(Heading);

        //            PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 15, Font.BOLD, BaseColor.BLACK)));
        //            actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            actDetails.Colspan = 15;
        //            actDetails.Border = 0;// 15;
        //            Maintable.AddCell(actDetails);

        //            Maintable.AddCell(cellemp);
        //            #endregion

        //            #region PDF Sub Headings

        //            PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 20, Font.BOLD, BaseColor.BLACK)));
        //            companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            companyName.Colspan = 15;
        //            companyName.Border = 0;// 15;
        //            Maintable.AddCell(companyName);

        //            PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        //            paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            paySheet.Colspan = 15;
        //            paySheet.Border = 0;// 15;
        //            Maintable.AddCell(paySheet);

        //            PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CClient.Colspan = 3;
        //            CClient.Border = 0;// 15;
        //            Maintable.AddCell(CClient);

        //            PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlcname.SelectedItem, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CClientName.Colspan = 4;
        //            CClientName.Border = 0;// 15;
        //            Maintable.AddCell(CClientName);

        //            PdfPCell CDates = new PdfPCell(new Phrase("Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //            CDates.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CDates.Colspan = 5;
        //            CDates.Border = 0;// 15;
        //            Maintable.AddCell(CDates);


        //            PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :  " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CPayMonth.Colspan = 3;
        //            CPayMonth.Border = 0;// 15;
        //            Maintable.AddCell(CPayMonth);

        //            Maintable.AddCell(cellemp);
        //            //document.Add(Maintable);

        //            if (titleofdocumentindex == 0)
        //            {
        //                document.Add(Maintable);
        //                titleofdocumentindex = 1;
        //            }

        //            #endregion

        //            #region Table Headings



        //            PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
        //            SecondtableHeadings.TotalWidth = 800f;
        //            SecondtableHeadings.LockedWidth = true;
        //            float[] SecondHeadingsWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 13)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //            }
        //            #endregion

        //            SecondtableHeadings.SetWidths(SecondHeadingsWidth);

        //            //Cell Headings
        //            //1
        //            PdfPCell sNo = new PdfPCell(new Phrase("S.No ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            //sNo.Colspan = 1;
        //            sNo.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(sNo);
        //            //2
        //            PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpId.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpId);
        //            //3
        //            PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpName.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpName);
        //            //4
        //            PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CDesgn.Border = 15;
        //            SecondtableHeadings.AddCell(CDesgn);

        //            //5
        //            if (wos != 0)
        //            {
        //                PdfPCell COTs = new PdfPCell(new Phrase("WOs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COTs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COTs.Border = 15;
        //                SecondtableHeadings.AddCell(COTs);
        //            }

        //            //6
        //            if (wohrs != 0)
        //            {
        //                PdfPCell COthrs = new PdfPCell(new Phrase("WO Hrs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COthrs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COthrs.Border = 15;
        //                SecondtableHeadings.AddCell(COthrs);
        //            }

        //            //7
        //            if (srate != 0)
        //            {
        //                PdfPCell CSrate = new PdfPCell(new Phrase("S.Rate", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CSrate.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CSrate.Border = 15;
        //                SecondtableHeadings.AddCell(CSrate);
        //            }

        //            //8
        //            if (woamt != 0)
        //            {
        //                PdfPCell Cotamt = new PdfPCell(new Phrase("WO Amount", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cotamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cotamt.Border = 15;
        //                SecondtableHeadings.AddCell(Cotamt);
        //            }

        //            //9
        //            if (pf != 0)
        //            {
        //                PdfPCell CPF = new PdfPCell(new Phrase("PF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPF.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPF.Border = 15;
        //                SecondtableHeadings.AddCell(CPF);
        //            }

        //            //10
        //            if (esi != 0)
        //            {
        //                PdfPCell CESI = new PdfPCell(new Phrase("ESI", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CESI.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CESI.Border = 15;
        //                SecondtableHeadings.AddCell(CESI);
        //            }

        //            //11
        //            if (deductions != 0)
        //            {
        //                PdfPCell CTotDed = new PdfPCell(new Phrase("Tot Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CTotDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CTotDed.Border = 15;
        //                SecondtableHeadings.AddCell(CTotDed);
        //            }

        //            //12
        //            if (netpay != 0)
        //            {
        //                PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNetPay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNetPay.Border = 15;
        //                SecondtableHeadings.AddCell(CNetPay);
        //            }

        //            //13
        //            PdfPCell CSignature = new PdfPCell(new Phrase("Bank A/c No./ Signature", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CSignature.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CSignature.Border = 15;
        //            SecondtableHeadings.AddCell(CSignature);


        //            #endregion

        //            #region Table Data

        //            PdfPTable Secondtable = new PdfPTable(tableCells);
        //            Secondtable.TotalWidth = 800f;
        //            Secondtable.LockedWidth = true;
        //            float[] SecondWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 13)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //            }
        //            #endregion

        //            Secondtable.SetWidths(SecondWidth);

        //            int rowCount = 0;
        //            int pageCount = 0;
        //            int i = nextpagei;

        //            // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
        //            {
        //                forConvert = 0;
        //                if (dt.Rows[i]["Duties"].ToString().Trim().Length > 0)
        //                    forConvert = Convert.ToSingle(dt.Rows[i]["Duties"].ToString());
        //                if (forConvert > 0)
        //                {

        //                    if (nextpagerecordscount == 0)
        //                    {
        //                        document.Add(SecondtableHeadings);
        //                    }

        //                    nextpagerecordscount++;
        //                    //1
        //                    PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n \n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CSNo.Border = 15;
        //                    Secondtable.AddCell(CSNo);
        //                    //2
        //                    PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpId1.Border = 15;
        //                    Secondtable.AddCell(CEmpId1);
        //                    //3
        //                    PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpName"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpName1.Border = 15;
        //                    Secondtable.AddCell(CEmpName1);
        //                    //4
        //                    PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Design"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpDesgn.Border = 15;
        //                    Secondtable.AddCell(CEmpDesgn);

        //                    //5
        //                    if (wos != 0)
        //                    {
        //                        if (dt.Rows[i]["Duties"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["Duties"].ToString());
        //                        totalwos += forConvert;
        //                        Grandtotalwos += forConvert;
        //                        PdfPCell CNoOfots = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNoOfots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNoOfots.Border = 15;
        //                        Secondtable.AddCell(CNoOfots);
        //                    }

        //                    //6
        //                    if (wohrs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Dutyhrs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Dutyhrs"].ToString()));
        //                        totalwohrs += forConvert;
        //                        Grandtotalwohrs += forConvert;
        //                        PdfPCell COthrs = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        COthrs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        COthrs.Border = 15;
        //                        Secondtable.AddCell(COthrs);
        //                    }

        //                    //7

        //                    if (srate != 0)
        //                    {
        //                        forConvert = 0;

        //                        if (dt.Rows[i]["Salrate"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Salrate"].ToString()));
        //                        totalSRate += forConvert;
        //                        GrandtotalSRate += forConvert;

        //                        PdfPCell CSrate = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CSrate.Border = 15;
        //                        Secondtable.AddCell(CSrate);
        //                    }

        //                    //8
        //                    if (woamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Amount"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Amount"].ToString()));
        //                        totalwoAmount += forConvert;
        //                        GrandtotalwoAmount += forConvert;
        //                        PdfPCell Cottamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cottamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cottamt.Border = 15;
        //                        Secondtable.AddCell(Cottamt);
        //                    }



        //                    //9
        //                    if (pf != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["PF"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PF"].ToString()));
        //                        totalPF += forConvert;
        //                        GrandtotalPF += forConvert;

        //                        PdfPCell CPF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CPF1.Border = 15;
        //                        Secondtable.AddCell(CPF1);
        //                    }

        //                    //10
        //                    if (esi != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["ESI"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESI"].ToString()));
        //                        totalESI += forConvert;

        //                        GrandtotalESI += forConvert;

        //                        PdfPCell CESI1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CESI1.Border = 15;
        //                        Secondtable.AddCell(CESI1);
        //                    }


        //                    //11
        //                    if (deductions != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["TOtaldeduct"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TOtaldeduct"].ToString()));
        //                        totalDed += forConvert;
        //                        GrandtotalDed += forConvert;

        //                        PdfPCell CTotDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CTotDed1.Border = 15;
        //                        Secondtable.AddCell(CTotDed1);
        //                    }

        //                    //12
        //                    if (netpay != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["ActualAmount"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ActualAmount"].ToString()));
        //                        if (forConvert <= 0)
        //                        {
        //                            forConvert = 0;
        //                        }
        //                        totalActualamount += forConvert;
        //                        GrandtotalActualamount += forConvert;
        //                        PdfPCell CNetPay1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNetPay1.Border = 15;
        //                        Secondtable.AddCell(CNetPay1);
        //                    }

        //                    //13
        //                    string EmpBankAcNo = dt.Rows[i]["EmpBankAcNo"].ToString();
        //                    PdfPCell CSignature1 = new PdfPCell(new Phrase(EmpBankAcNo, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CSignature1.Border = 15;
        //                    CSignature1.MinimumHeight = 25;
        //                    Secondtable.AddCell(CSignature1);
        //                }


        //            }
        //            #endregion

        //            #region Table Total values

        //            SecondtableFooter = new PdfPTable(tableCells);
        //            SecondtableFooter.TotalWidth = 800f;
        //            SecondtableFooter.LockedWidth = true;
        //            float[] SecondFooterWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 13)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //            }
        //            #endregion

        //            SecondtableFooter.SetWidths(SecondFooterWidth);
        //            //1
        //            PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSNo.Border = 15;
        //            SecondtableFooter.AddCell(FCSNo);

        //            //2
        //            PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpId1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpId1);

        //            //3
        //            PdfPCell FCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpName1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpName1);

        //            //4
        //            PdfPCell FCEmpDesgn = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpDesgn.Border = 15;
        //            //FCEmpDesgn.Colspan = 4;
        //            SecondtableFooter.AddCell(FCEmpDesgn);


        //            //5
        //            if (wos != 0)
        //            {
        //                PdfPCell FCNoOfots = new PdfPCell(new Phrase(totalwos.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCNoOfots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNoOfots.Border = 15;
        //                SecondtableFooter.AddCell(FCNoOfots);
        //            }

        //            //6
        //            if (wohrs != 0)
        //            {
        //                PdfPCell FCOthrs = new PdfPCell(new Phrase(totalwohrs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCOthrs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCOthrs.Border = 15;
        //                SecondtableFooter.AddCell(FCOthrs);
        //            }


        //            //7
        //            if (srate != 0)
        //            {
        //                PdfPCell FSrate = new PdfPCell(new Phrase(totalSRate.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FSrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FSrate.Border = 15;
        //                SecondtableFooter.AddCell(FSrate);
        //            }

        //            //8
        //            if (woamt != 0)
        //            {
        //                PdfPCell FCottamt = new PdfPCell(new Phrase(totalwoAmount.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCottamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCottamt.Border = 15;
        //                SecondtableFooter.AddCell(FCottamt);
        //            }

        //            //9
        //            if (pf != 0)
        //            {
        //                PdfPCell FCPF1 = new PdfPCell(new Phrase(totalPF.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCPF1.Border = 15;
        //                SecondtableFooter.AddCell(FCPF1);
        //            }

        //            //10
        //            if (esi != 0)
        //            {
        //                PdfPCell FCESI1 = new PdfPCell(new Phrase(totalESI.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCESI1.Border = 15;
        //                SecondtableFooter.AddCell(FCESI1);
        //            }


        //            //11
        //            if (deductions != 0)
        //            {
        //                PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalDed.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCTotDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCTotDed1);
        //            }

        //            //12
        //            if (netpay != 0)
        //            {
        //                PdfPCell FCNetPay1 = new PdfPCell(new Phrase(totalActualamount.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtableFooter.AddCell(FCNetPay1);
        //            }

        //            //13
        //            PdfPCell FCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtableFooter.AddCell(FCSignature1);
        //            #endregion


        //            SecondtableGrandtotalFooter = new PdfPTable(tableCells);
        //            SecondtableGrandtotalFooter.TotalWidth = 800f;
        //            SecondtableGrandtotalFooter.LockedWidth = true;
        //            float[] SecondGrandtotalFooterWidth = new float[] { };
        //            #region Table Cells

        //            if (tableCells == 13)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //            }
        //            #endregion
        //            SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);



        //            SecondtablecheckbyFooter = new PdfPTable(tableCells);
        //            SecondtablecheckbyFooter.TotalWidth = 800f;
        //            SecondtablecheckbyFooter.LockedWidth = true;
        //            float[] SecondcheckbyFooterWidth = new float[] { };
        //            #region Table Cells

        //            if (tableCells == 13)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //            }
        //            #endregion
        //            SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);

        //            #region Table   Grand   Total  Footer

        //            //1
        //            PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSNo.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCSNo);

        //            //2
        //            PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpId1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpId1);

        //            //3
        //            PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpName1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpName1);

        //            //4
        //            PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("Grand  Totals: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpDesgn.Border = 15;
        //            //FCEmpDesgn.Colspan = 4;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);


        //            //5
        //            if (wos != 0)
        //            {
        //                PdfPCell GFCNoOfots = new PdfPCell(new Phrase(Grandtotalwos.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNoOfots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNoOfots.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCNoOfots);
        //            }

        //            //6
        //            if (wohrs != 0)
        //            {
        //                PdfPCell GFOThrs = new PdfPCell(new Phrase(Grandtotalwohrs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFOThrs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFOThrs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFOThrs);
        //            }


        //            //7
        //            if (srate != 0)
        //            {
        //                PdfPCell GFSrate = new PdfPCell(new Phrase(GrandtotalSRate.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFSrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFSrate.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFSrate);
        //            }


        //            //8
        //            if (woamt != 0)
        //            {
        //                PdfPCell GFCottamt = new PdfPCell(new Phrase(GrandtotalwoAmount.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCottamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCottamt.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCottamt);
        //            }



        //            //9
        //            if (pf != 0)
        //            {
        //                PdfPCell GFCPF1 = new PdfPCell(new Phrase(GrandtotalPF.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCPF1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCPF1);
        //            }

        //            //10
        //            if (esi != 0)
        //            {
        //                PdfPCell GFCESI1 = new PdfPCell(new Phrase(GrandtotalESI.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCESI1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCESI1);
        //            }


        //            //11
        //            if (deductions != 0)
        //            {
        //                PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(GrandtotalDed.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCTotDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCTotDed1);
        //            }

        //            //12
        //            if (netpay != 0)
        //            {
        //                PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(GrandtotalActualamount.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtablecheckbyFooter.AddCell(GFCNetPay1);
        //            }
        //            //13
        //            PdfPCell GFCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtablecheckbyFooter.AddCell(GFCSignature1);
        //            #endregion

        //            #region   Footer Headings




        //            //1
        //            PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHCheckedbybr1.Border = 0;
        //            FHCheckedbybr1.Rowspan = 0;
        //            FHCheckedbybr1.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            //2
        //            PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHApprovedbr2.Border = 0;
        //            FHApprovedbr2.Colspan = tableCells;

        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


        //            //1
        //            PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedby.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FHCheckedby.Border = 0;
        //            //FHCheckedby.Rowspan = 0;
        //            FHCheckedby.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedby);
        //            //2
        //            PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Gross  Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedBy.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //            FHApprovedBy.Border = 0;
        //            FHApprovedBy.PaddingTop = -7;
        //            FHApprovedBy.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHApprovedBy);



        //            #endregion

        //            document.Add(Secondtable);


        //            if (nextpagerecordscount == targetpagerecors)
        //            {
        //                targetpagerecors = secondpagerecords;
        //                document.Add(SecondtableFooter);
        //                document.NewPage();
        //                nextpagerecordscount = 0;

        //                #region  Zero variables

        //                totalActualamount = 0;
        //                totalwos = 0;
        //                totalwohrs = 0;
        //                totalSRate = 0;
        //                totalwoAmount = 0;
        //                totalPF = 0;
        //                totalESI = 0;
        //                totalDed = 0;

        //                #endregion
        //            }
        //        }

        //        if (nextpagerecordscount >= 0)
        //        {
        //            //document.Add(SecondtableFooter);
        //            document.Add(SecondtableGrandtotalFooter);
        //            document.Add(SecondtablecheckbyFooter);
        //        }
        //        document.Close();
        //        if (nextpagehasPages)
        //        {

        //            Response.ContentType = "application/pdf";
        //            Response.AddHeader("content-disposition", "attachment;filename=Week offs.pdf");
        //            Response.Buffer = true;
        //            Response.Clear();
        //            Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        //            Response.OutputStream.Flush();
        //            Response.End();
        //        }
        //    }
        //}


        //protected void btnonlyNhs_Click(object sender, EventArgs e)
        //{
        //    int titleofdocumentindex = 0;
        //    if (ddlClients.SelectedIndex <= 0)
        //    {
        //        ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
        //        return;
        //    }

        //    int payMonth = GetMonth(ddlmonth.SelectedValue);
        //    //int month = GetMonthAndYear();
        //    int month = GetMonthBasedOnSelectionDateorMonth();

        //    string selectmonth = string.Empty;
        //    string SelectmonthWithbankacno = string.Empty;
        //    string SelectmonthWithoutbankacno = string.Empty;
        //    DataTable dt = null;

        //    var clientid = ddlClients.SelectedValue;
        //    var Paysheetoption = ddlpaymenttype.SelectedIndex;
        //    var Noofattendance = ddlnoofattendance.SelectedIndex;
        //    var pfesioptions = ddl_Pf_Esi_Options.SelectedIndex;

        //    var SPName = "";
        //    Hashtable HTPaysheet = new Hashtable();
        //    SPName = "IMEPaysheetpdfs";
        //    HTPaysheet.Add("@ClientId", clientid);
        //    HTPaysheet.Add("@month", month);
        //    HTPaysheet.Add("@PaymentOption", Paysheetoption);
        //    HTPaysheet.Add("@Attendance", Noofattendance);
        //    HTPaysheet.Add("@PfesiOptions", pfesioptions);
        //    dt = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTPaysheet);

        //    MemoryStream ms = new MemoryStream();
        //    if (dt.Rows.Count > 0)
        //    {
        //        Document document = new Document(PageSize.LEGAL.Rotate());
        //        PdfWriter writer = PdfWriter.GetInstance(document, ms);
        //        document.Open();
        //        document.AddTitle("FaMS");
        //        document.AddAuthor("WebWonders");
        //        document.AddSubject("Wage Sheet");
        //        document.AddKeywords("Keyword1, keyword2, …");//
        //        float forConvert;
        //        string strQry = "Select * from CompanyInfo    where   ClientidPrefix='" + CmpIDPrefix + "'";
        //        DataTable compInfo = SqlHelper.Instance.GetTableByQuery(strQry);
        //        string companyName1 = "Your Company Name";
        //        string companyAddress = "Your Company Address";
        //        if (compInfo.Rows.Count > 0)
        //        {
        //            companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
        //            companyAddress = compInfo.Rows[0]["Address"].ToString();
        //        }


        //        #region Variables for table cells counting

        //        int nhs = 0;
        //        int nhhrs = 0;
        //        int srate = 0;
        //        int nhamt = 0;
        //        int pf = 0;
        //        int esi = 0;
        //        int deductions = 0;
        //        int netpay = 0;

        //        float nhs1 = 0;
        //        float nhhrs1 = 0;
        //        float srate1 = 0;
        //        float nhamt1 = 0;
        //        float pf1 = 0;
        //        float esi1 = 0;
        //        float deductions1 = 0;
        //        float netpay1 = 0;


        //        #endregion


        //        #region Data for counting tablecells

        //        for (int i = 0; i < dt.Rows.Count; i++)
        //        {
        //            nhs1 = float.Parse(dt.Rows[i]["Duties"].ToString());
        //            if (nhs1 != 0)
        //            {
        //                nhs1 += 1;
        //                if (nhs1 > 0)
        //                {
        //                    nhs = 1;
        //                }
        //            }

        //            nhhrs1 = float.Parse(dt.Rows[i]["Dutyhrs"].ToString());
        //            if (nhhrs1 != 0)
        //            {
        //                nhhrs1 += 1;
        //                if (nhhrs1 > 0)
        //                {
        //                    nhhrs = 1;
        //                }
        //            }
        //            srate1 = float.Parse(dt.Rows[i]["Salrate"].ToString());
        //            if (srate1 != 0)
        //            {
        //                srate1 += 1;
        //                if (srate1 > 0)
        //                {
        //                    srate = 1;
        //                }
        //            }
        //            nhamt1 = float.Parse(dt.Rows[i]["Amount"].ToString());
        //            if (nhamt1 != 0)
        //            {
        //                nhamt1 += 1;
        //                if (nhamt1 > 0)
        //                {
        //                    nhamt = 1;
        //                }
        //            }


        //            pf1 = float.Parse(dt.Rows[i]["PF"].ToString());
        //            if (pf1 != 0)
        //            {
        //                pf1 += 1;
        //                if (pf1 > 0)
        //                {
        //                    pf = 1;
        //                }
        //            }
        //            esi1 = float.Parse(dt.Rows[i]["Esi"].ToString());
        //            if (esi1 != 0)
        //            {
        //                esi1 += 1;
        //                if (esi1 > 0)
        //                {
        //                    esi = 1;
        //                }
        //            }

        //            deductions1 = float.Parse(dt.Rows[i]["TOtaldeduct"].ToString());
        //            if (deductions1 != 0)
        //            {
        //                deductions1 += 1;
        //                if (deductions1 > 0)
        //                {
        //                    deductions = 1;
        //                }
        //            }
        //            netpay1 = float.Parse(dt.Rows[i]["ActualAmount"].ToString());
        //            if (netpay1 != 0)
        //            {
        //                netpay1 += 1;
        //                if (netpay1 > 0)
        //                {
        //                    netpay = 1;
        //                }
        //            }

        //        }

        //        #endregion

        //        int sno = 1;
        //        int empid = 1;
        //        int empname = 1;
        //        int design = 1;
        //        int bankacno = 1;

        //        int tableCells = nhs + nhhrs + srate + nhamt + pf + esi + deductions + netpay + sno + empid + empname + design + bankacno;


        //        #region variables for total



        //        float totalnhs = 0;
        //        float totalnhhrs = 0;
        //        float totalSRate = 0;
        //        float totalnhAmount = 0;
        //        float totalPF = 0;
        //        float totalESI = 0;
        //        float totalDed = 0;
        //        float totalActualamount = 0;

        //        #endregion


        //        #region variables for  Grand  total


        //        float Grandtotalnhs = 0;
        //        float Grandtotalnhhrs = 0;
        //        float GrandtotalSRate = 0;
        //        float GrandtotalnhAmount = 0;
        //        float GrandtotalPF = 0;
        //        float GrandtotalESI = 0;
        //        float GrandtotalDed = 0;
        //        float GrandtotalActualamount = 0;

        //        #endregion


        //        int nextpagerecordscount = 0;
        //        int targetpagerecors = 10;
        //        int secondpagerecords = targetpagerecors + 3;
        //        bool nextpagehasPages = false;
        //        int j = 0;
        //        PdfPTable SecondtablecheckbyFooter = null;
        //        PdfPTable SecondtableFooter = null;
        //        PdfPTable SecondtableGrandtotalFooter = null;

        //        for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
        //        {
        //            nextpagehasPages = true;

        //            #region Titles of Document
        //            PdfPTable Maintable = new PdfPTable(15);
        //            Maintable.TotalWidth = 800f;
        //            Maintable.LockedWidth = true;
        //            float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        //            Maintable.SetWidths(width);
        //            uint FONT_SIZE = 8;

        //            //Company Name & vage act details

        //            PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
        //            cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            cellemp.Colspan = 15;
        //            cellemp.Border = 0;

        //            PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
        //            Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            Heading.Colspan = 15;
        //            Heading.Border = 0;
        //            Maintable.AddCell(Heading);

        //            PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 15, Font.BOLD, BaseColor.BLACK)));
        //            actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            actDetails.Colspan = 15;
        //            actDetails.Border = 0;// 15;
        //            Maintable.AddCell(actDetails);

        //            Maintable.AddCell(cellemp);
        //            #endregion

        //            #region PDF Sub Headings

        //            PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 20, Font.BOLD, BaseColor.BLACK)));
        //            companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            companyName.Colspan = 15;
        //            companyName.Border = 0;// 15;
        //            Maintable.AddCell(companyName);

        //            PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        //            paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            paySheet.Colspan = 15;
        //            paySheet.Border = 0;// 15;
        //            Maintable.AddCell(paySheet);

        //            PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CClient.Colspan = 3;
        //            CClient.Border = 0;// 15;
        //            Maintable.AddCell(CClient);

        //            PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlcname.SelectedItem, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CClientName.Colspan = 4;
        //            CClientName.Border = 0;// 15;
        //            Maintable.AddCell(CClientName);

        //            PdfPCell CDates = new PdfPCell(new Phrase("Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //            CDates.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CDates.Colspan = 5;
        //            CDates.Border = 0;// 15;
        //            Maintable.AddCell(CDates);


        //            PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :  " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CPayMonth.Colspan = 3;
        //            CPayMonth.Border = 0;// 15;
        //            Maintable.AddCell(CPayMonth);

        //            Maintable.AddCell(cellemp);
        //            //document.Add(Maintable);

        //            if (titleofdocumentindex == 0)
        //            {
        //                document.Add(Maintable);
        //                titleofdocumentindex = 1;
        //            }

        //            #endregion

        //            #region Table Headings



        //            PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
        //            SecondtableHeadings.TotalWidth = 800f;
        //            SecondtableHeadings.LockedWidth = true;
        //            float[] SecondHeadingsWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 13)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //            }
        //            #endregion

        //            SecondtableHeadings.SetWidths(SecondHeadingsWidth);

        //            //Cell Headings
        //            //1
        //            PdfPCell sNo = new PdfPCell(new Phrase("S.No ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            //sNo.Colspan = 1;
        //            sNo.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(sNo);
        //            //2
        //            PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpId.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpId);
        //            //3
        //            PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpName.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpName);
        //            //4
        //            PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CDesgn.Border = 15;
        //            SecondtableHeadings.AddCell(CDesgn);

        //            //5
        //            if (nhs != 0)
        //            {
        //                PdfPCell COTs = new PdfPCell(new Phrase("NHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COTs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COTs.Border = 15;
        //                SecondtableHeadings.AddCell(COTs);
        //            }

        //            //6
        //            if (nhhrs != 0)
        //            {
        //                PdfPCell COthrs = new PdfPCell(new Phrase("NH Hrs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COthrs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COthrs.Border = 15;
        //                SecondtableHeadings.AddCell(COthrs);
        //            }

        //            //7
        //            if (srate != 0)
        //            {
        //                PdfPCell CSrate = new PdfPCell(new Phrase("S.Rate", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CSrate.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CSrate.Border = 15;
        //                SecondtableHeadings.AddCell(CSrate);
        //            }

        //            //8
        //            if (nhamt != 0)
        //            {
        //                PdfPCell Cotamt = new PdfPCell(new Phrase("NHs Amount", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cotamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cotamt.Border = 15;
        //                SecondtableHeadings.AddCell(Cotamt);
        //            }

        //            //9
        //            if (pf != 0)
        //            {
        //                PdfPCell CPF = new PdfPCell(new Phrase("PF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPF.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPF.Border = 15;
        //                SecondtableHeadings.AddCell(CPF);
        //            }

        //            //10
        //            if (esi != 0)
        //            {
        //                PdfPCell CESI = new PdfPCell(new Phrase("ESI", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CESI.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CESI.Border = 15;
        //                SecondtableHeadings.AddCell(CESI);
        //            }

        //            //11
        //            if (deductions != 0)
        //            {
        //                PdfPCell CTotDed = new PdfPCell(new Phrase("Tot Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CTotDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CTotDed.Border = 15;
        //                SecondtableHeadings.AddCell(CTotDed);
        //            }

        //            //12
        //            if (netpay != 0)
        //            {
        //                PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNetPay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNetPay.Border = 15;
        //                SecondtableHeadings.AddCell(CNetPay);
        //            }

        //            //13
        //            PdfPCell CSignature = new PdfPCell(new Phrase("Bank A/c No./ Signature", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CSignature.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CSignature.Border = 15;
        //            SecondtableHeadings.AddCell(CSignature);


        //            #endregion

        //            #region Table Data

        //            PdfPTable Secondtable = new PdfPTable(tableCells);
        //            Secondtable.TotalWidth = 800f;
        //            Secondtable.LockedWidth = true;
        //            float[] SecondWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 13)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //            }
        //            #endregion

        //            Secondtable.SetWidths(SecondWidth);

        //            int rowCount = 0;
        //            int pageCount = 0;
        //            int i = nextpagei;

        //            // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
        //            {
        //                forConvert = 0;
        //                if (dt.Rows[i]["Duties"].ToString().Trim().Length > 0)
        //                    forConvert = Convert.ToSingle(dt.Rows[i]["Duties"].ToString());
        //                if (forConvert > 0)
        //                {

        //                    if (nextpagerecordscount == 0)
        //                    {
        //                        document.Add(SecondtableHeadings);
        //                    }

        //                    nextpagerecordscount++;
        //                    //1
        //                    PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n \n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CSNo.Border = 15;
        //                    Secondtable.AddCell(CSNo);
        //                    //2
        //                    PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpId1.Border = 15;
        //                    Secondtable.AddCell(CEmpId1);
        //                    //3
        //                    PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpName"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpName1.Border = 15;
        //                    Secondtable.AddCell(CEmpName1);
        //                    //4
        //                    PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Design"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpDesgn.Border = 15;
        //                    Secondtable.AddCell(CEmpDesgn);

        //                    //5
        //                    if (nhs != 0)
        //                    {
        //                        if (dt.Rows[i]["Duties"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["Duties"].ToString());
        //                        totalnhs += forConvert;
        //                        Grandtotalnhs += forConvert;
        //                        PdfPCell CNoOfots = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNoOfots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNoOfots.Border = 15;
        //                        Secondtable.AddCell(CNoOfots);
        //                    }

        //                    //6
        //                    if (nhhrs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Dutyhrs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Dutyhrs"].ToString()));
        //                        totalnhhrs += forConvert;
        //                        Grandtotalnhhrs += forConvert;
        //                        PdfPCell COthrs = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        COthrs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        COthrs.Border = 15;
        //                        Secondtable.AddCell(COthrs);
        //                    }

        //                    //7

        //                    if (srate != 0)
        //                    {
        //                        forConvert = 0;

        //                        if (dt.Rows[i]["Salrate"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Salrate"].ToString()));
        //                        totalSRate += forConvert;
        //                        GrandtotalSRate += forConvert;

        //                        PdfPCell CSrate = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CSrate.Border = 15;
        //                        Secondtable.AddCell(CSrate);
        //                    }

        //                    //8
        //                    if (nhamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Amount"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Amount"].ToString()));
        //                        totalnhAmount += forConvert;
        //                        GrandtotalnhAmount += forConvert;
        //                        PdfPCell Cottamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cottamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cottamt.Border = 15;
        //                        Secondtable.AddCell(Cottamt);
        //                    }



        //                    //9
        //                    if (pf != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["PF"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PF"].ToString()));
        //                        totalPF += forConvert;
        //                        GrandtotalPF += forConvert;

        //                        PdfPCell CPF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CPF1.Border = 15;
        //                        Secondtable.AddCell(CPF1);
        //                    }

        //                    //10
        //                    if (esi != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["ESI"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESI"].ToString()));
        //                        totalESI += forConvert;

        //                        GrandtotalESI += forConvert;

        //                        PdfPCell CESI1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CESI1.Border = 15;
        //                        Secondtable.AddCell(CESI1);
        //                    }


        //                    //11
        //                    if (deductions != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["TOtaldeduct"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TOtaldeduct"].ToString()));
        //                        totalDed += forConvert;
        //                        GrandtotalDed += forConvert;

        //                        PdfPCell CTotDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CTotDed1.Border = 15;
        //                        Secondtable.AddCell(CTotDed1);
        //                    }

        //                    //12
        //                    if (netpay != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["ActualAmount"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ActualAmount"].ToString()));
        //                        if (forConvert <= 0)
        //                        {
        //                            forConvert = 0;
        //                        }
        //                        totalActualamount += forConvert;
        //                        GrandtotalActualamount += forConvert;
        //                        PdfPCell CNetPay1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNetPay1.Border = 15;
        //                        Secondtable.AddCell(CNetPay1);
        //                    }

        //                    //13
        //                    string EmpBankAcNo = dt.Rows[i]["EmpBankAcNo"].ToString();
        //                    PdfPCell CSignature1 = new PdfPCell(new Phrase(EmpBankAcNo, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CSignature1.Border = 15;
        //                    CSignature1.MinimumHeight = 25;
        //                    Secondtable.AddCell(CSignature1);
        //                }


        //            }
        //            #endregion

        //            #region Table Total values

        //            SecondtableFooter = new PdfPTable(tableCells);
        //            SecondtableFooter.TotalWidth = 800f;
        //            SecondtableFooter.LockedWidth = true;
        //            float[] SecondFooterWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 13)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //            }
        //            #endregion

        //            SecondtableFooter.SetWidths(SecondFooterWidth);
        //            //1
        //            PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSNo.Border = 15;
        //            SecondtableFooter.AddCell(FCSNo);

        //            //2
        //            PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpId1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpId1);

        //            //3
        //            PdfPCell FCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpName1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpName1);

        //            //4
        //            PdfPCell FCEmpDesgn = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpDesgn.Border = 15;
        //            //FCEmpDesgn.Colspan = 4;
        //            SecondtableFooter.AddCell(FCEmpDesgn);


        //            //5
        //            if (nhs != 0)
        //            {
        //                PdfPCell FCNoOfots = new PdfPCell(new Phrase(totalnhs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCNoOfots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNoOfots.Border = 15;
        //                SecondtableFooter.AddCell(FCNoOfots);
        //            }

        //            //6
        //            if (nhhrs != 0)
        //            {
        //                PdfPCell FCOthrs = new PdfPCell(new Phrase(totalnhhrs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCOthrs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCOthrs.Border = 15;
        //                SecondtableFooter.AddCell(FCOthrs);
        //            }


        //            //7
        //            if (srate != 0)
        //            {
        //                PdfPCell FSrate = new PdfPCell(new Phrase(totalSRate.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FSrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FSrate.Border = 15;
        //                SecondtableFooter.AddCell(FSrate);
        //            }

        //            //8
        //            if (nhamt != 0)
        //            {
        //                PdfPCell FCottamt = new PdfPCell(new Phrase(totalnhAmount.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCottamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCottamt.Border = 15;
        //                SecondtableFooter.AddCell(FCottamt);
        //            }

        //            //9
        //            if (pf != 0)
        //            {
        //                PdfPCell FCPF1 = new PdfPCell(new Phrase(totalPF.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCPF1.Border = 15;
        //                SecondtableFooter.AddCell(FCPF1);
        //            }

        //            //10
        //            if (esi != 0)
        //            {
        //                PdfPCell FCESI1 = new PdfPCell(new Phrase(totalESI.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCESI1.Border = 15;
        //                SecondtableFooter.AddCell(FCESI1);
        //            }


        //            //11
        //            if (deductions != 0)
        //            {
        //                PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalDed.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCTotDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCTotDed1);
        //            }

        //            //12
        //            if (netpay != 0)
        //            {
        //                PdfPCell FCNetPay1 = new PdfPCell(new Phrase(totalActualamount.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtableFooter.AddCell(FCNetPay1);
        //            }

        //            //13
        //            PdfPCell FCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtableFooter.AddCell(FCSignature1);
        //            #endregion


        //            SecondtableGrandtotalFooter = new PdfPTable(tableCells);
        //            SecondtableGrandtotalFooter.TotalWidth = 800f;
        //            SecondtableGrandtotalFooter.LockedWidth = true;
        //            float[] SecondGrandtotalFooterWidth = new float[] { };
        //            #region Table Cells

        //            if (tableCells == 13)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //            }
        //            #endregion
        //            SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);



        //            SecondtablecheckbyFooter = new PdfPTable(tableCells);
        //            SecondtablecheckbyFooter.TotalWidth = 800f;
        //            SecondtablecheckbyFooter.LockedWidth = true;
        //            float[] SecondcheckbyFooterWidth = new float[] { };
        //            #region Table Cells

        //            if (tableCells == 13)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 2f, 7f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 5.5f, 2f, 2f, 7f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 7f, 2f, 2f, 7f };
        //            }
        //            #endregion
        //            SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);

        //            #region Table   Grand   Total  Footer

        //            //1
        //            PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSNo.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCSNo);

        //            //2
        //            PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpId1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpId1);

        //            //3
        //            PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpName1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpName1);

        //            //4
        //            PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("Grand  Totals: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpDesgn.Border = 15;
        //            //FCEmpDesgn.Colspan = 4;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);


        //            //5
        //            if (nhs != 0)
        //            {
        //                PdfPCell GFCNoOfots = new PdfPCell(new Phrase(Grandtotalnhs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNoOfots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNoOfots.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCNoOfots);
        //            }

        //            //6
        //            if (nhhrs != 0)
        //            {
        //                PdfPCell GFOThrs = new PdfPCell(new Phrase(Grandtotalnhhrs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFOThrs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFOThrs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFOThrs);
        //            }


        //            //7
        //            if (srate != 0)
        //            {
        //                PdfPCell GFSrate = new PdfPCell(new Phrase(GrandtotalSRate.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFSrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFSrate.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFSrate);
        //            }


        //            //8
        //            if (nhamt != 0)
        //            {
        //                PdfPCell GFCottamt = new PdfPCell(new Phrase(GrandtotalnhAmount.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCottamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCottamt.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCottamt);
        //            }



        //            //9
        //            if (pf != 0)
        //            {
        //                PdfPCell GFCPF1 = new PdfPCell(new Phrase(GrandtotalPF.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCPF1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCPF1);
        //            }

        //            //10
        //            if (esi != 0)
        //            {
        //                PdfPCell GFCESI1 = new PdfPCell(new Phrase(GrandtotalESI.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCESI1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCESI1);
        //            }


        //            //11
        //            if (deductions != 0)
        //            {
        //                PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(GrandtotalDed.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCTotDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCTotDed1);
        //            }

        //            //12
        //            if (netpay != 0)
        //            {
        //                PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(GrandtotalActualamount.ToString("#,#.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtablecheckbyFooter.AddCell(GFCNetPay1);
        //            }
        //            //13
        //            PdfPCell GFCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtablecheckbyFooter.AddCell(GFCSignature1);
        //            #endregion

        //            #region   Footer Headings




        //            //1
        //            PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHCheckedbybr1.Border = 0;
        //            FHCheckedbybr1.Rowspan = 0;
        //            FHCheckedbybr1.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            //2
        //            PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHApprovedbr2.Border = 0;
        //            FHApprovedbr2.Colspan = tableCells;

        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


        //            //1
        //            PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedby.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FHCheckedby.Border = 0;
        //            //FHCheckedby.Rowspan = 0;
        //            FHCheckedby.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedby);
        //            //2
        //            PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Gross  Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedBy.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //            FHApprovedBy.Border = 0;
        //            FHApprovedBy.PaddingTop = -7;
        //            FHApprovedBy.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHApprovedBy);



        //            #endregion

        //            document.Add(Secondtable);


        //            if (nextpagerecordscount == targetpagerecors)
        //            {
        //                targetpagerecors = secondpagerecords;
        //                document.Add(SecondtableFooter);
        //                document.NewPage();
        //                nextpagerecordscount = 0;

        //                #region  Zero variables

        //                totalActualamount = 0;
        //                totalnhs = 0;
        //                totalnhhrs = 0;
        //                totalSRate = 0;
        //                totalnhAmount = 0;
        //                totalPF = 0;
        //                totalESI = 0;
        //                totalDed = 0;

        //                #endregion
        //            }
        //        }

        //        if (nextpagerecordscount >= 0)
        //        {
        //           // document.Add(SecondtableFooter);
        //            document.Add(SecondtableGrandtotalFooter);
        //            document.Add(SecondtablecheckbyFooter);
        //        }
        //        document.Close();
        //        if (nextpagehasPages)
        //        {

        //            Response.ContentType = "application/pdf";
        //            Response.AddHeader("content-disposition", "attachment;filename=NHs.pdf");
        //            Response.Buffer = true;
        //            Response.Clear();
        //            Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        //            Response.OutputStream.Flush();
        //            Response.End();
        //        }
        //    }
        //}

        //    protected void btnonlyNpots_Click(object sender, EventArgs e)

        //    {
        //        int titleofdocumentindex = 0;
        //        if (ddlClients.SelectedIndex <= 0)
        //        {
        //            ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
        //            return;
        //        }

        //        int payMonth = GetMonth(ddlmonth.SelectedValue);
        //        //int month = GetMonthAndYear();

        //        int month = GetMonthBasedOnSelectionDateorMonth();

        //        string selectmonth = string.Empty;
        //        string SelectmonthWithbankacno = string.Empty;
        //        string SelectmonthWithoutbankacno = string.Empty;
        //        DataTable dt = null;


        //        var clientid = ddlClients.SelectedValue;
        //        var Paysheetoption = ddlpaymenttype.SelectedIndex;
        //        var Noofattendance = ddlnoofattendance.SelectedIndex;
        //        var pfesioptions = ddl_Pf_Esi_Options.SelectedIndex;

        //        var SPName = "";
        //        Hashtable HTPaysheet = new Hashtable();
        //        SPName = "IMEPaysheetpdfs";
        //        HTPaysheet.Add("@ClientId", clientid);
        //        HTPaysheet.Add("@month", month);
        //        HTPaysheet.Add("@PaymentOption", Paysheetoption);
        //        HTPaysheet.Add("@Attendance", Noofattendance);
        //        HTPaysheet.Add("@PfesiOptions", pfesioptions);
        //        dt = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTPaysheet);

        //        MemoryStream ms = new MemoryStream();
        //        if (dt.Rows.Count > 0)
        //        {
        //            Document document = new Document(PageSize.LEGAL.Rotate());
        //            PdfWriter writer = PdfWriter.GetInstance(document, ms);
        //            document.Open();
        //            document.AddTitle("FaMS");
        //            document.AddAuthor("WebWonders");
        //            document.AddSubject("Wage Sheet");
        //            document.AddKeywords("Keyword1, keyword2, …");//
        //            float forConvert;
        //            string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
        //            DataTable compInfo = SqlHelper.Instance.GetTableByQuery(strQry);
        //            string companyName1 = "Your Company Name";
        //            string companyAddress = "Your Company Address";
        //            if (compInfo.Rows.Count > 0)
        //            {
        //                companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
        //                companyAddress = compInfo.Rows[0]["Address"].ToString();
        //            }

        //            #region Variables for table cells counting

        //            int dts = 0;
        //            int tempgross = 0;
        //            int basic = 0;
        //            int da = 0;
        //            int hra = 0;
        //            int cca = 0;
        //            int conveyance = 0;
        //            int washallowance = 0;
        //            int otherallowance = 0;
        //            int leavewages = 0;
        //            int gratuity = 0;
        //            int bonus = 0;
        //            int nfhs = 0;
        //            int rc = 0;
        //            int cs = 0;
        //            int gross = 0;
        //            int incentivs = 0;
        //            int pf = 0;
        //            int esi = 0;
        //            int proftax = 0;
        //            int salAdvDed = 0;
        //            int uniformDed = 0;
        //            int otherDed = 0;
        //            int canteenAdv = 0;
        //            int penalty = 0;
        //            int owf = 0;
        //            int totalDeductions = 0;
        //            int netpay = 0;


        //            float dts1 = 0;
        //            float tempgross1 = 0;
        //            float basic1 = 0;
        //            float da1 = 0;
        //            float hra1 = 0;
        //            float cca1 = 0;
        //            float conveyance1 = 0;
        //            float washallowance1 = 0;
        //            float otherallowance1 = 0;
        //            float leavewages1 = 0;
        //            float gratuity1 = 0;
        //            float bonus1 = 0;
        //            float nfhs1 = 0;
        //            float rc1 = 0;
        //            float cs1 = 0;
        //            float gross1 = 0;
        //            float incentivs1 = 0;
        //            float pf1 = 0;
        //            float esi1 = 0;
        //            float proftax1 = 0;
        //            float salAdvDed1 = 0;
        //            float uniformDed1 = 0;
        //            float otherDed1 = 0;
        //            float canteenAdv1 = 0;
        //            float penalty1 = 0;
        //            float owf1 = 0;
        //            float totalDeductions1 = 0;
        //            float netpay1 = 0;




        //            #endregion


        //            #region Data for counting tablecells

        //            for (int i = 0; i < dt.Rows.Count; i++)
        //            {
        //                dts1 = float.Parse(dt.Rows[i]["NoOfDuties"].ToString());
        //                if (dts1 != 0)
        //                {
        //                    dts1 += 1;
        //                    if (dts1 > 0)
        //                    {
        //                        dts = 1;
        //                    }
        //                }

        //                tempgross1 = float.Parse(dt.Rows[i]["tempgross"].ToString());
        //                if (tempgross1 != 0)
        //                {
        //                    tempgross1 += 1;
        //                    if (tempgross1 > 0)
        //                    {
        //                        tempgross = 1;
        //                    }
        //                }


        //                gross1 = float.Parse(dt.Rows[i]["gross"].ToString());
        //                if (gross1 != 0)
        //                {
        //                    gross1 += 1;
        //                    if (gross1 > 0)
        //                    {
        //                        gross = 1;
        //                    }
        //                }

        //                incentivs1 = float.Parse(dt.Rows[i]["incentivs"].ToString());
        //                if (incentivs1 != 0)
        //                {
        //                    incentivs1 += 1;
        //                    if (incentivs1 > 0)
        //                    {
        //                        incentivs = 1;
        //                    }
        //                }
        //                pf1 = float.Parse(dt.Rows[i]["Pfonduties"].ToString());
        //                if (pf1 != 0)
        //                {
        //                    pf1 += 1;
        //                    if (pf1 > 0)
        //                    {
        //                        pf = 1;
        //                    }
        //                }
        //                esi1 = float.Parse(dt.Rows[i]["Esionduties"].ToString());
        //                if (esi1 != 0)
        //                {
        //                    esi1 += 1;
        //                    if (esi1 > 0)
        //                    {
        //                        esi = 1;
        //                    }
        //                }
        //                proftax1 = float.Parse(dt.Rows[i]["proftax"].ToString());
        //                if (proftax1 != 0)
        //                {
        //                    proftax1 += 1;
        //                    if (proftax1 > 0)
        //                    {
        //                        proftax = 1;
        //                    }
        //                }
        //                salAdvDed1 = float.Parse(dt.Rows[i]["salAdvDed"].ToString());
        //                if (salAdvDed1 != 0)
        //                {
        //                    salAdvDed1 += 1;
        //                    if (salAdvDed1 > 0)
        //                    {
        //                        salAdvDed = 1;
        //                    }
        //                }
        //                uniformDed1 = int.Parse(dt.Rows[i]["uniformDed"].ToString());
        //                if (uniformDed1 != 0)
        //                {
        //                    uniformDed1 += 1;
        //                    if (uniformDed1 > 0)
        //                    {
        //                        uniformDed = 1;
        //                    }
        //                }
        //                otherDed1 = int.Parse(dt.Rows[i]["otherDed"].ToString());
        //                if (otherDed1 != 0)
        //                {
        //                    otherDed1 += 1;
        //                    if (otherDed1 > 0)
        //                    {
        //                        otherDed = 1;
        //                    }
        //                }
        //                canteenAdv1 = float.Parse(dt.Rows[i]["canteenAdv"].ToString());
        //                if (canteenAdv1 != 0)
        //                {
        //                    canteenAdv1 += 1;
        //                    if (canteenAdv1 > 0)
        //                    {
        //                        canteenAdv = 1;
        //                    }
        //                }

        //                penalty1 = float.Parse(dt.Rows[i]["penalty"].ToString());
        //                if (penalty1 != 0)
        //                {
        //                    penalty1 += 1;
        //                    if (penalty1 > 0)
        //                    {
        //                        penalty = 1;
        //                    }
        //                }

        //                owf1 = float.Parse(dt.Rows[i]["owf"].ToString());
        //                if (owf1 != 0)
        //                {
        //                    owf1 += 1;
        //                    if (owf1 > 0)
        //                    {
        //                        owf = 1;
        //                    }
        //                }

        //                totalDeductions1 = float.Parse(dt.Rows[i]["Totaldeduct"].ToString());
        //                if (totalDeductions1 != 0)
        //                {
        //                    totalDeductions1 += 1;
        //                    if (totalDeductions1 > 0)
        //                    {
        //                        totalDeductions = 1;
        //                    }
        //                }
        //                netpay1 = float.Parse(dt.Rows[i]["NetAmount"].ToString());
        //                if (netpay1 != 0)
        //                {
        //                    netpay1 += 1;
        //                    if (netpay1 > 0)
        //                    {
        //                        netpay = 1;
        //                    }
        //                }

        //            }

        //            #endregion

        //            int sno = 1;
        //            int empid = 1;
        //            int empname = 1;
        //            int design = 1;
        //            int bankacno = 1;

        //            int tableCells = dts + tempgross + basic + da + hra + cca + conveyance + washallowance + otherallowance + leavewages +
        //                            gratuity + bonus + nfhs + rc + cs + gross + incentivs + pf + esi + proftax + salAdvDed + uniformDed + otherDed + canteenAdv +
        //                             penalty + owf + totalDeductions + netpay + sno + empid + empname + design + bankacno;




        //            #region variables for total

        //            float totalDuties = 0;
        //            float totaltempgross = 0;
        //            float totalBasic = 0;
        //            float totalDA = 0;
        //            float totalHRA = 0;
        //            float totalCCA = 0;
        //            float totalConveyance = 0;
        //            float totalWA = 0;
        //            float totalOA = 0;
        //            float totalLw = 0;
        //            float totalGratuity = 0;
        //            float totalbonus = 0;
        //            float totalNfhs = 0;
        //            float totalRc = 0;
        //            float totalCs = 0;
        //            float totalGross = 0;
        //            float totalIncentivs = 0;
        //            float totalPF = 0;
        //            float totalESI = 0;
        //            float totalProfTax = 0;
        //            float totalSalAdv = 0;
        //            float totalUniforDed = 0;
        //            float totalOtherdedn = 0;
        //            float totalCanteenAdv = 0;
        //            float totalPenalty = 0;
        //            float totalowf = 0;
        //            float totalDed = 0;
        //            float totalNetpay = 0;

        //            #endregion

        //            #region variables for  Grand  total


        //            float GrandtotalDuties = 0;
        //            float Grandtotaltempgross = 0;
        //            float GrandtotalBasic = 0;
        //            float GrandtotalDA = 0;
        //            float GrandtotalHRA = 0;
        //            float GrandtotalCCA = 0;
        //            float GrandtotalConveyance = 0;
        //            float GrandtotalWA = 0;
        //            float GrandtotalOA = 0;
        //            float GrandtotalLw = 0;
        //            float GrandtotalGratuity = 0;
        //            float Grandtotalbonus = 0;
        //            float GrandtotalNfhs = 0;
        //            float GrandtotalRc = 0;
        //            float GrandtotalCs = 0;
        //            float GrandtotalGross = 0;
        //            float GrandtotalIncentivs = 0;
        //            float GrandtotalPF = 0;
        //            float GrandtotalESI = 0;
        //            float GrandtotalProfTax = 0;
        //            float GrandtotalSalAdv = 0;
        //            float GrandtotalUniforDed = 0;
        //            float GrandtotalOtherdedn = 0;
        //            float GrandtotalCanteenAdv = 0;
        //            float GrandtotalPenalty = 0;
        //            float Grandtotalowf = 0;
        //            float GrandtotalDed = 0;
        //            float GrandtotalNetpay = 0;

        //            #endregion

        //            int nextpagerecordscount = 0;
        //            int targetpagerecors = 10;
        //            int secondpagerecords = targetpagerecors + 3;
        //            bool nextpagehasPages = false;
        //            int j = 0;
        //            PdfPTable SecondtablecheckbyFooter = null;
        //            PdfPTable SecondtableFooter = null;
        //            PdfPTable SecondtableGrandtotalFooter = null;
        //            for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
        //            {
        //                nextpagehasPages = true;


        //                #region Titles of Document
        //                PdfPTable Maintable = new PdfPTable(27);
        //                if (tableCells > 20)
        //                {
        //                    Maintable.TotalWidth = 980f;
        //                }
        //                else
        //                {
        //                    Maintable.TotalWidth = 850f;
        //                }
        //                Maintable.LockedWidth = true;
        //                float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };


        //                Maintable.SetWidths(width);
        //                uint FONT_SIZE = 8;

        //                //Company Name & vage act details

        //                PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
        //                cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                cellemp.Colspan = 27;
        //                cellemp.Border = 0;

        //                PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
        //                Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Heading.Colspan = 27;
        //                Heading.Border = 0;
        //                Maintable.AddCell(Heading);


        //                PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 15, Font.BOLD, BaseColor.BLACK)));
        //                actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                actDetails.Colspan = 27;
        //                actDetails.Border = 0;// 15;
        //                Maintable.AddCell(actDetails);

        //                Maintable.AddCell(cellemp);
        //                #endregion


        //                #region Sub Headings

        //                PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 20, Font.BOLD, BaseColor.BLACK)));
        //                companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                companyName.Colspan = 27;
        //                companyName.Border = 0;// 15;
        //                Maintable.AddCell(companyName);

        //                PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        //                paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                paySheet.Colspan = 27;
        //                paySheet.Border = 0;// 15;
        //                Maintable.AddCell(paySheet);

        //                PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //                CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CClient.Colspan = 11;
        //                CClient.Border = 0;// 15;
        //                Maintable.AddCell(CClient);



        //                PdfPCell CDates = new PdfPCell(new Phrase("Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //                CDates.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CDates.Colspan = 8;
        //                CDates.Border = 0;// 15;
        //                Maintable.AddCell(CDates);

        //                // PdfPCell CPaySheetDate = new PdfPCell(new Phrase("Pay Sheet Date :  " + DateTime.Now.Date.ToString("dd/MM/yyyy"), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //                PdfPCell CPaySheetDate = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //                CPaySheetDate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CPaySheetDate.Colspan = 1;
        //                CPaySheetDate.Border = 0;// 15;
        //                Maintable.AddCell(CPaySheetDate);

        //                PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :   " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //                CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CPayMonth.Colspan = 7;
        //                CPayMonth.Border = 0;// 15;
        //                Maintable.AddCell(CPayMonth);


        ////                string Clientaddress = "";
        ////                string queryaddress = @"select isnull(ClientAddrHno,'')+'  '+isnull(ClientAddrStreet,'')+'  '+isnull(ClientAddrColony,'')+'  '+isnull(ClientAddrArea,'')+
        ////		            '  '+isnull(ClientAddrCity,'')+'  '+isnull(ClientAddrState,'')+'  '+isnull(ClientAddrPin,'') as Address from Clients where ClientId='" + ddlClients.SelectedValue + "'";
        ////                DataTable dtaddress = SqlHelper.Instance.GetTableByQuery(queryaddress);
        ////                if (dtaddress.Rows.Count > 0)
        ////                {
        ////                    Clientaddress = dtaddress.Rows[0]["Address"].ToString();
        ////                }

        //                PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlcname.SelectedItem + " ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //                CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CClientName.Colspan = 27;
        //                CClientName.Border = 0;// 15;
        //                Maintable.AddCell(CClientName);

        //                Maintable.AddCell(cellemp);
        //                //document.Add(Maintable);

        //                if (titleofdocumentindex == 0)
        //                {
        //                    document.Add(Maintable);
        //                    titleofdocumentindex = 1;
        //                }

        //                #endregion


        //                #region Table Headings

        //                PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
        //                if (tableCells > 20)
        //                {
        //                    SecondtableHeadings.TotalWidth = 980f;
        //                }
        //                else
        //                {
        //                    SecondtableHeadings.TotalWidth = 850f;
        //                }
        //                SecondtableHeadings.LockedWidth = true;
        //                float[] SecondHeadingsWidth = new float[] { };

        //                #region Table Cells

        //                if (tableCells == 31)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 30)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 29)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 28)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 27)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 26)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 25)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 24)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 23)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 22)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 21)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 20)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 19)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 18)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 17)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 16)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 15)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 14)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 13)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 12)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 11)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 10)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 9)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 8)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 5f };
        //                }

        //                if (tableCells == 7)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 5f };
        //                }

        //                if (tableCells == 6)
        //                {
        //                    SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 5f };
        //                }
        //                #endregion

        //                SecondtableHeadings.SetWidths(SecondHeadingsWidth);

        //                //Cell Headings
        //                //1
        //                PdfPCell sNo = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                //sNo.Colspan = 1;
        //                sNo.Border = 15;// 15;
        //                SecondtableHeadings.AddCell(sNo);

        //                //2
        //                PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CEmpId.Border = 15;// 15;
        //                SecondtableHeadings.AddCell(CEmpId);

        //                //3
        //                PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CEmpName.Border = 15;// 15;
        //                SecondtableHeadings.AddCell(CEmpName);

        //                //4
        //                PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CDesgn.Border = 15;
        //                SecondtableHeadings.AddCell(CDesgn);

        //                //5
        //                if (dts != 0)
        //                {
        //                    PdfPCell CDuties = new PdfPCell(new Phrase("Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CDuties.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CDuties.Border = 15;
        //                    SecondtableHeadings.AddCell(CDuties);
        //                }

        //                //6
        //                if (tempgross != 0)
        //                {
        //                    PdfPCell Ctempgross = new PdfPCell(new Phrase("S. Rate", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    Ctempgross.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    Ctempgross.Border = 15;
        //                    SecondtableHeadings.AddCell(Ctempgross);
        //                }



        //                //19
        //                if (gross != 0)
        //                {
        //                    PdfPCell CGross = new PdfPCell(new Phrase("Gross", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CGross.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CGross.Border = 15;
        //                    SecondtableHeadings.AddCell(CGross);
        //                }


        //                //20
        //                if (incentivs != 0)
        //                {
        //                    PdfPCell CIncentivs = new PdfPCell(new Phrase("Incentivs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CIncentivs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CIncentivs.Border = 15;
        //                    SecondtableHeadings.AddCell(CIncentivs);
        //                }



        //                //21
        //                if (pf != 0)
        //                {
        //                    PdfPCell CPF = new PdfPCell(new Phrase("PF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CPF.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CPF.Border = 15;
        //                    SecondtableHeadings.AddCell(CPF);
        //                }

        //                //22
        //                if (esi != 0)
        //                {
        //                    PdfPCell CESI = new PdfPCell(new Phrase("ESI", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CESI.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CESI.Border = 15;
        //                    SecondtableHeadings.AddCell(CESI);
        //                }

        //                //23
        //                if (proftax != 0)
        //                {
        //                    PdfPCell CPT = new PdfPCell(new Phrase("PT", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CPT.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CPT.Border = 15;
        //                    SecondtableHeadings.AddCell(CPT);
        //                }

        //                //24
        //                if (salAdvDed != 0)
        //                {
        //                    PdfPCell CSalAdv = new PdfPCell(new Phrase("Sal Adv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CSalAdv.Border = 15;
        //                    SecondtableHeadings.AddCell(CSalAdv);
        //                }

        //                //25
        //                if (uniformDed != 0)
        //                {
        //                    PdfPCell CUnifDed = new PdfPCell(new Phrase("Unif. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CUnifDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CUnifDed.Border = 15;
        //                    SecondtableHeadings.AddCell(CUnifDed);
        //                }

        //                //26
        //                if (otherDed != 0)
        //                {
        //                    PdfPCell COtherDed = new PdfPCell(new Phrase("Other Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    COtherDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    COtherDed.Border = 15;
        //                    SecondtableHeadings.AddCell(COtherDed);
        //                }

        //                //27
        //                if (canteenAdv != 0)
        //                {
        //                    PdfPCell Ccanteended = new PdfPCell(new Phrase("Mess. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    Ccanteended.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    Ccanteended.Border = 15;
        //                    SecondtableHeadings.AddCell(Ccanteended);
        //                }



        //                //28
        //                if (penalty != 0)
        //                {
        //                    PdfPCell CPenalty = new PdfPCell(new Phrase("Penalty", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CPenalty.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CPenalty.Border = 15;
        //                    SecondtableHeadings.AddCell(CPenalty);
        //                }

        //                //28 A
        //                if (owf != 0)
        //                {
        //                    PdfPCell Cowf = new PdfPCell(new Phrase("OWF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    Cowf.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    Cowf.Border = 15;
        //                    SecondtableHeadings.AddCell(Cowf);
        //                }

        //                //29
        //                if (totalDeductions != 0)
        //                {
        //                    PdfPCell CTotDed = new PdfPCell(new Phrase("Tot Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CTotDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CTotDed.Border = 15;
        //                    SecondtableHeadings.AddCell(CTotDed);
        //                }

        //                //30
        //                if (netpay != 0)
        //                {
        //                    PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    CNetPay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CNetPay.Border = 15;
        //                    SecondtableHeadings.AddCell(CNetPay);
        //                }

        //                //31
        //                PdfPCell CSignature = new PdfPCell(new Phrase("Bank A/c No./ Signature", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CSignature.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CSignature.Border = 15;
        //                SecondtableHeadings.AddCell(CSignature);


        //                #endregion


        //                #region Table Data

        //                PdfPTable Secondtable = new PdfPTable(tableCells);
        //                if (tableCells > 20)
        //                {
        //                    Secondtable.TotalWidth = 980f;
        //                }
        //                else
        //                {
        //                    Secondtable.TotalWidth = 850f;
        //                }

        //                Secondtable.LockedWidth = true;
        //                float[] SecondWidth = new float[] { };

        //                #region Table Cells

        //                if (tableCells == 31)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 30)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 29)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 28)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 27)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 26)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 25)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 24)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 23)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 22)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 21)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 20)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 19)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 18)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 17)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 16)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 15)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 14)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 13)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 12)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 11)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 10)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 9)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 8)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 5f };
        //                }

        //                if (tableCells == 7)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 5f };
        //                }

        //                if (tableCells == 6)
        //                {
        //                    SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 5f };
        //                }
        //                #endregion

        //                Secondtable.SetWidths(SecondWidth);




        //                int rowCount = 0;
        //                int pageCount = 0;
        //                int i = nextpagei;

        //                // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
        //                {
        //                    float ForconvertOt = 0;
        //                    forConvert = 0;
        //                    if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
        //                        forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());

        //                    if (forConvert > 0)
        //                    {

        //                        if (nextpagerecordscount == 0)
        //                        {
        //                            document.Add(SecondtableHeadings);
        //                        }

        //                        nextpagerecordscount++;

        //                        //1
        //                        PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n \n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                        CSNo.Border = 15;
        //                        Secondtable.AddCell(CSNo);

        //                        //2
        //                        PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                        CEmpId1.Border = 15;
        //                        Secondtable.AddCell(CEmpId1);

        //                        //3
        //                        PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpName"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                        CEmpName1.Border = 15;
        //                        Secondtable.AddCell(CEmpName1);

        //                        //4
        //                        PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Design"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                        CEmpDesgn.Border = 15;
        //                        Secondtable.AddCell(CEmpDesgn);

        //                        //5
        //                        if (dts != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
        //                                forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());
        //                            totalDuties += forConvert;
        //                            GrandtotalDuties += forConvert;

        //                            PdfPCell CNoOfDuties = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CNoOfDuties.Border = 15;
        //                            Secondtable.AddCell(CNoOfDuties);
        //                        }

        //                        //5 A
        //                        if (tempgross != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["tempgross"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["tempgross"].ToString()));
        //                            totaltempgross += forConvert;
        //                            Grandtotaltempgross += forConvert;
        //                            PdfPCell Ctempgross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            Ctempgross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            Ctempgross1.Border = 15;
        //                            Secondtable.AddCell(Ctempgross1);
        //                        }


        //                        //19
        //                        if (gross != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["Gross"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gross"].ToString()));
        //                            totalGross += forConvert;
        //                            GrandtotalGross += forConvert;

        //                            PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CGross1.Border = 15;
        //                            Secondtable.AddCell(CGross1);
        //                        }

        //                        //20
        //                        if (incentivs != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["Incentivs"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Incentivs"].ToString()));
        //                            totalIncentivs += forConvert;
        //                            GrandtotalIncentivs += forConvert;
        //                            PdfPCell CIncentivs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CIncentivs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CIncentivs1.Border = 15;
        //                            Secondtable.AddCell(CIncentivs1);
        //                        }

        //                        //21
        //                        if (pf != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["Pfonduties"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Pfonduties"].ToString()));
        //                            totalPF += forConvert;
        //                            GrandtotalPF += forConvert;

        //                            PdfPCell CPF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CPF1.Border = 15;
        //                            Secondtable.AddCell(CPF1);
        //                        }

        //                        //22
        //                        if (esi != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["Esionduties"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Esionduties"].ToString()));
        //                            totalESI += forConvert;

        //                            GrandtotalESI += forConvert;

        //                            PdfPCell CESI1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CESI1.Border = 15;
        //                            Secondtable.AddCell(CESI1);
        //                        }

        //                        //23
        //                        if (proftax != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["ProfTax"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString()));
        //                            totalProfTax += forConvert;
        //                            GrandtotalProfTax += forConvert;

        //                            PdfPCell CProTax1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CProTax1.Border = 15;
        //                            Secondtable.AddCell(CProTax1);
        //                        }

        //                        //24
        //                        if (salAdvDed != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["SalAdvDed"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString()));
        //                            totalSalAdv += forConvert;
        //                            GrandtotalSalAdv += forConvert;

        //                            PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CSalAdv1.Border = 15;
        //                            Secondtable.AddCell(CSalAdv1);
        //                        }

        //                        //25
        //                        if (uniformDed != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["UniformDed"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString()));
        //                            totalUniforDed += forConvert;
        //                            GrandtotalUniforDed += forConvert;

        //                            PdfPCell CUnifDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CUnifDed1.Border = 15;
        //                            Secondtable.AddCell(CUnifDed1);
        //                        }

        //                        //26
        //                        if (otherDed != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["OtherDed"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherDed"].ToString()));
        //                            totalOtherdedn += forConvert;
        //                            GrandtotalOtherdedn += forConvert;

        //                            PdfPCell COtherDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            COtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            COtherDed1.Border = 15;
        //                            Secondtable.AddCell(COtherDed1);
        //                        }

        //                        //27
        //                        if (canteenAdv != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["CanteenAdv"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["CanteenAdv"].ToString()));
        //                            totalCanteenAdv += forConvert;
        //                            GrandtotalCanteenAdv += forConvert;

        //                            PdfPCell CCanteended = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CCanteended.Border = 15;
        //                            Secondtable.AddCell(CCanteended);
        //                        }



        //                        //28
        //                        if (penalty != 0)
        //                        {
        //                            if (dt.Rows[i]["Penalty"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Penalty"].ToString()));
        //                            totalPenalty += forConvert;
        //                            GrandtotalPenalty += forConvert;

        //                            PdfPCell CPenalty1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CPenalty1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CPenalty1.Border = 15;
        //                            Secondtable.AddCell(CPenalty1);
        //                        }

        //                        //28 A
        //                        if (owf != 0)
        //                        {
        //                            if (dt.Rows[i]["owf"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["owf"].ToString()));
        //                            totalowf += forConvert;
        //                            Grandtotalowf += forConvert;

        //                            PdfPCell Cowf1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            Cowf1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            Cowf1.Border = 15;
        //                            Secondtable.AddCell(Cowf1);
        //                        }



        //                        //29
        //                        if (totalDeductions != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["Totaldeduct"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Totaldeduct"].ToString()));
        //                            totalDed += forConvert;
        //                            GrandtotalDed += forConvert;

        //                            PdfPCell CTotDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CTotDed1.Border = 15;
        //                            Secondtable.AddCell(CTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //                        }

        //                        //30
        //                        if (netpay != 0)
        //                        {
        //                            forConvert = 0;
        //                            if (dt.Rows[i]["NetAmount"].ToString().Trim().Length > 0)
        //                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["NetAmount"].ToString()));
        //                            if (forConvert <= 0)
        //                            {
        //                                forConvert = 0;
        //                            }
        //                            totalNetpay += forConvert;
        //                            GrandtotalNetpay += forConvert;
        //                            PdfPCell CNetPay1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            CNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                            CNetPay1.Border = 15;
        //                            Secondtable.AddCell(CNetPay1);
        //                        }

        //                        //31
        //                        string EmpBankAcNo = dt.Rows[i]["EmpBankAcNo"].ToString();
        //                        PdfPCell CSignature1 = new PdfPCell(new Phrase(EmpBankAcNo, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                        CSignature1.Border = 15;
        //                        CSignature1.MinimumHeight = 25;
        //                        Secondtable.AddCell(CSignature1);
        //                    }


        //                }
        //                #endregion

        //                #region Table Total values

        //                SecondtableFooter = new PdfPTable(tableCells);
        //                if (tableCells > 20)
        //                {
        //                    SecondtableFooter.TotalWidth = 980f;
        //                }
        //                else
        //                {
        //                    SecondtableFooter.TotalWidth = 850f;
        //                }
        //                SecondtableFooter.LockedWidth = true;
        //                float[] SecondFooterWidth = new float[] { };

        //                #region Table Cells

        //                if (tableCells == 31)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 30)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 29)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 28)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 27)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 26)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 25)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 24)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 23)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 22)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 21)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 20)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 19)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 18)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 17)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 16)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 15)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 14)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 13)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 12)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 11)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 10)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 9)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 8)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 5f };
        //                }

        //                if (tableCells == 7)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 5f };
        //                }

        //                if (tableCells == 6)
        //                {
        //                    SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 5f };
        //                }
        //                #endregion

        //                SecondtableFooter.SetWidths(SecondFooterWidth);

        //                //1
        //                PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                FCSNo.Border = 15;
        //                SecondtableFooter.AddCell(FCSNo);
        //                //2
        //                PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                FCEmpId1.Border = 15;
        //                SecondtableFooter.AddCell(FCEmpId1);
        //                //3
        //                PdfPCell FCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                FCEmpName1.Border = 15;
        //                SecondtableFooter.AddCell(FCEmpName1);
        //                //4
        //                PdfPCell FCEmpDesgn = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                FCEmpDesgn.Border = 15;
        //                FCEmpDesgn.Colspan = 0;
        //                SecondtableFooter.AddCell(FCEmpDesgn);
        //                //5
        //                if (dts != 0)
        //                {
        //                    PdfPCell FCNoOfDuties = new PdfPCell(new Phrase(totalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCNoOfDuties.Border = 15;
        //                    SecondtableFooter.AddCell(FCNoOfDuties);
        //                }

        //                //5 A
        //                if (tempgross != 0)
        //                {
        //                    PdfPCell FCtempgross1 = new PdfPCell(new Phrase(totaltempgross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCtempgross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCtempgross1.Border = 15;
        //                    SecondtableFooter.AddCell(FCtempgross1);
        //                }



        //                //19
        //                if (gross != 0)
        //                {
        //                    PdfPCell FCGross1 = new PdfPCell(new Phrase(totalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCGross1.Border = 15;
        //                    SecondtableFooter.AddCell(FCGross1);
        //                }


        //                //20
        //                if (incentivs != 0)
        //                {
        //                    PdfPCell FIncentivs = new PdfPCell(new Phrase(totalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FIncentivs.Border = 15;
        //                    SecondtableFooter.AddCell(FIncentivs);
        //                }


        //                //21
        //                if (pf != 0)
        //                {
        //                    PdfPCell FCPF1 = new PdfPCell(new Phrase(totalPF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCPF1.Border = 15;
        //                    SecondtableFooter.AddCell(FCPF1);
        //                }

        //                //22
        //                if (esi != 0)
        //                {
        //                    PdfPCell FCESI1 = new PdfPCell(new Phrase(totalESI.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCESI1.Border = 15;
        //                    SecondtableFooter.AddCell(FCESI1);
        //                }

        //                //23
        //                if (proftax != 0)
        //                {
        //                    PdfPCell FCProTax1 = new PdfPCell(new Phrase(totalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCProTax1.Border = 15;
        //                    SecondtableFooter.AddCell(FCProTax1);
        //                }

        //                //24
        //                if (salAdvDed != 0)
        //                {
        //                    PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCSalAdv1.Border = 15;
        //                    SecondtableFooter.AddCell(FCSalAdv1);
        //                }

        //                //25
        //                if (uniformDed != 0)
        //                {
        //                    PdfPCell FCUnifDed1 = new PdfPCell(new Phrase(totalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCUnifDed1.Border = 15;
        //                    SecondtableFooter.AddCell(FCUnifDed1);
        //                }

        //                //26
        //                if (otherDed != 0)
        //                {
        //                    PdfPCell FCOtherDed1 = new PdfPCell(new Phrase(totalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCOtherDed1.Border = 15;
        //                    SecondtableFooter.AddCell(FCOtherDed1);
        //                }

        //                //27
        //                if (canteenAdv != 0)
        //                {
        //                    PdfPCell FCCanteended = new PdfPCell(new Phrase(totalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCCanteended.Border = 15;
        //                    SecondtableFooter.AddCell(FCCanteended);
        //                }


        //                //28
        //                if (penalty != 0)
        //                {
        //                    PdfPCell FPenalty = new PdfPCell(new Phrase(totalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FPenalty.Border = 15;
        //                    SecondtableFooter.AddCell(FPenalty);
        //                }

        //                //28 A
        //                if (owf != 0)
        //                {
        //                    PdfPCell Fowf = new PdfPCell(new Phrase(totalowf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    Fowf.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    Fowf.Border = 15;
        //                    SecondtableFooter.AddCell(Fowf);
        //                }



        //                //29
        //                if (totalDeductions != 0)
        //                {
        //                    PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCTotDed1.Border = 15;
        //                    SecondtableFooter.AddCell(FCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //                }

        //                //30
        //                if (netpay != 0)
        //                {
        //                    PdfPCell FCNetPay1 = new PdfPCell(new Phrase(totalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    FCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    FCNetPay1.Border = 15;
        //                    //FCNetPay1.Colspan = 2;
        //                    SecondtableFooter.AddCell(FCNetPay1);
        //                }

        //                //31
        //                PdfPCell FCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                FCSignature1.Border = 15;
        //                //FCSignature1.MinimumHeight = 25;
        //                SecondtableFooter.AddCell(FCSignature1);

        //                #endregion

        //                SecondtableGrandtotalFooter = new PdfPTable(tableCells);
        //                if (tableCells > 20)
        //                {
        //                    SecondtableGrandtotalFooter.TotalWidth = 980f;
        //                }
        //                else
        //                {
        //                    SecondtableGrandtotalFooter.TotalWidth = 850f;
        //                }
        //                SecondtableGrandtotalFooter.LockedWidth = true;
        //                float[] SecondGrandtotalFooterWidth = new float[] { };
        //                #region Table Cells

        //                if (tableCells == 31)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 30)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 29)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 28)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 27)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 26)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 25)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 24)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 23)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 22)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 21)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 20)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 19)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 18)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 17)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 16)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 15)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 14)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 13)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 12)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 11)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 10)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 9)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 8)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 5f };
        //                }

        //                if (tableCells == 7)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 5f };
        //                }

        //                if (tableCells == 6)
        //                {
        //                    SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 5f };
        //                }
        //                #endregion
        //                SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

        //                SecondtablecheckbyFooter = new PdfPTable(tableCells);
        //                if (tableCells > 20)
        //                {
        //                    SecondtablecheckbyFooter.TotalWidth = 980f;
        //                }
        //                else
        //                {
        //                    SecondtablecheckbyFooter.TotalWidth = 850f;
        //                }
        //                SecondtablecheckbyFooter.LockedWidth = true;
        //                float[] SecondcheckbyFooterWidth = new float[] { };

        //                #region Table Cells

        //                if (tableCells == 31)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 30)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 29)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 28)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 27)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 26)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 25)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 24)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 23)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 22)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 21)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 20)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 19)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 18)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 17)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 16)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 15)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 14)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 13)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 12)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 11)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 10)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 9)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //                }
        //                if (tableCells == 8)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 5f };
        //                }

        //                if (tableCells == 7)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 5f };
        //                }

        //                if (tableCells == 6)
        //                {
        //                    SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 5f };
        //                }
        //                #endregion

        //                SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);

        //                #region Table   Grand   Total  Footer

        //                //1
        //                PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                GFCSNo.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCSNo);

        //                //2
        //                PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                GFCEmpId1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCEmpId1);

        //                //3
        //                PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                GFCEmpName1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCEmpName1);

        //                //4
        //                PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("Grand  Total: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                GFCEmpDesgn.Border = 15;
        //                //FCEmpDesgn.Colspan = 4;
        //                SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);

        //                //5
        //                if (dts != 0)
        //                {
        //                    PdfPCell GFCNoOfDuties = new PdfPCell(new Phrase(GrandtotalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCNoOfDuties.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCNoOfDuties);
        //                }

        //                //5 A
        //                if (tempgross != 0)
        //                {
        //                    PdfPCell GFCtempgross1 = new PdfPCell(new Phrase(Grandtotaltempgross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCtempgross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCtempgross1.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCtempgross1);
        //                }


        //                //19
        //                if (gross != 0)
        //                {
        //                    PdfPCell GFCGross1 = new PdfPCell(new Phrase(GrandtotalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCGross1.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCGross1);
        //                }


        //                //20
        //                if (incentivs != 0)
        //                {
        //                    PdfPCell GFIncentivs = new PdfPCell(new Phrase(GrandtotalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFIncentivs.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFIncentivs);
        //                }



        //                //21
        //                if (pf != 0)
        //                {
        //                    PdfPCell GFCPF1 = new PdfPCell(new Phrase(GrandtotalPF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCPF1.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCPF1);
        //                }

        //                //22
        //                if (esi != 0)
        //                {
        //                    PdfPCell GFCESI1 = new PdfPCell(new Phrase(GrandtotalESI.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCESI1.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCESI1);
        //                }

        //                //23
        //                if (proftax != 0)
        //                {
        //                    PdfPCell GFCProTax1 = new PdfPCell(new Phrase(GrandtotalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCProTax1.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCProTax1);
        //                }

        //                //24
        //                if (salAdvDed != 0)
        //                {
        //                    PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCSalAdv1.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
        //                }

        //                //25
        //                if (uniformDed != 0)
        //                {
        //                    PdfPCell GFCUnifDed1 = new PdfPCell(new Phrase(GrandtotalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCUnifDed1.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCUnifDed1);
        //                }

        //                //26
        //                if (otherDed != 0)
        //                {
        //                    PdfPCell GFCOtherDed1 = new PdfPCell(new Phrase(GrandtotalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCOtherDed1.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCOtherDed1);
        //                }


        //                //27
        //                if (canteenAdv != 0)
        //                {
        //                    PdfPCell GFCCanteended = new PdfPCell(new Phrase(GrandtotalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCCanteended.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCCanteended);
        //                }

        //                //28
        //                if (penalty != 0)
        //                {
        //                    PdfPCell GFPenalty = new PdfPCell(new Phrase(GrandtotalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFPenalty.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFPenalty);
        //                }

        //                //28 A
        //                if (owf != 0)
        //                {
        //                    PdfPCell GFowf = new PdfPCell(new Phrase(Grandtotalowf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFowf.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFowf.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFowf);
        //                }

        //                //29
        //                if (totalDeductions != 0)
        //                {
        //                    PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(GrandtotalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCTotDed1.Border = 15;
        //                    SecondtablecheckbyFooter.AddCell(GFCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //                }

        //                //30
        //                if (netpay != 0)
        //                {
        //                    PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(GrandtotalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                    GFCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                    GFCNetPay1.Border = 15;
        //                    //FCNetPay1.Colspan = 2;
        //                    SecondtablecheckbyFooter.AddCell(GFCNetPay1);
        //                }

        //                //31
        //                PdfPCell GFCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                GFCSignature1.Border = 15;
        //                //FCSignature1.MinimumHeight = 25;
        //                SecondtablecheckbyFooter.AddCell(GFCSignature1);
        //                #endregion


        //                #region   Footer Headings
        //                //1
        //                PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                FHCheckedbybr1.Border = 0;
        //                FHCheckedbybr1.Rowspan = 0;
        //                FHCheckedbybr1.Colspan = tableCells;
        //                SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //                //2
        //                PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                FHApprovedbr2.Border = 0;
        //                FHApprovedbr2.Colspan = tableCells;

        //                SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
        //                SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //                SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


        //                //1
        //                PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FHCheckedby.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                FHCheckedby.Border = 0;
        //                FHCheckedby.Colspan = tableCells;
        //                SecondtablecheckbyFooter.AddCell(FHCheckedby);
        //                //2
        //                PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Gross  Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FHApprovedBy.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FHApprovedBy.Border = 0;
        //                FHApprovedBy.PaddingTop = -5;
        //                FHApprovedBy.Colspan = tableCells;
        //                SecondtablecheckbyFooter.AddCell(FHApprovedBy);



        //                #endregion

        //                document.Add(Secondtable);

        //                if (nextpagerecordscount == targetpagerecors)
        //                {
        //                    targetpagerecors = secondpagerecords;
        //                    document.Add(SecondtableFooter);
        //                    document.NewPage();
        //                    nextpagerecordscount = 0;
        //                    #region  Zero variables

        //                    totalNetpay = 0;
        //                    totalDuties = 0;
        //                    totaltempgross = 0;
        //                    totalBasic = 0;
        //                    totalDA = 0;
        //                    totalHRA = 0;
        //                    totalCCA = 0;
        //                    totalConveyance = 0;
        //                    totalWA = 0;
        //                    totalOA = 0;
        //                    totalGross = 0;
        //                    totalPF = 0;
        //                    totalESI = 0;
        //                    totalProfTax = 0;
        //                    totalDed = 0;
        //                    totalSalAdv = 0;
        //                    totalUniforDed = 0;
        //                    totalCanteenAdv = 0;
        //                    totalOtherdedn = 0;
        //                    totalbonus = 0;

        //                    totalLw = 0;
        //                    totalGratuity = 0;
        //                    totalNfhs = 0;
        //                    totalRc = 0;
        //                    totalCs = 0;
        //                    totalIncentivs = 0;
        //                    totalPenalty = 0;
        //                    totalowf = 0;


        //                    #endregion
        //                }
        //            }

        //            if (nextpagerecordscount >= 0)
        //            {
        //                //document.Add(SecondtableFooter);
        //                document.Add(SecondtableGrandtotalFooter);
        //                document.Add(SecondtablecheckbyFooter);
        //            }
        //            document.Close();
        //            if (nextpagehasPages)
        //            {

        //                Response.ContentType = "application/pdf";
        //                Response.AddHeader("content-disposition", "attachment;filename=Duties.pdf");
        //                Response.Buffer = true;
        //                Response.Clear();
        //                Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        //                Response.OutputStream.Flush();
        //                Response.End();
        //            }
        //        }
        //    }

        //protected void btnIncentives_Click(object sender, EventArgs e)
        //{

        //    int titleofdocumentindex = 0;
        //    if (ddlClients.SelectedIndex <= 0)
        //    {
        //        ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
        //        return;
        //    }

        //    int payMonth = GetMonth(ddlmonth.SelectedValue);
        //    //int month = GetMonthAndYear();
        //    int month = GetMonthBasedOnSelectionDateorMonth();

        //    string selectmonth = string.Empty;
        //    string SelectmonthWithbankacno = string.Empty;
        //    string SelectmonthWithoutbankacno = string.Empty;
        //    DataTable dt = null;


        //    var clientid = ddlClients.SelectedValue;
        //    var Paysheetoption = ddlpaymenttype.SelectedIndex;
        //    var Noofattendance = ddlnoofattendance.SelectedIndex;
        //    var pfesioptions = ddl_Pf_Esi_Options.SelectedIndex;

        //    var SPName = "";
        //    Hashtable HTPaysheet = new Hashtable();
        //    SPName = "IMEPaysheetpdfs";
        //    HTPaysheet.Add("@ClientId", clientid);
        //    HTPaysheet.Add("@month", month);
        //    HTPaysheet.Add("@PaymentOption", Paysheetoption);
        //    HTPaysheet.Add("@Attendance", Noofattendance);
        //    HTPaysheet.Add("@PfesiOptions", pfesioptions);
        //    dt = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTPaysheet);

        //    MemoryStream ms = new MemoryStream();
        //    if (dt.Rows.Count > 0)
        //    {
        //        Document document = new Document(PageSize.A4.Rotate());
        //        PdfWriter writer = PdfWriter.GetInstance(document, ms);
        //        document.Open();
        //        document.AddTitle("FaMS");
        //        document.AddAuthor("WebWonders");
        //        document.AddSubject("Wage Sheet");
        //        document.AddKeywords("Keyword1, keyword2, …");//
        //        float forConvert;
        //        string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
        //        DataTable compInfo = SqlHelper.Instance.GetTableByQuery(strQry);
        //        string companyName1 = "Your Company Name";
        //        string companyAddress = "Your Company Address";
        //        if (compInfo.Rows.Count > 0)
        //        {
        //            companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
        //            companyAddress = compInfo.Rows[0]["Address"].ToString();
        //        }

        //        #region Variables for table cells counting

        //        int srate = 0;
        //        int incentivs = 0;
        //        int totalDeductions = 0;
        //        int netpay = 0;


        //        int Esi = 0;
        //        int ESIEmpr = 0;


        //        float srate1 = 0;
        //        float incentivs1 = 0;
        //        float totalDeductions1 = 0;
        //        float netpay1 = 0;


        //        float Esi1 = 0;
        //        float ESIEmpr1 = 0;


        //        #endregion

        //        #region Data for counting tablecells

        //        for (int i = 0; i < dt.Rows.Count; i++)
        //        {


        //            incentivs1 = float.Parse(dt.Rows[i]["incentivs"].ToString());
        //            if (incentivs1 != 0)
        //            {
        //                incentivs1 += 1;
        //                if (incentivs1 > 0)
        //                {
        //                    incentivs = 1;
        //                }
        //            }




        //            totalDeductions1 = float.Parse(dt.Rows[i]["Totaldeduct"].ToString());
        //            if (totalDeductions1 != 0)
        //            {
        //                totalDeductions1 += 1;
        //                if (totalDeductions1 > 0)
        //                {
        //                    totalDeductions = 1;
        //                }
        //            }
        //            netpay1 = float.Parse(dt.Rows[i]["NetAmount"].ToString());
        //            if (netpay1 != 0)
        //            {
        //                netpay1 += 1;
        //                if (netpay1 > 0)
        //                {
        //                    netpay = 1;
        //                }
        //            }



        //            Esi1 = float.Parse(dt.Rows[i]["ESITotal"].ToString());
        //            if (Esi1 != 0)
        //            {
        //                Esi1 += 1;
        //                if (Esi1 > 0)
        //                {
        //                    Esi = 1;
        //                }
        //            }
        //            ESIEmpr1 = float.Parse(dt.Rows[i]["ESI"].ToString());
        //            if (ESIEmpr1 != 0)
        //            {
        //                ESIEmpr1 += 1;
        //                if (ESIEmpr1 > 0)
        //                {
        //                    ESIEmpr = 1;
        //                }
        //            }


        //        }

        //        #endregion

        //        int sno = 1;
        //        int empid = 1;
        //        int empname = 1;
        //        int design = 1;
        //        int bankacno = 1;

        //        int tableCells = incentivs + totalDeductions + netpay + sno +
        //                        empid + empname + design + bankacno + ESIEmpr + Esi;




        //        #region variables for total

        //        float totalDuties = 0;
        //        float totalsrate = 0;
        //        float totalBasic = 0;
        //        float totalDA = 0;
        //        float totalHRA = 0;
        //        float totalCCA = 0;
        //        float totalConveyance = 0;
        //        float totalWA = 0;
        //        float totalOA = 0;
        //        float totalLw = 0;
        //        float totalGratuity = 0;
        //        float totalbonus = 0;
        //        float totalNfhs = 0;
        //        float totalRc = 0;
        //        float totalCs = 0;
        //        float totalGross = 0;
        //        float totalIncentivs = 0;
        //        float totalPFondts = 0;
        //        float totalESIondts = 0;
        //        float totalProfTax = 0;
        //        float totalSalAdv = 0;
        //        float totalUniforDed = 0;
        //        float totalOtherdedn = 0;
        //        float totalCanteenAdv = 0;
        //        float totalPenalty = 0;
        //        float totalDed = 0;
        //        float totalNetpay = 0;

        //        float totalots = 0;
        //        float totalotamt = 0;
        //        float totalpfonots = 0;
        //        float totalesionots = 0;
        //        float totalpf = 0;
        //        float totalesi = 0;
        //        float totalESIempr = 0;

        //        float totalGenDedn = 0;
        //        float totalSecDepDedn = 0;
        //        float totalLoanDed = 0;
        //        float totalwos = 0;
        //        float totalwoamt = 0;
        //        float totalnhs = 0;
        //        float totalnhsamt = 0;
        //        #endregion

        //        #region variables for  Grand  total


        //        float GrandtotalDuties = 0;
        //        float GrandtotalSrate = 0;
        //        float GrandtotalBasic = 0;
        //        float GrandtotalDA = 0;
        //        float GrandtotalHRA = 0;
        //        float GrandtotalCCA = 0;
        //        float GrandtotalConveyance = 0;
        //        float GrandtotalWA = 0;
        //        float GrandtotalOA = 0;
        //        float GrandtotalLw = 0;
        //        float GrandtotalGratuity = 0;
        //        float Grandtotalbonus = 0;
        //        float GrandtotalNfhs = 0;
        //        float GrandtotalRc = 0;
        //        float GrandtotalCs = 0;
        //        float GrandtotalGross = 0;
        //        float GrandtotalIncentivs = 0;
        //        float GrandtotalPFondts = 0;
        //        float GrandtotalESIondts = 0;
        //        float GrandtotalProfTax = 0;
        //        float GrandtotalSalAdv = 0;
        //        float GrandtotalUniforDed = 0;
        //        float GrandtotalOtherdedn = 0;
        //        float GrandtotalCanteenAdv = 0;
        //        float GrandtotalPenalty = 0;
        //        float GrandtotalDed = 0;
        //        float GrandtotalNetpay = 0;

        //        float Grandtotalots = 0;
        //        float Grandtotalotamt = 0;
        //        float Grandtotalpfonots = 0;
        //        float Grandtotalesionots = 0;
        //        float Grandtotalpf = 0;
        //        float Grandtotalesi = 0;
        //        float GrandtotalESIempr = 0;

        //        float GrandtotalGenDedn = 0;
        //        float GrandtotalSecDepDedn = 0;
        //        float GrandtotalLoanDedn = 0;
        //        float Grandtotalwos = 0;
        //        float Grandtotalwoamt = 0;
        //        float Grandtotalnhs = 0;
        //        float Grandtotalnhsamt = 0;

        //        #endregion

        //        int nextpagerecordscount = 0;
        //        int targetpagerecors = 6;
        //        int secondpagerecords = targetpagerecors;
        //        bool nextpagehasPages = false;
        //        int j = 0;
        //        PdfPTable SecondtablecheckbyFooter = null;
        //        PdfPTable SecondtableFooter = null;
        //        PdfPTable SecondtableGrandtotalFooter = null;
        //        for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
        //        {
        //            nextpagehasPages = true;


        //            #region Titles of Document
        //            PdfPTable Maintable = new PdfPTable(27);
        //            if (tableCells > 20)
        //            {
        //                Maintable.TotalWidth = 900f;
        //            }
        //            else
        //            {
        //                Maintable.TotalWidth = 800f;
        //            }
        //            Maintable.LockedWidth = true;
        //            float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };


        //            Maintable.SetWidths(width);
        //            uint FONT_SIZE = 10;

        //            //Company Name & vage act details

        //            PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
        //            cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            cellemp.Colspan = 27;
        //            cellemp.Border = 0;

        //            PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
        //            Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            Heading.Colspan = 27;
        //            Heading.Border = 0;
        //            // Maintable.AddCell(Heading);


        //            PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 15, Font.BOLD, BaseColor.BLACK)));
        //            actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            actDetails.Colspan = 27;
        //            actDetails.Border = 0;// 15;
        //            //Maintable.AddCell(actDetails);

        //            // Maintable.AddCell(cellemp);
        //            #endregion


        //            #region Sub Headings

        //            PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 20, Font.BOLD, BaseColor.BLACK)));
        //            companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            companyName.Colspan = 27;
        //            companyName.Border = 0;// 15;
        //            Maintable.AddCell(companyName);

        //            PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        //            paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            paySheet.Colspan = 27;
        //            paySheet.Border = 0;// 15;
        //            Maintable.AddCell(paySheet);

        //            PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CClient.Colspan = 11;
        //            CClient.Border = 0;// 15;
        //            Maintable.AddCell(CClient);


        //            PdfPCell CDates = new PdfPCell(new Phrase("Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //            CDates.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CDates.Colspan = 8;
        //            CDates.Border = 0;// 15;
        //            Maintable.AddCell(CDates);

        //            // PdfPCell CPaySheetDate = new PdfPCell(new Phrase("Pay Sheet Date :  " + DateTime.Now.Date.ToString("dd/MM/yyyy"), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            PdfPCell CPaySheetDate = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CPaySheetDate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CPaySheetDate.Colspan = 1;
        //            CPaySheetDate.Border = 0;// 15;
        //            Maintable.AddCell(CPaySheetDate);

        //            PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :   " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CPayMonth.Colspan = 7;
        //            CPayMonth.Border = 0;// 15;
        //            Maintable.AddCell(CPayMonth);

        //            //                string Clientaddress = "";
        //            //                string queryaddress = @"select isnull(ClientAddrHno,'')+'  '+isnull(ClientAddrStreet,'')+'  '+isnull(ClientAddrColony,'')+'  '+isnull(ClientAddrArea,'')+
        //            //		            '  '+isnull(ClientAddrCity,'')+'  '+isnull(ClientAddrState,'')+'  '+isnull(ClientAddrPin,'') as Address from Clients where ClientId='" + ddlClients.SelectedValue + "'";
        //            //                DataTable dtaddress = SqlHelper.Instance.GetTableByQuery(queryaddress);
        //            //                if (dtaddress.Rows.Count > 0)
        //            //                {
        //            //                    Clientaddress = dtaddress.Rows[0]["Address"].ToString();
        //            //                }

        //            PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlcname.SelectedItem + " ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CClientName.Colspan = 27;
        //            CClientName.Border = 0;// 15;
        //            Maintable.AddCell(CClientName);

        //            // Maintable.AddCell(cellemp);
        //            //document.Add(Maintable);

        //            if (titleofdocumentindex == 0)
        //            {
        //                document.Add(Maintable);
        //                titleofdocumentindex = 1;
        //            }

        //            #endregion


        //            #region Table Headings

        //            PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableHeadings.TotalWidth = 900f;
        //            }
        //            else
        //            {
        //                SecondtableHeadings.TotalWidth = 800f;
        //            }
        //            SecondtableHeadings.LockedWidth = true;
        //            float[] SecondHeadingsWidth = new float[] { };

        //            #region Table Cells
        //            if (tableCells == 37)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
        //            }
        //            #endregion

        //            SecondtableHeadings.SetWidths(SecondHeadingsWidth);

        //            //Cell Headings
        //            //1
        //            PdfPCell sNo = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            //sNo.Colspan = 1;
        //            sNo.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(sNo);

        //            //2
        //            PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpId.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpId);

        //            //3
        //            PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpName.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpName);

        //            //4
        //            PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CDesgn.Border = 15;
        //            SecondtableHeadings.AddCell(CDesgn);



        //            //5

        //            //22
        //            if (incentivs != 0)
        //            {
        //                PdfPCell CIncentivs = new PdfPCell(new Phrase("Ex-gratia", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CIncentivs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CIncentivs.Border = 15;
        //                SecondtableHeadings.AddCell(CIncentivs);
        //            }




        //            //27
        //            //sharada
        //            //28
        //            if (Esi != 0)
        //            {
        //                PdfPCell CESI = new PdfPCell(new Phrase("ESI @1.75%", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CESI.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CESI.Border = 15;
        //                SecondtableHeadings.AddCell(CESI);
        //            }

        //            if (ESIEmpr != 0)
        //            {
        //                PdfPCell CPF = new PdfPCell(new Phrase("ESI @4.75%", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPF.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPF.Border = 15;
        //                SecondtableHeadings.AddCell(CPF);
        //            }

        //            //36
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell CDeductions = new PdfPCell(new Phrase("Total Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CDeductions.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CDeductions.Border = 15;
        //                SecondtableHeadings.AddCell(CDeductions);
        //            }


        //            //36
        //            if (netpay != 0)
        //            {
        //                PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNetPay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNetPay.Border = 15;
        //                SecondtableHeadings.AddCell(CNetPay);
        //            }

        //            //37
        //            PdfPCell CSignature = new PdfPCell(new Phrase("Bank A/c No./ Signature", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CSignature.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CSignature.Border = 15;
        //            SecondtableHeadings.AddCell(CSignature);


        //            #endregion


        //            #region Table Data

        //            PdfPTable Secondtable = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                Secondtable.TotalWidth = 900f;
        //            }
        //            else
        //            {
        //                Secondtable.TotalWidth = 800f;
        //            }
        //            Secondtable.LockedWidth = true;
        //            float[] SecondWidth = new float[] { };

        //            #region Table Cells
        //            if (tableCells == 37)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
        //            }
        //            #endregion


        //            Secondtable.SetWidths(SecondWidth);




        //            int rowCount = 0;
        //            int pageCount = 0;
        //            int i = nextpagei;

        //            // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
        //            {
        //                float ForconvertOt = 0;
        //                forConvert = 0;
        //                if (dt.Rows[i]["incentivs"].ToString().Trim().Length > 0)
        //                    forConvert = Convert.ToSingle(dt.Rows[i]["incentivs"].ToString());

        //                if (forConvert > 0)
        //                {

        //                    if (nextpagerecordscount == 0)
        //                    {
        //                        document.Add(SecondtableHeadings);
        //                    }

        //                    nextpagerecordscount++;

        //                    //1
        //                    PdfPCell CSNo = new PdfPCell(new Phrase("\n \n \n" + (++j).ToString() + "\n \n \n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CSNo.Border = 15;
        //                    CSNo.FixedHeight = 65;
        //                    Secondtable.AddCell(CSNo);

        //                    //2
        //                    PdfPCell CEmpId1 = new PdfPCell(new Phrase("\n \n \n" + dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpId1.Border = 15;
        //                    Secondtable.AddCell(CEmpId1);

        //                    //3
        //                    PdfPCell CEmpName1 = new PdfPCell(new Phrase("\n \n \n" + dt.Rows[i]["EmpName"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpName1.Border = 15;
        //                    Secondtable.AddCell(CEmpName1);

        //                    //4
        //                    PdfPCell CEmpDesgn = new PdfPCell(new Phrase("\n \n \n" + dt.Rows[i]["Design"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpDesgn.Border = 15;
        //                    Secondtable.AddCell(CEmpDesgn);






        //                    //22
        //                    if (incentivs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Incentivs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Incentivs"].ToString()));
        //                        totalIncentivs += forConvert;
        //                        GrandtotalIncentivs += forConvert;
        //                        PdfPCell CIncentivs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CIncentivs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CIncentivs1.Border = 15;
        //                        Secondtable.AddCell(CIncentivs1);
        //                    }

        //                    //28
        //                    if (Esi != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["ESITotal"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESITotal"].ToString()));
        //                        totalesi += forConvert;

        //                        Grandtotalesi += forConvert;

        //                        PdfPCell CESIonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CESIonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CESIonots.Border = 15;
        //                        Secondtable.AddCell(CESIonots);
        //                    }



        //                    //27
        //                    if (ESIEmpr != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["ESI"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESI"].ToString()));
        //                        totalESIempr += forConvert;
        //                        GrandtotalESIempr += forConvert;

        //                        PdfPCell CPFonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CPFonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CPFonots.Border = 15;
        //                        Secondtable.AddCell(CPFonots);
        //                    }




        //                    //35
        //                    if (totalDeductions != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Totaldeduct"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Totaldeduct"].ToString()));
        //                        totalDed += forConvert;
        //                        GrandtotalDed += forConvert;

        //                        PdfPCell CTotDed1 = new PdfPCell(new Phrase("\n \n \n" + forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CTotDed1.Border = 15;
        //                        Secondtable.AddCell(CTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //                    }

        //                    //36
        //                    if (netpay != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["NetAmount"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["NetAmount"].ToString()));
        //                        if (forConvert <= 0)
        //                        {
        //                            forConvert = 0;
        //                        }
        //                        totalNetpay += forConvert;
        //                        GrandtotalNetpay += forConvert;
        //                        PdfPCell CNetPay1 = new PdfPCell(new Phrase("\n \n \n" + forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNetPay1.Border = 15;
        //                        Secondtable.AddCell(CNetPay1);
        //                    }

        //                    //37
        //                    string EmpBankAcNo = dt.Rows[i]["EmpBankAcNo"].ToString();
        //                    PdfPCell CSignature1 = new PdfPCell(new Phrase(EmpBankAcNo, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CSignature1.Border = 15;
        //                    CSignature1.MinimumHeight = 25;
        //                    Secondtable.AddCell(CSignature1);
        //                }


        //            }
        //            #endregion

        //            #region Table Total values

        //            SecondtableFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableFooter.TotalWidth = 900f;
        //            }
        //            else
        //            {
        //                SecondtableFooter.TotalWidth = 800f;
        //            }
        //            SecondtableFooter.LockedWidth = true;
        //            float[] SecondFooterWidth = new float[] { };

        //            #region Table Cells
        //            if (tableCells == 37)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
        //            }
        //            #endregion

        //            SecondtableFooter.SetWidths(SecondFooterWidth);

        //            //1
        //            PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSNo.Border = 15;
        //            SecondtableFooter.AddCell(FCSNo);
        //            //2
        //            PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpId1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpId1);
        //            //3
        //            PdfPCell FCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpName1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpName1);
        //            //4
        //            PdfPCell FCEmpDesgn = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpDesgn.Border = 15;
        //            FCEmpDesgn.Colspan = 0;
        //            SecondtableFooter.AddCell(FCEmpDesgn);







        //            //22
        //            if (incentivs != 0)
        //            {
        //                PdfPCell FIncentivs = new PdfPCell(new Phrase(totalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FIncentivs.Border = 15;
        //                SecondtableFooter.AddCell(FIncentivs);
        //            }




        //            //27

        //            //28
        //            if (Esi != 0)
        //            {
        //                PdfPCell FCES = new PdfPCell(new Phrase(totalesi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCES.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCES.Border = 15;
        //                SecondtableFooter.AddCell(FCES);
        //            }
        //            if (ESIEmpr != 0)
        //            {
        //                PdfPCell FCPF = new PdfPCell(new Phrase(totalESIempr.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCPF.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCPF.Border = 15;
        //                SecondtableFooter.AddCell(FCPF);
        //            }



        //            //35
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCTotDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //            }

        //            //36
        //            if (netpay != 0)
        //            {
        //                PdfPCell FCNetPay1 = new PdfPCell(new Phrase(totalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtableFooter.AddCell(FCNetPay1);
        //            }

        //            //37
        //            PdfPCell FCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtableFooter.AddCell(FCSignature1);

        //            #endregion

        //            SecondtableGrandtotalFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableGrandtotalFooter.TotalWidth = 900f;
        //            }
        //            else
        //            {
        //                SecondtableGrandtotalFooter.TotalWidth = 800f;
        //            }
        //            SecondtableGrandtotalFooter.LockedWidth = true;
        //            float[] SecondGrandtotalFooterWidth = new float[] { };
        //            #region Table Cells
        //            if (tableCells == 37)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
        //            }
        //            #endregion
        //            SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

        //            SecondtablecheckbyFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtablecheckbyFooter.TotalWidth = 900f;
        //            }
        //            else
        //            {
        //                SecondtablecheckbyFooter.TotalWidth = 800f;
        //            }
        //            SecondtablecheckbyFooter.LockedWidth = true;
        //            float[] SecondcheckbyFooterWidth = new float[] { };

        //            #region Table Cells
        //            if (tableCells == 37)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
        //            }
        //            #endregion

        //            SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);

        //            #region Table   Grand   Total  Footer

        //            //1
        //            PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSNo.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCSNo);

        //            //2
        //            PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpId1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpId1);

        //            //3
        //            PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpName1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpName1);

        //            //4
        //            PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("Grand  Total: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpDesgn.Border = 15;
        //            //FCEmpDesgn.Colspan = 4;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);





        //            //22
        //            if (incentivs != 0)
        //            {
        //                PdfPCell GFIncentivs = new PdfPCell(new Phrase(GrandtotalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFIncentivs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFIncentivs);
        //            }
        //            //28
        //            if (Esi != 0)
        //            {
        //                PdfPCell GFCESI = new PdfPCell(new Phrase(Grandtotalesi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCESI.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCESI.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCESI);
        //            }
        //            if (ESIEmpr != 0)
        //            {
        //                PdfPCell GFCPF = new PdfPCell(new Phrase(GrandtotalESIempr.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCPF.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCPF.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCPF);
        //            }



        //            //35
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(GrandtotalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCTotDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //            }

        //            //36
        //            if (netpay != 0)
        //            {
        //                PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(GrandtotalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtablecheckbyFooter.AddCell(GFCNetPay1);
        //            }

        //            //37
        //            PdfPCell GFCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtablecheckbyFooter.AddCell(GFCSignature1);
        //            #endregion


        //            #region   Footer Headings
        //            //1
        //            PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHCheckedbybr1.Border = 0;
        //            FHCheckedbybr1.Rowspan = 0;
        //            FHCheckedbybr1.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            //2
        //            PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHApprovedbr2.Border = 0;
        //            FHApprovedbr2.Colspan = tableCells;

        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


        //            //1
        //            PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedby.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FHCheckedby.Border = 0;
        //            FHCheckedby.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedby);
        //            //2
        //            PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Gross  Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedBy.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //            FHApprovedBy.Border = 0;
        //            FHApprovedBy.PaddingTop = -5;
        //            FHApprovedBy.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHApprovedBy);



        //            #endregion

        //            document.Add(Secondtable);

        //            if (nextpagerecordscount == targetpagerecors)
        //            {
        //                targetpagerecors = secondpagerecords;
        //                document.Add(SecondtableFooter);
        //                document.NewPage();
        //                nextpagerecordscount = 0;
        //                #region  Zero variables

        //                totalNetpay = 0;
        //                totalDuties = 0;
        //                totalsrate = 0;
        //                totalBasic = 0;
        //                totalDA = 0;
        //                totalHRA = 0;
        //                totalCCA = 0;
        //                totalConveyance = 0;
        //                totalWA = 0;
        //                totalOA = 0;
        //                totalGross = 0;
        //                totalPFondts = 0;
        //                totalESIondts = 0;
        //                totalProfTax = 0;
        //                totalDed = 0;
        //                totalSalAdv = 0;
        //                totalUniforDed = 0;
        //                totalCanteenAdv = 0;
        //                totalOtherdedn = 0;
        //                totalbonus = 0;
        //                totalLw = 0;
        //                totalGratuity = 0;
        //                totalNfhs = 0;
        //                totalRc = 0;
        //                totalCs = 0;
        //                totalIncentivs = 0;
        //                totalPenalty = 0;

        //                totalots = 0;
        //                totalotamt = 0;
        //                totalpfonots = 0;
        //                totalesionots = 0;
        //                totalpf = 0;
        //                totalesi = 0;

        //                #endregion
        //            }
        //        }

        //        if (nextpagerecordscount >= 0)
        //        {
        //            //document.Add(SecondtableFooter);
        //            document.Add(SecondtableGrandtotalFooter);
        //            document.Add(SecondtablecheckbyFooter);
        //        }
        //        document.Close();
        //        if (nextpagehasPages)
        //        {

        //            Response.ContentType = "application/pdf";
        //            Response.AddHeader("content-disposition", "attachment;filename=Dutieswithots.pdf");
        //            Response.Buffer = true;
        //            Response.Clear();
        //            Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        //            Response.OutputStream.Flush();
        //            Response.End();
        //        }
        //    }

        //}


        protected void btndutieswithots_Click(object sender, EventArgs e)
        {
            try
            {

                int FONT_SIZE = int.Parse(ddlfontSize.SelectedValue);
                int titleofdocumentindex = 0;
                if (ddlClients.SelectedIndex <= 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
                    return;
                }

                int payMonth = GetMonth(ddlmonth.SelectedValue);
                //int month = GetMonthAndYear();
                int month = GetMonthBasedOnSelectionDateorMonth();

                string selectmonth = string.Empty;
                string SelectmonthWithbankacno = string.Empty;
                string SelectmonthWithoutbankacno = string.Empty;
                DataTable dt = null;


                var clientid = ddlClients.SelectedValue;
                var Paysheetoption = ddlpaymenttype.SelectedIndex;
                if (ddlpaymenttype.SelectedIndex == 0)
                {
                    Paysheetoption = 0;

                }
                else if (ddlpaymenttype.SelectedIndex == 1)
                {
                    Paysheetoption = 1;

                }
                else if (ddlpaymenttype.SelectedIndex == 2)
                {
                    Paysheetoption = 2;

                }
                var Noofattendance = ddlnoofattendance.SelectedIndex;
                //var pfesioptions = ddl_Pf_Esi_Options.SelectedIndex;

                var SPName = "";
                Hashtable HTPaysheet = new Hashtable();
                SPName = "IMEPaysheetpdfs";
                HTPaysheet.Add("@ClientId", clientid);
                HTPaysheet.Add("@month", month);
                HTPaysheet.Add("@PaymentOption", Paysheetoption);
                dt =config.ExecuteAdaptorAsyncWithParams(SPName, HTPaysheet).Result;

                MemoryStream ms = new MemoryStream();
                if (dt.Rows.Count > 0)
                {
                    Document document = new Document(PageSize.A4.Rotate());
                    PdfWriter writer = PdfWriter.GetInstance(document, ms);
                    document.Open();
                    document.AddTitle("FaMS");
                    document.AddAuthor("WebWonders");
                    document.AddSubject("Wage Sheet");
                    document.AddKeywords("Keyword1, keyword2, …");//
                    float forConvert;
                    string strQry = "Select * from CompanyInfo   where   branchid='" + BranchID + "'";
                    DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                    string companyName1 = "Your Company Name";
                    string companyAddress = "Your Company Address";
                    if (compInfo.Rows.Count > 0)
                    {
                        companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
                        companyAddress = compInfo.Rows[0]["Address"].ToString();
                    }

                    #region Variables for table cells counting

                    int IDCardDed = 0;
                    int Extra = 0;
                    float IDCardDed1 = 0;
                    float Extra1 = 0;

                    int dts = 0;
                    int ATMDed = 0;

                    int srate = 0;
                    int basic = 0;
                    int da = 0;
                    int hra = 0;
                    int cca = 0;
                    int conveyance = 0;
                    int washallowance = 0;
                    int otherallowance = 0;
                    int SplAllowance = 0;
                    int TravelAllw = 0;
                    int PerformanceAllw = 0;
                    int MobileAllw = 0;
                    int leavewages = 0;
                    int gratuity = 0;
                    int bonus = 0;
                    int nfhs = 0;
                    int rc = 0;
                    int cs = 0;
                    int gross = 0;
                    int incentivs = 0;
                    int pfonduties = 0;
                    int esionduties = 0;
                    int proftax = 0;
                    int salAdvDed = 0;
                    int SecdepDed = 0;
                    int LoanDed = 0;
                    int uniformDed = 0;
                    int AdvDed = 0;
                    int WCDed = 0;
                    int otherDed = 0;
                    int canteenAdv = 0;
                    int penalty = 0;
                    int totalDeductions = 0;
                    int netpay = 0;
                    int cfoodallowance = 0;
                    int cmedicalallowance = 0;
                    int ots = 0;
                    int otamt = 0;
                    int nhs = 0;
                    int ldays = 0;
                    int TotalPayableDays = 0;
                    int nhsamt = 0;
                    int wo = 0;
                    int woamt = 0;
                    int pfonot = 0;
                    int esionot = 0;
                    int Pf = 0;
                    int Esi = 0;
                    int GenDedn = 0;
                    int SecDepDedn = 0;
                    int owf = 0;
                    int TelephoneBillDed = 0;
                    int PFESIContribution = 0;
                    int TDSDed = 0;


                    float ATMDed1 = 0;
                    float owf1 = 0;
                    float dts1 = 0;
                    float srate1 = 0;
                    float basic1 = 0;
                    float da1 = 0;
                    float hra1 = 0;
                    float cca1 = 0;
                    float conveyance1 = 0;
                    float washallowance1 = 0;
                    float otherallowance1 = 0;
                    float SplAllowance1 = 0;
                    float ldays1 = 0;
                    float TotalPayableDays1 = 0;
                    float TravelAllw1 = 0;
                    float PerformanceAllw1 = 0;
                    float MobileAllw1 = 0;
                    float leavewages1 = 0;
                    float gratuity1 = 0;
                    float bonus1 = 0;
                    float nfhs1 = 0;
                    float rc1 = 0;
                    float cs1 = 0;
                    float gross1 = 0;
                    float incentivs1 = 0;
                    float pfonduties1 = 0;
                    float esionduties1 = 0;
                    float proftax1 = 0;
                    float salAdvDed1 = 0;
                    float uniformDed1 = 0;
                    float AdvDed1 = 0;
                    float WCDed1 = 0;
                    float otherDed1 = 0;
                    float canteenAdv1 = 0;
                    float penalty1 = 0;
                    float totalDeductions1 = 0;
                    float LoanDed1 = 0;
                    float netpay1 = 0;
                    float cfoodallowance1 = 0;
                    float cmedicalallowance1 = 0;
                    float ots1 = 0;
                    float otamt1 = 0;
                    float nhs1 = 0;
                    float nhsamt1 = 0;
                    float wo1 = 0;
                    float woamt1 = 0;
                    float pfonot1 = 0;
                    float esionot1 = 0;
                    float Pf1 = 0;
                    float Esi1 = 0;
                    float GenDedn1 = 0;
                    float SecDepDedn1 = 0;
                    float TelephoneBillDed1 = 0;
                    float PFESIContribution1 = 0;
                    float TDSDed1 = 0;
                    #endregion

                    #region Data for counting tablecells

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dts1 = float.Parse(dt.Rows[i]["NoOfDuties"].ToString());
                        if (dts1 != 0)
                        {
                            dts1 += 1;
                            if (dts1 > 0)
                            {
                                dts = 1;
                            }
                        }

                        ldays1 = float.Parse(dt.Rows[i]["ldays"].ToString());
                        if (ldays1 != 0)
                        {
                            ldays1 += 1;
                            if (ldays1 > 0)
                            {
                                ldays = 1;
                            }
                        }


                        TotalPayableDays1 = float.Parse(dt.Rows[i]["TotalPayableDays"].ToString());
                        if (TotalPayableDays1 != 0)
                        {
                            TotalPayableDays1 += 1;
                            if (TotalPayableDays1 > 0)
                            {
                                TotalPayableDays = 1;
                            }
                        }


                        IDCardDed1 = float.Parse(dt.Rows[i]["IDCardDed"].ToString());
                        if (IDCardDed1 != 0)
                        {
                            IDCardDed1 += 1;
                            if (IDCardDed1 > 0)
                            {
                                IDCardDed = 1;
                            }
                        }

                        Extra1 = float.Parse(dt.Rows[i]["Extra"].ToString());
                        if (Extra1 != 0)
                        {
                            Extra1 += 1;
                            if (Extra1 > 0)
                            {
                                Extra = 1;
                            }
                        }

                        srate1 = float.Parse(dt.Rows[i]["SalRate"].ToString());
                        if (srate1 != 0)
                        {
                            srate1 += 1;
                            if (srate1 > 0)
                            {
                                srate = 1;
                            }
                        }

                        ATMDed1 = float.Parse(dt.Rows[i]["ATMDed"].ToString());
                        if (ATMDed1 != 0)
                        {
                            ATMDed1 += 1;
                            if (ATMDed1 > 0)
                            {
                                ATMDed = 1;
                            }
                        }


                        basic1 = float.Parse(dt.Rows[i]["basic"].ToString());
                        if (basic1 != 0)
                        {
                            basic1 += 1;
                            if (basic1 > 0)
                            {
                                basic = 1;
                            }
                        }
                        da1 = float.Parse(dt.Rows[i]["da"].ToString());
                        if (da1 != 0)
                        {
                            da1 += 1;
                            if (da1 > 0)
                            {
                                da = 1;
                            }
                        }
                        hra1 = float.Parse(dt.Rows[i]["hra"].ToString());
                        if (hra1 != 0)
                        {
                            hra1 += 1;
                            if (hra1 > 0)
                            {
                                hra = 1;
                            }
                        }
                        cca1 = float.Parse(dt.Rows[i]["cca"].ToString());
                        if (cca1 != 0)
                        {
                            cca1 += 1;
                            if (cca1 > 0)
                            {
                                cca = 1;
                            }
                        }
                        conveyance1 = float.Parse(dt.Rows[i]["Conveyance"].ToString());
                        if (conveyance1 != 0)
                        {
                            conveyance1 += 1;
                            if (conveyance1 > 0)
                            {
                                conveyance = 1;
                            }
                        }

                        washallowance1 = float.Parse(dt.Rows[i]["washallowance"].ToString());
                        if (washallowance1 != 0)
                        {
                            washallowance1 += 1;
                            if (washallowance1 > 0)
                            {
                                washallowance = 1;
                            }
                        }
                        otherallowance1 = float.Parse(dt.Rows[i]["otherallowance"].ToString());
                        if (otherallowance1 != 0)
                        {
                            otherallowance1 += 1;
                            if (otherallowance1 > 0)
                            {
                                otherallowance = 1;
                            }
                        }
                        SplAllowance1 = float.Parse(dt.Rows[i]["SplAllowance"].ToString());
                        if (SplAllowance1 != 0)
                        {
                            SplAllowance1 += 1;
                            if (SplAllowance1 > 0)
                            {
                                SplAllowance = 1;
                            }
                        }

                        TravelAllw1 = float.Parse(dt.Rows[i]["TravelAllw"].ToString());
                        if (TravelAllw1 != 0)
                        {
                            TravelAllw1 += 1;
                            if (TravelAllw1 > 0)
                            {
                                TravelAllw = 1;
                            }
                        }

                        PerformanceAllw1 = float.Parse(dt.Rows[i]["PerformanceAllw"].ToString());
                        if (PerformanceAllw1 != 0)
                        {
                            PerformanceAllw1 += 1;
                            if (PerformanceAllw1 > 0)
                            {
                                PerformanceAllw = 1;
                            }
                        }

                        MobileAllw1 = float.Parse(dt.Rows[i]["MobileAllw"].ToString());
                        if (MobileAllw1 != 0)
                        {
                            MobileAllw1 += 1;
                            if (MobileAllw1 > 0)
                            {
                                MobileAllw = 1;
                            }
                        }

                        leavewages1 = float.Parse(dt.Rows[i]["Leavewages"].ToString());
                        if (leavewages1 != 0)
                        {
                            leavewages1 += 1;
                            if (leavewages1 > 0)
                            {
                                leavewages = 1;
                            }
                        }
                        gratuity1 = float.Parse(dt.Rows[i]["gratuity"].ToString());
                        if (gratuity1 != 0)
                        {
                            gratuity1 += 1;
                            if (gratuity1 > 0)
                            {
                                gratuity = 1;
                            }
                        }
                        bonus1 = float.Parse(dt.Rows[i]["bonus"].ToString());
                        if (bonus1 != 0)
                        {
                            bonus1 += 1;
                            if (bonus1 > 0)
                            {
                                bonus = 1;
                            }
                        }

                        nfhs1 = float.Parse(dt.Rows[i]["nfhs"].ToString());
                        if (nfhs1 != 0)
                        {
                            nfhs1 += 1;
                            if (nfhs1 > 0)
                            {
                                nfhs = 1;
                            }
                        }
                        rc1 = float.Parse(dt.Rows[i]["rc"].ToString());
                        if (rc1 != 0)
                        {
                            rc1 += 1;
                            if (rc1 > 0)
                            {
                                rc = 1;
                            }
                        }

                        cs1 = float.Parse(dt.Rows[i]["cs"].ToString());
                        if (cs1 != 0)
                        {
                            cs1 += 1;
                            if (cs1 > 0)
                            {
                                cs = 1;
                            }
                        }
                        gross1 = float.Parse(dt.Rows[i]["gross"].ToString());
                        if (gross1 != 0)
                        {
                            gross1 += 1;
                            if (gross1 > 0)
                            {
                                gross = 1;
                            }
                        }

                        incentivs1 = float.Parse(dt.Rows[i]["incentivs"].ToString());
                        if (incentivs1 != 0)
                        {
                            incentivs1 += 1;
                            if (incentivs1 > 0)
                            {
                                incentivs = 1;
                            }
                        }


                        cfoodallowance1 = float.Parse(dt.Rows[i]["foodallowance"].ToString());
                        if (cfoodallowance1 != 0)
                        {
                            cfoodallowance1 += 1;
                            if (cfoodallowance1 > 0)
                            {
                                cfoodallowance = 1;
                            }
                        }

                        cmedicalallowance1 = float.Parse(dt.Rows[i]["medicalallowance"].ToString());
                        if (cmedicalallowance1 != 0)
                        {
                            cmedicalallowance1 += 1;
                            if (cmedicalallowance1 > 0)
                            {
                                cmedicalallowance = 1;
                            }
                        }

                        //CHanged to zero so as to get PF and ESI in PFTotal and ESITotal as given below //Check PFTotal and ESITotal
                        pfonduties1 = float.Parse(dt.Rows[i]["PFonDuties"].ToString());
                        if (pfonduties1 != 0)
                        {
                            pfonduties1 += 1;
                            if (pfonduties1 > 0)
                            {
                                pfonduties = 0;
                            }
                        }
                        esionduties1 = float.Parse(dt.Rows[i]["ESIonduties"].ToString());
                        if (esionduties1 != 0)
                        {
                            esionduties1 += 1;
                            if (esionduties1 > 0)
                            {
                                esionduties = 0;
                            }
                        }
                        proftax1 = float.Parse(dt.Rows[i]["proftax"].ToString());
                        if (proftax1 != 0)
                        {
                            proftax1 += 1;
                            if (proftax1 > 0)
                            {
                                proftax = 1;
                            }
                        }
                        salAdvDed1 = float.Parse(dt.Rows[i]["salAdvDed"].ToString());
                        if (salAdvDed1 != 0)
                        {
                            salAdvDed1 += 1;
                            if (salAdvDed1 > 0)
                            {
                                salAdvDed = 1;
                            }
                        }


                        LoanDed1 = float.Parse(dt.Rows[i]["LoanDed"].ToString());
                        if (LoanDed1 != 0)
                        {
                            LoanDed1 += 1;
                            if (LoanDed1 > 0)
                            {
                                LoanDed = 1;
                            }
                        }
                        uniformDed1 = float.Parse(dt.Rows[i]["uniformDed"].ToString());
                        if (uniformDed1 != 0)
                        {
                            uniformDed1 += 1;
                            if (uniformDed1 > 0)
                            {
                                uniformDed = 1;
                            }
                        }
                        AdvDed1 = float.Parse(dt.Rows[i]["AdvDed"].ToString());
                        if (AdvDed1 != 0)
                        {
                            AdvDed1 += 1;
                            if (AdvDed1 > 0)
                            {
                                AdvDed = 1;
                            }
                        }
                        WCDed1 = float.Parse(dt.Rows[i]["WCDed"].ToString());
                        if (WCDed1 != 0)
                        {
                            WCDed1 += 1;
                            if (WCDed1 > 0)
                            {
                                WCDed = 1;
                            }
                        }

                        //GenDedn1 = float.Parse(dt.Rows[i]["GenDedn"].ToString());
                        //if (GenDedn1 != 0)
                        //{
                        //    GenDedn1 += 1;
                        //    if (GenDedn1 > 0)
                        //    {
                        //        GenDedn = 1;
                        //    }
                        //}

                        SecDepDedn1 = float.Parse(dt.Rows[i]["SecDepDedn"].ToString());
                        if (SecDepDedn1 != 0)
                        {
                            SecDepDedn1 += 1;
                            if (SecDepDedn1 > 0)
                            {
                                SecDepDedn = 1;
                            }
                        }

                        otherDed1 = float.Parse(dt.Rows[i]["otherDed"].ToString());
                        if (otherDed1 != 0)
                        {
                            otherDed1 += 1;
                            if (otherDed1 > 0)
                            {
                                otherDed = 1;
                            }
                        }
                        canteenAdv1 = float.Parse(dt.Rows[i]["canteenAdv"].ToString());
                        if (canteenAdv1 != 0)
                        {
                            canteenAdv1 += 1;
                            if (canteenAdv1 > 0)
                            {
                                canteenAdv = 1;
                            }
                        }

                        penalty1 = float.Parse(dt.Rows[i]["penalty"].ToString());
                        if (penalty1 != 0)
                        {
                            penalty1 += 1;
                            if (penalty1 > 0)
                            {
                                penalty = 1;
                            }
                        }
                        TelephoneBillDed1 = float.Parse(dt.Rows[i]["TelephoneBillDed"].ToString());
                        if (TelephoneBillDed1 != 0)
                        {
                            TelephoneBillDed1 += 1;
                            if (TelephoneBillDed1 > 0)
                            {
                                TelephoneBillDed = 1;
                            }
                        }

                        PFESIContribution1 = float.Parse(dt.Rows[i]["PFESIContribution"].ToString());
                        if (PFESIContribution1 != 0)
                        {
                            PFESIContribution1 += 1;
                            if (PFESIContribution1 > 0)
                            {
                                PFESIContribution = 1;
                            }
                        }

                        TDSDed1 = float.Parse(dt.Rows[i]["TDSDed"].ToString());
                        if (TDSDed1 != 0)
                        {
                            TDSDed1 += 1;
                            if (TDSDed1 > 0)
                            {
                                TDSDed  = 1;
                            }
                        }

                        totalDeductions1 = float.Parse(dt.Rows[i]["Totaldeduct"].ToString());
                        if (totalDeductions1 != 0)
                        {
                            totalDeductions1 += 1;
                            if (totalDeductions1 > 0)
                            {
                                totalDeductions = 1;
                            }
                        }
                        netpay1 = float.Parse(dt.Rows[i]["NetAmount"].ToString());
                        if (netpay1 != 0)
                        {
                            netpay1 += 1;
                            if (netpay1 > 0)
                            {
                                netpay = 1;
                            }
                        }

                        ots1 = float.Parse(dt.Rows[i]["Duties"].ToString());
                        if (ots1 != 0)
                        {
                            ots1 += 1;
                            if (ots1 > 0)
                            {
                                ots = 1;
                            }
                        }

                        otamt1 = float.Parse(dt.Rows[i]["Amount"].ToString());
                        if (otamt1 != 0)
                        {
                            otamt1 += 1;
                            if (otamt1 > 0)
                            {
                                otamt = 1;
                            }
                        }

                        //

                        nhs1 = float.Parse(dt.Rows[i]["nhs"].ToString());
                        if (nhs1 != 0)
                        {
                            nhs1 += 1;
                            if (nhs1 > 0)
                            {
                                nhs = 1;
                            }
                        }

                        nhsamt1 = float.Parse(dt.Rows[i]["nhsamt"].ToString());
                        if (nhsamt1 != 0)
                        {
                            nhsamt1 += 1;
                            if (nhsamt1 > 0)
                            {
                                nhsamt = 1;
                            }
                        }


                        //


                        //

                        wo1 = float.Parse(dt.Rows[i]["Wo"].ToString());
                        if (wo1 != 0)
                        {
                            wo1 += 1;
                            if (wo1 > 0)
                            {
                                wo = 1;
                            }
                        }

                        woamt1 = float.Parse(dt.Rows[i]["woamt"].ToString());
                        if (woamt1 != 0)
                        {
                            woamt1 += 1;
                            if (woamt1 > 0)
                            {
                                woamt = 1;
                            }
                        }


                        //

                        pfonot1 = float.Parse(dt.Rows[i]["PFONOT"].ToString());
                        if (pfonot1 != 0)
                        {
                            pfonot1 += 1;
                            if (pfonot1 > 0)
                            {
                                pfonot = 0;
                            }
                        }

                        esionot1 = float.Parse(dt.Rows[i]["ESIONOT"].ToString());
                        if (esionot1 != 0)
                        {
                            esionot1 += 1;
                            if (esionot1 > 0)
                            {
                                esionot = 0;
                            }
                        }

                        Pf1 = float.Parse(dt.Rows[i]["PFTotal"].ToString());
                        if (Pf1 != 0)
                        {
                            Pf1 += 1;
                            if (Pf1 > 0)
                            {
                                Pf = 1;
                            }
                        }
                        Esi1 = float.Parse(dt.Rows[i]["ESITotal"].ToString());
                        if (Esi1 != 0)
                        {
                            Esi1 += 1;
                            if (Esi1 > 0)
                            {
                                Esi = 1;
                            }
                        }

                        owf1 = float.Parse(dt.Rows[i]["owf"].ToString());
                        if (owf1 != 0)
                        {
                            owf1 += 1;
                            if (owf1 > 0)
                            {
                                owf = 1;
                            }
                        }


                    }

                    #endregion



                    int sno = 1;
                    int empid = 1;
                    int empname = 1;
                    int design = 1;
                    int bankacno = 1;

                    int advdue = 0;







                    if ((uniformDed) > 0)
                    {
                        advdue = 1;
                    }


                    int tableCells = dts +ldays+ TotalPayableDays + srate + basic + da + hra + cca + conveyance + washallowance + otherallowance + SplAllowance + TravelAllw + PerformanceAllw + MobileAllw + leavewages +
                                    gratuity + bonus + nfhs + rc + cs + gross + incentivs + pfonduties + esionduties + proftax +
                                    salAdvDed + uniformDed + ATMDed + IDCardDed + Extra + otherDed + canteenAdv + penalty + totalDeductions + netpay + sno +TelephoneBillDed+ PFESIContribution+TDSDed+
                                    empid + empname + design + bankacno + ots + otamt + wo + woamt + nhs + nhsamt + advdue + pfonot + esionot + Pf + Esi + GenDedn + SecDepDedn + LoanDed + AdvDed + WCDed + cfoodallowance + cmedicalallowance + owf;




                    #region variables for total

                    float totalIDCardDed = 0;
                    float totalExtra = 0;
                    float totalDuties = 0;
                    float totalLdays = 0;
                    float totalTotalPayableDays = 0;
                    float totalATMDed = 0;
                    float totalsrate = 0;
                    float totalBasic = 0;
                    float totalDA = 0;
                    float totalHRA = 0;
                    float totalCCA = 0;
                    float totalConveyance = 0;
                    float totalWA = 0;
                    float totalOA = 0;
                    float totalSplAllowance = 0;
                    float totalTravelAllw = 0;
                    float totalPerformanceAllw = 0;
                    float totalMobileAllw = 0;
                    float totalLw = 0;
                    float totalGratuity = 0;
                    float totalbonus = 0;
                    float totalNfhs = 0;
                    float totalRc = 0;
                    float totalCs = 0;
                    float totalGross = 0;
                    float totalIncentivs = 0;
                    float totalPFondts = 0;
                    float totalESIondts = 0;
                    float totalProfTax = 0;
                    float totalSalAdv = 0;
                    float totalUniforDed = 0;
                    float totalOtherdedn = 0;
                    float totalCanteenAdv = 0;
                    float totalPenalty = 0;
                    float totalDed = 0;
                    float totalNetpay = 0;
                    float totalAdvDed = 0;
                    float totalWCDed = 0;
                    float totalots = 0;
                    float totalotamt = 0;
                    float totalpfonots = 0;
                    float totalesionots = 0;
                    float totalpf = 0;
                    float totalesi = 0;
                    float totalGenDedn = 0;
                    float totalSecDepDedn = 0;
                    float totalLoanDed = 0;
                    float totalwos = 0;
                    float totalwoamt = 0;
                    float totalnhs = 0;
                    float totalnhsamt = 0;
                    float totalfoodallowance = 0;
                    float totalmedicalallowance = 0;
                    float totalowf = 0;
                    float totalAmountdue = 0;
                    float totalTelephoneBillDed = 0;
                    float totalPFESIContribution = 0;
                    float totalTDSDed = 0;
                    #endregion

                    #region variables for  Grand  total
                    float GrandtotalAdvDed = 0;
                    float GrandtotalIDCardDed = 0;
                    float GrandtotalExtra = 0;
                    float GrandtotalATMDed = 0;
                    float GrandtotalWCDed = 0;
                    float GrandtotalDuties = 0;
                    float GrandtotalLdays = 0;
                    float GrandtotalTotalPayableDays = 0;
                    float GrandtotalSrate = 0;
                    float GrandtotalBasic = 0;
                    float GrandtotalDA = 0;
                    float GrandtotalHRA = 0;
                    float GrandtotalCCA = 0;
                    float GrandtotalConveyance = 0;
                    float GrandtotalWA = 0;
                    float GrandtotalOA = 0;
                    float GrandtotalSplAllowance = 0;
                    float GrandtotalTravelAllw = 0;
                    float GrandtotalPerformanceAllw = 0;
                    float GrandtotalMobileAllw = 0;
                    float GrandtotalLw = 0;
                    float GrandtotalGratuity = 0;
                    float Grandtotalbonus = 0;
                    float GrandtotalNfhs = 0;
                    float GrandtotalRc = 0;
                    float GrandtotalCs = 0;
                    float GrandtotalGross = 0;
                    float GrandtotalIncentivs = 0;
                    float GrandtotalPFondts = 0;
                    float GrandtotalESIondts = 0;
                    float GrandtotalProfTax = 0;
                    float GrandtotalSalAdv = 0;
                    float GrandtotalUniforDed = 0;
                    float GrandtotalOtherdedn = 0;
                    float GrandtotalCanteenAdv = 0;
                    float GrandtotalPenalty = 0;
                    float GrandtotalDed = 0;
                    float GrandtotalNetpay = 0;
                    float Grandtotalots = 0;
                    float Grandtotalotamt = 0;
                    float Grandtotalpfonots = 0;
                    float Grandtotalesionots = 0;
                    float Grandtotalpf = 0;
                    float Grandtotalesi = 0;
                    float GrandtotalGenDedn = 0;
                    float GrandtotalSecDepDedn = 0;
                    float GrandtotalLoanDedn = 0;
                    float Grandtotalwos = 0;
                    float Grandtotalwoamt = 0;
                    float Grandtotalnhs = 0;
                    float Grandtotalnhsamt = 0;
                    float Grandtotalfoodallowance = 0;
                    float Grandtotalmedicalallowance = 0;
                    float Grandtotalowf = 0;
                    float GrandtotalAmountdue = 0;
                    float GrandtotalTelephoneBillDed = 0;
                    float GrandtotalPFESIContribution = 0;
                    float GrandtotalTDSDed = 0;
                    #endregion

                    int nextpagerecordscount = 0;
                    int targetpagerecors = 0;
                    if (tableCells > 15)
                    {
                        targetpagerecors = 7;
                    }
                    else
                    {
                        targetpagerecors = 8;
                    }
                    int secondpagerecords = targetpagerecors+1;
                    bool nextpagehasPages = false;
                    int j = 0;
                    PdfPTable SecondtablecheckbyFooter = null;
                    PdfPTable SecondtableFooter = null;
                    PdfPTable SecondtableGrandtotalFooter = null;
                    for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
                    {
                        nextpagehasPages = true;


                        #region Titles of Document
                        PdfPTable Maintable = new PdfPTable(27);
                        if (tableCells > 20)
                        {
                            Maintable.TotalWidth = 800f;
                        }
                        else
                        {
                            Maintable.TotalWidth = 800f;
                        }
                        Maintable.LockedWidth = true;
                        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };


                        Maintable.SetWidths(width);
                       

                        //Company Name & vage act details

                        PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        cellemp.Colspan = 27;
                        cellemp.Border = 0;

                        PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
                        Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Heading.Colspan = 27;
                        Heading.Border = 0;
                        // Maintable.AddCell(Heading);


                        PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 15, Font.BOLD, BaseColor.BLACK)));
                        actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        actDetails.Colspan = 27;
                        actDetails.Border = 0;// 15;
                        //Maintable.AddCell(actDetails);

                        // Maintable.AddCell(cellemp);
                        #endregion


                        #region Sub Headings

                        PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 20, Font.BOLD, BaseColor.BLACK)));
                        companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        companyName.Colspan = 27;
                        companyName.Border = 0;// 15;
                        Maintable.AddCell(companyName);

                        PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
                        paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        paySheet.Colspan = 27;
                        paySheet.Border = 0;// 15;
                        Maintable.AddCell(paySheet);

                        PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CClient.Colspan = 11;
                        CClient.Border = 0;// 15;
                        Maintable.AddCell(CClient);


                        PdfPCell CDates = new PdfPCell(new Phrase("Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        CDates.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CDates.Colspan = 8;
                        CDates.Border = 0;// 15;
                        Maintable.AddCell(CDates);

                        // PdfPCell CPaySheetDate = new PdfPCell(new Phrase("Pay Sheet Date :  " + DateTime.Now.Date.ToString("dd/MM/yyyy"), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        PdfPCell CPaySheetDate = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        CPaySheetDate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CPaySheetDate.Colspan = 1;
                        CPaySheetDate.Border = 0;// 15;
                        Maintable.AddCell(CPaySheetDate);

                        PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :   " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CPayMonth.Colspan = 7;
                        CPayMonth.Border = 0;// 15;
                        Maintable.AddCell(CPayMonth);

                        //                string Clientaddress = "";
                        //                string queryaddress = @"select isnull(ClientAddrHno,'')+'  '+isnull(ClientAddrStreet,'')+'  '+isnull(ClientAddrColony,'')+'  '+isnull(ClientAddrArea,'')+
                        //		            '  '+isnull(ClientAddrCity,'')+'  '+isnull(ClientAddrState,'')+'  '+isnull(ClientAddrPin,'') as Address from Clients where ClientId='" + ddlClients.SelectedValue + "'";
                        //                DataTable dtaddress = SqlHelper.Instance.GetTableByQuery(queryaddress);
                        //                if (dtaddress.Rows.Count > 0)
                        //                {
                        //                    Clientaddress = dtaddress.Rows[0]["Address"].ToString();
                        //                }

                        PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlcname.SelectedItem + " ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CClientName.Colspan = 27;
                        CClientName.Border = 0;// 15;
                        Maintable.AddCell(CClientName);

                        // Maintable.AddCell(cellemp);
                        //document.Add(Maintable);

                        if (titleofdocumentindex == 0)
                        {
                            document.Add(Maintable);
                            titleofdocumentindex = 1;
                        }

                        #endregion


                        #region Table Headings

                        PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
                        if (tableCells > 20)
                        {
                            SecondtableHeadings.TotalWidth = 800f;
                        }
                        else
                        {
                            SecondtableHeadings.TotalWidth = 800f;
                        }
                        SecondtableHeadings.LockedWidth = true;
                        float[] SecondHeadingsWidth = new float[] { };

                        #region Table Cells
                        if (tableCells == 37)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 36)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }

                        if (tableCells == 35)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }

                        if (tableCells == 34)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 33)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 32)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 31)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 30)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 29)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 28)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 27)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 26)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 25)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 24)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 23)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 22)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 21)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 20)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 19)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 18)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 17)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 16)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 15)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 14)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 13)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 12)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 11)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 10)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 9)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
                        }
                        if (tableCells == 8)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 7)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
                        }

                        if (tableCells == 6)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
                        }
                        #endregion

                        SecondtableHeadings.SetWidths(SecondHeadingsWidth);

                        //Cell Headings
                        //1
                        PdfPCell sNo = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        //sNo.Colspan = 1;
                        sNo.Border = 15;// 15;
                        SecondtableHeadings.AddCell(sNo);

                        //2
                        PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CEmpId.Border = 15;// 15;
                        SecondtableHeadings.AddCell(CEmpId);

                        //3
                        PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CEmpName.Border = 15;// 15;
                        SecondtableHeadings.AddCell(CEmpName);

                        //4
                        PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CDesgn.Border = 15;
                        SecondtableHeadings.AddCell(CDesgn);

                        if (srate != 0)
                        {
                            PdfPCell Cots = new PdfPCell(new Phrase("S. Rate", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cots.Border = 15;
                            SecondtableHeadings.AddCell(Cots);
                        }

                        //5
                        if (dts != 0)
                        {
                            PdfPCell CDuties = new PdfPCell(new Phrase("Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CDuties.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CDuties.Border = 15;
                            SecondtableHeadings.AddCell(CDuties);
                        }

                        if (wo != 0)
                        {
                            PdfPCell Cwos = new PdfPCell(new Phrase("Wos", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cwos.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cwos.Border = 15;
                            SecondtableHeadings.AddCell(Cwos);
                        }

                        if (nhs != 0)
                        {
                            PdfPCell Cnhs = new PdfPCell(new Phrase("NHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cnhs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cnhs.Border = 15;
                            SecondtableHeadings.AddCell(Cnhs);
                        }

                        //6
                        if (ots != 0)
                        {
                            PdfPCell Cots = new PdfPCell(new Phrase("OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cots.Border = 15;
                            SecondtableHeadings.AddCell(Cots);
                        }


                        if (ldays != 0)
                        {
                            PdfPCell Cots = new PdfPCell(new Phrase("Leaves", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cots.Border = 15;
                            SecondtableHeadings.AddCell(Cots);
                        }


                        if (TotalPayableDays != 0)
                        {
                            PdfPCell Cots = new PdfPCell(new Phrase("Total Days", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cots.Border = 15;
                            SecondtableHeadings.AddCell(Cots);
                        }

                        //6A



                        //7
                        if (basic != 0)
                        {
                            PdfPCell CBasic = new PdfPCell(new Phrase("Basic", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CBasic.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CBasic.Border = 15;
                            SecondtableHeadings.AddCell(CBasic);
                        }

                        //8
                        if (da != 0)
                        {
                            PdfPCell CDa = new PdfPCell(new Phrase("DA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CDa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CDa.Border = 15;
                            SecondtableHeadings.AddCell(CDa);
                        }

                        //9
                        if (hra != 0)
                        {
                            PdfPCell CHRa = new PdfPCell(new Phrase("HRA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CHRa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CHRa.Border = 15;
                            SecondtableHeadings.AddCell(CHRa);
                        }

                        //10
                        if (cca != 0)
                        {
                            PdfPCell CCca = new PdfPCell(new Phrase("CCA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CCca.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CCca.Border = 15;
                            SecondtableHeadings.AddCell(CCca);
                        }

                        //11
                        if (conveyance != 0)
                        {
                            PdfPCell Cconveyance = new PdfPCell(new Phrase("Conv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cconveyance.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cconveyance.Border = 15;
                            SecondtableHeadings.AddCell(Cconveyance);
                        }

                        //12
                        if (washallowance != 0)
                        {
                            PdfPCell Cwa = new PdfPCell(new Phrase("WA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cwa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            Cwa.Border = 15;
                            SecondtableHeadings.AddCell(Cwa);
                        }

                        //13
                        if (otherallowance != 0)
                        {
                            PdfPCell COa = new PdfPCell(new Phrase("OA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            COa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            COa.Border = 15;
                            SecondtableHeadings.AddCell(COa);
                        }
                        if (SplAllowance != 0)
                        {
                            PdfPCell CSplAllowance = new PdfPCell(new Phrase("Spl Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CSplAllowance.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSplAllowance.Border = 15;
                            SecondtableHeadings.AddCell(CSplAllowance);
                        }


                        if (TravelAllw != 0)
                        {
                            PdfPCell Csplallw = new PdfPCell(new Phrase("Travel. Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Csplallw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Csplallw.Border = 15;
                            SecondtableHeadings.AddCell(Csplallw);
                        }

                        if (PerformanceAllw != 0)
                        {
                            PdfPCell Csplallw = new PdfPCell(new Phrase("Performance. Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Csplallw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Csplallw.Border = 15;
                            SecondtableHeadings.AddCell(Csplallw);
                        }

                        if (MobileAllw != 0)
                        {
                            PdfPCell Csplallw = new PdfPCell(new Phrase("Mobile. Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Csplallw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Csplallw.Border = 15;
                            SecondtableHeadings.AddCell(Csplallw);
                        }

                        //14
                        if (leavewages != 0)
                        {
                            PdfPCell CLa = new PdfPCell(new Phrase("LA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CLa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CLa.Border = 15;
                            SecondtableHeadings.AddCell(CLa);
                        }

                        //15
                        if (gratuity != 0)
                        {
                            PdfPCell CGratuity = new PdfPCell(new Phrase("Gratuity", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CGratuity.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CGratuity.Border = 15;
                            SecondtableHeadings.AddCell(CGratuity);
                        }

                        //16
                        if (bonus != 0)
                        {
                            PdfPCell CBonus = new PdfPCell(new Phrase("Bonus", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CBonus.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CBonus.Border = 15;
                            SecondtableHeadings.AddCell(CBonus);
                        }




                        //17
                        if (nfhs != 0)
                        {
                            PdfPCell CNfhs = new PdfPCell(new Phrase("NFHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNfhs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CNfhs.Border = 15;
                            SecondtableHeadings.AddCell(CNfhs);
                        }

                        //18
                        if (rc != 0)
                        {
                            PdfPCell CRc = new PdfPCell(new Phrase("R.C", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CRc.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CRc.Border = 15;
                            SecondtableHeadings.AddCell(CRc);
                        }

                        //19
                        if (cs != 0)
                        {
                            PdfPCell CCs = new PdfPCell(new Phrase("C.S", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CCs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CCs.Border = 15;
                            SecondtableHeadings.AddCell(CCs);
                        }

                        if (cfoodallowance != 0)
                        {
                            PdfPCell CFoodAllw = new PdfPCell(new Phrase("Food Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CFoodAllw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CFoodAllw.Border = 15;
                            SecondtableHeadings.AddCell(CFoodAllw);
                        }

                        if (cmedicalallowance != 0)
                        {
                            PdfPCell CMedicalAllw = new PdfPCell(new Phrase("Medical Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CMedicalAllw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CMedicalAllw.Border = 15;
                            SecondtableHeadings.AddCell(CMedicalAllw);
                        }
                        if (woamt != 0)
                        {
                            PdfPCell Cwoamt = new PdfPCell(new Phrase("WO Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cwoamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cwoamt.Border = 15;
                            SecondtableHeadings.AddCell(Cwoamt);
                        }

                        if (nhsamt != 0)
                        {
                            PdfPCell Cnhsamt = new PdfPCell(new Phrase("NHS Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cnhsamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cnhsamt.Border = 15;
                            SecondtableHeadings.AddCell(Cnhsamt);
                        }
                        //20
                        if (gross != 0)
                        {
                            PdfPCell CGross = new PdfPCell(new Phrase("Gross", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CGross.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CGross.Border = 15;
                            SecondtableHeadings.AddCell(CGross);
                        }

                        //21





                        if (otamt != 0)
                        {
                            PdfPCell COtamt = new PdfPCell(new Phrase("OT Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            COtamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            COtamt.Border = 15;
                            SecondtableHeadings.AddCell(COtamt);
                        }

                        //22
                        if (incentivs != 0)
                        {
                            PdfPCell CIncentivs = new PdfPCell(new Phrase("Incentivs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CIncentivs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CIncentivs.Border = 15;
                            SecondtableHeadings.AddCell(CIncentivs);
                        }



                        //23
                        if (pfonduties != 0)
                        {
                            PdfPCell CPFondts = new PdfPCell(new Phrase("PF on Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CPFondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CPFondts.Border = 15;
                            SecondtableHeadings.AddCell(CPFondts);
                        }

                        //24
                        if (esionduties != 0)
                        {
                            PdfPCell CESIondts = new PdfPCell(new Phrase("ESI on Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CESIondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CESIondts.Border = 15;
                            SecondtableHeadings.AddCell(CESIondts);
                        }

                        //25
                        if (pfonot != 0)
                        {
                            PdfPCell CPFonot = new PdfPCell(new Phrase("PF on OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CPFonot.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CPFonot.Border = 15;
                            SecondtableHeadings.AddCell(CPFonot);
                        }

                        //26
                        if (esionot != 0)
                        {
                            PdfPCell CESIonot = new PdfPCell(new Phrase("ESI on OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CESIonot.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CESIonot.Border = 15;
                            SecondtableHeadings.AddCell(CESIonot);
                        }

                        //27
                        if (Pf != 0)
                        {
                            PdfPCell CPF = new PdfPCell(new Phrase("PF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CPF.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CPF.Border = 15;
                            SecondtableHeadings.AddCell(CPF);
                        }

                        //28
                        if (Esi != 0)
                        {
                            PdfPCell CESI = new PdfPCell(new Phrase("ESI", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CESI.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CESI.Border = 15;
                            SecondtableHeadings.AddCell(CESI);
                        }


                        //29
                        if (proftax != 0)
                        {
                            PdfPCell CPT = new PdfPCell(new Phrase("PT", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CPT.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CPT.Border = 15;
                            SecondtableHeadings.AddCell(CPT);
                        }

                        //30
                        if (salAdvDed != 0)
                        {
                            PdfPCell CSalAdv = new PdfPCell(new Phrase("Sal Adv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSalAdv.Border = 15;
                            SecondtableHeadings.AddCell(CSalAdv);
                        }
                        if (ATMDed != 0)
                        {
                            PdfPCell CSalAdv = new PdfPCell(new Phrase("ATM Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSalAdv.Border = 15;
                            SecondtableHeadings.AddCell(CSalAdv);
                        }
                        if (IDCardDed != 0)
                        {
                            PdfPCell CSalAdv = new PdfPCell(new Phrase("IDCard Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSalAdv.Border = 15;
                            SecondtableHeadings.AddCell(CSalAdv);
                        }
                        if (Extra != 0)
                        {
                            PdfPCell CSalAdv = new PdfPCell(new Phrase("Extra", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSalAdv.Border = 15;
                            SecondtableHeadings.AddCell(CSalAdv);
                        }


                        //31
                        if (uniformDed != 0)
                        {
                            PdfPCell CUnifDed = new PdfPCell(new Phrase("Unif. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CUnifDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CUnifDed.Border = 15;
                            SecondtableHeadings.AddCell(CUnifDed);
                        }

                        if (SecDepDedn != 0)
                        {
                            PdfPCell CSecDepDedn = new PdfPCell(new Phrase("Sec Dep Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CSecDepDedn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSecDepDedn.Border = 15;
                            SecondtableHeadings.AddCell(CSecDepDedn);
                        }

                        if (LoanDed != 0)
                        {
                            PdfPCell CLoanDed = new PdfPCell(new Phrase("Loan Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CLoanDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CLoanDed.Border = 15;
                            SecondtableHeadings.AddCell(CLoanDed);
                        }

                        if (GenDedn != 0)
                        {
                            PdfPCell CGenDedn = new PdfPCell(new Phrase("Gen Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CGenDedn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CGenDedn.Border = 15;
                            SecondtableHeadings.AddCell(CGenDedn);
                        }
                        if (AdvDed != 0)
                        {
                            PdfPCell Cadvded = new PdfPCell(new Phrase("Adv Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cadvded.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cadvded.Border = 15;
                            SecondtableHeadings.AddCell(Cadvded);
                        }
                        if (WCDed != 0)
                        {
                            PdfPCell Cwcded = new PdfPCell(new Phrase("WC Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cwcded.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cwcded.Border = 15;
                            SecondtableHeadings.AddCell(Cwcded);
                        }
                        //32
                        if (otherDed != 0)
                        {
                            PdfPCell COtherDed = new PdfPCell(new Phrase("Other Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            COtherDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            COtherDed.Border = 15;
                            SecondtableHeadings.AddCell(COtherDed);
                        }

                        //33
                        if (canteenAdv != 0)
                        {
                            PdfPCell Ccanteended = new PdfPCell(new Phrase("Mess. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Ccanteended.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Ccanteended.Border = 15;
                            SecondtableHeadings.AddCell(Ccanteended);
                        }



                        //34
                        if (penalty != 0)
                        {
                            PdfPCell CPenalty = new PdfPCell(new Phrase("Penalty", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CPenalty.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CPenalty.Border = 15;
                            SecondtableHeadings.AddCell(CPenalty);
                        }


                        if (owf != 0)
                        {
                            PdfPCell Cowf = new PdfPCell(new Phrase("Wel. Fund", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cowf.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cowf.Border = 15;
                            SecondtableHeadings.AddCell(Cowf);
                        }


                        if (advdue != 0)
                        {
                            PdfPCell Cowf = new PdfPCell(new Phrase("Uniform due", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cowf.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cowf.Border = 15;
                            SecondtableHeadings.AddCell(Cowf);
                        }
                        //36
                        if (TelephoneBillDed != 0)
                        {
                            PdfPCell CTelephoneBillDed = new PdfPCell(new Phrase("Telephone Bill Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CTelephoneBillDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CTelephoneBillDed.Border = 15;
                            SecondtableHeadings.AddCell(CTelephoneBillDed);
                        }

                        //36
                        if (PFESIContribution != 0)
                        {
                            PdfPCell CPFESIContribution = new PdfPCell(new Phrase("PF & ESI Contribution", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CPFESIContribution.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CPFESIContribution.Border = 15;
                            SecondtableHeadings.AddCell(CPFESIContribution);
                        }
                        //37
                        if (TDSDed != 0)
                        {
                            PdfPCell CPFESIContribution = new PdfPCell(new Phrase("TDS Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CPFESIContribution.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CPFESIContribution.Border = 15;
                            SecondtableHeadings.AddCell(CPFESIContribution);
                        }
                        //38
                        if (totalDeductions != 0)
                        {
                            PdfPCell CTotDed = new PdfPCell(new Phrase("Tot Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CTotDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CTotDed.Border = 15;
                            SecondtableHeadings.AddCell(CTotDed);
                        }

                        //39
                        if (netpay != 0)
                        {
                            PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNetPay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CNetPay.Border = 15;
                            SecondtableHeadings.AddCell(CNetPay);
                        }

                        //40
                        PdfPCell CSignature = new PdfPCell(new Phrase("Bank A/c No./ Signature", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CSignature.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CSignature.Border = 15;
                        SecondtableHeadings.AddCell(CSignature);


                        #endregion


                        #region Table Data

                        PdfPTable Secondtable = new PdfPTable(tableCells);
                        if (tableCells > 20)
                        {
                            Secondtable.TotalWidth = 800f;
                        }
                        else
                        {
                            Secondtable.TotalWidth = 800f;
                        }
                        Secondtable.LockedWidth = true;
                        float[] SecondWidth = new float[] { };

                        #region Table Cells
                        if (tableCells == 37)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 36)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }

                        if (tableCells == 35)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }

                        if (tableCells == 34)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 33)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 32)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 31)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 30)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 29)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 28)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 27)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 26)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 25)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 24)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 23)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 22)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 21)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 20)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 19)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 18)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 17)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 16)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 15)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 14)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 13)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 12)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 11)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 10)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 9)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
                        }
                        if (tableCells == 8)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 7)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
                        }

                        if (tableCells == 6)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
                        }
                        #endregion


                        Secondtable.SetWidths(SecondWidth);




                        int rowCount = 0;
                        int pageCount = 0;
                        int i = nextpagei;

                        float dedamout = 0;
                        float Balance = 0;
                        var LoansSPName = "";
                        Hashtable HTLoans = new Hashtable();
                        DataTable dtLoans = null;
                        LoansSPName = "LoansSummary";
                        HTLoans.Add("@ClientId", ddlClients.SelectedValue);
                        HTLoans.Add("@month", month);
                        HTLoans.Add("@empid", dt.Rows[i]["EmpId"].ToString());
                        dtLoans =config.ExecuteAdaptorAsyncWithParams(LoansSPName, HTLoans).Result;

                        if (dtLoans.Rows.Count > 0)
                        {
                            //loanamt = float.Parse(dtLoans.Rows[0]["TotalLoanAmount"].ToString());
                            dedamout = float.Parse(dtLoans.Rows[0]["TotalDeductedAmount"].ToString());
                            Balance = float.Parse(dtLoans.Rows[0]["Balance"].ToString());
                        }


                        // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
                        {
                            float ForconvertOt = 0;
                            forConvert = 0;
                            if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());

                            //if (forConvert > 0)
                            {

                                if (nextpagerecordscount == 0)
                                {
                                    document.Add(SecondtableHeadings);
                                }

                                nextpagerecordscount++;


                                //1
                                PdfPCell CSNo = new PdfPCell(new Phrase("\n \n" + (++j).ToString() + "", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CSNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                CSNo.Border = 15;
                                //   CSNo.FixedHeight = 30;
                                Secondtable.AddCell(CSNo);

                                //2
                                PdfPCell CEmpId1 = new PdfPCell(new Phrase("\n \n " + dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CEmpId1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                CEmpId1.Border = 15;
                                Secondtable.AddCell(CEmpId1);

                                //3EmpESINo,EmpEpfNo
                                // + "\n" + "ESI No" + "\n" + "UAN No" + "\n" + "PF No"
                                PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpName"].ToString() + "\n" + "ESI No : " + dt.Rows[i]["EmpESINo"].ToString() + "\n" + "UAN No : " + dt.Rows[i]["EmpUANNumber"].ToString() + "\n" + "PF No : " + dt.Rows[i]["EmpEpfNo"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                CEmpName1.Border = 15;
                                CEmpName1.SetLeading(0, 1.3f);
                                Secondtable.AddCell(CEmpName1);

                                //4
                                PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Design"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                CEmpDesgn.Border = 15;
                                Secondtable.AddCell(CEmpDesgn);



                                //6A
                                if (srate != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Salrate"].ToString().Trim().Length > 0)
                                        forConvert = Convert.ToSingle(dt.Rows[i]["Salrate"].ToString());
                                    totalsrate += forConvert;
                                    GrandtotalSrate += forConvert;

                                    PdfPCell CSalrate = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSalrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSalrate.Border = 15;
                                    Secondtable.AddCell(CSalrate);
                                }

                                //5
                                if (dts != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
                                        forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());
                                    totalDuties += forConvert;
                                    GrandtotalDuties += forConvert;

                                    PdfPCell CNoOfDuties = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CNoOfDuties.Border = 15;
                                    Secondtable.AddCell(CNoOfDuties);
                                }


                                if (wo != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Wo"].ToString().Trim().Length > 0)
                                        forConvert = Convert.ToSingle(dt.Rows[i]["Wo"].ToString());
                                    totalwos += forConvert;
                                    Grandtotalwos += forConvert;

                                    PdfPCell Cwos = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Cwos.Border = 15;
                                    Secondtable.AddCell(Cwos);
                                }


                                if (nhs != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["nhs"].ToString().Trim().Length > 0)
                                        forConvert = Convert.ToSingle(dt.Rows[i]["nhs"].ToString());
                                    totalnhs += forConvert;
                                    Grandtotalnhs += forConvert;

                                    PdfPCell Cnhss = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cnhss.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Cnhss.Border = 15;
                                    Secondtable.AddCell(Cnhss);
                                }

                                //6
                                if (ots != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Duties"].ToString().Trim().Length > 0)
                                        forConvert = Convert.ToSingle(dt.Rows[i]["Duties"].ToString());
                                    totalots += forConvert;
                                    Grandtotalots += forConvert;

                                    PdfPCell COts = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    COts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    COts.Border = 15;
                                    Secondtable.AddCell(COts);
                                }


                                if (ldays != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["LDays"].ToString().Trim().Length > 0)
                                        forConvert = Convert.ToSingle(dt.Rows[i]["LDays"].ToString());
                                    totalLdays += forConvert;
                                    GrandtotalLdays += forConvert;

                                    PdfPCell COts = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    COts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    COts.Border = 15;
                                    Secondtable.AddCell(COts);
                                }


                                if (TotalPayableDays != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["TotalPayableDays"].ToString().Trim().Length > 0)
                                        forConvert = Convert.ToSingle(dt.Rows[i]["TotalPayableDays"].ToString());
                                    totalTotalPayableDays += forConvert;
                                    GrandtotalTotalPayableDays += forConvert;

                                    PdfPCell COts = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    COts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    COts.Border = 15;
                                    Secondtable.AddCell(COts);
                                }



                                //7
                                if (basic != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Basic"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Basic"].ToString()));
                                    totalBasic += forConvert;
                                    GrandtotalBasic += forConvert;
                                    PdfPCell CBasic1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CBasic1.Border = 15;
                                    Secondtable.AddCell(CBasic1);
                                }

                                //8
                                if (da != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["DA"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["DA"].ToString()));
                                    totalDA += forConvert;
                                    GrandtotalDA += forConvert;

                                    PdfPCell CDa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CDa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CDa1.Border = 15;
                                    Secondtable.AddCell(CDa1);
                                }

                                //9
                                if (hra != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["HRA"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["HRA"].ToString()));
                                    totalHRA += forConvert;
                                    GrandtotalHRA += forConvert;

                                    PdfPCell CHRA1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CHRA1.Border = 15;
                                    Secondtable.AddCell(CHRA1);
                                }

                                //10
                                if (cca != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["cca"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cca"].ToString()));
                                    totalCCA += forConvert;

                                    GrandtotalCCA += forConvert;

                                    PdfPCell Ccca = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Ccca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Ccca.Border = 15;
                                    Secondtable.AddCell(Ccca);
                                }

                                //11
                                if (conveyance != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Conveyance"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString()));
                                    totalConveyance += forConvert;
                                    GrandtotalConveyance += forConvert;

                                    PdfPCell CConveyance = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CConveyance.Border = 15;
                                    Secondtable.AddCell(CConveyance);
                                }


                                //12
                                if (washallowance != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["washallowance"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["washallowance"].ToString()));
                                    totalWA += forConvert;
                                    GrandtotalWA += forConvert;

                                    PdfPCell CWa = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CWa.Border = 15;
                                    Secondtable.AddCell(CWa);
                                }

                                //13
                                if (otherallowance != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["OtherAllowance"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString()));
                                    totalOA += forConvert;
                                    GrandtotalOA += forConvert;
                                    PdfPCell COA = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    COA.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    COA.Border = 15;
                                    Secondtable.AddCell(COA);
                                }
                                if (SplAllowance != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["SplAllowance"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SplAllowance"].ToString()));
                                    totalSplAllowance += forConvert;
                                    GrandtotalSplAllowance += forConvert;
                                    PdfPCell CSplAllowance = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSplAllowance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSplAllowance.Border = 15;
                                    Secondtable.AddCell(CSplAllowance);
                                }

                                if (TravelAllw != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["TravelAllw"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TravelAllw"].ToString()));
                                    totalTravelAllw += forConvert;
                                    GrandtotalTravelAllw += forConvert;
                                    PdfPCell CSplAllowance1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSplAllowance1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSplAllowance1.Border = 15;
                                    Secondtable.AddCell(CSplAllowance1);
                                }

                                if (PerformanceAllw != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["PerformanceAllw"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PerformanceAllw"].ToString()));
                                    totalPerformanceAllw += forConvert;
                                    GrandtotalPerformanceAllw += forConvert;
                                    PdfPCell CSplAllowance1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSplAllowance1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSplAllowance1.Border = 15;
                                    Secondtable.AddCell(CSplAllowance1);
                                }

                                if (MobileAllw != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["MobileAllw"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["MobileAllw"].ToString()));
                                    totalMobileAllw += forConvert;
                                    GrandtotalMobileAllw += forConvert;
                                    PdfPCell CSplAllowance1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSplAllowance1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSplAllowance1.Border = 15;
                                    Secondtable.AddCell(CSplAllowance1);
                                }



                                //14
                                if (leavewages != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Leavewages"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Leavewages"].ToString()));
                                    totalLw += forConvert;
                                    GrandtotalLw += forConvert;
                                    PdfPCell CLa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CLa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CLa1.Border = 15;
                                    Secondtable.AddCell(CLa1);
                                }
                                //15
                                if (gratuity != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Gratuity"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gratuity"].ToString()));
                                    totalGratuity += forConvert;
                                    GrandtotalGratuity += forConvert;
                                    PdfPCell CGratuity1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CGratuity1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CGratuity1.Border = 15;
                                    Secondtable.AddCell(CGratuity1);
                                }

                                //16
                                if (bonus != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["bonus"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["bonus"].ToString()));
                                    totalbonus += forConvert;

                                    Grandtotalbonus += forConvert;
                                    PdfPCell Cbonus = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Cbonus.Border = 15;
                                    Secondtable.AddCell(Cbonus);
                                }



                                //17
                                if (nfhs != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Nfhs"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Nfhs"].ToString()));
                                    totalNfhs += forConvert;
                                    GrandtotalNfhs += forConvert;
                                    PdfPCell CNfhs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CNfhs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CNfhs1.Border = 15;
                                    Secondtable.AddCell(CNfhs1);
                                }

                                //18
                                if (rc != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["RC"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["RC"].ToString()));
                                    totalRc += forConvert;
                                    GrandtotalRc += forConvert;
                                    PdfPCell CRc1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CRc1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CRc1.Border = 15;
                                    Secondtable.AddCell(CRc1);
                                }

                                //19
                                if (cs != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["cs"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cs"].ToString()));
                                    totalCs += forConvert;
                                    GrandtotalCs += forConvert;
                                    PdfPCell CCs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CCs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CCs1.Border = 15;
                                    Secondtable.AddCell(CCs1);
                                }


                                if (cfoodallowance != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["foodallowance"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["foodallowance"].ToString()));
                                    totalfoodallowance += forConvert;
                                    Grandtotalfoodallowance += forConvert;
                                    PdfPCell CFoodAllw1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CFoodAllw1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CFoodAllw1.Border = 15;
                                    Secondtable.AddCell(CFoodAllw1);
                                }


                                if (cmedicalallowance != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["medicalallowance"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["medicalallowance"].ToString()));
                                    totalmedicalallowance += forConvert;
                                    Grandtotalmedicalallowance += forConvert;
                                    PdfPCell CMedicalAllw1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CMedicalAllw1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CMedicalAllw1.Border = 15;
                                    Secondtable.AddCell(CMedicalAllw1);
                                }

                                if (woamt != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Woamt"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Woamt"].ToString()));
                                    totalwoamt += forConvert;
                                    Grandtotalwoamt += forConvert;

                                    PdfPCell CWoAmt1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CWoAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CWoAmt1.Border = 15;
                                    Secondtable.AddCell(CWoAmt1);
                                }


                                if (nhsamt != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["nhsamt"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["nhsamt"].ToString()));
                                    totalnhsamt += forConvert;
                                    Grandtotalnhsamt += forConvert;

                                    PdfPCell CNhsAmt1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CNhsAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CNhsAmt1.Border = 15;
                                    Secondtable.AddCell(CNhsAmt1);
                                }
                                //20
                                if (gross != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Gross"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gross"].ToString()));
                                    totalGross += forConvert;
                                    GrandtotalGross += forConvert;

                                    PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CGross1.Border = 15;
                                    Secondtable.AddCell(CGross1);
                                }

                                //21





                                if (otamt != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Amount"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Amount"].ToString()));
                                    totalotamt += forConvert;
                                    Grandtotalotamt += forConvert;

                                    PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CGross1.Border = 15;
                                    Secondtable.AddCell(CGross1);
                                }


                                //22
                                if (incentivs != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Incentivs"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Incentivs"].ToString()));
                                    totalIncentivs += forConvert;
                                    GrandtotalIncentivs += forConvert;
                                    PdfPCell CIncentivs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CIncentivs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CIncentivs1.Border = 15;
                                    Secondtable.AddCell(CIncentivs1);
                                }

                                //23
                                if (pfonduties != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Pfonduties"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Pfonduties"].ToString()));
                                    totalPFondts += forConvert;
                                    GrandtotalPFondts += forConvert;

                                    PdfPCell CPF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CPF1.Border = 15;
                                    Secondtable.AddCell(CPF1);
                                }

                                //24
                                if (esionduties != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Esionduties"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Esionduties"].ToString()));
                                    totalESIondts += forConvert;

                                    GrandtotalESIondts += forConvert;

                                    PdfPCell CESI1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CESI1.Border = 15;
                                    Secondtable.AddCell(CESI1);
                                }

                                //25
                                if (pfonot != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["PFONOT"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PFONOT"].ToString()));
                                    totalpfonots += forConvert;
                                    Grandtotalpfonots += forConvert;

                                    PdfPCell CPFonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CPFonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CPFonots.Border = 15;
                                    Secondtable.AddCell(CPFonots);
                                }

                                //26
                                if (esionot != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["ESIONOT"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESIONOT"].ToString()));
                                    totalesionots += forConvert;

                                    Grandtotalesionots += forConvert;

                                    PdfPCell CESIonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CESIonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CESIonots.Border = 15;
                                    Secondtable.AddCell(CESIonots);
                                }

                                //27
                                if (Pf != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["PFTotal"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PFTotal"].ToString()));
                                    totalpf += forConvert;
                                    Grandtotalpf += forConvert;

                                    PdfPCell CPFonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CPFonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CPFonots.Border = 15;
                                    Secondtable.AddCell(CPFonots);
                                }

                                //28
                                if (Esi != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["ESITotal"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESITotal"].ToString()));
                                    totalesi += forConvert;

                                    Grandtotalesi += forConvert;

                                    PdfPCell CESIonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CESIonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CESIonots.Border = 15;
                                    Secondtable.AddCell(CESIonots);
                                }

                                //29
                                if (proftax != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["ProfTax"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString()));
                                    totalProfTax += forConvert;
                                    GrandtotalProfTax += forConvert;

                                    PdfPCell CProTax1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CProTax1.Border = 15;
                                    Secondtable.AddCell(CProTax1);
                                }

                                //30
                                if (salAdvDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["SalAdvDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString()));
                                    totalSalAdv += forConvert;
                                    GrandtotalSalAdv += forConvert;

                                    PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSalAdv1.Border = 15;
                                    Secondtable.AddCell(CSalAdv1);
                                }

                                if (ATMDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["ATMDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ATMDed"].ToString()));
                                    totalATMDed += forConvert;
                                    GrandtotalATMDed += forConvert;

                                    PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSalAdv1.Border = 15;
                                    Secondtable.AddCell(CSalAdv1);
                                }
                                if (IDCardDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["IDCardDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["IDCardDed"].ToString()));
                                    totalIDCardDed += forConvert;
                                    GrandtotalIDCardDed += forConvert;

                                    PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSalAdv1.Border = 15;
                                    Secondtable.AddCell(CSalAdv1);
                                }

                                if (Extra != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Extra"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Extra"].ToString()));
                                    totalExtra += forConvert;
                                    GrandtotalExtra += forConvert;

                                    PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSalAdv1.Border = 15;
                                    Secondtable.AddCell(CSalAdv1);
                                }

                                //31
                                if (uniformDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["UniformDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString()));
                                    totalUniforDed += forConvert;
                                    GrandtotalUniforDed += forConvert;

                                    PdfPCell CUnifDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CUnifDed1.Border = 15;
                                    Secondtable.AddCell(CUnifDed1);
                                }


                                if (SecDepDedn != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["SecDepDedn"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SecDepDedn"].ToString()));
                                    totalSecDepDedn += forConvert;
                                    GrandtotalSecDepDedn += forConvert;

                                    PdfPCell CSecDepDedn1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSecDepDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSecDepDedn1.Border = 15;
                                    Secondtable.AddCell(CSecDepDedn1);
                                }

                                if (LoanDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["LoanDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["LoanDed"].ToString()));
                                    totalLoanDed += forConvert;
                                    GrandtotalLoanDedn += forConvert;

                                    PdfPCell CLoanDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CLoanDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CLoanDed1.Border = 15;
                                    Secondtable.AddCell(CLoanDed1);
                                }


                                if (GenDedn != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["GenDedn"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["GenDedn"].ToString()));
                                    totalGenDedn += forConvert;
                                    GrandtotalGenDedn += forConvert;

                                    PdfPCell CGenDedn1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CGenDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CGenDedn1.Border = 15;
                                    Secondtable.AddCell(CGenDedn1);
                                }

                                if (AdvDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["AdvDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["AdvDed"].ToString()));
                                    totalAdvDed += forConvert;
                                    GrandtotalAdvDed += forConvert;

                                    PdfPCell CADVDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CADVDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CADVDed1.Border = 15;
                                    Secondtable.AddCell(CADVDed1);
                                }


                                if (WCDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["WCDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["WCDed"].ToString()));
                                    totalWCDed += forConvert;
                                    GrandtotalWCDed += forConvert;

                                    PdfPCell CWCDedn1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CWCDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CWCDedn1.Border = 15;
                                    Secondtable.AddCell(CWCDedn1);
                                }

                                //32
                                if (otherDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["OtherDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherDed"].ToString()));
                                    totalOtherdedn += forConvert;
                                    GrandtotalOtherdedn += forConvert;

                                    PdfPCell COtherDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    COtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    COtherDed1.Border = 15;
                                    Secondtable.AddCell(COtherDed1);
                                }

                                //33
                                if (canteenAdv != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["CanteenAdv"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["CanteenAdv"].ToString()));
                                    totalCanteenAdv += forConvert;
                                    GrandtotalCanteenAdv += forConvert;

                                    PdfPCell CCanteended = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CCanteended.Border = 15;
                                    Secondtable.AddCell(CCanteended);
                                }



                                //34
                                if (penalty != 0)
                                {
                                    if (dt.Rows[i]["Penalty"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Penalty"].ToString()));
                                    totalPenalty += forConvert;
                                    GrandtotalPenalty += forConvert;

                                    PdfPCell CPenalty1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CPenalty1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CPenalty1.Border = 15;
                                    Secondtable.AddCell(CPenalty1);
                                }


                                if (owf != 0)
                                {
                                    if (dt.Rows[i]["owf"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["owf"].ToString()));
                                    totalowf += forConvert;
                                    Grandtotalowf += forConvert;

                                    PdfPCell Cowf1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cowf1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Cowf1.Border = 15;
                                    Secondtable.AddCell(Cowf1);
                                }


                                if (advdue != 0)
                                {
                                    forConvert = Balance;

                                    totalAmountdue += forConvert;
                                    GrandtotalAmountdue += forConvert;

                                    PdfPCell CTotDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CTotDed1.Border = 15;
                                    Secondtable.AddCell(CTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                                }

                                //36
                                if (TelephoneBillDed != 0)
                                {
                                    if (dt.Rows[i]["TelephoneBillDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TelephoneBillDed"].ToString()));
                                    totalTelephoneBillDed += forConvert;
                                    GrandtotalTelephoneBillDed += forConvert;

                                    PdfPCell CTelephoneBillDed = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CTelephoneBillDed.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CTelephoneBillDed.Border = 15;
                                    Secondtable.AddCell(CTelephoneBillDed);
                                }

                                //36
                                if (PFESIContribution != 0)
                                {
                                    if (dt.Rows[i]["PFESIContribution"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PFESIContribution"].ToString()));
                                    totalPFESIContribution += forConvert;
                                    GrandtotalPFESIContribution += forConvert;

                                    PdfPCell CPFESIContribution = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CPFESIContribution.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CPFESIContribution.Border = 15;
                                    Secondtable.AddCell(CPFESIContribution);
                                }

                                if (TDSDed != 0)
                                {
                                    if (dt.Rows[i]["TDSDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TDSDed"].ToString()));
                                    totalTDSDed  += forConvert;
                                    GrandtotalTDSDed  += forConvert;

                                    PdfPCell CPFESIContribution = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CPFESIContribution.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CPFESIContribution.Border = 15;
                                    Secondtable.AddCell(CPFESIContribution);
                                }

                                //35
                                if (totalDeductions != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Totaldeduct"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Totaldeduct"].ToString()));
                                    totalDed += forConvert;
                                    GrandtotalDed += forConvert;

                                    PdfPCell CTotDed1 = new PdfPCell(new Phrase("\n \n \n" + forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CTotDed1.Border = 15;
                                    Secondtable.AddCell(CTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                                }

                                //36
                                if (netpay != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["NetAmount"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["NetAmount"].ToString()));
                                    if (forConvert <= 0)
                                    {
                                        forConvert = 0;
                                    }
                                    totalNetpay += forConvert;
                                    GrandtotalNetpay += forConvert;
                                    PdfPCell CNetPay1 = new PdfPCell(new Phrase("\n \n \n" + forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CNetPay1.Border = 15;
                                    Secondtable.AddCell(CNetPay1);
                                }

                                //37
                                string EmpBankAcNo = dt.Rows[i]["EmpBankAcNo"].ToString();
                                string empbankname = dt.Rows[i]["empbankname"].ToString();
                                PdfPCell CSignature1 = new PdfPCell(new Phrase(EmpBankAcNo + "\n" + "Bank : " + empbankname, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                CSignature1.Border = 15;
                                CSignature1.MinimumHeight = 25;
                                Secondtable.AddCell(CSignature1);
                            }


                        }
                        #endregion

                        #region Table Total values

                        SecondtableFooter = new PdfPTable(tableCells);
                        if (tableCells > 20)
                        {
                            SecondtableFooter.TotalWidth = 800f;
                        }
                        else
                        {
                            SecondtableFooter.TotalWidth = 800f;
                        }
                        SecondtableFooter.LockedWidth = true;
                        float[] SecondFooterWidth = new float[] { };

                        #region Table Cells
                        if (tableCells == 37)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 36)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }

                        if (tableCells == 35)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }

                        if (tableCells == 34)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 33)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 32)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 31)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 30)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 29)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 28)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 27)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 26)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 25)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 24)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 23)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 22)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 21)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 20)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 19)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 18)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 17)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 16)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 15)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 14)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 13)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 12)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 11)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 10)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 9)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
                        }
                        if (tableCells == 8)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 7)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
                        }

                        if (tableCells == 6)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
                        }
                        #endregion

                        SecondtableFooter.SetWidths(SecondFooterWidth);

                        //1
                        PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
                        FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        FCSNo.Border = 15;
                        SecondtableFooter.AddCell(FCSNo);
                        //2
                        PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
                        FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        FCEmpId1.Border = 15;
                        SecondtableFooter.AddCell(FCEmpId1);
                        //3
                        PdfPCell FCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                        FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        FCEmpName1.Border = 15;
                        SecondtableFooter.AddCell(FCEmpName1);
                        //4
                        PdfPCell FCEmpDesgn = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
                        FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        FCEmpDesgn.Border = 15;
                        FCEmpDesgn.Colspan = 0;
                        SecondtableFooter.AddCell(FCEmpDesgn);

                        //6A
                        if (srate != 0)
                        {
                            PdfPCell FCSalrate = new PdfPCell(new Phrase(totalsrate.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCSalrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCSalrate.Border = 15;
                            SecondtableFooter.AddCell(FCSalrate);
                        }


                        //5
                        if (dts != 0)
                        {
                            PdfPCell FCNoOfDuties = new PdfPCell(new Phrase(totalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCNoOfDuties.Border = 15;
                            SecondtableFooter.AddCell(FCNoOfDuties);
                        }

                        if (wo != 0)
                        {
                            PdfPCell FCwos = new PdfPCell(new Phrase(totalwos.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCwos.Border = 15;
                            SecondtableFooter.AddCell(FCwos);
                        }

                        if (nhs != 0)
                        {
                            PdfPCell FCnhs = new PdfPCell(new Phrase(totalnhs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCnhs.Border = 15;
                            SecondtableFooter.AddCell(FCnhs);
                        }

                        //6
                        if (ots != 0)
                        {
                            PdfPCell FCots = new PdfPCell(new Phrase(totalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCots.Border = 15;
                            SecondtableFooter.AddCell(FCots);
                        }


                        if (ldays != 0)
                        {
                            PdfPCell FCots = new PdfPCell(new Phrase(totalLdays.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCots.Border = 15;
                            SecondtableFooter.AddCell(FCots);
                        }

                        if (TotalPayableDays != 0)
                        {
                            PdfPCell FCots = new PdfPCell(new Phrase(totalTotalPayableDays.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCots.Border = 15;
                            SecondtableFooter.AddCell(FCots);
                        }



                        //7
                        if (basic != 0)
                        {
                            PdfPCell FCBasic1 = new PdfPCell(new Phrase(totalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCBasic1.Border = 15;
                            SecondtableFooter.AddCell(FCBasic1);
                        }


                        //8
                        if (da != 0)
                        {
                            PdfPCell FDa = new PdfPCell(new Phrase(totalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FDa.Border = 15;
                            SecondtableFooter.AddCell(FDa);
                        }


                        //9
                        if (hra != 0)
                        {

                            PdfPCell FCHRA1 = new PdfPCell(new Phrase(totalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCHRA1.Border = 15;
                            SecondtableFooter.AddCell(FCHRA1);
                        }

                        //10
                        if (cca != 0)
                        {
                            PdfPCell FCcca = new PdfPCell(new Phrase(totalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCcca.Border = 15;
                            SecondtableFooter.AddCell(FCcca);
                        }

                        //11
                        if (conveyance != 0)
                        {
                            PdfPCell FCConveyance = new PdfPCell(new Phrase(totalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCConveyance.Border = 15;
                            SecondtableFooter.AddCell(FCConveyance);
                        }


                        //12
                        if (washallowance != 0)
                        {
                            PdfPCell FCWa = new PdfPCell(new Phrase(totalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCWa.Border = 15;
                            SecondtableFooter.AddCell(FCWa);
                        }

                        //13
                        if (otherallowance != 0)
                        {
                            PdfPCell FCOa = new PdfPCell(new Phrase(totalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCOa.Border = 15;
                            SecondtableFooter.AddCell(FCOa);
                        }

                        if (SplAllowance != 0)
                        {
                            PdfPCell FCSplAllowance = new PdfPCell(new Phrase(totalSplAllowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCSplAllowance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCSplAllowance.Border = 15;
                            SecondtableFooter.AddCell(FCSplAllowance);
                        }

                        if (TravelAllw != 0)
                        {
                            PdfPCell Fsplallw = new PdfPCell(new Phrase(totalTravelAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            Fsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Fsplallw.Border = 15;
                            SecondtableFooter.AddCell(Fsplallw);
                        }

                        if (PerformanceAllw != 0)
                        {
                            PdfPCell Fsplallw = new PdfPCell(new Phrase(totalPerformanceAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            Fsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Fsplallw.Border = 15;
                            SecondtableFooter.AddCell(Fsplallw);
                        }

                        if (MobileAllw != 0)
                        {
                            PdfPCell Fsplallw = new PdfPCell(new Phrase(totalMobileAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            Fsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Fsplallw.Border = 15;
                            SecondtableFooter.AddCell(Fsplallw);
                        }
                        //14
                        if (leavewages != 0)
                        {
                            PdfPCell FLa = new PdfPCell(new Phrase(totalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FLa.Border = 15;
                            SecondtableFooter.AddCell(FLa);
                        }

                        //15
                        if (gratuity != 0)
                        {
                            PdfPCell FGratuity = new PdfPCell(new Phrase(totalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FGratuity.Border = 15;
                            SecondtableFooter.AddCell(FGratuity);
                        }

                        //16
                        if (bonus != 0)
                        {
                            PdfPCell Fbonus = new PdfPCell(new Phrase(totalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            Fbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Fbonus.Border = 15;
                            SecondtableFooter.AddCell(Fbonus);
                        }

                        //17
                        if (nfhs != 0)
                        {
                            PdfPCell FNfhs = new PdfPCell(new Phrase(totalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FNfhs.Border = 15;
                            SecondtableFooter.AddCell(FNfhs);
                        }

                        //18
                        if (rc != 0)
                        {
                            PdfPCell FRc = new PdfPCell(new Phrase(totalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FRc.Border = 15;
                            SecondtableFooter.AddCell(FRc);
                        }

                        //19
                        if (cs != 0)
                        {
                            PdfPCell FCs = new PdfPCell(new Phrase(totalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCs.Border = 15;
                            SecondtableFooter.AddCell(FCs);
                        }

                        if (cfoodallowance != 0)
                        {
                            PdfPCell FFoodallw = new PdfPCell(new Phrase(totalfoodallowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FFoodallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FFoodallw.Border = 15;
                            SecondtableFooter.AddCell(FFoodallw);
                        }


                        if (cmedicalallowance != 0)
                        {
                            PdfPCell FMedicalallw = new PdfPCell(new Phrase(totalmedicalallowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FMedicalallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FMedicalallw.Border = 15;
                            SecondtableFooter.AddCell(FMedicalallw);
                        }
                        if (woamt != 0)
                        {
                            PdfPCell FCWoamt = new PdfPCell(new Phrase(totalwoamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCWoamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCWoamt.Border = 15;
                            SecondtableFooter.AddCell(FCWoamt);
                        }


                        if (nhsamt != 0)
                        {
                            PdfPCell FCnhsamt = new PdfPCell(new Phrase(totalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCnhsamt.Border = 15;
                            SecondtableFooter.AddCell(FCnhsamt);
                        }

                        //20
                        if (gross != 0)
                        {
                            PdfPCell FCGross1 = new PdfPCell(new Phrase(totalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCGross1.Border = 15;
                            SecondtableFooter.AddCell(FCGross1);
                        }

                        //21





                        if (otamt != 0)
                        {
                            PdfPCell FCotamt = new PdfPCell(new Phrase(totalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCotamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCotamt.Border = 15;
                            SecondtableFooter.AddCell(FCotamt);
                        }


                        //22
                        if (incentivs != 0)
                        {
                            PdfPCell FIncentivs = new PdfPCell(new Phrase(totalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FIncentivs.Border = 15;
                            SecondtableFooter.AddCell(FIncentivs);
                        }


                        //23
                        if (pfonduties != 0)
                        {
                            PdfPCell FCPF1 = new PdfPCell(new Phrase(totalPFondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCPF1.Border = 15;
                            SecondtableFooter.AddCell(FCPF1);
                        }

                        //24
                        if (esionduties != 0)
                        {
                            PdfPCell FCESI1 = new PdfPCell(new Phrase(totalESIondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCESI1.Border = 15;
                            SecondtableFooter.AddCell(FCESI1);
                        }


                        //25
                        if (pfonot != 0)
                        {
                            PdfPCell FCPFonot = new PdfPCell(new Phrase(totalpfonots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCPFonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCPFonot.Border = 15;
                            SecondtableFooter.AddCell(FCPFonot);
                        }

                        //26
                        if (esionot != 0)
                        {
                            PdfPCell FCESIonot = new PdfPCell(new Phrase(totalesionots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCESIonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCESIonot.Border = 15;
                            SecondtableFooter.AddCell(FCESIonot);
                        }

                        //27
                        if (Pf != 0)
                        {
                            PdfPCell FCPF = new PdfPCell(new Phrase(totalpf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCPF.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCPF.Border = 15;
                            SecondtableFooter.AddCell(FCPF);
                        }

                        //28
                        if (Esi != 0)
                        {
                            PdfPCell FCES = new PdfPCell(new Phrase(totalesi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCES.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCES.Border = 15;
                            SecondtableFooter.AddCell(FCES);
                        }

                        //29
                        if (proftax != 0)
                        {
                            PdfPCell FCProTax1 = new PdfPCell(new Phrase(totalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCProTax1.Border = 15;
                            SecondtableFooter.AddCell(FCProTax1);
                        }

                        //30
                        if (salAdvDed != 0)
                        {
                            PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCSalAdv1.Border = 15;
                            SecondtableFooter.AddCell(FCSalAdv1);
                        }
                        if (ATMDed != 0)
                        {
                            PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalATMDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCSalAdv1.Border = 15;
                            SecondtableFooter.AddCell(FCSalAdv1);
                        }
                        if (IDCardDed != 0)
                        {
                            PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalIDCardDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCSalAdv1.Border = 15;
                            SecondtableFooter.AddCell(FCSalAdv1);
                        }


                        if (Extra != 0)
                        {
                            PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalExtra.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCSalAdv1.Border = 15;
                            SecondtableFooter.AddCell(FCSalAdv1);
                        }

                        //31
                        if (uniformDed != 0)
                        {
                            PdfPCell FCUnifDed1 = new PdfPCell(new Phrase(totalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCUnifDed1.Border = 15;
                            SecondtableFooter.AddCell(FCUnifDed1);
                        }

                        if (SecDepDedn != 0)
                        {
                            PdfPCell FCSecDepDedn1 = new PdfPCell(new Phrase(totalSecDepDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCSecDepDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCSecDepDedn1.Border = 15;
                            SecondtableFooter.AddCell(FCSecDepDedn1);
                        }


                        if (LoanDed != 0)
                        {
                            PdfPCell FCLoanDed1 = new PdfPCell(new Phrase(totalLoanDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCLoanDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCLoanDed1.Border = 15;
                            SecondtableFooter.AddCell(FCLoanDed1);
                        }

                        if (GenDedn != 0)
                        {
                            PdfPCell FCGenDedn1 = new PdfPCell(new Phrase(totalGenDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCGenDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCGenDedn1.Border = 15;
                            SecondtableFooter.AddCell(FCGenDedn1);
                        }
                        if (AdvDed != 0)
                        {
                            PdfPCell FCAdvDed1 = new PdfPCell(new Phrase(totalAdvDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCAdvDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCAdvDed1.Border = 15;
                            SecondtableFooter.AddCell(FCAdvDed1);
                        }
                        if (WCDed != 0)
                        {
                            PdfPCell FCwcDed1 = new PdfPCell(new Phrase(totalWCDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCwcDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCwcDed1.Border = 15;
                            SecondtableFooter.AddCell(FCwcDed1);
                        }
                        //32
                        if (otherDed != 0)
                        {
                            PdfPCell FCOtherDed1 = new PdfPCell(new Phrase(totalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCOtherDed1.Border = 15;
                            SecondtableFooter.AddCell(FCOtherDed1);
                        }

                        //33
                        if (canteenAdv != 0)
                        {
                            PdfPCell FCCanteended = new PdfPCell(new Phrase(totalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCCanteended.Border = 15;
                            SecondtableFooter.AddCell(FCCanteended);
                        }


                        //34
                        if (penalty != 0)
                        {
                            PdfPCell FPenalty = new PdfPCell(new Phrase(totalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FPenalty.Border = 15;
                            SecondtableFooter.AddCell(FPenalty);
                        }

                        if (owf != 0)
                        {
                            PdfPCell Fowf = new PdfPCell(new Phrase(totalowf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            Fowf.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Fowf.Border = 15;
                            SecondtableFooter.AddCell(Fowf);
                        }


                        //35
                        if (advdue != 0)
                        {
                            PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalAmountdue.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCTotDed1.Border = 15;
                            SecondtableFooter.AddCell(FCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                        }

                        //36
                        if (TelephoneBillDed != 0)
                        {
                            PdfPCell FTelephoneBillDed = new PdfPCell(new Phrase(totalTelephoneBillDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FTelephoneBillDed.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FTelephoneBillDed.Border = 15;
                            SecondtableFooter.AddCell(FTelephoneBillDed);
                        }

                        //36
                        if (PFESIContribution != 0)
                        {
                            PdfPCell FPFESIContribution = new PdfPCell(new Phrase(totalPFESIContribution.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FPFESIContribution.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FPFESIContribution.Border = 15;
                            SecondtableFooter.AddCell(FPFESIContribution);
                        }

                        //37
                        if (TDSDed != 0)
                        {
                            PdfPCell FPFESIContribution = new PdfPCell(new Phrase(totalTDSDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FPFESIContribution.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FPFESIContribution.Border = 15;
                            SecondtableFooter.AddCell(FPFESIContribution);
                        }

                        //38
                        if (totalDeductions != 0)
                        {
                            PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCTotDed1.Border = 15;
                            SecondtableFooter.AddCell(FCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                        }

                        //39
                        if (netpay != 0)
                        {
                            PdfPCell FCNetPay1 = new PdfPCell(new Phrase(totalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCNetPay1.Border = 15;
                            //FCNetPay1.Colspan = 2;
                            SecondtableFooter.AddCell(FCNetPay1);
                        }

                        //40
                        PdfPCell FCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
                        FCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        FCSignature1.Border = 15;
                        //FCSignature1.MinimumHeight = 25;
                        SecondtableFooter.AddCell(FCSignature1);

                        #endregion

                        SecondtableGrandtotalFooter = new PdfPTable(tableCells);
                        if (tableCells > 20)
                        {
                            SecondtableGrandtotalFooter.TotalWidth = 800f;
                        }
                        else
                        {
                            SecondtableGrandtotalFooter.TotalWidth = 800f;
                        }
                        SecondtableGrandtotalFooter.LockedWidth = true;
                        float[] SecondGrandtotalFooterWidth = new float[] { };
                        #region Table Cells
                        if (tableCells == 37)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 36)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }

                        if (tableCells == 35)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }

                        if (tableCells == 34)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 33)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 32)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 31)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 30)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 29)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 28)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 27)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 26)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 25)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 24)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 23)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 22)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 21)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 20)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 19)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 18)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 17)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 16)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 15)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 14)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 13)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 12)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 11)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 10)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 9)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
                        }
                        if (tableCells == 8)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 7)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
                        }

                        if (tableCells == 6)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
                        }
                        #endregion
                        SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

                        SecondtablecheckbyFooter = new PdfPTable(tableCells);
                        if (tableCells > 20)
                        {
                            SecondtablecheckbyFooter.TotalWidth = 800f;
                        }
                        else
                        {
                            SecondtablecheckbyFooter.TotalWidth = 800f;
                        }
                        SecondtablecheckbyFooter.LockedWidth = true;
                        float[] SecondcheckbyFooterWidth = new float[] { };

                        #region Table Cells
                        if (tableCells == 37)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 36)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }

                        if (tableCells == 35)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }

                        if (tableCells == 34)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 33)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 32)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 31)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 30)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 29)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 28)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 27)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 26)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 25)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 24)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 23)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 22)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 21)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 20)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 19)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 18)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 17)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 16)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 15)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 14)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 13)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 12)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 11)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 10)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
                        }
                        if (tableCells == 9)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
                        }
                        if (tableCells == 8)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 7)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
                        }

                        if (tableCells == 6)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
                        }
                        #endregion

                        SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);

                        #region Table   Grand   Total  Footer

                        //1
                        PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
                        GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        GFCSNo.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCSNo);

                        //2
                        PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
                        GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        GFCEmpId1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCEmpId1);

                        //3
                        PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                        GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        GFCEmpName1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCEmpName1);

                        //4
                        PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("Grand  Total: ", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
                        GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        GFCEmpDesgn.Border = 15;
                        //FCEmpDesgn.Colspan = 4;
                        SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);


                        //6A
                        if (srate != 0)
                        {
                            PdfPCell GFCsrate = new PdfPCell(new Phrase(GrandtotalSrate.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCsrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCsrate.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCsrate);
                        }

                        //5
                        if (dts != 0)
                        {
                            PdfPCell GFCNoOfDuties = new PdfPCell(new Phrase(GrandtotalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCNoOfDuties.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCNoOfDuties);
                        }

                        if (wo != 0)
                        {
                            PdfPCell GFCWos = new PdfPCell(new Phrase(Grandtotalwos.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCWos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCWos.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCWos);
                        }


                        if (nhs != 0)
                        {
                            PdfPCell GFCNhs = new PdfPCell(new Phrase(Grandtotalnhs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCNhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCNhs.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCNhs);
                        }


                        //6
                        if (ots != 0)
                        {
                            PdfPCell GFCOts = new PdfPCell(new Phrase(Grandtotalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCOts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCOts.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCOts);
                        }


                        if (ldays != 0)
                        {
                            PdfPCell GFCOts = new PdfPCell(new Phrase(GrandtotalLdays.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCOts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCOts.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCOts);
                        }


                        if (TotalPayableDays != 0)
                        {
                            PdfPCell GFCOts = new PdfPCell(new Phrase(GrandtotalTotalPayableDays.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCOts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCOts.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCOts);
                        }




                        //7
                        if (basic != 0)
                        {
                            PdfPCell GFCBasic1 = new PdfPCell(new Phrase(GrandtotalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCBasic1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCBasic1);
                        }


                        //8
                        if (da != 0)
                        {
                            PdfPCell GFDa = new PdfPCell(new Phrase(GrandtotalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFDa.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFDa);
                        }


                        //9
                        if (hra != 0)
                        {
                            PdfPCell GFCHRA1 = new PdfPCell(new Phrase(GrandtotalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCHRA1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCHRA1);
                        }

                        //10
                        if (cca != 0)
                        {
                            PdfPCell GFCcca = new PdfPCell(new Phrase(GrandtotalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCcca.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCcca);
                        }

                        //11
                        if (conveyance != 0)
                        {
                            PdfPCell GFCConveyance = new PdfPCell(new Phrase(GrandtotalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCConveyance.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCConveyance);
                        }


                        //12
                        if (washallowance != 0)
                        {
                            PdfPCell GFCWa = new PdfPCell(new Phrase(GrandtotalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCWa.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCWa);
                        }

                        //13
                        if (otherallowance != 0)
                        {
                            PdfPCell GFCOa = new PdfPCell(new Phrase(GrandtotalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCOa.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCOa);
                        }
                        if (SplAllowance != 0)
                        {
                            PdfPCell GFCSplAllowance = new PdfPCell(new Phrase(GrandtotalSplAllowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCSplAllowance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCSplAllowance.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCSplAllowance);
                        }

                        if (TravelAllw != 0)
                        {
                            PdfPCell GFsplallw = new PdfPCell(new Phrase(GrandtotalTravelAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFsplallw.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFsplallw);
                        }

                        if (PerformanceAllw != 0)
                        {
                            PdfPCell GFsplallw = new PdfPCell(new Phrase(GrandtotalPerformanceAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFsplallw.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFsplallw);
                        }

                        if (MobileAllw != 0)
                        {
                            PdfPCell GFsplallw = new PdfPCell(new Phrase(GrandtotalMobileAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFsplallw.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFsplallw);
                        }

                        //14
                        if (leavewages != 0)
                        {
                            PdfPCell GFLa = new PdfPCell(new Phrase(GrandtotalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFLa.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFLa);
                        }

                        //15
                        if (gratuity != 0)
                        {
                            PdfPCell GFGratuity = new PdfPCell(new Phrase(GrandtotalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFGratuity.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFGratuity);
                        }

                        //16
                        if (bonus != 0)
                        {
                            PdfPCell GFbonus = new PdfPCell(new Phrase(Grandtotalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFbonus.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFbonus);
                        }


                        //17
                        if (nfhs != 0)
                        {
                            PdfPCell GFNfhs = new PdfPCell(new Phrase(GrandtotalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFNfhs.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFNfhs);
                        }

                        //18
                        if (rc != 0)
                        {
                            PdfPCell GFRc = new PdfPCell(new Phrase(GrandtotalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFRc.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFRc);
                        }

                        //19
                        if (cs != 0)
                        {
                            PdfPCell GFCs = new PdfPCell(new Phrase(GrandtotalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCs.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCs);
                        }


                        if (cfoodallowance != 0)
                        {
                            PdfPCell GFFoodallw = new PdfPCell(new Phrase(Grandtotalfoodallowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFFoodallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFFoodallw.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFFoodallw);
                        }

                        if (cmedicalallowance != 0)
                        {
                            PdfPCell GFMedicalallw = new PdfPCell(new Phrase(Grandtotalmedicalallowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFMedicalallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFMedicalallw.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFMedicalallw);
                        }


                        if (woamt != 0)
                        {
                            PdfPCell GFCwoamt = new PdfPCell(new Phrase(Grandtotalwoamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCwoamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCwoamt.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCwoamt);
                        }


                        if (nhsamt != 0)
                        {
                            PdfPCell GFCnhsamt = new PdfPCell(new Phrase(Grandtotalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCnhsamt.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCnhsamt);
                        }

                        //20
                        if (gross != 0)
                        {
                            PdfPCell GFCGross1 = new PdfPCell(new Phrase(GrandtotalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCGross1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCGross1);
                        }


                        //21
                        if (otamt != 0)
                        {
                            PdfPCell GFCOtamt = new PdfPCell(new Phrase(Grandtotalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCOtamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCOtamt.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCOtamt);
                        }


                        //22
                        if (incentivs != 0)
                        {
                            PdfPCell GFIncentivs = new PdfPCell(new Phrase(GrandtotalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFIncentivs.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFIncentivs);
                        }



                        //23
                        if (pfonduties != 0)
                        {
                            PdfPCell GFCPF1 = new PdfPCell(new Phrase(GrandtotalPFondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCPF1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCPF1);
                        }

                        //24
                        if (esionduties != 0)
                        {
                            PdfPCell GFCESI1 = new PdfPCell(new Phrase(GrandtotalESIondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCESI1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCESI1);
                        }

                        //25
                        if (pfonot != 0)
                        {
                            PdfPCell GFCPFonot = new PdfPCell(new Phrase(Grandtotalpfonots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCPFonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCPFonot.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCPFonot);
                        }

                        //26
                        if (esionot != 0)
                        {
                            PdfPCell GFCESIonot = new PdfPCell(new Phrase(Grandtotalesionots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCESIonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCESIonot.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCESIonot);
                        }

                        //27
                        if (Pf != 0)
                        {
                            PdfPCell GFCPF = new PdfPCell(new Phrase(Grandtotalpf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCPF.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCPF.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCPF);
                        }

                        //28
                        if (Esi != 0)
                        {
                            PdfPCell GFCESI = new PdfPCell(new Phrase(Grandtotalesi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCESI.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCESI.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCESI);
                        }


                        //29
                        if (proftax != 0)
                        {
                            PdfPCell GFCProTax1 = new PdfPCell(new Phrase(GrandtotalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCProTax1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCProTax1);
                        }

                        //30
                        if (salAdvDed != 0)
                        {
                            PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCSalAdv1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
                        }
                        if (ATMDed != 0)
                        {
                            PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalATMDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCSalAdv1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
                        }

                        if (IDCardDed != 0)
                        {
                            PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalIDCardDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCSalAdv1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
                        }

                        if (Extra != 0)
                        {
                            PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalExtra.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCSalAdv1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
                        }
                        //31
                        if (uniformDed != 0)
                        {
                            PdfPCell GFCUnifDed1 = new PdfPCell(new Phrase(GrandtotalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCUnifDed1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCUnifDed1);
                        }

                        if (SecDepDedn != 0)
                        {
                            PdfPCell GFCSecDepDedn1 = new PdfPCell(new Phrase(GrandtotalSecDepDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCSecDepDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCSecDepDedn1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCSecDepDedn1);
                        }

                        if (LoanDed != 0)
                        {
                            PdfPCell GFCLoanDed1 = new PdfPCell(new Phrase(GrandtotalLoanDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCLoanDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCLoanDed1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCLoanDed1);
                        }

                        if (GenDedn != 0)
                        {
                            PdfPCell GFCGenDedn1 = new PdfPCell(new Phrase(GrandtotalGenDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCGenDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCGenDedn1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCGenDedn1);
                        }
                        if (AdvDed != 0)
                        {
                            PdfPCell GFCAdvDedDed1 = new PdfPCell(new Phrase(GrandtotalAdvDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCAdvDedDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCAdvDedDed1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCAdvDedDed1);
                        }
                        if (WCDed != 0)
                        {
                            PdfPCell GFcwcDed1 = new PdfPCell(new Phrase(GrandtotalWCDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFcwcDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFcwcDed1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFcwcDed1);
                        }
                        //32
                        if (otherDed != 0)
                        {
                            PdfPCell GFCOtherDed1 = new PdfPCell(new Phrase(GrandtotalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCOtherDed1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCOtherDed1);
                        }


                        //33
                        if (canteenAdv != 0)
                        {
                            PdfPCell GFCCanteended = new PdfPCell(new Phrase(GrandtotalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCCanteended.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCCanteended);
                        }

                        //34
                        if (penalty != 0)
                        {
                            PdfPCell GFPenalty = new PdfPCell(new Phrase(GrandtotalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFPenalty.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFPenalty);
                        }

                        if (owf != 0)
                        {
                            PdfPCell GFowf = new PdfPCell(new Phrase(Grandtotalowf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFowf.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFowf.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFowf);
                        }

                        if (advdue != 0)
                        {
                            PdfPCell GFowf = new PdfPCell(new Phrase(GrandtotalAmountdue.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFowf.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFowf.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFowf);
                        }

                        //36
                        if (TelephoneBillDed != 0)
                        {
                            PdfPCell GFTelephoneBillDed = new PdfPCell(new Phrase(GrandtotalTelephoneBillDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFTelephoneBillDed.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFTelephoneBillDed.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFTelephoneBillDed);
                        }

                        if (PFESIContribution != 0)
                        {
                            PdfPCell GFPFESIContribution = new PdfPCell(new Phrase(GrandtotalPFESIContribution.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFPFESIContribution.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFPFESIContribution.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFPFESIContribution);
                        }

                        if (TDSDed  != 0)
                        {
                            PdfPCell GFPFESIContribution = new PdfPCell(new Phrase(GrandtotalTDSDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFPFESIContribution.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFPFESIContribution.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFPFESIContribution);
                        }

                        //35
                        if (totalDeductions != 0)
                        {
                            PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(GrandtotalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCTotDed1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                        }

                        //36
                        if (netpay != 0)
                        {
                            PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(GrandtotalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCNetPay1.Border = 15;
                            //FCNetPay1.Colspan = 2;
                            SecondtablecheckbyFooter.AddCell(GFCNetPay1);
                        }

                        //37
                        PdfPCell GFCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
                        GFCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        GFCSignature1.Border = 15;
                        //FCSignature1.MinimumHeight = 25;
                        SecondtablecheckbyFooter.AddCell(GFCSignature1);
                        #endregion


                        #region   Footer Headings
                        //1
                        PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        FHCheckedbybr1.Border = 0;
                        FHCheckedbybr1.Rowspan = 0;
                        FHCheckedbybr1.Colspan = tableCells;
                        SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                        //2
                        PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        FHApprovedbr2.Border = 0;
                        FHApprovedbr2.Colspan = tableCells;

                        SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
                        SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                        SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


                        //1
                        PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        FHCheckedby.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        FHCheckedby.Border = 0;
                        FHCheckedby.Colspan = tableCells;
                        SecondtablecheckbyFooter.AddCell(FHCheckedby);
                        //2
                        PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Gross  Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        FHApprovedBy.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FHApprovedBy.Border = 0;
                        FHApprovedBy.PaddingTop = -5;
                        FHApprovedBy.Colspan = tableCells;
                        SecondtablecheckbyFooter.AddCell(FHApprovedBy);



                        #endregion

                        document.Add(Secondtable);

                        if (nextpagerecordscount == targetpagerecors)
                        {
                            targetpagerecors = secondpagerecords;
                            document.Add(SecondtableFooter);
                            document.NewPage();
                            nextpagerecordscount = 0;
                            #region  Zero variables
                            totalAdvDed = 0;
                            totalWCDed = 0;
                            totalNetpay = 0;
                            totalDuties = 0;
                            totalsrate = 0;
                            totalBasic = 0;
                            totalDA = 0;
                            totalHRA = 0;
                            totalCCA = 0;
                            totalConveyance = 0;
                            totalWA = 0;
                            totalOA = 0;
                            totalGross = 0;
                            totalPFondts = 0;
                            totalESIondts = 0;
                            totalProfTax = 0;
                            totalDed = 0;
                            totalSalAdv = 0;
                            totalUniforDed = 0;
                            totalCanteenAdv = 0;
                            totalOtherdedn = 0;
                            totalbonus = 0;
                            totalLw = 0;
                            totalGratuity = 0;
                            totalNfhs = 0;
                            totalRc = 0;
                            totalCs = 0;
                            totalIncentivs = 0;
                            totalPenalty = 0;

                            totalots = 0;
                            totalotamt = 0;
                            totalpfonots = 0;
                            totalesionots = 0;
                            totalpf = 0;
                            totalesi = 0;
                            totalTelephoneBillDed = 0;
                            totalPFESIContribution = 0;
                            #endregion
                        }
                    }

                    if (nextpagerecordscount >= 0)
                    {
                        //document.Add(SecondtableFooter);
                        document.Add(SecondtableGrandtotalFooter);
                        document.Add(SecondtablecheckbyFooter);
                    }
                    document.Close();
                    if (nextpagehasPages)
                    {

                        Response.ContentType = "application/pdf";
                        Response.AddHeader("content-disposition", "attachment;filename=Dutieswithots.pdf");
                        Response.Buffer = true;
                        Response.Clear();
                        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                        Response.OutputStream.Flush();
                        Response.End();
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        //protected void btndutieswithots_Click(object sender, EventArgs e)
        //{

        //    int titleofdocumentindex = 0;
        //    if (ddlClients.SelectedIndex <= 0)
        //    {
        //        ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
        //        return;
        //    }

        //    int payMonth = GetMonth(ddlmonth.SelectedValue);
        //    //int month = GetMonthAndYear();
        //    int month = GetMonthBasedOnSelectionDateorMonth();

        //    string selectmonth = string.Empty;
        //    string SelectmonthWithbankacno = string.Empty;
        //    string SelectmonthWithoutbankacno = string.Empty;
        //    DataTable dt = null;


        //    var clientid = ddlClients.SelectedValue;
        //    var Paysheetoption = ddlpaymenttype.SelectedIndex;
        //    if (ddlpaymenttype.SelectedIndex == 0)
        //    {
        //        Paysheetoption = 0;

        //    }
        //    else if (ddlpaymenttype.SelectedIndex == 1)
        //    {
        //        Paysheetoption = 1;

        //    }
        //    else if (ddlpaymenttype.SelectedIndex == 2)
        //    {
        //        Paysheetoption = 2;

        //    }
        //    var Noofattendance = ddlnoofattendance.SelectedIndex;
        //    //var pfesioptions = ddl_Pf_Esi_Options.SelectedIndex;

        //    var SPName = "";
        //    Hashtable HTPaysheet = new Hashtable();
        //    SPName = "IMEPaysheetpdfs";
        //    HTPaysheet.Add("@ClientId", clientid);
        //    HTPaysheet.Add("@month", month);
        //    HTPaysheet.Add("@PaymentOption", Paysheetoption);
        //    dt = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTPaysheet);

        //    MemoryStream ms = new MemoryStream();
        //    if (dt.Rows.Count > 0)
        //    {
        //        Document document = new Document(PageSize.A4.Rotate());
        //        PdfWriter writer = PdfWriter.GetInstance(document, ms);
        //        document.Open();
        //        document.AddTitle("FaMS");
        //        document.AddAuthor("WebWonders");
        //        document.AddSubject("Wage Sheet");
        //        document.AddKeywords("Keyword1, keyword2, …");//
        //        float forConvert;
        //        string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
        //        DataTable compInfo = SqlHelper.Instance.GetTableByQuery(strQry);
        //        string companyName1 = "Your Company Name";
        //        string companyAddress = "Your Company Address";
        //        if (compInfo.Rows.Count > 0)
        //        {
        //            companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
        //            companyAddress = compInfo.Rows[0]["Address"].ToString();
        //        }

        //        #region Variables for table cells counting

        //        int dts = 0;
        //        int srate = 0;
        //        int basic = 0;
        //        int da = 0;
        //        int hra = 0;
        //        int cca = 0;
        //        int conveyance = 0;
        //        int washallowance = 0;
        //        int otherallowance = 0;
        //        int SplAllowance = 0;
        //        int TravelAllw = 0;
        //        int PerformanceAllw = 0;
        //        int MobileAllw = 0;
        //        int leavewages = 0;
        //        int gratuity = 0;
        //        int bonus = 0;
        //        int nfhs = 0;
        //        int rc = 0;
        //        int cs = 0;
        //        int gross = 0;
        //        int incentivs = 0;
        //        int pfonduties = 0;
        //        int esionduties = 0;
        //        int proftax = 0;
        //        int salAdvDed = 0;
        //        int SecdepDed = 0;
        //        int LoanDed = 0;
        //        int uniformDed = 0;
        //        int AdvDed = 0;
        //        int WCDed = 0;
        //        int otherDed = 0;
        //        int canteenAdv = 0;
        //        int penalty = 0;
        //        int totalDeductions = 0;
        //        int netpay = 0;
        //        int cfoodallowance = 0;
        //        int cmedicalallowance = 0;
        //        int ots = 0;
        //        int otamt = 0;
        //        int nhs = 0;
        //        int nhsamt = 0;
        //        int wo = 0;
        //        int woamt = 0;
        //        int pfonot = 0;
        //        int esionot = 0;
        //        int Pf = 0;
        //        int Esi = 0;
        //        int GenDedn = 0;
        //        int SecDepDedn = 0;
        //        int owf = 0;

        //        float owf1 = 0;
        //        float dts1 = 0;
        //        float srate1 = 0;
        //        float basic1 = 0;
        //        float da1 = 0;
        //        float hra1 = 0;
        //        float cca1 = 0;
        //        float conveyance1 = 0;
        //        float washallowance1 = 0;
        //        float otherallowance1 = 0;
        //        float SplAllowance1 = 0;

        //        float TravelAllw1 = 0;
        //        float PerformanceAllw1 = 0;
        //        float MobileAllw1 = 0;

        //        float leavewages1 = 0;
        //        float gratuity1 = 0;
        //        float bonus1 = 0;
        //        float nfhs1 = 0;
        //        float rc1 = 0;
        //        float cs1 = 0;
        //        float gross1 = 0;
        //        float incentivs1 = 0;
        //        float pfonduties1 = 0;
        //        float esionduties1 = 0;
        //        float proftax1 = 0;
        //        float salAdvDed1 = 0;
        //        float uniformDed1 = 0;
        //        float AdvDed1 = 0;
        //        float WCDed1 = 0;
        //        float otherDed1 = 0;
        //        float canteenAdv1 = 0;
        //        float penalty1 = 0;
        //        float totalDeductions1 = 0;
        //        float LoanDed1 = 0;
        //        float netpay1 = 0;
        //        float cfoodallowance1 = 0;
        //        float cmedicalallowance1 = 0;
        //        float ots1 = 0;
        //        float otamt1 = 0;
        //        float nhs1 = 0;
        //        float nhsamt1 = 0;
        //        float wo1 = 0;
        //        float woamt1 = 0;
        //        float pfonot1 = 0;
        //        float esionot1 = 0;
        //        float Pf1 = 0;
        //        float Esi1 = 0;
        //        float GenDedn1 = 0;
        //        float SecDepDedn1 = 0;


        //        #endregion

        //        #region Data for counting tablecells

        //        for (int i = 0; i < dt.Rows.Count; i++)
        //        {
        //            dts1 = float.Parse(dt.Rows[i]["NoOfDuties"].ToString());
        //            if (dts1 != 0)
        //            {
        //                dts1 += 1;
        //                if (dts1 > 0)
        //                {
        //                    dts = 1;
        //                }
        //            }

        //            //srate1 = float.Parse(dt.Rows[i]["SalRate"].ToString());
        //            //if (srate1 != 0)
        //            //{
        //            //    srate1 += 1;
        //            //    if (srate1 > 0)
        //            //    {
        //            //        srate = 1;
        //            //    }
        //            //}

        //            basic1 = float.Parse(dt.Rows[i]["basic"].ToString());
        //            if (basic1 != 0)
        //            {
        //                basic1 += 1;
        //                if (basic1 > 0)
        //                {
        //                    basic = 1;
        //                }
        //            }
        //            da1 = float.Parse(dt.Rows[i]["da"].ToString());
        //            if (da1 != 0)
        //            {
        //                da1 += 1;
        //                if (da1 > 0)
        //                {
        //                    da = 1;
        //                }
        //            }
        //            hra1 = float.Parse(dt.Rows[i]["hra"].ToString());
        //            if (hra1 != 0)
        //            {
        //                hra1 += 1;
        //                if (hra1 > 0)
        //                {
        //                    hra = 1;
        //                }
        //            }
        //            cca1 = float.Parse(dt.Rows[i]["cca"].ToString());
        //            if (cca1 != 0)
        //            {
        //                cca1 += 1;
        //                if (cca1 > 0)
        //                {
        //                    cca = 1;
        //                }
        //            }
        //            conveyance1 = float.Parse(dt.Rows[i]["Conveyance"].ToString());
        //            if (conveyance1 != 0)
        //            {
        //                conveyance1 += 1;
        //                if (conveyance1 > 0)
        //                {
        //                    conveyance = 1;
        //                }
        //            }

        //            washallowance1 = float.Parse(dt.Rows[i]["washallowance"].ToString());
        //            if (washallowance1 != 0)
        //            {
        //                washallowance1 += 1;
        //                if (washallowance1 > 0)
        //                {
        //                    washallowance = 1;
        //                }
        //            }
        //            otherallowance1 = float.Parse(dt.Rows[i]["otherallowance"].ToString());
        //            if (otherallowance1 != 0)
        //            {
        //                otherallowance1 += 1;
        //                if (otherallowance1 > 0)
        //                {
        //                    otherallowance = 1;
        //                }
        //            }
        //            SplAllowance1 = float.Parse(dt.Rows[i]["SplAllowance"].ToString());
        //            if (SplAllowance1 != 0)
        //            {
        //                SplAllowance1 += 1;
        //                if (SplAllowance1 > 0)
        //                {
        //                    SplAllowance = 1;
        //                }
        //            }

        //            TravelAllw1 = float.Parse(dt.Rows[i]["TravelAllw"].ToString());
        //            if (TravelAllw1 != 0)
        //            {
        //                TravelAllw1 += 1;
        //                if (TravelAllw1 > 0)
        //                {
        //                    TravelAllw = 1;
        //                }
        //            }

        //            PerformanceAllw1 = float.Parse(dt.Rows[i]["PerformanceAllw"].ToString());
        //            if (PerformanceAllw1 != 0)
        //            {
        //                PerformanceAllw1 += 1;
        //                if (PerformanceAllw1 > 0)
        //                {
        //                    PerformanceAllw = 1;
        //                }
        //            }

        //            MobileAllw1 = float.Parse(dt.Rows[i]["MobileAllw"].ToString());
        //            if (MobileAllw1 != 0)
        //            {
        //                MobileAllw1 += 1;
        //                if (MobileAllw1 > 0)
        //                {
        //                    MobileAllw = 1;
        //                }
        //            }

        //            leavewages1 = float.Parse(dt.Rows[i]["Leavewages"].ToString());
        //            if (leavewages1 != 0)
        //            {
        //                leavewages1 += 1;
        //                if (leavewages1 > 0)
        //                {
        //                    leavewages = 1;
        //                }
        //            }
        //            gratuity1 = float.Parse(dt.Rows[i]["gratuity"].ToString());
        //            if (gratuity1 != 0)
        //            {
        //                gratuity1 += 1;
        //                if (gratuity1 > 0)
        //                {
        //                    gratuity = 1;
        //                }
        //            }
        //            bonus1 = float.Parse(dt.Rows[i]["bonus"].ToString());
        //            if (bonus1 != 0)
        //            {
        //                bonus1 += 1;
        //                if (bonus1 > 0)
        //                {
        //                    bonus = 1;
        //                }
        //            }

        //            nfhs1 = float.Parse(dt.Rows[i]["nfhs"].ToString());
        //            if (nfhs1 != 0)
        //            {
        //                nfhs1 += 1;
        //                if (nfhs1 > 0)
        //                {
        //                    nfhs = 1;
        //                }
        //            }
        //            rc1 = float.Parse(dt.Rows[i]["rc"].ToString());
        //            if (rc1 != 0)
        //            {
        //                rc1 += 1;
        //                if (rc1 > 0)
        //                {
        //                    rc = 1;
        //                }
        //            }

        //            cs1 = float.Parse(dt.Rows[i]["cs"].ToString());
        //            if (cs1 != 0)
        //            {
        //                cs1 += 1;
        //                if (cs1 > 0)
        //                {
        //                    cs = 1;
        //                }
        //            }
        //            gross1 = float.Parse(dt.Rows[i]["gross"].ToString());
        //            if (gross1 != 0)
        //            {
        //                gross1 += 1;
        //                if (gross1 > 0)
        //                {
        //                    gross = 1;
        //                }
        //            }

        //            incentivs1 = float.Parse(dt.Rows[i]["incentivs"].ToString());
        //            if (incentivs1 != 0)
        //            {
        //                incentivs1 += 1;
        //                if (incentivs1 > 0)
        //                {
        //                    incentivs = 1;
        //                }
        //            }


        //            cfoodallowance1 = float.Parse(dt.Rows[i]["foodallowance"].ToString());
        //            if (cfoodallowance1 != 0)
        //            {
        //                cfoodallowance1 += 1;
        //                if (cfoodallowance1 > 0)
        //                {
        //                    cfoodallowance = 1;
        //                }
        //            }

        //            cmedicalallowance1 = float.Parse(dt.Rows[i]["medicalallowance"].ToString());
        //            if (cmedicalallowance1 != 0)
        //            {
        //                cmedicalallowance1 += 1;
        //                if (cmedicalallowance1 > 0)
        //                {
        //                    cmedicalallowance = 1;
        //                }
        //            }

        //            //CHanged to zero so as to get PF and ESI in PFTotal and ESITotal as given below //Check PFTotal and ESITotal
        //            pfonduties1 = float.Parse(dt.Rows[i]["PFonDuties"].ToString());
        //            if (pfonduties1 != 0)
        //            {
        //                pfonduties1 += 1;
        //                if (pfonduties1 > 0)
        //                {
        //                    pfonduties = 0;
        //                }
        //            }
        //            esionduties1 = float.Parse(dt.Rows[i]["ESIonduties"].ToString());
        //            if (esionduties1 != 0)
        //            {
        //                esionduties1 += 1;
        //                if (esionduties1 > 0)
        //                {
        //                    esionduties = 0;
        //                }
        //            }
        //            proftax1 = float.Parse(dt.Rows[i]["proftax"].ToString());
        //            if (proftax1 != 0)
        //            {
        //                proftax1 += 1;
        //                if (proftax1 > 0)
        //                {
        //                    proftax = 1;
        //                }
        //            }
        //            salAdvDed1 = float.Parse(dt.Rows[i]["salAdvDed"].ToString());
        //            if (salAdvDed1 != 0)
        //            {
        //                salAdvDed1 += 1;
        //                if (salAdvDed1 > 0)
        //                {
        //                    salAdvDed = 1;
        //                }
        //            }


        //            LoanDed1 = float.Parse(dt.Rows[i]["LoanDed"].ToString());
        //            if (LoanDed1 != 0)
        //            {
        //                LoanDed1 += 1;
        //                if (LoanDed1 > 0)
        //                {
        //                    LoanDed = 1;
        //                }
        //            }
        //            uniformDed1 = float.Parse(dt.Rows[i]["uniformDed"].ToString());
        //            if (uniformDed1 != 0)
        //            {
        //                uniformDed1 += 1;
        //                if (uniformDed1 > 0)
        //                {
        //                    uniformDed = 1;
        //                }
        //            }
        //            AdvDed1 = float.Parse(dt.Rows[i]["AdvDed"].ToString());
        //            if (AdvDed1 != 0)
        //            {
        //                AdvDed1 += 1;
        //                if (AdvDed1 > 0)
        //                {
        //                    AdvDed = 1;
        //                }
        //            }
        //            WCDed1 = float.Parse(dt.Rows[i]["WCDed"].ToString());
        //            if (WCDed1 != 0)
        //            {
        //                WCDed1 += 1;
        //                if (WCDed1 > 0)
        //                {
        //                    WCDed = 1;
        //                }
        //            }

        //            //GenDedn1 = float.Parse(dt.Rows[i]["GenDedn"].ToString());
        //            //if (GenDedn1 != 0)
        //            //{
        //            //    GenDedn1 += 1;
        //            //    if (GenDedn1 > 0)
        //            //    {
        //            //        GenDedn = 1;
        //            //    }
        //            //}

        //            SecDepDedn1 = float.Parse(dt.Rows[i]["SecDepDedn"].ToString());
        //            if (SecDepDedn1 != 0)
        //            {
        //                SecDepDedn1 += 1;
        //                if (SecDepDedn1 > 0)
        //                {
        //                    SecDepDedn = 1;
        //                }
        //            }

        //            otherDed1 = float.Parse(dt.Rows[i]["otherDed"].ToString());
        //            if (otherDed1 != 0)
        //            {
        //                otherDed1 += 1;
        //                if (otherDed1 > 0)
        //                {
        //                    otherDed = 1;
        //                }
        //            }
        //            canteenAdv1 = float.Parse(dt.Rows[i]["canteenAdv"].ToString());
        //            if (canteenAdv1 != 0)
        //            {
        //                canteenAdv1 += 1;
        //                if (canteenAdv1 > 0)
        //                {
        //                    canteenAdv = 1;
        //                }
        //            }

        //            penalty1 = float.Parse(dt.Rows[i]["penalty"].ToString());
        //            if (penalty1 != 0)
        //            {
        //                penalty1 += 1;
        //                if (penalty1 > 0)
        //                {
        //                    penalty = 1;
        //                }
        //            }
        //            totalDeductions1 = float.Parse(dt.Rows[i]["Totaldeduct"].ToString());
        //            if (totalDeductions1 != 0)
        //            {
        //                totalDeductions1 += 1;
        //                if (totalDeductions1 > 0)
        //                {
        //                    totalDeductions = 1;
        //                }
        //            }
        //            netpay1 = float.Parse(dt.Rows[i]["NetAmount"].ToString());
        //            if (netpay1 != 0)
        //            {
        //                netpay1 += 1;
        //                if (netpay1 > 0)
        //                {
        //                    netpay = 1;
        //                }
        //            }

        //            ots1 = float.Parse(dt.Rows[i]["Duties"].ToString());
        //            if (ots1 != 0)
        //            {
        //                ots1 += 1;
        //                if (ots1 > 0)
        //                {
        //                    ots = 1;
        //                }
        //            }

        //            otamt1 = float.Parse(dt.Rows[i]["Amount"].ToString());
        //            if (otamt1 != 0)
        //            {
        //                otamt1 += 1;
        //                if (otamt1 > 0)
        //                {
        //                    otamt = 1;
        //                }
        //            }

        //            //

        //            nhs1 = float.Parse(dt.Rows[i]["nhs"].ToString());
        //            if (nhs1 != 0)
        //            {
        //                nhs1 += 1;
        //                if (nhs1 > 0)
        //                {
        //                    nhs = 1;
        //                }
        //            }

        //            nhsamt1 = float.Parse(dt.Rows[i]["nhsamt"].ToString());
        //            if (nhsamt1 != 0)
        //            {
        //                nhsamt1 += 1;
        //                if (nhsamt1 > 0)
        //                {
        //                    nhsamt = 1;
        //                }
        //            }


        //            //


        //            //

        //            wo1 = float.Parse(dt.Rows[i]["Wo"].ToString());
        //            if (wo1 != 0)
        //            {
        //                wo1 += 1;
        //                if (wo1 > 0)
        //                {
        //                    wo = 1;
        //                }
        //            }

        //            woamt1 = float.Parse(dt.Rows[i]["woamt"].ToString());
        //            if (woamt1 != 0)
        //            {
        //                woamt1 += 1;
        //                if (woamt1 > 0)
        //                {
        //                    woamt = 1;
        //                }
        //            }


        //            //

        //            pfonot1 = float.Parse(dt.Rows[i]["PFONOT"].ToString());
        //            if (pfonot1 != 0)
        //            {
        //                pfonot1 += 1;
        //                if (pfonot1 > 0)
        //                {
        //                    pfonot = 0;
        //                }
        //            }

        //            esionot1 = float.Parse(dt.Rows[i]["ESIONOT"].ToString());
        //            if (esionot1 != 0)
        //            {
        //                esionot1 += 1;
        //                if (esionot1 > 0)
        //                {
        //                    esionot = 0;
        //                }
        //            }

        //            Pf1 = float.Parse(dt.Rows[i]["PFTotal"].ToString());
        //            if (Pf1 != 0)
        //            {
        //                Pf1 += 1;
        //                if (Pf1 > 0)
        //                {
        //                    Pf = 1;
        //                }
        //            }
        //            Esi1 = float.Parse(dt.Rows[i]["ESITotal"].ToString());
        //            if (Esi1 != 0)
        //            {
        //                Esi1 += 1;
        //                if (Esi1 > 0)
        //                {
        //                    Esi = 1;
        //                }
        //            }

        //            owf1 = float.Parse(dt.Rows[i]["owf"].ToString());
        //            if (owf1 != 0)
        //            {
        //                owf1 += 1;
        //                if (owf1 > 0)
        //                {
        //                    owf = 1;
        //                }
        //            }


        //        }

        //        #endregion

        //        int sno = 1;
        //        int empid = 1;
        //        int empname = 1;
        //        int design = 1;
        //        int bankacno = 1;

        //        int tableCells = dts + srate + basic + da + hra + cca + conveyance + washallowance + otherallowance + SplAllowance + TravelAllw + PerformanceAllw + MobileAllw + leavewages +
        //                        gratuity + bonus + nfhs + rc + cs + gross + incentivs + pfonduties + esionduties + proftax +
        //                        salAdvDed + uniformDed + otherDed + canteenAdv + penalty + totalDeductions + netpay + sno +
        //                        empid + empname + design + bankacno + ots + otamt + wo + woamt + nhs + nhsamt + pfonot + esionot + Pf + Esi + GenDedn + SecDepDedn + LoanDed + AdvDed + WCDed + cfoodallowance + cmedicalallowance+owf;




        //        #region variables for total

        //        float totalDuties = 0;
        //        float totalsrate = 0;
        //        float totalBasic = 0;
        //        float totalDA = 0;
        //        float totalHRA = 0;
        //        float totalCCA = 0;
        //        float totalConveyance = 0;
        //        float totalWA = 0;
        //        float totalOA = 0;
        //        float totalSplAllowance = 0;


        //        float totalTravelAllw = 0;
        //        float totalPerformanceAllw = 0;
        //        float totalMobileAllw = 0;

        //        float totalLw = 0;
        //        float totalGratuity = 0;
        //        float totalbonus = 0;
        //        float totalNfhs = 0;
        //        float totalRc = 0;
        //        float totalCs = 0;
        //        float totalGross = 0;
        //        float totalIncentivs = 0;
        //        float totalPFondts = 0;
        //        float totalESIondts = 0;
        //        float totalProfTax = 0;
        //        float totalSalAdv = 0;
        //        float totalUniforDed = 0;
        //        float totalOtherdedn = 0;
        //        float totalCanteenAdv = 0;
        //        float totalPenalty = 0;
        //        float totalDed = 0;
        //        float totalNetpay = 0;
        //        float totalAdvDed = 0;
        //        float totalWCDed = 0;
        //        float totalots = 0;
        //        float totalotamt = 0;
        //        float totalpfonots = 0;
        //        float totalesionots = 0;
        //        float totalpf = 0;
        //        float totalesi = 0;
        //        float totalGenDedn = 0;
        //        float totalSecDepDedn = 0;
        //        float totalLoanDed = 0;
        //        float totalwos = 0;
        //        float totalwoamt = 0;
        //        float totalnhs = 0;
        //        float totalnhsamt = 0;
        //        float totalfoodallowance = 0;
        //        float totalmedicalallowance = 0;
        //        float totalowf = 0;

        //        #endregion

        //        #region variables for  Grand  total

        //        float GrandtotalAdvDed = 0;
        //        float GrandtotalWCDed = 0;
        //        float GrandtotalDuties = 0;
        //        float GrandtotalSrate = 0;
        //        float GrandtotalBasic = 0;
        //        float GrandtotalDA = 0;
        //        float GrandtotalHRA = 0;
        //        float GrandtotalCCA = 0;
        //        float GrandtotalConveyance = 0;
        //        float GrandtotalWA = 0;
        //        float GrandtotalOA = 0;
        //        float GrandtotalSplAllowance = 0;

        //        float GrandtotalTravelAllw = 0;
        //        float GrandtotalPerformanceAllw = 0;
        //        float GrandtotalMobileAllw = 0;

        //        float GrandtotalLw = 0;
        //        float GrandtotalGratuity = 0;
        //        float Grandtotalbonus = 0;
        //        float GrandtotalNfhs = 0;
        //        float GrandtotalRc = 0;
        //        float GrandtotalCs = 0;
        //        float GrandtotalGross = 0;
        //        float GrandtotalIncentivs = 0;
        //        float GrandtotalPFondts = 0;
        //        float GrandtotalESIondts = 0;
        //        float GrandtotalProfTax = 0;
        //        float GrandtotalSalAdv = 0;
        //        float GrandtotalUniforDed = 0;
        //        float GrandtotalOtherdedn = 0;
        //        float GrandtotalCanteenAdv = 0;
        //        float GrandtotalPenalty = 0;
        //        float GrandtotalDed = 0;
        //        float GrandtotalNetpay = 0;

        //        float Grandtotalots = 0;
        //        float Grandtotalotamt = 0;
        //        float Grandtotalpfonots = 0;
        //        float Grandtotalesionots = 0;
        //        float Grandtotalpf = 0;
        //        float Grandtotalesi = 0;
        //        float GrandtotalGenDedn = 0;
        //        float GrandtotalSecDepDedn = 0;
        //        float GrandtotalLoanDedn = 0;
        //        float Grandtotalwos = 0;
        //        float Grandtotalwoamt = 0;
        //        float Grandtotalnhs = 0;
        //        float Grandtotalnhsamt = 0;
        //        float Grandtotalfoodallowance = 0;
        //        float Grandtotalmedicalallowance = 0;
        //        float Grandtotalowf = 0;

        //        #endregion

        //        int nextpagerecordscount = 0;
        //        int targetpagerecors = 6;
        //        int secondpagerecords = targetpagerecors+1;
        //        bool nextpagehasPages = false;
        //        int j = 0;
        //        PdfPTable SecondtablecheckbyFooter = null;
        //        PdfPTable SecondtableFooter = null;
        //        PdfPTable SecondtableGrandtotalFooter = null;
        //        for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
        //        {
        //            nextpagehasPages = true;


        //            #region Titles of Document
        //            PdfPTable Maintable = new PdfPTable(27);
        //            if (tableCells > 20)
        //            {
        //                Maintable.TotalWidth = 800f;
        //            }
        //            else
        //            {
        //                Maintable.TotalWidth = 800f;
        //            }
        //            Maintable.LockedWidth = true;
        //            float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };


        //            Maintable.SetWidths(width);
        //            uint FONT_SIZE = 8;

        //            //Company Name & vage act details

        //            PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
        //            cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            cellemp.Colspan = 27;
        //            cellemp.Border = 0;

        //            PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
        //            Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            Heading.Colspan = 27;
        //            Heading.Border = 0;
        //            // Maintable.AddCell(Heading);


        //            PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 15, Font.BOLD, BaseColor.BLACK)));
        //            actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            actDetails.Colspan = 27;
        //            actDetails.Border = 0;// 15;
        //            //Maintable.AddCell(actDetails);

        //            // Maintable.AddCell(cellemp);
        //            #endregion


        //            #region Sub Headings

        //            PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 20, Font.BOLD, BaseColor.BLACK)));
        //            companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            companyName.Colspan = 27;
        //            companyName.Border = 0;// 15;
        //            Maintable.AddCell(companyName);

        //            PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        //            paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            paySheet.Colspan = 27;
        //            paySheet.Border = 0;// 15;
        //            Maintable.AddCell(paySheet);

        //            PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CClient.Colspan = 11;
        //            CClient.Border = 0;// 15;
        //            Maintable.AddCell(CClient);


        //            PdfPCell CDates = new PdfPCell(new Phrase("Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //            CDates.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CDates.Colspan = 8;
        //            CDates.Border = 0;// 15;
        //            Maintable.AddCell(CDates);

        //            // PdfPCell CPaySheetDate = new PdfPCell(new Phrase("Pay Sheet Date :  " + DateTime.Now.Date.ToString("dd/MM/yyyy"), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            PdfPCell CPaySheetDate = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CPaySheetDate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CPaySheetDate.Colspan = 1;
        //            CPaySheetDate.Border = 0;// 15;
        //            Maintable.AddCell(CPaySheetDate);

        //            PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :   " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CPayMonth.Colspan = 7;
        //            CPayMonth.Border = 0;// 15;
        //            Maintable.AddCell(CPayMonth);

        //            //                string Clientaddress = "";
        //            //                string queryaddress = @"select isnull(ClientAddrHno,'')+'  '+isnull(ClientAddrStreet,'')+'  '+isnull(ClientAddrColony,'')+'  '+isnull(ClientAddrArea,'')+
        //            //		            '  '+isnull(ClientAddrCity,'')+'  '+isnull(ClientAddrState,'')+'  '+isnull(ClientAddrPin,'') as Address from Clients where ClientId='" + ddlClients.SelectedValue + "'";
        //            //                DataTable dtaddress = SqlHelper.Instance.GetTableByQuery(queryaddress);
        //            //                if (dtaddress.Rows.Count > 0)
        //            //                {
        //            //                    Clientaddress = dtaddress.Rows[0]["Address"].ToString();
        //            //                }

        //            PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlcname.SelectedItem + " ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CClientName.Colspan = 27;
        //            CClientName.Border = 0;// 15;
        //            Maintable.AddCell(CClientName);

        //            // Maintable.AddCell(cellemp);
        //            //document.Add(Maintable);

        //            if (titleofdocumentindex == 0)
        //            {
        //                document.Add(Maintable);
        //                titleofdocumentindex = 1;
        //            }

        //            #endregion


        //            #region Table Headings

        //            PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableHeadings.TotalWidth = 800f;
        //            }
        //            else
        //            {
        //                SecondtableHeadings.TotalWidth = 800f;
        //            }
        //            SecondtableHeadings.LockedWidth = true;
        //            float[] SecondHeadingsWidth = new float[] { };

        //            #region Table Cells
        //            if (tableCells == 37)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
        //            }
        //            #endregion

        //            SecondtableHeadings.SetWidths(SecondHeadingsWidth);

        //            //Cell Headings
        //            //1
        //            PdfPCell sNo = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            //sNo.Colspan = 1;
        //            sNo.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(sNo);

        //            //2
        //            PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpId.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpId);

        //            //3
        //            PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpName.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpName);

        //            //4
        //            PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CDesgn.Border = 15;
        //            SecondtableHeadings.AddCell(CDesgn);

        //            if (srate != 0)
        //            {
        //                PdfPCell Cots = new PdfPCell(new Phrase("S. Rate", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cots.Border = 15;
        //                SecondtableHeadings.AddCell(Cots);
        //            }

        //            //5
        //            if (dts != 0)
        //            {
        //                PdfPCell CDuties = new PdfPCell(new Phrase("Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CDuties.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CDuties.Border = 15;
        //                SecondtableHeadings.AddCell(CDuties);
        //            }

        //            if (wo != 0)
        //            {
        //                PdfPCell Cwos = new PdfPCell(new Phrase("Wos", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cwos.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cwos.Border = 15;
        //                SecondtableHeadings.AddCell(Cwos);
        //            }

        //            if (nhs != 0)
        //            {
        //                PdfPCell Cnhs = new PdfPCell(new Phrase("NHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cnhs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cnhs.Border = 15;
        //                SecondtableHeadings.AddCell(Cnhs);
        //            }

        //            //6
        //            if (ots != 0)
        //            {
        //                PdfPCell Cots = new PdfPCell(new Phrase("OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cots.Border = 15;
        //                SecondtableHeadings.AddCell(Cots);
        //            }

        //            //6A



        //            //7
        //            if (basic != 0)
        //            {
        //                PdfPCell CBasic = new PdfPCell(new Phrase("Basic", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CBasic.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CBasic.Border = 15;
        //                SecondtableHeadings.AddCell(CBasic);
        //            }

        //            //8
        //            if (da != 0)
        //            {
        //                PdfPCell CDa = new PdfPCell(new Phrase("DA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CDa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CDa.Border = 15;
        //                SecondtableHeadings.AddCell(CDa);
        //            }

        //            //9
        //            if (hra != 0)
        //            {
        //                PdfPCell CHRa = new PdfPCell(new Phrase("HRA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CHRa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CHRa.Border = 15;
        //                SecondtableHeadings.AddCell(CHRa);
        //            }

        //            //10
        //            if (cca != 0)
        //            {
        //                PdfPCell CCca = new PdfPCell(new Phrase("CCA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CCca.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CCca.Border = 15;
        //                SecondtableHeadings.AddCell(CCca);
        //            }

        //            //11
        //            if (conveyance != 0)
        //            {
        //                PdfPCell Cconveyance = new PdfPCell(new Phrase("Conv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cconveyance.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cconveyance.Border = 15;
        //                SecondtableHeadings.AddCell(Cconveyance);
        //            }

        //            //12
        //            if (washallowance != 0)
        //            {
        //                PdfPCell Cwa = new PdfPCell(new Phrase("WA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cwa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                Cwa.Border = 15;
        //                SecondtableHeadings.AddCell(Cwa);
        //            }

        //            //13
        //            if (otherallowance != 0)
        //            {
        //                PdfPCell COa = new PdfPCell(new Phrase("OA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COa.Border = 15;
        //                SecondtableHeadings.AddCell(COa);
        //            }
        //            if (SplAllowance != 0)
        //            {
        //                PdfPCell CSplAllowance = new PdfPCell(new Phrase("Spl Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CSplAllowance.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CSplAllowance.Border = 15;
        //                SecondtableHeadings.AddCell(CSplAllowance);
        //            }


        //            if (TravelAllw != 0)
        //            {
        //                PdfPCell Csplallw = new PdfPCell(new Phrase("Travel. Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Csplallw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Csplallw.Border = 15;
        //                SecondtableHeadings.AddCell(Csplallw);
        //            }

        //            if (PerformanceAllw != 0)
        //            {
        //                PdfPCell Csplallw = new PdfPCell(new Phrase("Performance. Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Csplallw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Csplallw.Border = 15;
        //                SecondtableHeadings.AddCell(Csplallw);
        //            }

        //            if (MobileAllw != 0)
        //            {
        //                PdfPCell Csplallw = new PdfPCell(new Phrase("Mobile. Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Csplallw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Csplallw.Border = 15;
        //                SecondtableHeadings.AddCell(Csplallw);
        //            }

        //            //14
        //            if (leavewages != 0)
        //            {
        //                PdfPCell CLa = new PdfPCell(new Phrase("LA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CLa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CLa.Border = 15;
        //                SecondtableHeadings.AddCell(CLa);
        //            }

        //            //15
        //            if (gratuity != 0)
        //            {
        //                PdfPCell CGratuity = new PdfPCell(new Phrase("Gratuity", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CGratuity.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CGratuity.Border = 15;
        //                SecondtableHeadings.AddCell(CGratuity);
        //            }

        //            //16
        //            if (bonus != 0)
        //            {
        //                PdfPCell CBonus = new PdfPCell(new Phrase("Bonus", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CBonus.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CBonus.Border = 15;
        //                SecondtableHeadings.AddCell(CBonus);
        //            }




        //            //17
        //            if (nfhs != 0)
        //            {
        //                PdfPCell CNfhs = new PdfPCell(new Phrase("NFHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNfhs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNfhs.Border = 15;
        //                SecondtableHeadings.AddCell(CNfhs);
        //            }

        //            //18
        //            if (rc != 0)
        //            {
        //                PdfPCell CRc = new PdfPCell(new Phrase("R.C", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CRc.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CRc.Border = 15;
        //                SecondtableHeadings.AddCell(CRc);
        //            }

        //            //19
        //            if (cs != 0)
        //            {
        //                PdfPCell CCs = new PdfPCell(new Phrase("C.S", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CCs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CCs.Border = 15;
        //                SecondtableHeadings.AddCell(CCs);
        //            }

        //            if (cfoodallowance != 0)
        //            {
        //                PdfPCell CFoodAllw = new PdfPCell(new Phrase("Food Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CFoodAllw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CFoodAllw.Border = 15;
        //                SecondtableHeadings.AddCell(CFoodAllw);
        //            }

        //            if (cmedicalallowance != 0)
        //            {
        //                PdfPCell CMedicalAllw = new PdfPCell(new Phrase("Medical Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CMedicalAllw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CMedicalAllw.Border = 15;
        //                SecondtableHeadings.AddCell(CMedicalAllw);
        //            }
        //            if (woamt != 0)
        //            {
        //                PdfPCell Cwoamt = new PdfPCell(new Phrase("WO Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cwoamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cwoamt.Border = 15;
        //                SecondtableHeadings.AddCell(Cwoamt);
        //            }

        //            if (nhsamt != 0)
        //            {
        //                PdfPCell Cnhsamt = new PdfPCell(new Phrase("NHS Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cnhsamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cnhsamt.Border = 15;
        //                SecondtableHeadings.AddCell(Cnhsamt);
        //            }
        //            //20
        //            if (gross != 0)
        //            {
        //                PdfPCell CGross = new PdfPCell(new Phrase("Gross", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CGross.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CGross.Border = 15;
        //                SecondtableHeadings.AddCell(CGross);
        //            }

        //            //21





        //            if (otamt != 0)
        //            {
        //                PdfPCell COtamt = new PdfPCell(new Phrase("OT Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COtamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COtamt.Border = 15;
        //                SecondtableHeadings.AddCell(COtamt);
        //            }

        //            //22
        //            if (incentivs != 0)
        //            {
        //                PdfPCell CIncentivs = new PdfPCell(new Phrase("Incentivs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CIncentivs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CIncentivs.Border = 15;
        //                SecondtableHeadings.AddCell(CIncentivs);
        //            }



        //            //23
        //            if (pfonduties != 0)
        //            {
        //                PdfPCell CPFondts = new PdfPCell(new Phrase("PF on Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPFondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPFondts.Border = 15;
        //                SecondtableHeadings.AddCell(CPFondts);
        //            }

        //            //24
        //            if (esionduties != 0)
        //            {
        //                PdfPCell CESIondts = new PdfPCell(new Phrase("ESI on Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CESIondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CESIondts.Border = 15;
        //                SecondtableHeadings.AddCell(CESIondts);
        //            }

        //            //25
        //            if (pfonot != 0)
        //            {
        //                PdfPCell CPFonot = new PdfPCell(new Phrase("PF on OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPFonot.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPFonot.Border = 15;
        //                SecondtableHeadings.AddCell(CPFonot);
        //            }

        //            //26
        //            if (esionot != 0)
        //            {
        //                PdfPCell CESIonot = new PdfPCell(new Phrase("ESI on OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CESIonot.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CESIonot.Border = 15;
        //                SecondtableHeadings.AddCell(CESIonot);
        //            }

        //            //27
        //            if (Pf != 0)
        //            {
        //                PdfPCell CPF = new PdfPCell(new Phrase("PF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPF.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPF.Border = 15;
        //                SecondtableHeadings.AddCell(CPF);
        //            }

        //            //28
        //            if (Esi != 0)
        //            {
        //                PdfPCell CESI = new PdfPCell(new Phrase("ESI", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CESI.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CESI.Border = 15;
        //                SecondtableHeadings.AddCell(CESI);
        //            }


        //            //29
        //            if (proftax != 0)
        //            {
        //                PdfPCell CPT = new PdfPCell(new Phrase("PT", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPT.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPT.Border = 15;
        //                SecondtableHeadings.AddCell(CPT);
        //            }

        //            //30
        //            if (salAdvDed != 0)
        //            {
        //                PdfPCell CSalAdv = new PdfPCell(new Phrase("Sal Adv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CSalAdv.Border = 15;
        //                SecondtableHeadings.AddCell(CSalAdv);
        //            }

        //            //31
        //            if (uniformDed != 0)
        //            {
        //                PdfPCell CUnifDed = new PdfPCell(new Phrase("Unif. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CUnifDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CUnifDed.Border = 15;
        //                SecondtableHeadings.AddCell(CUnifDed);
        //            }

        //            if (SecDepDedn != 0)
        //            {
        //                PdfPCell CSecDepDedn = new PdfPCell(new Phrase("Sec Dep Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CSecDepDedn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CSecDepDedn.Border = 15;
        //                SecondtableHeadings.AddCell(CSecDepDedn);
        //            }

        //            if (LoanDed != 0)
        //            {
        //                PdfPCell CLoanDed = new PdfPCell(new Phrase("Loan Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CLoanDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CLoanDed.Border = 15;
        //                SecondtableHeadings.AddCell(CLoanDed);
        //            }

        //            if (GenDedn != 0)
        //            {
        //                PdfPCell CGenDedn = new PdfPCell(new Phrase("Gen Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CGenDedn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CGenDedn.Border = 15;
        //                SecondtableHeadings.AddCell(CGenDedn);
        //            }
        //            if (AdvDed != 0)
        //            {
        //                PdfPCell Cadvded = new PdfPCell(new Phrase("Adv Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cadvded.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cadvded.Border = 15;
        //                SecondtableHeadings.AddCell(Cadvded);
        //            }
        //            if (WCDed != 0)
        //            {
        //                PdfPCell Cwcded = new PdfPCell(new Phrase("WC Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cwcded.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cwcded.Border = 15;
        //                SecondtableHeadings.AddCell(Cwcded);
        //            }
        //            //32
        //            if (otherDed != 0)
        //            {
        //                PdfPCell COtherDed = new PdfPCell(new Phrase("Other Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COtherDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COtherDed.Border = 15;
        //                SecondtableHeadings.AddCell(COtherDed);
        //            }

        //            //33
        //            if (canteenAdv != 0)
        //            {
        //                PdfPCell Ccanteended = new PdfPCell(new Phrase("Mess. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Ccanteended.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Ccanteended.Border = 15;
        //                SecondtableHeadings.AddCell(Ccanteended);
        //            }



        //            //34
        //            if (penalty != 0)
        //            {
        //                PdfPCell CPenalty = new PdfPCell(new Phrase("Penalty", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPenalty.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPenalty.Border = 15;
        //                SecondtableHeadings.AddCell(CPenalty);
        //            }


        //            if (owf != 0)
        //            {
        //                PdfPCell Cowf = new PdfPCell(new Phrase("Wel. Fund", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cowf.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cowf.Border = 15;
        //                SecondtableHeadings.AddCell(Cowf);
        //            }

        //            //35
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell CTotDed = new PdfPCell(new Phrase("Tot Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CTotDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CTotDed.Border = 15;
        //                SecondtableHeadings.AddCell(CTotDed);
        //            }

        //            //36
        //            if (netpay != 0)
        //            {
        //                PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNetPay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNetPay.Border = 15;
        //                SecondtableHeadings.AddCell(CNetPay);
        //            }

        //            //37
        //            PdfPCell CSignature = new PdfPCell(new Phrase("Bank A/c No./ Signature", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CSignature.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CSignature.Border = 15;
        //            SecondtableHeadings.AddCell(CSignature);


        //            #endregion


        //            #region Table Data

        //            PdfPTable Secondtable = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                Secondtable.TotalWidth = 800f;
        //            }
        //            else
        //            {
        //                Secondtable.TotalWidth = 800f;
        //            }
        //            Secondtable.LockedWidth = true;
        //            float[] SecondWidth = new float[] { };

        //            #region Table Cells
        //            if (tableCells == 37)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
        //            }
        //            #endregion


        //            Secondtable.SetWidths(SecondWidth);




        //            int rowCount = 0;
        //            int pageCount = 0;
        //            int i = nextpagei;

        //            // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
        //            {
        //                float ForconvertOt = 0;
        //                forConvert = 0;
        //                if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
        //                    forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());

        //                //if (forConvert > 0)
        //                {

        //                    if (nextpagerecordscount == 0)
        //                    {
        //                        document.Add(SecondtableHeadings);
        //                    }

        //                    nextpagerecordscount++;

        //                    //1
        //                    PdfPCell CSNo = new PdfPCell(new Phrase("\n \n \n" + (++j).ToString() + "\n \n \n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CSNo.Border = 15;
        //                    CSNo.FixedHeight = 65;
        //                    Secondtable.AddCell(CSNo);

        //                    //2
        //                    PdfPCell CEmpId1 = new PdfPCell(new Phrase("\n \n \n" + dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpId1.Border = 15;
        //                    Secondtable.AddCell(CEmpId1);

        //                    //3EmpESINo,EmpEpfNo
        //                    // + "\n" + "ESI No" + "\n" + "UAN No" + "\n" + "PF No"
        //                    PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpName"].ToString() + "\n" + "ESI No : " + dt.Rows[i]["EmpESINo"].ToString() + "\n" + "UAN No : " + dt.Rows[i]["EmpUANNumber"].ToString() + "\n" + "PF No : " + dt.Rows[i]["EmpEpfNo"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpName1.Border = 15;
        //                    CEmpName1.SetLeading(0,1.3f);
        //                    Secondtable.AddCell(CEmpName1);

        //                    //4
        //                    PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Design"].ToString() , FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpDesgn.Border = 15;
        //                    Secondtable.AddCell(CEmpDesgn);



        //                    //6A
        //                    if (srate != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Salrate"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["Salrate"].ToString());
        //                        totalsrate += forConvert;
        //                        GrandtotalSrate += forConvert;

        //                        PdfPCell CSalrate = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSalrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CSalrate.Border = 15;
        //                        Secondtable.AddCell(CSalrate);
        //                    }

        //                    //5
        //                    if (dts != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());
        //                        totalDuties += forConvert;
        //                        GrandtotalDuties += forConvert;

        //                        PdfPCell CNoOfDuties = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNoOfDuties.Border = 15;
        //                        Secondtable.AddCell(CNoOfDuties);
        //                    }


        //                    if (wo != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Wo"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["Wo"].ToString());
        //                        totalwos += forConvert;
        //                        Grandtotalwos += forConvert;

        //                        PdfPCell Cwos = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cwos.Border = 15;
        //                        Secondtable.AddCell(Cwos);
        //                    }


        //                    if (nhs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["nhs"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["nhs"].ToString());
        //                        totalnhs += forConvert;
        //                        Grandtotalnhs += forConvert;

        //                        PdfPCell Cnhss = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cnhss.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cnhss.Border = 15;
        //                        Secondtable.AddCell(Cnhss);
        //                    }

        //                    //6
        //                    if (ots != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Duties"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["Duties"].ToString());
        //                        totalots += forConvert;
        //                        Grandtotalots += forConvert;

        //                        PdfPCell COts = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        COts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        COts.Border = 15;
        //                        Secondtable.AddCell(COts);
        //                    }



        //                    //7
        //                    if (basic != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Basic"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Basic"].ToString()));
        //                        totalBasic += forConvert;
        //                        GrandtotalBasic += forConvert;
        //                        PdfPCell CBasic1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CBasic1.Border = 15;
        //                        Secondtable.AddCell(CBasic1);
        //                    }

        //                    //8
        //                    if (da != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["DA"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["DA"].ToString()));
        //                        totalDA += forConvert;
        //                        GrandtotalDA += forConvert;

        //                        PdfPCell CDa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CDa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CDa1.Border = 15;
        //                        Secondtable.AddCell(CDa1);
        //                    }

        //                    //9
        //                    if (hra != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["HRA"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["HRA"].ToString()));
        //                        totalHRA += forConvert;
        //                        GrandtotalHRA += forConvert;

        //                        PdfPCell CHRA1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CHRA1.Border = 15;
        //                        Secondtable.AddCell(CHRA1);
        //                    }

        //                    //10
        //                    if (cca != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["cca"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cca"].ToString()));
        //                        totalCCA += forConvert;

        //                        GrandtotalCCA += forConvert;

        //                        PdfPCell Ccca = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Ccca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Ccca.Border = 15;
        //                        Secondtable.AddCell(Ccca);
        //                    }

        //                    //11
        //                    if (conveyance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Conveyance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString()));
        //                        totalConveyance += forConvert;
        //                        GrandtotalConveyance += forConvert;

        //                        PdfPCell CConveyance = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CConveyance.Border = 15;
        //                        Secondtable.AddCell(CConveyance);
        //                    }


        //                    //12
        //                    if (washallowance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["washallowance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["washallowance"].ToString()));
        //                        totalWA += forConvert;
        //                        GrandtotalWA += forConvert;

        //                        PdfPCell CWa = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CWa.Border = 15;
        //                        Secondtable.AddCell(CWa);
        //                    }

        //                    //13
        //                    if (otherallowance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["OtherAllowance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString()));
        //                        totalOA += forConvert;
        //                        GrandtotalOA += forConvert;
        //                        PdfPCell COA = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        COA.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        COA.Border = 15;
        //                        Secondtable.AddCell(COA);
        //                    }
        //                    if (SplAllowance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["SplAllowance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SplAllowance"].ToString()));
        //                        totalSplAllowance += forConvert;
        //                        GrandtotalSplAllowance += forConvert;
        //                        PdfPCell CSplAllowance = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSplAllowance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CSplAllowance.Border = 15;
        //                        Secondtable.AddCell(CSplAllowance);
        //                    }

        //                    if (TravelAllw != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["TravelAllw"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TravelAllw"].ToString()));
        //                        totalTravelAllw += forConvert;
        //                        GrandtotalTravelAllw += forConvert;
        //                        PdfPCell CSplAllowance1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSplAllowance1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CSplAllowance1.Border = 15;
        //                        Secondtable.AddCell(CSplAllowance1);
        //                    }

        //                    if (PerformanceAllw != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["PerformanceAllw"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PerformanceAllw"].ToString()));
        //                        totalPerformanceAllw += forConvert;
        //                        GrandtotalPerformanceAllw += forConvert;
        //                        PdfPCell CSplAllowance1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSplAllowance1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CSplAllowance1.Border = 15;
        //                        Secondtable.AddCell(CSplAllowance1);
        //                    }

        //                    if (MobileAllw != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["MobileAllw"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["MobileAllw"].ToString()));
        //                        totalMobileAllw += forConvert;
        //                        GrandtotalMobileAllw += forConvert;
        //                        PdfPCell CSplAllowance1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSplAllowance1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CSplAllowance1.Border = 15;
        //                        Secondtable.AddCell(CSplAllowance1);
        //                    }



        //                    //14
        //                    if (leavewages != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Leavewages"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Leavewages"].ToString()));
        //                        totalLw += forConvert;
        //                        GrandtotalLw += forConvert;
        //                        PdfPCell CLa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CLa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CLa1.Border = 15;
        //                        Secondtable.AddCell(CLa1);
        //                    }
        //                    //15
        //                    if (gratuity != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Gratuity"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gratuity"].ToString()));
        //                        totalGratuity += forConvert;
        //                        GrandtotalGratuity += forConvert;
        //                        PdfPCell CGratuity1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CGratuity1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CGratuity1.Border = 15;
        //                        Secondtable.AddCell(CGratuity1);
        //                    }

        //                    //16
        //                    if (bonus != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["bonus"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["bonus"].ToString()));
        //                        totalbonus += forConvert;

        //                        Grandtotalbonus += forConvert;
        //                        PdfPCell Cbonus = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cbonus.Border = 15;
        //                        Secondtable.AddCell(Cbonus);
        //                    }



        //                    //17
        //                    if (nfhs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Nfhs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Nfhs"].ToString()));
        //                        totalNfhs += forConvert;
        //                        GrandtotalNfhs += forConvert;
        //                        PdfPCell CNfhs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNfhs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNfhs1.Border = 15;
        //                        Secondtable.AddCell(CNfhs1);
        //                    }

        //                    //18
        //                    if (rc != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["RC"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["RC"].ToString()));
        //                        totalRc += forConvert;
        //                        GrandtotalRc += forConvert;
        //                        PdfPCell CRc1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CRc1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CRc1.Border = 15;
        //                        Secondtable.AddCell(CRc1);
        //                    }

        //                    //19
        //                    if (cs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["cs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cs"].ToString()));
        //                        totalCs += forConvert;
        //                        GrandtotalCs += forConvert;
        //                        PdfPCell CCs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CCs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CCs1.Border = 15;
        //                        Secondtable.AddCell(CCs1);
        //                    }


        //                    if (cfoodallowance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["foodallowance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["foodallowance"].ToString()));
        //                        totalfoodallowance += forConvert;
        //                        Grandtotalfoodallowance += forConvert;
        //                        PdfPCell CFoodAllw1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CFoodAllw1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CFoodAllw1.Border = 15;
        //                        Secondtable.AddCell(CFoodAllw1);
        //                    }


        //                    if (cmedicalallowance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["medicalallowance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["medicalallowance"].ToString()));
        //                        totalmedicalallowance += forConvert;
        //                        Grandtotalmedicalallowance += forConvert;
        //                        PdfPCell CMedicalAllw1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CMedicalAllw1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CMedicalAllw1.Border = 15;
        //                        Secondtable.AddCell(CMedicalAllw1);
        //                    }

        //                    if (woamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Woamt"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Woamt"].ToString()));
        //                        totalwoamt += forConvert;
        //                        Grandtotalwoamt += forConvert;

        //                        PdfPCell CWoAmt1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CWoAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CWoAmt1.Border = 15;
        //                        Secondtable.AddCell(CWoAmt1);
        //                    }


        //                    if (nhsamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["nhsamt"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["nhsamt"].ToString()));
        //                        totalnhsamt += forConvert;
        //                        Grandtotalnhsamt += forConvert;

        //                        PdfPCell CNhsAmt1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNhsAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNhsAmt1.Border = 15;
        //                        Secondtable.AddCell(CNhsAmt1);
        //                    }
        //                    //20
        //                    if (gross != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Gross"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gross"].ToString()));
        //                        totalGross += forConvert;
        //                        GrandtotalGross += forConvert;

        //                        PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CGross1.Border = 15;
        //                        Secondtable.AddCell(CGross1);
        //                    }

        //                    //21





        //                    if (otamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Amount"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Amount"].ToString()));
        //                        totalotamt += forConvert;
        //                        Grandtotalotamt += forConvert;

        //                        PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CGross1.Border = 15;
        //                        Secondtable.AddCell(CGross1);
        //                    }


        //                    //22
        //                    if (incentivs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Incentivs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Incentivs"].ToString()));
        //                        totalIncentivs += forConvert;
        //                        GrandtotalIncentivs += forConvert;
        //                        PdfPCell CIncentivs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CIncentivs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CIncentivs1.Border = 15;
        //                        Secondtable.AddCell(CIncentivs1);
        //                    }

        //                    //23
        //                    if (pfonduties != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Pfonduties"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Pfonduties"].ToString()));
        //                        totalPFondts += forConvert;
        //                        GrandtotalPFondts += forConvert;

        //                        PdfPCell CPF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CPF1.Border = 15;
        //                        Secondtable.AddCell(CPF1);
        //                    }

        //                    //24
        //                    if (esionduties != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Esionduties"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Esionduties"].ToString()));
        //                        totalESIondts += forConvert;

        //                        GrandtotalESIondts += forConvert;

        //                        PdfPCell CESI1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CESI1.Border = 15;
        //                        Secondtable.AddCell(CESI1);
        //                    }

        //                    //25
        //                    if (pfonot != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["PFONOT"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PFONOT"].ToString()));
        //                        totalpfonots += forConvert;
        //                        Grandtotalpfonots += forConvert;

        //                        PdfPCell CPFonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CPFonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CPFonots.Border = 15;
        //                        Secondtable.AddCell(CPFonots);
        //                    }

        //                    //26
        //                    if (esionot != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["ESIONOT"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESIONOT"].ToString()));
        //                        totalesionots += forConvert;

        //                        Grandtotalesionots += forConvert;

        //                        PdfPCell CESIonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CESIonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CESIonots.Border = 15;
        //                        Secondtable.AddCell(CESIonots);
        //                    }

        //                    //27
        //                    if (Pf != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["PFTotal"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PFTotal"].ToString()));
        //                        totalpf += forConvert;
        //                        Grandtotalpf += forConvert;

        //                        PdfPCell CPFonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CPFonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CPFonots.Border = 15;
        //                        Secondtable.AddCell(CPFonots);
        //                    }

        //                    //28
        //                    if (Esi != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["ESITotal"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESITotal"].ToString()));
        //                        totalesi += forConvert;

        //                        Grandtotalesi += forConvert;

        //                        PdfPCell CESIonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CESIonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CESIonots.Border = 15;
        //                        Secondtable.AddCell(CESIonots);
        //                    }

        //                    //29
        //                    if (proftax != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["ProfTax"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString()));
        //                        totalProfTax += forConvert;
        //                        GrandtotalProfTax += forConvert;

        //                        PdfPCell CProTax1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CProTax1.Border = 15;
        //                        Secondtable.AddCell(CProTax1);
        //                    }

        //                    //30
        //                    if (salAdvDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["SalAdvDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString()));
        //                        totalSalAdv += forConvert;
        //                        GrandtotalSalAdv += forConvert;

        //                        PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CSalAdv1.Border = 15;
        //                        Secondtable.AddCell(CSalAdv1);
        //                    }

        //                    //31
        //                    if (uniformDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["UniformDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString()));
        //                        totalUniforDed += forConvert;
        //                        GrandtotalUniforDed += forConvert;

        //                        PdfPCell CUnifDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CUnifDed1.Border = 15;
        //                        Secondtable.AddCell(CUnifDed1);
        //                    }


        //                    if (SecDepDedn != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["SecDepDedn"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SecDepDedn"].ToString()));
        //                        totalSecDepDedn += forConvert;
        //                        GrandtotalSecDepDedn += forConvert;

        //                        PdfPCell CSecDepDedn1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSecDepDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CSecDepDedn1.Border = 15;
        //                        Secondtable.AddCell(CSecDepDedn1);
        //                    }

        //                    if (LoanDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["LoanDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["LoanDed"].ToString()));
        //                        totalLoanDed += forConvert;
        //                        GrandtotalLoanDedn += forConvert;

        //                        PdfPCell CLoanDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CLoanDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CLoanDed1.Border = 15;
        //                        Secondtable.AddCell(CLoanDed1);
        //                    }


        //                    if (GenDedn != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["GenDedn"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["GenDedn"].ToString()));
        //                        totalGenDedn += forConvert;
        //                        GrandtotalGenDedn += forConvert;

        //                        PdfPCell CGenDedn1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CGenDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CGenDedn1.Border = 15;
        //                        Secondtable.AddCell(CGenDedn1);
        //                    }

        //                    if (AdvDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["AdvDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["AdvDed"].ToString()));
        //                        totalAdvDed += forConvert;
        //                        GrandtotalAdvDed += forConvert;

        //                        PdfPCell CADVDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CADVDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CADVDed1.Border = 15;
        //                        Secondtable.AddCell(CADVDed1);
        //                    }


        //                    if (WCDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["WCDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["WCDed"].ToString()));
        //                        totalWCDed += forConvert;
        //                        GrandtotalWCDed += forConvert;

        //                        PdfPCell CWCDedn1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CWCDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CWCDedn1.Border = 15;
        //                        Secondtable.AddCell(CWCDedn1);
        //                    }

        //                    //32
        //                    if (otherDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["OtherDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherDed"].ToString()));
        //                        totalOtherdedn += forConvert;
        //                        GrandtotalOtherdedn += forConvert;

        //                        PdfPCell COtherDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        COtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        COtherDed1.Border = 15;
        //                        Secondtable.AddCell(COtherDed1);
        //                    }

        //                    //33
        //                    if (canteenAdv != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["CanteenAdv"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["CanteenAdv"].ToString()));
        //                        totalCanteenAdv += forConvert;
        //                        GrandtotalCanteenAdv += forConvert;

        //                        PdfPCell CCanteended = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CCanteended.Border = 15;
        //                        Secondtable.AddCell(CCanteended);
        //                    }



        //                    //34
        //                    if (penalty != 0)
        //                    {
        //                        if (dt.Rows[i]["Penalty"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Penalty"].ToString()));
        //                        totalPenalty += forConvert;
        //                        GrandtotalPenalty += forConvert;

        //                        PdfPCell CPenalty1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CPenalty1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CPenalty1.Border = 15;
        //                        Secondtable.AddCell(CPenalty1);
        //                    }


        //                    if (owf != 0)
        //                    {
        //                        if (dt.Rows[i]["owf"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["owf"].ToString()));
        //                        totalowf += forConvert;
        //                        Grandtotalowf += forConvert;

        //                        PdfPCell Cowf1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cowf1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cowf1.Border = 15;
        //                        Secondtable.AddCell(Cowf1);
        //                    }


        //                    //35
        //                    if (totalDeductions != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Totaldeduct"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Totaldeduct"].ToString()));
        //                        totalDed += forConvert;
        //                        GrandtotalDed += forConvert;

        //                        PdfPCell CTotDed1 = new PdfPCell(new Phrase("\n \n \n" + forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CTotDed1.Border = 15;
        //                        Secondtable.AddCell(CTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //                    }

        //                    //36
        //                    if (netpay != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["NetAmount"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["NetAmount"].ToString()));
        //                        if (forConvert <= 0)
        //                        {
        //                            forConvert = 0;
        //                        }
        //                        totalNetpay += forConvert;
        //                        GrandtotalNetpay += forConvert;
        //                        PdfPCell CNetPay1 = new PdfPCell(new Phrase("\n \n \n" + forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNetPay1.Border = 15;
        //                        Secondtable.AddCell(CNetPay1);
        //                    }

        //                    //37
        //                    string EmpBankAcNo = dt.Rows[i]["EmpBankAcNo"].ToString();
        //                    string empbankname = dt.Rows[i]["empbankname"].ToString();
        //                    PdfPCell CSignature1 = new PdfPCell(new Phrase(EmpBankAcNo + "\n"+"Bank : " + empbankname, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CSignature1.Border = 15;
        //                    CSignature1.MinimumHeight = 25;
        //                    Secondtable.AddCell(CSignature1);
        //                }


        //            }
        //            #endregion

        //            #region Table Total values

        //            SecondtableFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableFooter.TotalWidth = 800f;
        //            }
        //            else
        //            {
        //                SecondtableFooter.TotalWidth = 800f;
        //            }
        //            SecondtableFooter.LockedWidth = true;
        //            float[] SecondFooterWidth = new float[] { };

        //            #region Table Cells
        //            if (tableCells == 37)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
        //            }
        //            #endregion

        //            SecondtableFooter.SetWidths(SecondFooterWidth);

        //            //1
        //            PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
        //            FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSNo.Border = 15;
        //            SecondtableFooter.AddCell(FCSNo);
        //            //2
        //            PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpId1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpId1);
        //            //3
        //            PdfPCell FCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //            FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpName1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpName1);
        //            //4
        //            PdfPCell FCEmpDesgn = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpDesgn.Border = 15;
        //            FCEmpDesgn.Colspan = 0;
        //            SecondtableFooter.AddCell(FCEmpDesgn);

        //            //6A
        //            if (srate != 0)
        //            {
        //                PdfPCell FCSalrate = new PdfPCell(new Phrase(totalsrate.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCSalrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCSalrate.Border = 15;
        //                SecondtableFooter.AddCell(FCSalrate);
        //            }


        //            //5
        //            if (dts != 0)
        //            {
        //                PdfPCell FCNoOfDuties = new PdfPCell(new Phrase(totalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNoOfDuties.Border = 15;
        //                SecondtableFooter.AddCell(FCNoOfDuties);
        //            }

        //            if (wo != 0)
        //            {
        //                PdfPCell FCwos = new PdfPCell(new Phrase(totalwos.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCwos.Border = 15;
        //                SecondtableFooter.AddCell(FCwos);
        //            }

        //            if (nhs != 0)
        //            {
        //                PdfPCell FCnhs = new PdfPCell(new Phrase(totalnhs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCnhs.Border = 15;
        //                SecondtableFooter.AddCell(FCnhs);
        //            }

        //            //6
        //            if (ots != 0)
        //            {
        //                PdfPCell FCots = new PdfPCell(new Phrase(totalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCots.Border = 15;
        //                SecondtableFooter.AddCell(FCots);
        //            }


        //            //7
        //            if (basic != 0)
        //            {
        //                PdfPCell FCBasic1 = new PdfPCell(new Phrase(totalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCBasic1.Border = 15;
        //                SecondtableFooter.AddCell(FCBasic1);
        //            }


        //            //8
        //            if (da != 0)
        //            {
        //                PdfPCell FDa = new PdfPCell(new Phrase(totalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FDa.Border = 15;
        //                SecondtableFooter.AddCell(FDa);
        //            }


        //            //9
        //            if (hra != 0)
        //            {

        //                PdfPCell FCHRA1 = new PdfPCell(new Phrase(totalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCHRA1.Border = 15;
        //                SecondtableFooter.AddCell(FCHRA1);
        //            }

        //            //10
        //            if (cca != 0)
        //            {
        //                PdfPCell FCcca = new PdfPCell(new Phrase(totalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCcca.Border = 15;
        //                SecondtableFooter.AddCell(FCcca);
        //            }

        //            //11
        //            if (conveyance != 0)
        //            {
        //                PdfPCell FCConveyance = new PdfPCell(new Phrase(totalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCConveyance.Border = 15;
        //                SecondtableFooter.AddCell(FCConveyance);
        //            }


        //            //12
        //            if (washallowance != 0)
        //            {
        //                PdfPCell FCWa = new PdfPCell(new Phrase(totalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCWa.Border = 15;
        //                SecondtableFooter.AddCell(FCWa);
        //            }

        //            //13
        //            if (otherallowance != 0)
        //            {
        //                PdfPCell FCOa = new PdfPCell(new Phrase(totalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCOa.Border = 15;
        //                SecondtableFooter.AddCell(FCOa);
        //            }

        //            if (SplAllowance != 0)
        //            {
        //                PdfPCell FCSplAllowance = new PdfPCell(new Phrase(totalSplAllowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCSplAllowance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCSplAllowance.Border = 15;
        //                SecondtableFooter.AddCell(FCSplAllowance);
        //            }

        //            if (TravelAllw != 0)
        //            {
        //                PdfPCell Fsplallw = new PdfPCell(new Phrase(totalTravelAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                Fsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                Fsplallw.Border = 15;
        //                SecondtableFooter.AddCell(Fsplallw);
        //            }

        //            if (PerformanceAllw != 0)
        //            {
        //                PdfPCell Fsplallw = new PdfPCell(new Phrase(totalPerformanceAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                Fsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                Fsplallw.Border = 15;
        //                SecondtableFooter.AddCell(Fsplallw);
        //            }

        //            if (MobileAllw != 0)
        //            {
        //                PdfPCell Fsplallw = new PdfPCell(new Phrase(totalMobileAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                Fsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                Fsplallw.Border = 15;
        //                SecondtableFooter.AddCell(Fsplallw);
        //            }
        //            //14
        //            if (leavewages != 0)
        //            {
        //                PdfPCell FLa = new PdfPCell(new Phrase(totalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FLa.Border = 15;
        //                SecondtableFooter.AddCell(FLa);
        //            }

        //            //15
        //            if (gratuity != 0)
        //            {
        //                PdfPCell FGratuity = new PdfPCell(new Phrase(totalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FGratuity.Border = 15;
        //                SecondtableFooter.AddCell(FGratuity);
        //            }

        //            //16
        //            if (bonus != 0)
        //            {
        //                PdfPCell Fbonus = new PdfPCell(new Phrase(totalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                Fbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                Fbonus.Border = 15;
        //                SecondtableFooter.AddCell(Fbonus);
        //            }

        //            //17
        //            if (nfhs != 0)
        //            {
        //                PdfPCell FNfhs = new PdfPCell(new Phrase(totalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FNfhs.Border = 15;
        //                SecondtableFooter.AddCell(FNfhs);
        //            }

        //            //18
        //            if (rc != 0)
        //            {
        //                PdfPCell FRc = new PdfPCell(new Phrase(totalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FRc.Border = 15;
        //                SecondtableFooter.AddCell(FRc);
        //            }

        //            //19
        //            if (cs != 0)
        //            {
        //                PdfPCell FCs = new PdfPCell(new Phrase(totalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCs.Border = 15;
        //                SecondtableFooter.AddCell(FCs);
        //            }

        //            if (cfoodallowance != 0)
        //            {
        //                PdfPCell FFoodallw = new PdfPCell(new Phrase(totalfoodallowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FFoodallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FFoodallw.Border = 15;
        //                SecondtableFooter.AddCell(FFoodallw);
        //            }


        //            if (cmedicalallowance != 0)
        //            {
        //                PdfPCell FMedicalallw = new PdfPCell(new Phrase(totalmedicalallowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FMedicalallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FMedicalallw.Border = 15;
        //                SecondtableFooter.AddCell(FMedicalallw);
        //            }
        //            if (woamt != 0)
        //            {
        //                PdfPCell FCWoamt = new PdfPCell(new Phrase(totalwoamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCWoamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCWoamt.Border = 15;
        //                SecondtableFooter.AddCell(FCWoamt);
        //            }


        //            if (nhsamt != 0)
        //            {
        //                PdfPCell FCnhsamt = new PdfPCell(new Phrase(totalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCnhsamt.Border = 15;
        //                SecondtableFooter.AddCell(FCnhsamt);
        //            }

        //            //20
        //            if (gross != 0)
        //            {
        //                PdfPCell FCGross1 = new PdfPCell(new Phrase(totalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCGross1.Border = 15;
        //                SecondtableFooter.AddCell(FCGross1);
        //            }

        //            //21





        //            if (otamt != 0)
        //            {
        //                PdfPCell FCotamt = new PdfPCell(new Phrase(totalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCotamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCotamt.Border = 15;
        //                SecondtableFooter.AddCell(FCotamt);
        //            }


        //            //22
        //            if (incentivs != 0)
        //            {
        //                PdfPCell FIncentivs = new PdfPCell(new Phrase(totalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FIncentivs.Border = 15;
        //                SecondtableFooter.AddCell(FIncentivs);
        //            }


        //            //23
        //            if (pfonduties != 0)
        //            {
        //                PdfPCell FCPF1 = new PdfPCell(new Phrase(totalPFondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCPF1.Border = 15;
        //                SecondtableFooter.AddCell(FCPF1);
        //            }

        //            //24
        //            if (esionduties != 0)
        //            {
        //                PdfPCell FCESI1 = new PdfPCell(new Phrase(totalESIondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCESI1.Border = 15;
        //                SecondtableFooter.AddCell(FCESI1);
        //            }


        //            //25
        //            if (pfonot != 0)
        //            {
        //                PdfPCell FCPFonot = new PdfPCell(new Phrase(totalpfonots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCPFonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCPFonot.Border = 15;
        //                SecondtableFooter.AddCell(FCPFonot);
        //            }

        //            //26
        //            if (esionot != 0)
        //            {
        //                PdfPCell FCESIonot = new PdfPCell(new Phrase(totalesionots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCESIonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCESIonot.Border = 15;
        //                SecondtableFooter.AddCell(FCESIonot);
        //            }

        //            //27
        //            if (Pf != 0)
        //            {
        //                PdfPCell FCPF = new PdfPCell(new Phrase(totalpf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCPF.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCPF.Border = 15;
        //                SecondtableFooter.AddCell(FCPF);
        //            }

        //            //28
        //            if (Esi != 0)
        //            {
        //                PdfPCell FCES = new PdfPCell(new Phrase(totalesi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCES.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCES.Border = 15;
        //                SecondtableFooter.AddCell(FCES);
        //            }

        //            //29
        //            if (proftax != 0)
        //            {
        //                PdfPCell FCProTax1 = new PdfPCell(new Phrase(totalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCProTax1.Border = 15;
        //                SecondtableFooter.AddCell(FCProTax1);
        //            }

        //            //30
        //            if (salAdvDed != 0)
        //            {
        //                PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCSalAdv1.Border = 15;
        //                SecondtableFooter.AddCell(FCSalAdv1);
        //            }

        //            //31
        //            if (uniformDed != 0)
        //            {
        //                PdfPCell FCUnifDed1 = new PdfPCell(new Phrase(totalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCUnifDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCUnifDed1);
        //            }

        //            if (SecDepDedn != 0)
        //            {
        //                PdfPCell FCSecDepDedn1 = new PdfPCell(new Phrase(totalSecDepDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCSecDepDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCSecDepDedn1.Border = 15;
        //                SecondtableFooter.AddCell(FCSecDepDedn1);
        //            }


        //            if (LoanDed != 0)
        //            {
        //                PdfPCell FCLoanDed1 = new PdfPCell(new Phrase(totalLoanDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCLoanDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCLoanDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCLoanDed1);
        //            }

        //            if (GenDedn != 0)
        //            {
        //                PdfPCell FCGenDedn1 = new PdfPCell(new Phrase(totalGenDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCGenDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCGenDedn1.Border = 15;
        //                SecondtableFooter.AddCell(FCGenDedn1);
        //            }
        //            if (AdvDed != 0)
        //            {
        //                PdfPCell FCAdvDed1 = new PdfPCell(new Phrase(totalAdvDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCAdvDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCAdvDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCAdvDed1);
        //            }
        //            if (WCDed != 0)
        //            {
        //                PdfPCell FCwcDed1 = new PdfPCell(new Phrase(totalWCDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCwcDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCwcDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCwcDed1);
        //            }
        //            //32
        //            if (otherDed != 0)
        //            {
        //                PdfPCell FCOtherDed1 = new PdfPCell(new Phrase(totalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCOtherDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCOtherDed1);
        //            }

        //            //33
        //            if (canteenAdv != 0)
        //            {
        //                PdfPCell FCCanteended = new PdfPCell(new Phrase(totalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCCanteended.Border = 15;
        //                SecondtableFooter.AddCell(FCCanteended);
        //            }


        //            //34
        //            if (penalty != 0)
        //            {
        //                PdfPCell FPenalty = new PdfPCell(new Phrase(totalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FPenalty.Border = 15;
        //                SecondtableFooter.AddCell(FPenalty);
        //            }

        //            if (owf != 0)
        //            {
        //                PdfPCell Fowf = new PdfPCell(new Phrase(totalowf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                Fowf.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                Fowf.Border = 15;
        //                SecondtableFooter.AddCell(Fowf);
        //            }


        //            //35
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCTotDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //            }

        //            //36
        //            if (netpay != 0)
        //            {
        //                PdfPCell FCNetPay1 = new PdfPCell(new Phrase(totalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                FCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtableFooter.AddCell(FCNetPay1);
        //            }

        //            //37
        //            PdfPCell FCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
        //            FCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtableFooter.AddCell(FCSignature1);

        //            #endregion

        //            SecondtableGrandtotalFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableGrandtotalFooter.TotalWidth = 800f;
        //            }
        //            else
        //            {
        //                SecondtableGrandtotalFooter.TotalWidth = 800f;
        //            }
        //            SecondtableGrandtotalFooter.LockedWidth = true;
        //            float[] SecondGrandtotalFooterWidth = new float[] { };
        //            #region Table Cells
        //            if (tableCells == 37)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
        //            }
        //            #endregion
        //            SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

        //            SecondtablecheckbyFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtablecheckbyFooter.TotalWidth = 800f;
        //            }
        //            else
        //            {
        //                SecondtablecheckbyFooter.TotalWidth = 800f;
        //            }
        //            SecondtablecheckbyFooter.LockedWidth = true;
        //            float[] SecondcheckbyFooterWidth = new float[] { };

        //            #region Table Cells
        //            if (tableCells == 37)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 4.8f, 3f, 2.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 1.5f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 1.5f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 1.5f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5.8f, 3f, 2.1f, 5f };
        //            }
        //            #endregion

        //            SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);

        //            #region Table   Grand   Total  Footer

        //            //1
        //            PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSNo.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCSNo);

        //            //2
        //            PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpId1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpId1);

        //            //3
        //            PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //            GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpName1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpName1);

        //            //4
        //            PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("Grand  Total: ", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpDesgn.Border = 15;
        //            //FCEmpDesgn.Colspan = 4;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);


        //            //6A
        //            if (srate != 0)
        //            {
        //                PdfPCell GFCsrate = new PdfPCell(new Phrase(GrandtotalSrate.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCsrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCsrate.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCsrate);
        //            }

        //            //5
        //            if (dts != 0)
        //            {
        //                PdfPCell GFCNoOfDuties = new PdfPCell(new Phrase(GrandtotalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNoOfDuties.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCNoOfDuties);
        //            }

        //            if (wo != 0)
        //            {
        //                PdfPCell GFCWos = new PdfPCell(new Phrase(Grandtotalwos.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCWos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCWos.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCWos);
        //            }


        //            if (nhs != 0)
        //            {
        //                PdfPCell GFCNhs = new PdfPCell(new Phrase(Grandtotalnhs.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCNhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNhs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCNhs);
        //            }


        //            //6
        //            if (ots != 0)
        //            {
        //                PdfPCell GFCOts = new PdfPCell(new Phrase(Grandtotalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCOts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOts.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOts);
        //            }




        //            //7
        //            if (basic != 0)
        //            {
        //                PdfPCell GFCBasic1 = new PdfPCell(new Phrase(GrandtotalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCBasic1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCBasic1);
        //            }


        //            //8
        //            if (da != 0)
        //            {
        //                PdfPCell GFDa = new PdfPCell(new Phrase(GrandtotalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFDa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFDa);
        //            }


        //            //9
        //            if (hra != 0)
        //            {
        //                PdfPCell GFCHRA1 = new PdfPCell(new Phrase(GrandtotalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCHRA1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCHRA1);
        //            }

        //            //10
        //            if (cca != 0)
        //            {
        //                PdfPCell GFCcca = new PdfPCell(new Phrase(GrandtotalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCcca.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCcca);
        //            }

        //            //11
        //            if (conveyance != 0)
        //            {
        //                PdfPCell GFCConveyance = new PdfPCell(new Phrase(GrandtotalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCConveyance.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCConveyance);
        //            }


        //            //12
        //            if (washallowance != 0)
        //            {
        //                PdfPCell GFCWa = new PdfPCell(new Phrase(GrandtotalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCWa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCWa);
        //            }

        //            //13
        //            if (otherallowance != 0)
        //            {
        //                PdfPCell GFCOa = new PdfPCell(new Phrase(GrandtotalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOa);
        //            }
        //            if (SplAllowance != 0)
        //            {
        //                PdfPCell GFCSplAllowance = new PdfPCell(new Phrase(GrandtotalSplAllowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCSplAllowance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCSplAllowance.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCSplAllowance);
        //            }

        //            if (TravelAllw != 0)
        //            {
        //                PdfPCell GFsplallw = new PdfPCell(new Phrase(GrandtotalTravelAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFsplallw.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFsplallw);
        //            }

        //            if (PerformanceAllw != 0)
        //            {
        //                PdfPCell GFsplallw = new PdfPCell(new Phrase(GrandtotalPerformanceAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFsplallw.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFsplallw);
        //            }

        //            if (MobileAllw != 0)
        //            {
        //                PdfPCell GFsplallw = new PdfPCell(new Phrase(GrandtotalMobileAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFsplallw.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFsplallw);
        //            }

        //            //14
        //            if (leavewages != 0)
        //            {
        //                PdfPCell GFLa = new PdfPCell(new Phrase(GrandtotalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFLa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFLa);
        //            }

        //            //15
        //            if (gratuity != 0)
        //            {
        //                PdfPCell GFGratuity = new PdfPCell(new Phrase(GrandtotalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFGratuity.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFGratuity);
        //            }

        //            //16
        //            if (bonus != 0)
        //            {
        //                PdfPCell GFbonus = new PdfPCell(new Phrase(Grandtotalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFbonus.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFbonus);
        //            }


        //            //17
        //            if (nfhs != 0)
        //            {
        //                PdfPCell GFNfhs = new PdfPCell(new Phrase(GrandtotalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFNfhs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFNfhs);
        //            }

        //            //18
        //            if (rc != 0)
        //            {
        //                PdfPCell GFRc = new PdfPCell(new Phrase(GrandtotalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFRc.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFRc);
        //            }

        //            //19
        //            if (cs != 0)
        //            {
        //                PdfPCell GFCs = new PdfPCell(new Phrase(GrandtotalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCs);
        //            }


        //            if (cfoodallowance != 0)
        //            {
        //                PdfPCell GFFoodallw = new PdfPCell(new Phrase(Grandtotalfoodallowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFFoodallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFFoodallw.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFFoodallw);
        //            }

        //            if (cmedicalallowance != 0)
        //            {
        //                PdfPCell GFMedicalallw = new PdfPCell(new Phrase(Grandtotalmedicalallowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFMedicalallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFMedicalallw.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFMedicalallw);
        //            }


        //            if (woamt != 0)
        //            {
        //                PdfPCell GFCwoamt = new PdfPCell(new Phrase(Grandtotalwoamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCwoamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCwoamt.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCwoamt);
        //            }


        //            if (nhsamt != 0)
        //            {
        //                PdfPCell GFCnhsamt = new PdfPCell(new Phrase(Grandtotalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCnhsamt.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCnhsamt);
        //            }

        //            //20
        //            if (gross != 0)
        //            {
        //                PdfPCell GFCGross1 = new PdfPCell(new Phrase(GrandtotalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCGross1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCGross1);
        //            }


        //            //21
        //            if (otamt != 0)
        //            {
        //                PdfPCell GFCOtamt = new PdfPCell(new Phrase(Grandtotalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCOtamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOtamt.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOtamt);
        //            }


        //            //22
        //            if (incentivs != 0)
        //            {
        //                PdfPCell GFIncentivs = new PdfPCell(new Phrase(GrandtotalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFIncentivs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFIncentivs);
        //            }



        //            //23
        //            if (pfonduties != 0)
        //            {
        //                PdfPCell GFCPF1 = new PdfPCell(new Phrase(GrandtotalPFondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCPF1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCPF1);
        //            }

        //            //24
        //            if (esionduties != 0)
        //            {
        //                PdfPCell GFCESI1 = new PdfPCell(new Phrase(GrandtotalESIondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCESI1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCESI1);
        //            }

        //            //25
        //            if (pfonot != 0)
        //            {
        //                PdfPCell GFCPFonot = new PdfPCell(new Phrase(Grandtotalpfonots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCPFonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCPFonot.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCPFonot);
        //            }

        //            //26
        //            if (esionot != 0)
        //            {
        //                PdfPCell GFCESIonot = new PdfPCell(new Phrase(Grandtotalesionots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCESIonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCESIonot.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCESIonot);
        //            }

        //            //27
        //            if (Pf != 0)
        //            {
        //                PdfPCell GFCPF = new PdfPCell(new Phrase(Grandtotalpf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCPF.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCPF.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCPF);
        //            }

        //            //28
        //            if (Esi != 0)
        //            {
        //                PdfPCell GFCESI = new PdfPCell(new Phrase(Grandtotalesi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCESI.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCESI.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCESI);
        //            }


        //            //29
        //            if (proftax != 0)
        //            {
        //                PdfPCell GFCProTax1 = new PdfPCell(new Phrase(GrandtotalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCProTax1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCProTax1);
        //            }

        //            //30
        //            if (salAdvDed != 0)
        //            {
        //                PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCSalAdv1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
        //            }

        //            //31
        //            if (uniformDed != 0)
        //            {
        //                PdfPCell GFCUnifDed1 = new PdfPCell(new Phrase(GrandtotalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCUnifDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCUnifDed1);
        //            }

        //            if (SecDepDedn != 0)
        //            {
        //                PdfPCell GFCSecDepDedn1 = new PdfPCell(new Phrase(GrandtotalSecDepDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCSecDepDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCSecDepDedn1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCSecDepDedn1);
        //            }

        //            if (LoanDed != 0)
        //            {
        //                PdfPCell GFCLoanDed1 = new PdfPCell(new Phrase(GrandtotalLoanDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCLoanDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCLoanDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCLoanDed1);
        //            }

        //            if (GenDedn != 0)
        //            {
        //                PdfPCell GFCGenDedn1 = new PdfPCell(new Phrase(GrandtotalGenDedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCGenDedn1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCGenDedn1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCGenDedn1);
        //            }
        //            if (AdvDed != 0)
        //            {
        //                PdfPCell GFCAdvDedDed1 = new PdfPCell(new Phrase(GrandtotalAdvDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCAdvDedDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCAdvDedDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCAdvDedDed1);
        //            }
        //            if (WCDed != 0)
        //            {
        //                PdfPCell GFcwcDed1 = new PdfPCell(new Phrase(GrandtotalWCDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFcwcDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFcwcDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFcwcDed1);
        //            }
        //            //32
        //            if (otherDed != 0)
        //            {
        //                PdfPCell GFCOtherDed1 = new PdfPCell(new Phrase(GrandtotalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOtherDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOtherDed1);
        //            }


        //            //33
        //            if (canteenAdv != 0)
        //            {
        //                PdfPCell GFCCanteended = new PdfPCell(new Phrase(GrandtotalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCCanteended.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCCanteended);
        //            }

        //            //34
        //            if (penalty != 0)
        //            {
        //                PdfPCell GFPenalty = new PdfPCell(new Phrase(GrandtotalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFPenalty.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFPenalty);
        //            }

        //            if (owf != 0)
        //            {
        //                PdfPCell GFowf = new PdfPCell(new Phrase(Grandtotalowf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFowf.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFowf.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFowf);
        //            }


        //            //35
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(GrandtotalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCTotDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //            }

        //            //36
        //            if (netpay != 0)
        //            {
        //                PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(GrandtotalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
        //                GFCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtablecheckbyFooter.AddCell(GFCNetPay1);
        //            }

        //            //37
        //            PdfPCell GFCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtablecheckbyFooter.AddCell(GFCSignature1);
        //            #endregion


        //            #region   Footer Headings
        //            //1
        //            PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHCheckedbybr1.Border = 0;
        //            FHCheckedbybr1.Rowspan = 0;
        //            FHCheckedbybr1.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            //2
        //            PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHApprovedbr2.Border = 0;
        //            FHApprovedbr2.Colspan = tableCells;

        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


        //            //1
        //            PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedby.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FHCheckedby.Border = 0;
        //            FHCheckedby.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedby);
        //            //2
        //            PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Gross  Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedBy.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //            FHApprovedBy.Border = 0;
        //            FHApprovedBy.PaddingTop = -5;
        //            FHApprovedBy.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHApprovedBy);



        //            #endregion

        //            document.Add(Secondtable);

        //            if (nextpagerecordscount == targetpagerecors)
        //            {
        //                targetpagerecors = secondpagerecords;
        //                document.Add(SecondtableFooter);
        //                document.NewPage();
        //                nextpagerecordscount = 0;
        //                #region  Zero variables
        //                totalAdvDed = 0;
        //                totalWCDed = 0;
        //                totalNetpay = 0;
        //                totalDuties = 0;
        //                totalsrate = 0;
        //                totalBasic = 0;
        //                totalDA = 0;
        //                totalHRA = 0;
        //                totalCCA = 0;
        //                totalConveyance = 0;
        //                totalWA = 0;
        //                totalOA = 0;
        //                totalGross = 0;
        //                totalPFondts = 0;
        //                totalESIondts = 0;
        //                totalProfTax = 0;
        //                totalDed = 0;
        //                totalSalAdv = 0;
        //                totalUniforDed = 0;
        //                totalCanteenAdv = 0;
        //                totalOtherdedn = 0;
        //                totalbonus = 0;
        //                totalLw = 0;
        //                totalGratuity = 0;
        //                totalNfhs = 0;
        //                totalRc = 0;
        //                totalCs = 0;
        //                totalIncentivs = 0;
        //                totalPenalty = 0;

        //                totalots = 0;
        //                totalotamt = 0;
        //                totalpfonots = 0;
        //                totalesionots = 0;
        //                totalpf = 0;
        //                totalesi = 0;

        //                #endregion
        //            }
        //        }

        //        if (nextpagerecordscount >= 0)
        //        {
        //            //document.Add(SecondtableFooter);
        //            document.Add(SecondtableGrandtotalFooter);
        //            document.Add(SecondtablecheckbyFooter);
        //        }
        //        document.Close();
        //        if (nextpagehasPages)
        //        {

        //            Response.ContentType = "application/pdf";
        //            Response.AddHeader("content-disposition", "attachment;filename=Dutieswithots.pdf");
        //            Response.Buffer = true;
        //            Response.Clear();
        //            Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        //            Response.OutputStream.Flush();
        //            Response.End();
        //        }
        //    }

        //}

        //protected void btnFormT_Click(object sender, EventArgs e)
        //{
        //    int titleofdocumentindex = 0;
        //    if (ddlClients.SelectedIndex <= 0)
        //    {
        //        ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
        //        return;
        //    }

        //    int payMonth = GetMonth(ddlmonth.SelectedValue);
        //    int month = GetMonthAndYear();

        //    string selectmonth = string.Empty;
        //    string SelectmonthWithbankacno = string.Empty;
        //    string SelectmonthWithoutbankacno = string.Empty;
        //    DataTable dt = null;


        //    var clientid = ddlClients.SelectedValue;
        //    var Paysheetoption = ddlpaymenttype.SelectedIndex;
        //    var Noofattendance = ddlnoofattendance.SelectedIndex;
        //    var pfesioptions = ddl_Pf_Esi_Options.SelectedIndex;

        //    var SPName = "";
        //    Hashtable HTPaysheet = new Hashtable();
        //    SPName = "IMEPaysheetpdfs";
        //    HTPaysheet.Add("@ClientId", clientid);
        //    HTPaysheet.Add("@month", month);
        //    HTPaysheet.Add("@PaymentOption", Paysheetoption);
        //    HTPaysheet.Add("@Attendance", Noofattendance);
        //    HTPaysheet.Add("@PfesiOptions", pfesioptions);
        //    dt = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTPaysheet);

        //    MemoryStream ms = new MemoryStream();
        //    if (dt.Rows.Count > 0)
        //    {
        //        Document document = new Document(PageSize.LEGAL.Rotate());
        //        PdfWriter writer = PdfWriter.GetInstance(document, ms);
        //        document.Open();
        //        document.AddTitle("FaMS");
        //        document.AddAuthor("WebWonders");
        //        document.AddSubject("Wage Sheet");
        //        document.AddKeywords("Keyword1, keyword2, …");//
        //        float forConvert;
        //        string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
        //        DataTable compInfo = SqlHelper.Instance.GetTableByQuery(strQry);
        //        string companyName1 = "Your Company Name";
        //        string companyAddress = "Your Company Address";
        //        if (compInfo.Rows.Count > 0)
        //        {
        //            companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
        //            companyAddress = compInfo.Rows[0]["Address"].ToString();
        //        }

        //        #region Variables for table cells counting

        //        int dts = 0;
        //        int payrate = 0;
        //        int basic = 0;
        //        int da = 0;
        //        int hra = 0;
        //        int cca = 0;
        //        int conveyance = 0;
        //        int washallowance = 0;
        //        int otherallowance = 0;
        //        int leavewages = 0;
        //        int gratuity = 0;
        //        int bonus = 0;
        //        int nfhs = 0;
        //        int rc = 0;
        //        int cs = 0;
        //        int gross = 0;
        //        int incentivs = 0;
        //        int pf = 0;
        //        int esi = 0;
        //        int proftax = 0;
        //        int salAdvDed = 0;
        //        int uniformDed = 0;
        //        int otherDed = 0;
        //        int canteenAdv = 0;
        //        int penalty = 0;
        //        int totalDeductions = 0;
        //        int netpay = 0;

        //        int ots = 0;
        //        int otamt = 0;
        //        int wos = 0;
        //        int wosamt = 0;
        //        int nhs = 0;
        //        int nhsamt = 0;

        //        int npots = 0;
        //        int npotsamt = 0;
        //        int totalearned = 0;
        //        int TDS = 0;
        //        int Soceity = 0;
        //        int Mobile = 0;
        //        int KLWF = 0;
        //        int Loss = 0;
        //        int Arrears = 0;
        //        int MatAllw = 0;
        //        int RoomUniform = 0;

        //        int Advance = 0;


        //        float dts1 = 0;
        //        float payrate1 = 0;
        //        float basic1 = 0;
        //        float da1 = 0;
        //        float hra1 = 0;
        //        float cca1 = 0;
        //        float conveyance1 = 0;
        //        float washallowance1 = 0;
        //        float otherallowance1 = 0;
        //        float leavewages1 = 0;
        //        float gratuity1 = 0;
        //        float bonus1 = 0;
        //        float nfhs1 = 0;
        //        float rc1 = 0;
        //        float cs1 = 0;
        //        float gross1 = 0;
        //        float incentivs1 = 0;
        //        float pf1 = 0;
        //        float esi1 = 0;
        //        float proftax1 = 0;
        //        float salAdvDed1 = 0;
        //        float uniformDed1 = 0;
        //        float otherDed1 = 0;
        //        float canteenAdv1 = 0;
        //        float penalty1 = 0;
        //        float totalDeductions1 = 0;
        //        float netpay1 = 0;
        //        float totalearned1 = 0;

        //        float ots1 = 0;
        //        float otamt1 = 0;
        //        float wos1 = 0;
        //        float wosamt1 = 0;
        //        float nhs1 = 0;
        //        float nhsamt1 = 0;
        //        float npots1 = 0;
        //        float npotsamt1 = 0;

        //        float TDS1 = 0;
        //        float Soceity1 = 0;
        //        float Mobile1 = 0;
        //        float KLWF1 = 0;
        //        float Loss1 = 0;
        //        float Arrears1 = 0;
        //        float MatAllw1 = 0;
        //        float RoomUniform1 = 0;

        //        float Advance1 = 0;


        //        #endregion


        //        #region Data for counting tablecells

        //        for (int i = 0; i < dt.Rows.Count; i++)
        //        {
        //            dts1 = float.Parse(dt.Rows[i]["NoOfDuties"].ToString());
        //            if (dts1 != 0)
        //            {
        //                dts1 += 1;
        //                if (dts1 > 0)
        //                {
        //                    dts = 1;
        //                }
        //            }


        //            Soceity1 = float.Parse(dt.Rows[i]["Soceity"].ToString());
        //            if (Soceity1 != 0)
        //            {
        //                Soceity1 += 1;
        //                if (Soceity1 > 0)
        //                {
        //                    Soceity = 1;
        //                }
        //            }

        //            TDS1 = float.Parse(dt.Rows[i]["TDS"].ToString());
        //            if (TDS1 != 0)
        //            {
        //                TDS1 += 1;
        //                if (TDS1 > 0)
        //                {
        //                    TDS = 1;
        //                }
        //            }

        //            Mobile1 = float.Parse(dt.Rows[i]["Mobile"].ToString());
        //            if (Mobile1 != 0)
        //            {
        //                Mobile1 += 1;
        //                if (Mobile1 > 0)
        //                {
        //                    Mobile = 1;
        //                }
        //            }

        //            KLWF1 = float.Parse(dt.Rows[i]["KLWF"].ToString());
        //            if (KLWF1 != 0)
        //            {
        //                KLWF1 += 1;
        //                if (KLWF1 > 0)
        //                {
        //                    KLWF = 1;
        //                }
        //            }

        //            Loss1 = float.Parse(dt.Rows[i]["Loss"].ToString());
        //            if (Loss1 != 0)
        //            {
        //                Loss1 += 1;
        //                if (Loss1 > 0)
        //                {
        //                    Loss = 1;
        //                }
        //            }

        //            Arrears1 = float.Parse(dt.Rows[i]["Arrears"].ToString());
        //            if (Arrears1 != 0)
        //            {
        //                Arrears1 += 1;
        //                if (Arrears1 > 0)
        //                {
        //                    Arrears = 1;
        //                }
        //            }

        //            //MatAllw1 = float.Parse(dt.Rows[i]["MatAllw"].ToString());
        //            //if (MatAllw1 != 0)
        //            //{
        //            //    MatAllw1 += 1;
        //            //    if (MatAllw1 > 0)
        //            //    {
        //            //        MatAllw = 1;
        //            //    }
        //            //}

        //            //RoomUniform1 = float.Parse(dt.Rows[i]["RoomUniform"].ToString());
        //            //if (RoomUniform1 != 0)
        //            //{
        //            //    RoomUniform1 += 1;
        //            //    if (RoomUniform1 > 0)
        //            //    {
        //            //        RoomUniform = 1;
        //            //    }
        //            //}

        //            //modeofpayment1 = float.Parse(dt.Rows[i]["modeofpayment"].ToString());
        //            //if (modeofpayment1 != 0)
        //            //{
        //            //    modeofpayment1 += 1;
        //            //    if (modeofpayment1 > 0)
        //            //    {
        //            //        modeofpayment = 1;
        //            //    }
        //            //}

        //            //Advance1 = float.Parse(dt.Rows[i]["Advance"].ToString());
        //            //if (Advance1 != 0)
        //            //{
        //            //    Advance1 += 1;
        //            //    if (Advance1 > 0)
        //            //    {
        //            //        Advance = 1;
        //            //    }
        //            //}

        //            payrate1 = float.Parse(dt.Rows[i]["tempgross"].ToString());
        //            if (payrate1 != 0)
        //            {
        //                payrate1 += 1;
        //                if (payrate1 > 0)
        //                {
        //                    payrate = 1;
        //                }
        //            }

        //            basic1 = float.Parse(dt.Rows[i]["basic"].ToString());
        //            if (basic1 != 0)
        //            {
        //                basic1 += 1;
        //                if (basic1 > 0)
        //                {
        //                    basic = 1;
        //                }
        //            }
        //            da1 = float.Parse(dt.Rows[i]["da"].ToString());
        //            if (da1 != 0)
        //            {
        //                da1 += 1;
        //                if (da1 > 0)
        //                {
        //                    da = 1;
        //                }
        //            }
        //            hra1 = float.Parse(dt.Rows[i]["hra"].ToString());
        //            if (hra1 != 0)
        //            {
        //                hra1 += 1;
        //                if (hra1 > 0)
        //                {
        //                    hra = 1;
        //                }
        //            }
        //            cca1 = float.Parse(dt.Rows[i]["cca"].ToString());
        //            if (cca1 != 0)
        //            {
        //                cca1 += 1;
        //                if (cca1 > 0)
        //                {
        //                    cca = 1;
        //                }
        //            }
        //            conveyance1 = float.Parse(dt.Rows[i]["Conveyance"].ToString());
        //            if (conveyance1 != 0)
        //            {
        //                conveyance1 += 1;
        //                if (conveyance1 > 0)
        //                {
        //                    conveyance = 1;
        //                }
        //            }

        //            washallowance1 = float.Parse(dt.Rows[i]["washallowance"].ToString());
        //            if (washallowance1 != 0)
        //            {
        //                washallowance1 += 1;
        //                if (washallowance1 > 0)
        //                {
        //                    washallowance = 1;
        //                }
        //            }
        //            otherallowance1 = float.Parse(dt.Rows[i]["otherallowance"].ToString());
        //            if (otherallowance1 != 0)
        //            {
        //                otherallowance1 += 1;
        //                if (otherallowance1 > 0)
        //                {
        //                    otherallowance = 1;
        //                }
        //            }
        //            leavewages1 = float.Parse(dt.Rows[i]["Leavewages"].ToString());
        //            if (leavewages1 != 0)
        //            {
        //                leavewages1 += 1;
        //                if (leavewages1 > 0)
        //                {
        //                    leavewages = 1;
        //                }
        //            }
        //            gratuity1 = float.Parse(dt.Rows[i]["gratuity"].ToString());
        //            if (gratuity1 != 0)
        //            {
        //                gratuity1 += 1;
        //                if (gratuity1 > 0)
        //                {
        //                    gratuity = 1;
        //                }
        //            }
        //            bonus1 = float.Parse(dt.Rows[i]["bonus"].ToString());
        //            if (bonus1 != 0)
        //            {
        //                bonus1 += 1;
        //                if (bonus1 > 0)
        //                {
        //                    bonus = 1;
        //                }
        //            }

        //            nfhs1 = float.Parse(dt.Rows[i]["nfhs"].ToString());
        //            if (nfhs1 != 0)
        //            {
        //                nfhs1 += 1;
        //                if (nfhs1 > 0)
        //                {
        //                    nfhs = 1;
        //                }
        //            }
        //            rc1 = float.Parse(dt.Rows[i]["rc"].ToString());
        //            if (rc1 != 0)
        //            {
        //                rc1 += 1;
        //                if (rc1 > 0)
        //                {
        //                    rc = 1;
        //                }
        //            }

        //            cs1 = float.Parse(dt.Rows[i]["cs"].ToString());
        //            if (cs1 != 0)
        //            {
        //                cs1 += 1;
        //                if (cs1 > 0)
        //                {
        //                    cs = 1;
        //                }
        //            }
        //            gross1 = float.Parse(dt.Rows[i]["gross"].ToString());
        //            if (gross1 != 0)
        //            {
        //                gross1 += 1;
        //                if (gross1 > 0)
        //                {
        //                    gross = 1;
        //                }
        //            }

        //            incentivs1 = float.Parse(dt.Rows[i]["incentivs"].ToString());
        //            if (incentivs1 != 0)
        //            {
        //                incentivs1 += 1;
        //                if (incentivs1 > 0)
        //                {
        //                    incentivs = 1;
        //                }
        //            }

        //            totalearned1 = float.Parse(dt.Rows[i]["gross"].ToString());
        //            if (totalearned1 != 0)
        //            {
        //                totalearned1 += 1;
        //                if (totalearned1 > 0)
        //                {
        //                    totalearned = 1;
        //                }
        //            }
        //            pf1 = float.Parse(dt.Rows[i]["Pf"].ToString());
        //            if (pf1 != 0)
        //            {
        //                pf1 += 1;
        //                if (pf1 > 0)
        //                {
        //                    pf = 1;
        //                }
        //            }
        //            esi1 = float.Parse(dt.Rows[i]["Esi"].ToString());
        //            if (esi1 != 0)
        //            {
        //                esi1 += 1;
        //                if (esi1 > 0)
        //                {
        //                    esi = 1;
        //                }
        //            }
        //            proftax1 = float.Parse(dt.Rows[i]["proftax"].ToString());
        //            if (proftax1 != 0)
        //            {
        //                proftax1 += 1;
        //                if (proftax1 > 0)
        //                {
        //                    proftax = 1;
        //                }
        //            }
        //            salAdvDed1 = float.Parse(dt.Rows[i]["salAdvDed"].ToString());
        //            if (salAdvDed1 != 0)
        //            {
        //                salAdvDed1 += 1;
        //                if (salAdvDed1 > 0)
        //                {
        //                    salAdvDed = 1;
        //                }
        //            }
        //            uniformDed1 = float.Parse(dt.Rows[i]["uniformDed"].ToString());
        //            if (uniformDed1 != 0)
        //            {
        //                uniformDed1 += 1;
        //                if (uniformDed1 > 0)
        //                {
        //                    uniformDed = 1;
        //                }
        //            }
        //            otherDed1 = float.Parse(dt.Rows[i]["otherDed"].ToString());
        //            if (otherDed1 != 0)
        //            {
        //                otherDed1 += 1;
        //                if (otherDed1 > 0)
        //                {
        //                    otherDed = 1;
        //                }
        //            }
        //            canteenAdv1 = float.Parse(dt.Rows[i]["canteenAdv"].ToString());
        //            if (canteenAdv1 != 0)
        //            {
        //                canteenAdv1 += 1;
        //                if (canteenAdv1 > 0)
        //                {
        //                    canteenAdv = 1;
        //                }
        //            }

        //            penalty1 = float.Parse(dt.Rows[i]["penalty"].ToString());
        //            if (penalty1 != 0)
        //            {
        //                penalty1 += 1;
        //                if (penalty1 > 0)
        //                {
        //                    penalty = 1;
        //                }
        //            }
        //            totalDeductions1 = float.Parse(dt.Rows[i]["Totaldeduct"].ToString());
        //            if (totalDeductions1 != 0)
        //            {
        //                totalDeductions1 += 1;
        //                if (totalDeductions1 > 0)
        //                {
        //                    totalDeductions = 1;
        //                }
        //            }
        //            netpay1 = float.Parse(dt.Rows[i]["NetAmount"].ToString());
        //            if (netpay1 != 0)
        //            {
        //                netpay1 += 1;
        //                if (netpay1 > 0)
        //                {
        //                    netpay = 1;
        //                }
        //            }

        //            ots1 = float.Parse(dt.Rows[i]["Duties"].ToString());
        //            if (ots1 != 0)
        //            {
        //                ots1 += 1;
        //                if (ots1 > 0)
        //                {
        //                    ots = 1;
        //                }
        //            }

        //            otamt1 = float.Parse(dt.Rows[i]["Amount"].ToString());
        //            if (otamt1 != 0)
        //            {
        //                otamt1 += 1;
        //                if (otamt1 > 0)
        //                {
        //                    otamt = 1;
        //                }
        //            }

        //            wos1 = float.Parse(dt.Rows[i]["Wo"].ToString());
        //            if (wos1 != 0)
        //            {
        //                wos1 += 1;
        //                if (wos1 > 0)
        //                {
        //                    wos = 1;
        //                }
        //            }

        //            wosamt1 = float.Parse(dt.Rows[i]["woamt"].ToString());
        //            if (wosamt1 != 0)
        //            {
        //                wosamt1 += 1;
        //                if (wosamt1 > 0)
        //                {
        //                    wosamt = 1;
        //                }
        //            }

        //            nhs1 = float.Parse(dt.Rows[i]["nhs"].ToString());
        //            if (nhs1 != 0)
        //            {
        //                nhs1 += 1;
        //                if (nhs1 > 0)
        //                {
        //                    nhs = 1;
        //                }
        //            }
        //            nhsamt1 = float.Parse(dt.Rows[i]["nhsamt"].ToString());
        //            if (nhsamt1 != 0)
        //            {
        //                nhsamt1 += 1;
        //                if (nhsamt1 > 0)
        //                {
        //                    nhsamt = 1;
        //                }
        //            }

        //            npots1 = float.Parse(dt.Rows[i]["npots"].ToString());
        //            if (npots1 != 0)
        //            {
        //                npots1 += 1;
        //                if (npots1 > 0)
        //                {
        //                    npots = 1;
        //                }
        //            }
        //            npotsamt1 = float.Parse(dt.Rows[i]["npotsamt"].ToString());
        //            if (npotsamt1 != 0)
        //            {
        //                npotsamt1 += 1;
        //                if (npotsamt1 > 0)
        //                {
        //                    npotsamt = 1;
        //                }
        //            }



        //        }

        //        #endregion

        //        int sno = 1;
        //        int empid = 1;
        //        int empname = 1;
        //        int fathername = 1;
        //        int design = 1;
        //        int EmpBankAcNo = 1;
        //        int EmpEpfNo = 1;
        //        int EmpEsiNo = 1;
        //        int Dtofleaving = 1;
        //        int modeofpayment = 1;

        //        int tableCells = dts + basic + da + hra + cca + conveyance + washallowance + otherallowance + leavewages +
        //                        gratuity + bonus + nfhs + rc + cs + gross + incentivs + pf + esi + proftax +
        //                        salAdvDed + uniformDed + otherDed + canteenAdv + penalty + totalDeductions + netpay + sno + totalearned+ Arrears+ 
        //                        Loss+ KLWF  + modeofpayment + Soceity +
        //                        empid + empname + design + EmpBankAcNo + ots + otamt + wos + wosamt + nhs + nhsamt + npots + npotsamt + payrate + fathername + Dtofleaving;

        //        #region for individual attendance

        //        string day1 = "";
        //        string day2 = "";
        //        string day3 = "";
        //        string day4 = "";
        //        string day5 = "";
        //        string day6 = "";
        //        string day7 = "";
        //        string day8 = "";
        //        string day9 = "";
        //        string day10 = "";
        //        string day11 = "";
        //        string day12 = "";
        //        string day13 = "";
        //        string day14 = "";
        //        string day15 = "";
        //        string day16 = "";
        //        string day17 = "";
        //        string day18 = "";
        //        string day19 = "";
        //        string day20 = "";
        //        string day21 = "";
        //        string day22 = "";
        //        string day23 = "";
        //        string day24 = "";
        //        string day25 = "";
        //        string day26 = "";
        //        string day27 = "";
        //        string day28 = "";
        //        string day29 = "";
        //        string day30 = "";
        //        string day31 = "";

        //        #endregion for individual attendance



        //        #region variables for total


        //        float totalTDS = 0;
        //        float totalSoceity = 0;
        //        float totalLoss = 0;
        //        float totalKLWF = 0;
        //        float totalMobile = 0;
        //        float totalDuties = 0;
        //        float totalpayrate = 0;
        //        float totalBasic = 0;
        //        float totalDA = 0;
        //        float totalHRA = 0;
        //        float totalCCA = 0;
        //        float totalConveyance = 0;
        //        float totalWA = 0;
        //        float totalOA = 0;
        //        float totalLw = 0;
        //        float totalGratuity = 0;
        //        float totalbonus = 0;
        //        float totalNfhs = 0;
        //        float totalRc = 0;
        //        float totalCs = 0;
        //        float totalGross = 0;
        //        float totalIncentivs = 0;
        //        float totalPF = 0;
        //        float totalESI = 0;
        //        float totalProfTax = 0;
        //        float totalSalAdv = 0;
        //        float totalUniforDed = 0;
        //        float totalOtherdedn = 0;
        //        float totalCanteenAdv = 0;
        //        float totalPenalty = 0;
        //        float totalDed = 0;
        //        float totalNetpay = 0;

        //        float totalots = 0;
        //        float totalotamt = 0;
        //        float totalwos = 0;
        //        float totalwosamt = 0;
        //        float totalnhs = 0;
        //        float totalnhsamt = 0;

        //        float totalnpots = 0;
        //        float totalnpotsamt = 0;
        //        float totaltotalearned = 0;
        //        float totalarrears = 0;

        //        #endregion

        //        #region variables for  Grand  total

        //         float Grandtotalarrears=0;
        //        float GrandtotalTDS = 0;
        //        float GrandtotalSoceity = 0;
        //        float GrandtotalLoss = 0;
        //        float GrandtotalKLWF = 0;
        //        float GrandtotalMobile = 0;
        //        float GrandtotalDuties = 0;
        //        float GrandtotalBasic = 0;
        //        float Grandtotalpayrate = 0;
        //        float GrandtotalDA = 0;
        //        float GrandtotalHRA = 0;
        //        float GrandtotalCCA = 0;
        //        float GrandtotalConveyance = 0;
        //        float GrandtotalWA = 0;
        //        float GrandtotalOA = 0;
        //        float GrandtotalLw = 0;
        //        float GrandtotalGratuity = 0;
        //        float Grandtotalbonus = 0;
        //        float GrandtotalNfhs = 0;
        //        float GrandtotalRc = 0;
        //        float GrandtotalCs = 0;
        //        float GrandtotalGross = 0;
        //        float GrandtotalIncentivs = 0;
        //        float GrandtotalPF = 0;
        //        float GrandtotalESI = 0;
        //        float GrandtotalProfTax = 0;
        //        float GrandtotalSalAdv = 0;
        //        float GrandtotalUniforDed = 0;
        //        float GrandtotalOtherdedn = 0;
        //        float GrandtotalCanteenAdv = 0;
        //        float GrandtotalPenalty = 0;
        //        float GrandtotalDed = 0;
        //        float GrandtotalNetpay = 0;

        //        float Grandtotalots = 0;
        //        float Grandtotalotamt = 0;
        //        float Grandtotalwos = 0;
        //        float Grandtotalwosamt = 0;
        //        float Grandtotalnhs = 0;
        //        float Grandtotalnhsamt = 0;

        //        float Grandtotalnpots = 0;
        //        float Grandtotalnpotsamt = 0;
        //        float Grandtotaltotalearned = 0;

        //        #endregion

        //        string selectclientaddress = "select * from clients where clientid= '" + ddlClients.SelectedValue + "'";
        //        DataTable dtclientaddress = SqlHelper.Instance.GetTableByQuery(selectclientaddress);

        //        int nextpagerecordscount = 0;
        //        int targetpagerecors = 7;
        //        int secondpagerecords = targetpagerecors + 2;
        //        bool nextpagehasPages = false;
        //        int j = 0;
        //        PdfPTable SecondtablecheckbyFooter = null;
        //        PdfPTable SecondtableFooter = null;
        //        PdfPTable SecondtableGrandtotalFooter = null;
        //        for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
        //        {
        //            nextpagehasPages = true;


        //            #region Titles of Document
        //            PdfPTable Maintable = new PdfPTable(30);
        //            if (tableCells > 20)
        //            {
        //                Maintable.TotalWidth = 980f;
        //            }
        //            else
        //            {
        //                Maintable.TotalWidth = 850f;
        //            }
        //            Maintable.LockedWidth = true;
        //            float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f,2f,2f,2f };


        //            Maintable.SetWidths(width);
        //            uint FONT_SIZE = 8;
        //            string FontStyle = "verdana";

        //            //Company Name & wage act details

        //            PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
        //            cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            cellemp.Colspan = 30;
        //            cellemp.Border = 0;


        //            PdfPCell Heading = new PdfPCell(new Phrase("FORM T \n [ See Rule 24(9-B) of the Karnataka Shops & Commercial Establishments Rules, 1963] in lieu of \n 1. Form I, II of Rule 22(4): Form IV of Rule 28(2); Form V & VII of Rule 29(1) & (5) of Karnataka Minimum wages Rules 1958; \n 2. Form I of Rules 3 (1) of Karnataka Payment of Wages Rules, 1963; \n 3. Form XIII of Rules 75; Form XV, XVII, XX, XXI, XXII, XXIII, of Rule 78 (1) a(i), (ii) &(iii) of the Karnataka Contract Labour (Regulation & Abolition) Rules, 1974; \n 4. Form XIII of Rule 43, Form XVII, XVIII, XIX, XX, XXI, XXII, of Rule 46(2) (a), (c) & (d) of Karnataka inter state Migrant Workmen Rules, 1981  ", FontFactory.GetFont(Fontstyle, 6, Font.BOLD, BaseColor.BLACK)));
        //            Heading.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            Heading.Colspan = 10;
        //            Heading.Border = 0;
        //            Heading.SetLeading(0.0f, 1.5f);
        //            Maintable.AddCell(Heading);

        //            PdfPCell cellemp1 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
        //            cellemp1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            cellemp1.Colspan = 1;
        //            cellemp1.Border = 0;
        //            Maintable.AddCell(cellemp1);

        //            PdfPCell Heading1 = new PdfPCell(new Phrase("Name & Address of the Establishment : \n"+companyName1 + "\n" + companyAddress, FontFactory.GetFont(Fontstyle, 6, Font.BOLD, BaseColor.BLACK)));
        //            Heading1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            Heading1.Colspan = 5;
        //            Heading1.Border = 0;
        //            Heading1.SetLeading(0.0f, 1.5f);
        //            Maintable.AddCell(Heading1);

        //            Maintable.AddCell(cellemp1);



        //            PdfPTable tempTable1 = new PdfPTable(1);
        //            if (tableCells > 20)
        //            {
        //                tempTable1.TotalWidth = 245f;
        //            }
        //            else
        //            {
        //                tempTable1.TotalWidth = 180f;
        //            }
        //            tempTable1.LockedWidth = true;
        //            float[] tempWidth1 = new float[] { 1f };
        //            tempTable1.SetWidths(tempWidth1);

        //            string addressData = "";


        //            PdfPCell Heading2 = new PdfPCell(new Phrase("Name & Address of the Establishment : ", FontFactory.GetFont(Fontstyle, 7, Font.BOLD, BaseColor.BLACK)));
        //            Heading2.HorizontalAlignment = Element.ALIGN_JUSTIFIED; //0=Left, 1=Centre, 2=Right
        //            Heading2.Colspan = 1;
        //            Heading2.Border = 0;
        //            tempTable1.AddCell(Heading2);

        //            addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
        //            if (addressData.Trim().Length > 0)
        //            {
        //                PdfPCell clientaddrhno = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 7, Font.BOLD, BaseColor.BLACK)));
        //                clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                //clientaddrhno.Colspan = 0;
        //                clientaddrhno.Border = 0;
        //                tempTable1.AddCell(clientaddrhno);
        //            }
        //            addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
        //            if (addressData.Trim().Length > 0)
        //            {
        //                PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 6, Font.BOLD, BaseColor.BLACK)));
        //                clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                clientstreet.Border = 0;
        //                tempTable1.AddCell(clientstreet);
        //            }


        //            addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
        //            if (addressData.Trim().Length > 0)
        //            {
        //                PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 6, Font.BOLD, BaseColor.BLACK)));
        //                clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                clientstreet.Border = 0;
        //                tempTable1.AddCell(clientstreet);
        //            }


        //            addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
        //            if (addressData.Trim().Length > 0)
        //            {
        //                PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 6, Font.BOLD, BaseColor.BLACK)));
        //                clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                //clientcolony.Colspan = 2;
        //                clientcolony.Border = 0;
        //                tempTable1.AddCell(clientcolony);
        //            }
        //            addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
        //            if (addressData.Trim().Length > 0)
        //            {
        //                PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 6, Font.BOLD, BaseColor.BLACK)));
        //                clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                //clientcity.Colspan = 2;
        //                clientcity.Border = 0;
        //                tempTable1.AddCell(clientcity);
        //            }
        //            addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
        //            if (addressData.Trim().Length > 0)
        //            {
        //                PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 6, Font.BOLD, BaseColor.BLACK)));
        //                clientstate.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                //clientstate.Colspan = 2;
        //                clientstate.Border = 0;
        //                tempTable1.AddCell(clientstate);
        //            }
        //            addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
        //            if (addressData.Trim().Length > 0)
        //            {
        //                PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 6, Font.BOLD, BaseColor.BLACK)));
        //                clietnpin.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                //clietnpin.Colspan = 2;
        //                clietnpin.Border = 0;
        //                tempTable1.AddCell(clietnpin);
        //            }
        //            PdfPCell childTable1 = new PdfPCell(tempTable1);
        //            childTable1.Border = 0;
        //            childTable1.Colspan = 6;
        //            childTable1.HorizontalAlignment = 0;
        //            Maintable.AddCell(childTable1);

        //            Maintable.AddCell(cellemp1);

        //            addressData = dtclientaddress.Rows[0]["Location"].ToString();
        //            if (addressData.Trim().Length > 0)
        //            {

        //                PdfPCell Heading3 = new PdfPCell(new Phrase("Location :\n " + addressData.ToString(), FontFactory.GetFont(Fontstyle, 6, Font.BOLD, BaseColor.BLACK)));
        //                Heading3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                Heading3.Colspan = 6;
        //                Heading3.Border = 0;
        //                Heading3.SetLeading(0.0f, 1.5f);
        //                Maintable.AddCell(Heading3);
        //            }

        //            //PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
        //            //Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            //Heading.Colspan = 27;
        //            //Heading.Border = 0;
        //            //Maintable.AddCell(Heading);


        //            //PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 15, Font.BOLD, BaseColor.BLACK)));
        //            //actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            //actDetails.Colspan = 27;
        //            //actDetails.Border = 0;// 15;
        //            //Maintable.AddCell(actDetails);

        //            //PdfPCell Heading = new PdfPCell(new Phrase("Form XIII of Rule 43, Form XVII, XVIII, XIX, XX, XXI, XXII, of Rule 46(2) (a), (c) & (d) of Karnataka inter state Migrant Workmen Rules, 1981", FontFactory.GetFont(Fontstyle, 12, Font.BOLD, BaseColor.BLACK)));
        //            //Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            //Heading.Colspan = 30;
        //            //Heading.Border = 0;
        //            //Maintable.AddCell(Heading);

        //            Maintable.AddCell(cellemp);
        //            #endregion


        //            #region Sub Headings

        //            PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 12, Font.BOLD, BaseColor.BLACK)));
        //            companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            companyName.Colspan = 30;
        //            companyName.Border = 0;// 15;
        //            Maintable.AddCell(companyName);



        //            //PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        //            //paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            //paySheet.Colspan = 27;
        //            //paySheet.Border = 0;// 15;
        //            //Maintable.AddCell(paySheet);

        //            //PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            //CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            //CClient.Colspan = 3;
        //            //CClient.Border = 0;// 15;
        //            //Maintable.AddCell(CClient);

        //            //PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlcname.SelectedItem, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            //CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            //CClientName.Colspan = 10;
        //            //CClientName.Border = 0;// 15;
        //            //Maintable.AddCell(CClientName);

        //            //PdfPCell CDates = new PdfPCell(new Phrase("Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //            //CDates.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            //CDates.Colspan = 8;
        //            //CDates.Border = 0;// 15;
        //            //Maintable.AddCell(CDates);

        //            //PdfPCell CPaySheetDate = new PdfPCell(new Phrase("Pay Sheet Date :  " + DateTime.Now.Date.ToString("dd/MM/yyyy"), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            //PdfPCell CPaySheetDate = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            //CPaySheetDate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            //CPaySheetDate.Colspan = 1;
        //            //CPaySheetDate.Border = 0;// 15;
        //            //Maintable.AddCell(CPaySheetDate);

        //            //PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :   " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            //CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            //CPayMonth.Colspan = 7;
        //            //CPayMonth.Border = 0;// 15;
        //            //Maintable.AddCell(CPayMonth);

        //            Maintable.AddCell(cellemp);
        //            //document.Add(Maintable);

        //            if (titleofdocumentindex == 0)
        //            {
        //                document.Add(Maintable);
        //                titleofdocumentindex = 1;
        //            }

        //            #endregion


        //            #region Table Headings

        //            PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableHeadings.TotalWidth = 1000f;
        //            }
        //            else
        //            {
        //                SecondtableHeadings.TotalWidth = 850f;
        //            }
        //            SecondtableHeadings.LockedWidth = true;
        //            float[] SecondHeadingsWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 42)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 41)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 40)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 39)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 38)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 37)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 2f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 5f };
        //            }
        //            #endregion

        //            SecondtableHeadings.SetWidths(SecondHeadingsWidth);

        //            //Cell Headings

        //            PdfPCell CClientName = new PdfPCell(new Phrase(ddlcname.SelectedItem.Text + " - " + GetMonthName() + " - " + GetMonthOfYear() + " FORM T ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CClientName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CClientName.Colspan = tableCells;
        //            CClientName.PaddingBottom = 4;
        //            CClientName.PaddingTop = 4;
        //            SecondtableHeadings.AddCell(CClientName);

        //            //1
        //            PdfPCell sNo = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            //sNo.Colspan = 1;
        //            sNo.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(sNo);

        //            //2
        //            PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpId.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpId);

        //            //3
        //            PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpName.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpName);

        //            PdfPCell CBasicDetails = new PdfPCell(new Phrase("Basic Details", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CBasicDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CBasicDetails.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CBasicDetails);

        //            //4
        //            PdfPCell CDesgn = new PdfPCell(new Phrase("Design", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CDesgn.Border = 15;
        //            SecondtableHeadings.AddCell(CDesgn);

        //            //4 A
        //            if (payrate != 0)
        //            {
        //                PdfPCell Cpayrate = new PdfPCell(new Phrase("Wages Fixed", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cpayrate.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cpayrate.Border = 15;
        //                SecondtableHeadings.AddCell(Cpayrate);
        //            }

        //            if(Dtofleaving!=0)
        //            { 

        //                PdfPCell CDateofleaving = new PdfPCell(new Phrase("Dt of Susp", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CDateofleaving.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CDateofleaving.Border = 15;
        //                SecondtableHeadings.AddCell(CDateofleaving);
        //            }

        //            //5
        //            if (dts != 0)
        //            {
        //                PdfPCell CDuties = new PdfPCell(new Phrase("NOD", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CDuties.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CDuties.Border = 15;
        //                SecondtableHeadings.AddCell(CDuties);
        //            }

        //            //6
        //            if (ots != 0)
        //            {
        //                PdfPCell Cots = new PdfPCell(new Phrase("OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cots.Border = 15;
        //                SecondtableHeadings.AddCell(Cots);
        //            }

        //            //7
        //            if (wos != 0)
        //            {
        //                PdfPCell CWos = new PdfPCell(new Phrase("WOs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CWos.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CWos.Border = 15;
        //                SecondtableHeadings.AddCell(CWos);
        //            }

        //            //8
        //            if (nhs != 0)
        //            {
        //                PdfPCell CNHs = new PdfPCell(new Phrase("NHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNHs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNHs.Border = 15;
        //                SecondtableHeadings.AddCell(CNHs);
        //            }

        //            //9
        //            if (npots != 0)
        //            {
        //                PdfPCell CNpots = new PdfPCell(new Phrase("NPOTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNpots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNpots.Border = 15;
        //                SecondtableHeadings.AddCell(CNpots);
        //            }



        //            //10
        //            if (basic != 0)
        //            {
        //                PdfPCell CBasic = new PdfPCell(new Phrase("Basic", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CBasic.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CBasic.Border = 15;
        //                SecondtableHeadings.AddCell(CBasic);
        //            }

        //            //11
        //            if (da != 0)
        //            {
        //                PdfPCell CDa = new PdfPCell(new Phrase("DA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CDa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CDa.Border = 15;
        //                SecondtableHeadings.AddCell(CDa);
        //            }

        //            //12
        //            if (hra != 0)
        //            {
        //                PdfPCell CHRa = new PdfPCell(new Phrase("HRA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CHRa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CHRa.Border = 15;
        //                SecondtableHeadings.AddCell(CHRa);
        //            }

        //            //13
        //            if (cca != 0)
        //            {
        //                PdfPCell CCca = new PdfPCell(new Phrase("CCA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CCca.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CCca.Border = 15;
        //                SecondtableHeadings.AddCell(CCca);
        //            }

        //            //14
        //            if (conveyance != 0)
        //            {
        //                PdfPCell Cconveyance = new PdfPCell(new Phrase("Conv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cconveyance.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cconveyance.Border = 15;
        //                SecondtableHeadings.AddCell(Cconveyance);
        //            }

        //            //15
        //            if (washallowance != 0)
        //            {
        //                PdfPCell Cwa = new PdfPCell(new Phrase("WA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cwa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                Cwa.Border = 15;
        //                SecondtableHeadings.AddCell(Cwa);
        //            }

        //            //16
        //            if (otherallowance != 0)
        //            {
        //                PdfPCell COa = new PdfPCell(new Phrase("OA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COa.Border = 15;
        //                SecondtableHeadings.AddCell(COa);
        //            }

        //            //17
        //            if (leavewages != 0)
        //            {
        //                PdfPCell CLa = new PdfPCell(new Phrase("LA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CLa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CLa.Border = 15;
        //                SecondtableHeadings.AddCell(CLa);
        //            }

        //            //18
        //            if (gratuity != 0)
        //            {
        //                PdfPCell CGratuity = new PdfPCell(new Phrase("Gratuity", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CGratuity.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CGratuity.Border = 15;
        //                SecondtableHeadings.AddCell(CGratuity);
        //            }

        //            //19
        //            if (bonus != 0)
        //            {
        //                PdfPCell CBonus = new PdfPCell(new Phrase("Bonus", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CBonus.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CBonus.Border = 15;
        //                SecondtableHeadings.AddCell(CBonus);
        //            }




        //            //20
        //            if (nfhs != 0)
        //            {
        //                PdfPCell CNfhs = new PdfPCell(new Phrase("NFHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNfhs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNfhs.Border = 15;
        //                SecondtableHeadings.AddCell(CNfhs);
        //            }

        //            //21
        //            if (rc != 0)
        //            {
        //                PdfPCell CRc = new PdfPCell(new Phrase("R.C", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CRc.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CRc.Border = 15;
        //                SecondtableHeadings.AddCell(CRc);
        //            }

        //            //22
        //            if (cs != 0)
        //            {
        //                PdfPCell CCs = new PdfPCell(new Phrase("C.S", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CCs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CCs.Border = 15;
        //                SecondtableHeadings.AddCell(CCs);
        //            }

        //            if(Arrears!=0)
        //            {
        //            PdfPCell Carrears = new PdfPCell(new Phrase("Arrears", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            Carrears.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //            Carrears.Border = 15;
        //            SecondtableHeadings.AddCell(Carrears);
        //           }

        //            //23
        //            if (gross != 0)
        //            {
        //                PdfPCell CGross = new PdfPCell(new Phrase("Gross", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CGross.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CGross.Border = 15;
        //                SecondtableHeadings.AddCell(CGross);
        //            }

        //            //24
        //            if (otamt != 0)
        //            {
        //                PdfPCell COtamt = new PdfPCell(new Phrase("OT Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COtamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COtamt.Border = 15;
        //                SecondtableHeadings.AddCell(COtamt);
        //            }

        //            //25
        //            if (wosamt != 0)
        //            {
        //                PdfPCell CWoamt = new PdfPCell(new Phrase("WO Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CWoamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CWoamt.Border = 15;
        //                SecondtableHeadings.AddCell(CWoamt);
        //            }

        //            //26
        //            if (nhsamt != 0)
        //            {
        //                PdfPCell CNHsamt = new PdfPCell(new Phrase("NHs Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNHsamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNHsamt.Border = 15;
        //                SecondtableHeadings.AddCell(CNHsamt);
        //            }

        //            //27
        //            if (npotsamt != 0)
        //            {
        //                PdfPCell CNpotsamt = new PdfPCell(new Phrase("NPOTs Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNpotsamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNpotsamt.Border = 15;
        //                SecondtableHeadings.AddCell(CNpotsamt);
        //            }

        //            //28
        //            if (incentivs != 0)
        //            {
        //                PdfPCell CIncentivs = new PdfPCell(new Phrase("Incentivs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CIncentivs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CIncentivs.Border = 15;
        //                SecondtableHeadings.AddCell(CIncentivs);
        //            }

        //            //28A
        //            if (totalearned != 0)
        //            {
        //                PdfPCell Ctotalearned = new PdfPCell(new Phrase("Total Earnd", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Ctotalearned.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Ctotalearned.Border = 15;
        //                SecondtableHeadings.AddCell(Ctotalearned);
        //            }


        //            //29
        //            if (pf != 0)
        //            {
        //                PdfPCell CPFondts = new PdfPCell(new Phrase("PF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPFondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPFondts.Border = 15;
        //                SecondtableHeadings.AddCell(CPFondts);
        //            }

        //            //30
        //            if (esi != 0)
        //            {
        //                PdfPCell CESIondts = new PdfPCell(new Phrase("ESI", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CESIondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CESIondts.Border = 15;
        //                SecondtableHeadings.AddCell(CESIondts);
        //            }


        //            //31
        //            if (proftax != 0)
        //            {
        //                PdfPCell CPT = new PdfPCell(new Phrase("PT", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPT.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPT.Border = 15;
        //                SecondtableHeadings.AddCell(CPT);
        //            }

        //            if (TDS != 0)
        //            {
        //                PdfPCell CTDS = new PdfPCell(new Phrase("TDS", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CTDS.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CTDS.Border = 15;
        //                SecondtableHeadings.AddCell(CTDS);
        //            }

        //            if (Soceity != 0)
        //            {
        //                PdfPCell CSoceity = new PdfPCell(new Phrase("Soceity", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CSoceity.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CSoceity.Border = 15;
        //                SecondtableHeadings.AddCell(CSoceity);
        //            }

        //            if (Mobile != 0)
        //            {
        //                PdfPCell Cmobexp = new PdfPCell(new Phrase("Mobile exp", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cmobexp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cmobexp.Border = 15;
        //                SecondtableHeadings.AddCell(Cmobexp);
        //            }

        //            if (KLWF != 0)
        //            {
        //                PdfPCell CKLWF = new PdfPCell(new Phrase("KLWF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CKLWF.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CKLWF.Border = 15;
        //                SecondtableHeadings.AddCell(CKLWF);
        //            }

        //            if (Loss != 0)
        //            {
        //                PdfPCell CLoss = new PdfPCell(new Phrase("Loss", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CLoss.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CLoss.Border = 15;
        //                SecondtableHeadings.AddCell(CLoss);
        //            }


        //            //32
        //            if (salAdvDed != 0)
        //            {
        //                PdfPCell CSalAdv = new PdfPCell(new Phrase("Sal Adv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CSalAdv.Border = 15;
        //                SecondtableHeadings.AddCell(CSalAdv);
        //            }

        //            //33
        //            if (uniformDed != 0)
        //            {
        //                PdfPCell CUnifDed = new PdfPCell(new Phrase("Unif. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CUnifDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CUnifDed.Border = 15;
        //                SecondtableHeadings.AddCell(CUnifDed);
        //            }

        //            //34
        //            if (otherDed != 0)
        //            {
        //                PdfPCell COtherDed = new PdfPCell(new Phrase("Other Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COtherDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COtherDed.Border = 15;
        //                SecondtableHeadings.AddCell(COtherDed);
        //            }

        //            //35
        //            if (canteenAdv != 0)
        //            {
        //                PdfPCell Ccanteended = new PdfPCell(new Phrase("Mess. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Ccanteended.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Ccanteended.Border = 15;
        //                SecondtableHeadings.AddCell(Ccanteended);
        //            }



        //            //36
        //            if (penalty != 0)
        //            {
        //                PdfPCell CPenalty = new PdfPCell(new Phrase("Penalty", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPenalty.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPenalty.Border = 15;
        //                SecondtableHeadings.AddCell(CPenalty);
        //            }

        //            //37
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell CTotDed = new PdfPCell(new Phrase("Tot Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CTotDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CTotDed.Border = 15;
        //                SecondtableHeadings.AddCell(CTotDed);
        //            }

        //            //if (Advance != 0)
        //            //{
        //            //    PdfPCell CAdvance = new PdfPCell(new Phrase("Advance", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            //    CAdvance.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            //    CAdvance.Border = 15;
        //            //    SecondtableHeadings.AddCell(CAdvance);
        //            //}

        //            //if (RoomUniform != 0)
        //            //{
        //            //    PdfPCell CRoomUniform = new PdfPCell(new Phrase("Room Unif", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            //    CRoomUniform.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            //    CRoomUniform.Border = 15;
        //            //    SecondtableHeadings.AddCell(CRoomUniform);
        //            //}

        //            //38
        //            if (netpay != 0)
        //            {
        //                PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNetPay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNetPay.Border = 15;
        //                SecondtableHeadings.AddCell(CNetPay);
        //            }

        //            if (modeofpayment != 0)
        //            {
        //                PdfPCell Cmodepay = new PdfPCell(new Phrase("Mode of Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cmodepay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cmodepay.Border = 15;
        //                SecondtableHeadings.AddCell(Cmodepay);
        //            }

        //            //39
        //            PdfPCell CSignature = new PdfPCell(new Phrase("Bank A/c No./ Signature", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CSignature.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CSignature.Border = 15;
        //            SecondtableHeadings.AddCell(CSignature);


        //            #endregion


        //            #region Table Data

        //            PdfPTable Secondtable = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                Secondtable.TotalWidth = 1000f;
        //            }
        //            else
        //            {
        //                Secondtable.TotalWidth = 850f;
        //            }
        //            Secondtable.LockedWidth = true;
        //            float[] SecondWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 39)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 38)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 37)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 2f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 5f };
        //            }
        //            #endregion


        //            Secondtable.SetWidths(SecondWidth);




        //            int rowCount = 0;
        //            int pageCount = 0;
        //            int i = nextpagei;

        //            //for (int i = 0; i < dt.Rows.Count; i++)
        //            {
        //                float ForconvertOt = 0;
        //                forConvert = 0;
        //                if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
        //                    forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());

        //                //if (forConvert > 0)
        //                {

        //                    if (nextpagerecordscount == 0)
        //                    {
        //                        document.Add(SecondtableHeadings);
        //                    }

        //                    nextpagerecordscount++;

        //                    //1
        //                    PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CSNo.Border = 15;
        //                    Secondtable.AddCell(CSNo);

        //                    //2
        //                    PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpId1.Border = 15;
        //                    Secondtable.AddCell(CEmpId1);

        //                    //3
        //                    PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpName"].ToString() + "\n" +"\n" + "PF No:" +
        //                    dt.Rows[i]["EmpEpfNo"].ToString() + "\n" + "\n" + "ESI No:" + dt.Rows[i]["EmpEsiNo"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpName1.Border = 15;
        //                    Secondtable.AddCell(CEmpName1);

        //                    string DOJ = dt.Rows[i]["EmpDtofJoining"].ToString();
        //                    if (DOJ=="01/01/1900")
        //                    {
        //                        DOJ = "";
        //                    }

        //                    string DOB = dt.Rows[i]["EmpDtofBirth"].ToString();
        //                    if (DOB == "01/01/1900")
        //                    {
        //                        DOB = "";
        //                    }
        //                    PdfPCell CBasicDetails1 = new PdfPCell(new Phrase("Father Name:" + dt.Rows[i]["EmpFathername"].ToString() + "\n"+"\n"+ "DOB:" + DOB.ToString() +
        //                        "\n" +"\n" + "DOJ:" + DOJ.ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CBasicDetails1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CBasicDetails1.Border = 15;// 15;
        //                    Secondtable.AddCell(CBasicDetails1);

        //                    //4
        //                    PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Design"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpDesgn.Border = 15;
        //                    Secondtable.AddCell(CEmpDesgn);

        //                    //9 A
        //                    if (payrate != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["TempGross"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TempGross"].ToString()));
        //                        totalpayrate += forConvert;
        //                        Grandtotalpayrate += forConvert;
        //                        PdfPCell Cpayrate1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cpayrate1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cpayrate1.Border = 15;
        //                        Secondtable.AddCell(Cpayrate1);
        //                    }


        //                    if (Dtofleaving != 0)
        //                    {
        //                        string dateofsusp = dt.Rows[i]["EmpDtofLeaving"].ToString();
        //                        if (dateofsusp != "01/01/1900")
        //                        {
        //                            PdfPCell Cdateofsusp = new PdfPCell(new Phrase(dateofsusp.ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            Cdateofsusp.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                            Cdateofsusp.Border = 15;
        //                            Secondtable.AddCell(Cdateofsusp);
        //                        }
        //                        else
        //                        {
        //                            PdfPCell Cdateofsusp = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                            Cdateofsusp.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                            Cdateofsusp.Border = 15;
        //                            Secondtable.AddCell(Cdateofsusp);

        //                        }
        //                    }

        //                    //5
        //                    if (dts != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());
        //                        totalDuties += forConvert;
        //                        GrandtotalDuties += forConvert;

        //                        PdfPCell CNoOfDuties = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNoOfDuties.Border = 15;
        //                        Secondtable.AddCell(CNoOfDuties);
        //                    }



        //                    //6
        //                    if (ots != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Duties"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["Duties"].ToString());
        //                        totalots += forConvert;
        //                        Grandtotalots += forConvert;

        //                        PdfPCell COts = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        COts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        COts.Border = 15;
        //                        Secondtable.AddCell(COts);
        //                    }

        //                    //7
        //                    if (wos != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["wo"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["wo"].ToString());
        //                        totalwos += forConvert;
        //                        Grandtotalwos += forConvert;

        //                        PdfPCell Cwos = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cwos.Border = 15;
        //                        Secondtable.AddCell(Cwos);
        //                    }

        //                    //8
        //                    if (nhs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["nhs"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["nhs"].ToString());
        //                        totalnhs += forConvert;
        //                        Grandtotalnhs += forConvert;

        //                        PdfPCell CNhs = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNhs.Border = 15;
        //                        Secondtable.AddCell(CNhs);
        //                    }

        //                    //9
        //                    if (npots != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["npots"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["npots"].ToString());
        //                        totalnpots += forConvert;
        //                        Grandtotalnpots += forConvert;

        //                        PdfPCell Cnpots = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cnpots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cnpots.Border = 15;
        //                        Secondtable.AddCell(Cnpots);
        //                    }



        //                    //10
        //                    if (basic != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Basic"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Basic"].ToString()));
        //                        totalBasic += forConvert;
        //                        GrandtotalBasic += forConvert;
        //                        PdfPCell CBasic1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CBasic1.Border = 15;
        //                        Secondtable.AddCell(CBasic1);
        //                    }

        //                    //11
        //                    if (da != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["DA"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["DA"].ToString()));
        //                        totalDA += forConvert;
        //                        GrandtotalDA += forConvert;

        //                        PdfPCell CDa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CDa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CDa1.Border = 15;
        //                        Secondtable.AddCell(CDa1);
        //                    }

        //                    //12
        //                    if (hra != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["HRA"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["HRA"].ToString()));
        //                        totalHRA += forConvert;
        //                        GrandtotalHRA += forConvert;

        //                        PdfPCell CHRA1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CHRA1.Border = 15;
        //                        Secondtable.AddCell(CHRA1);
        //                    }

        //                    //13
        //                    if (cca != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["cca"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cca"].ToString()));
        //                        totalCCA += forConvert;

        //                        GrandtotalCCA += forConvert;

        //                        PdfPCell Ccca = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Ccca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Ccca.Border = 15;
        //                        Secondtable.AddCell(Ccca);
        //                    }

        //                    //14
        //                    if (conveyance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Conveyance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString()));
        //                        totalConveyance += forConvert;
        //                        GrandtotalConveyance += forConvert;

        //                        PdfPCell CConveyance = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CConveyance.Border = 15;
        //                        Secondtable.AddCell(CConveyance);
        //                    }


        //                    //15
        //                    if (washallowance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["washallowance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["washallowance"].ToString()));
        //                        totalWA += forConvert;
        //                        GrandtotalWA += forConvert;

        //                        PdfPCell CWa = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CWa.Border = 15;
        //                        Secondtable.AddCell(CWa);
        //                    }

        //                    //16
        //                    if (otherallowance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["OtherAllowance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString()));
        //                        totalOA += forConvert;
        //                        GrandtotalOA += forConvert;
        //                        PdfPCell COA = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        COA.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        COA.Border = 15;
        //                        Secondtable.AddCell(COA);
        //                    }

        //                    //17
        //                    if (leavewages != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Leavewages"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Leavewages"].ToString()));
        //                        totalLw += forConvert;
        //                        GrandtotalLw += forConvert;
        //                        PdfPCell CLa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CLa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CLa1.Border = 15;
        //                        Secondtable.AddCell(CLa1);
        //                    }

        //                    //18
        //                    if (gratuity != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Gratuity"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gratuity"].ToString()));
        //                        totalGratuity += forConvert;
        //                        GrandtotalGratuity += forConvert;
        //                        PdfPCell CGratuity1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CGratuity1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CGratuity1.Border = 15;
        //                        Secondtable.AddCell(CGratuity1);
        //                    }

        //                    //19
        //                    if (bonus != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["bonus"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["bonus"].ToString()));
        //                        totalbonus += forConvert;

        //                        Grandtotalbonus += forConvert;
        //                        PdfPCell Cbonus = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cbonus.Border = 15;
        //                        Secondtable.AddCell(Cbonus);
        //                    }



        //                    //20
        //                    if (nfhs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Nfhs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Nfhs"].ToString()));
        //                        totalNfhs += forConvert;
        //                        GrandtotalNfhs += forConvert;
        //                        PdfPCell CNfhs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNfhs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNfhs1.Border = 15;
        //                        Secondtable.AddCell(CNfhs1);
        //                    }

        //                    //21
        //                    if (rc != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["RC"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["RC"].ToString()));
        //                        totalRc += forConvert;
        //                        GrandtotalRc += forConvert;
        //                        PdfPCell CRc1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CRc1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CRc1.Border = 15;
        //                        Secondtable.AddCell(CRc1);
        //                    }

        //                    //22
        //                    if (cs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["cs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cs"].ToString()));
        //                        totalCs += forConvert;
        //                        GrandtotalCs += forConvert;
        //                        PdfPCell CCs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CCs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CCs1.Border = 15;
        //                        Secondtable.AddCell(CCs1);
        //                    }

        //                    if (Arrears != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["arrears"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["arrears"].ToString()));
        //                        totalarrears += forConvert;
        //                        Grandtotalarrears += forConvert;
        //                        PdfPCell Carrears1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Carrears1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Carrears1.Border = 15;
        //                        Secondtable.AddCell(Carrears1);
        //                    }


        //                    //23
        //                    if (gross != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Gross"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gross"].ToString()));
        //                        totalGross += forConvert;
        //                        GrandtotalGross += forConvert;

        //                        PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CGross1.Border = 15;
        //                        Secondtable.AddCell(CGross1);
        //                    }

        //                    //24
        //                    if (otamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Amount"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Amount"].ToString()));
        //                        totalotamt += forConvert;
        //                        Grandtotalotamt += forConvert;

        //                        PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CGross1.Border = 15;
        //                        Secondtable.AddCell(CGross1);
        //                    }


        //                    //25
        //                    if (wosamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["woamt"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["woamt"].ToString()));
        //                        totalwosamt += forConvert;

        //                        Grandtotalwosamt += forConvert;

        //                        PdfPCell Cwosamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cwosamt.Border = 15;
        //                        Secondtable.AddCell(Cwosamt);
        //                    }



        //                    //26
        //                    if (nhsamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["nhsamt"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["nhsamt"].ToString()));
        //                        totalnhsamt += forConvert;

        //                        Grandtotalnhsamt += forConvert;

        //                        PdfPCell Cnhsamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cnhsamt.Border = 15;
        //                        Secondtable.AddCell(Cnhsamt);
        //                    }

        //                    //27
        //                    if (npotsamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["npotsamt"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["npotsamt"].ToString()));
        //                        totalnpotsamt += forConvert;

        //                        Grandtotalnpotsamt += forConvert;

        //                        PdfPCell Cnpotsamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cnpotsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cnpotsamt.Border = 15;
        //                        Secondtable.AddCell(Cnpotsamt);
        //                    }

        //                    //28
        //                    if (incentivs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Incentivs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Incentivs"].ToString()));
        //                        totalIncentivs += forConvert;
        //                        GrandtotalIncentivs += forConvert;
        //                        PdfPCell CIncentivs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CIncentivs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CIncentivs1.Border = 15;
        //                        Secondtable.AddCell(CIncentivs1);
        //                    }

        //                    //28A

        //                    if (totalearned != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["gross"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["gross"].ToString()));
        //                        totaltotalearned += forConvert;

        //                        Grandtotaltotalearned += forConvert;

        //                        PdfPCell Ctotalearned = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Ctotalearned.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Ctotalearned.Border = 15;
        //                        Secondtable.AddCell(Ctotalearned);
        //                    }


        //                    //29
        //                    if (pf != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Pf"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Pf"].ToString()));
        //                        totalPF += forConvert;
        //                        GrandtotalPF += forConvert;

        //                        PdfPCell CPF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CPF1.Border = 15;
        //                        Secondtable.AddCell(CPF1);
        //                    }

        //                    //30
        //                    if (esi != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Esi"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Esi"].ToString()));
        //                        totalESI += forConvert;

        //                        GrandtotalESI += forConvert;

        //                        PdfPCell CESI1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CESI1.Border = 15;
        //                        Secondtable.AddCell(CESI1);
        //                    }




        //                    //31
        //                    if (proftax != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["ProfTax"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString()));
        //                        totalProfTax += forConvert;
        //                        GrandtotalProfTax += forConvert;

        //                        PdfPCell CProTax1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CProTax1.Border = 15;
        //                        Secondtable.AddCell(CProTax1);
        //                    }

        //                    if (TDS != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["TDS"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TDS"].ToString()));
        //                        totalTDS += forConvert;
        //                        GrandtotalTDS += forConvert;

        //                        PdfPCell CTDS1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CTDS1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                        CTDS1.Border = 15;
        //                        Secondtable.AddCell(CTDS1);
        //                    }

        //                    if (Soceity != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Soceity"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Soceity"].ToString()));
        //                        totalSoceity += forConvert;
        //                        GrandtotalSoceity += forConvert;

        //                        PdfPCell CSoceity1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSoceity1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                        CSoceity1.Border = 15;
        //                        Secondtable.AddCell(CSoceity1);
        //                    }

        //                    if (Mobile != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Mobile"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Mobile"].ToString()));
        //                        totalMobile += forConvert;
        //                        GrandtotalMobile += forConvert;

        //                        PdfPCell Cmobexp1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cmobexp1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                        Cmobexp1.Border = 15;
        //                        Secondtable.AddCell(Cmobexp1);
        //                    }

        //                    if (KLWF != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["KLWF"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["KLWF"].ToString()));
        //                        totalKLWF += forConvert;
        //                        GrandtotalKLWF += forConvert;

        //                        PdfPCell CKLWF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CKLWF1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                        CKLWF1.Border = 15;
        //                        Secondtable.AddCell(CKLWF1);
        //                    }

        //                    if (Loss != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Loss"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Loss"].ToString()));
        //                        totalLoss += forConvert;
        //                        GrandtotalLoss += forConvert;

        //                        PdfPCell CLoss1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CLoss1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                        CLoss1.Border = 15;
        //                        Secondtable.AddCell(CLoss1);
        //                    }

        //                    //32
        //                    if (salAdvDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["SalAdvDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString()));
        //                        totalSalAdv += forConvert;
        //                        GrandtotalSalAdv += forConvert;

        //                        PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CSalAdv1.Border = 15;
        //                        Secondtable.AddCell(CSalAdv1);
        //                    }

        //                    //33
        //                    if (uniformDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["UniformDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString()));
        //                        totalUniforDed += forConvert;
        //                        GrandtotalUniforDed += forConvert;

        //                        PdfPCell CUnifDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CUnifDed1.Border = 15;
        //                        Secondtable.AddCell(CUnifDed1);
        //                    }

        //                    //34
        //                    if (otherDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["OtherDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherDed"].ToString()));
        //                        totalOtherdedn += forConvert;
        //                        GrandtotalOtherdedn += forConvert;

        //                        PdfPCell COtherDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        COtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        COtherDed1.Border = 15;
        //                        Secondtable.AddCell(COtherDed1);
        //                    }

        //                    //35
        //                    if (canteenAdv != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["CanteenAdv"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["CanteenAdv"].ToString()));
        //                        totalCanteenAdv += forConvert;
        //                        GrandtotalCanteenAdv += forConvert;

        //                        PdfPCell CCanteended = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CCanteended.Border = 15;
        //                        Secondtable.AddCell(CCanteended);
        //                    }



        //                    //36
        //                    if (penalty != 0)
        //                    {
        //                        if (dt.Rows[i]["Penalty"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Penalty"].ToString()));
        //                        totalPenalty += forConvert;
        //                        GrandtotalPenalty += forConvert;

        //                        PdfPCell CPenalty1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CPenalty1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CPenalty1.Border = 15;
        //                        Secondtable.AddCell(CPenalty1);
        //                    }


        //                    //37
        //                    if (totalDeductions != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Totaldeduct"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Totaldeduct"].ToString()));
        //                        totalDed += forConvert;
        //                        GrandtotalDed += forConvert;

        //                        PdfPCell CTotDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CTotDed1.Border = 15;
        //                        Secondtable.AddCell(CTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //                    }

        //                    //38
        //                    if (netpay != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["NetAmount"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["NetAmount"].ToString()));
        //                        if (forConvert <= 0)
        //                        {
        //                            forConvert = 0;
        //                        }
        //                        totalNetpay += forConvert;
        //                        GrandtotalNetpay += forConvert;
        //                        PdfPCell CNetPay1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNetPay1.Border = 15;
        //                        Secondtable.AddCell(CNetPay1);
        //                    }

        //                    if (modeofpayment != 0)
        //                    {
        //                        PdfPCell Cmodepay1 = new PdfPCell(new Phrase("Bank", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cmodepay1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                        Cmodepay1.Border = 15;
        //                        Secondtable.AddCell(Cmodepay1);
        //                    }

        //                    //39
        //                    string EmpBankAcNo1 = dt.Rows[i]["EmpBankAcNo"].ToString();
        //                    PdfPCell CSignature1 = new PdfPCell(new Phrase(EmpBankAcNo1, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CSignature1.Border = 15;
        //                    Secondtable.AddCell(CSignature1);

        //                    day1 =  dt.Rows[i]["day1"].ToString();
        //                    day2 = dt.Rows[i]["day2"].ToString();
        //                    day3 = dt.Rows[i]["day3"].ToString();
        //                    day4 = dt.Rows[i]["day4"].ToString();
        //                    day5 = dt.Rows[i]["day5"].ToString();
        //                    day6 = dt.Rows[i]["day6"].ToString();
        //                    day7 = dt.Rows[i]["day7"].ToString();
        //                    day8 = dt.Rows[i]["day8"].ToString();
        //                    day9 = dt.Rows[i]["day9"].ToString();
        //                    day10 = dt.Rows[i]["day10"].ToString();
        //                    day11 = dt.Rows[i]["day11"].ToString();
        //                    day12 = dt.Rows[i]["day12"].ToString();
        //                    day13 = dt.Rows[i]["day13"].ToString();
        //                    day14 = dt.Rows[i]["day14"].ToString();
        //                    day15 = dt.Rows[i]["day15"].ToString();
        //                    day16 = dt.Rows[i]["day16"].ToString();
        //                    day17 = dt.Rows[i]["day17"].ToString();
        //                    day18 = dt.Rows[i]["day18"].ToString();
        //                    day19 = dt.Rows[i]["day19"].ToString();
        //                    day20 = dt.Rows[i]["day20"].ToString();
        //                    day21 = dt.Rows[i]["day21"].ToString();
        //                    day22 = dt.Rows[i]["day22"].ToString();
        //                    day23 = dt.Rows[i]["day23"].ToString();
        //                    day24 = dt.Rows[i]["day24"].ToString();
        //                    day25 = dt.Rows[i]["day25"].ToString();
        //                    day26 = dt.Rows[i]["day26"].ToString();
        //                    day27 = dt.Rows[i]["day27"].ToString();
        //                    day28 = dt.Rows[i]["day28"].ToString();
        //                    day29 = dt.Rows[i]["day29"].ToString();
        //                    day30 = dt.Rows[i]["day30"].ToString();
        //                    day31 = dt.Rows[i]["day31"].ToString();

        //                    PdfPCell Cemp = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    Cemp.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    Cemp.Colspan = 0;
        //                    Secondtable.AddCell(Cemp);


        //                    //PdfPCell CAttendance = new PdfPCell(new Phrase("1"+ "   "+ "2" + "   " + "3" + "   " + "4" + "   " + "5" + "   " + "6" + "   " + "7" + "   " + "8" + "   " + "9" + "   " + "10" + "   " + "11" + "   " + "12" + "   " + "13" + "   " + "14" + "   " + "15" + "   " + "16" + "   " + "17" + "   " + "18" + "   " + "19" + "   " + "20" + "   " + "21" + "   " + "22" + "   " + "23" + "   " + "24" + "   " + "25" + "   " + "26" + "   " + "27" + "   " + "28" + "   " + "29" + "   " + "30" + "   " + "31", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    //CAttendance.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    //CAttendance.Colspan = tableCells-1;
        //                    //Secondtable.AddCell(CAttendance);


        //                    //Secondtable.AddCell(Cemp);

        //                    //PdfPCell CAttendanceval = new PdfPCell(new Phrase(day1 + "   " + day2 + "   " + day3 + "   " + day4 + "   " + day5 + "   " + day6 + "   " + day7 + "   " + day8 + "   " + day9 + "    " + day10 + "    " + day11 + "    " + day12 + "    " + day13 + "    " + day14 + "    " + day15 + "    " + day16 + "    " + day17 + "    " + day18 + "    " + day19 + "    " + day20 + "    " + day21 + "    " + day22 + "    " + day23 + "    " + day24 + "    " + day25 + "    " + day26 + "    " + day27 + "    " + day28 + "    " + day29 + "    " + day30 + "    " + day31, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    //CAttendanceval.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    //CAttendanceval.Border = 15;
        //                    //CAttendanceval.Colspan = tableCells;
        //                    //Secondtable.AddCell(CAttendanceval);


        //                    PdfPCell CAttendance = new PdfPCell(new Phrase("1     2      3      4      5      6      7      8      9       10       11       12       13       14       15       16       17      18       19       20       21       22       23       24       25       26       27       28       29       30       31", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CAttendance.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CAttendance.Colspan = tableCells - 1;
        //                    Secondtable.AddCell(CAttendance);


        //                    Secondtable.AddCell(Cemp);

        //                    PdfPCell CAttendanceval = new PdfPCell(new Phrase(day1 + "     " + day2 + "      " + day3 + "      " + day4 + "      " + day5 + "      " + day6 + "      " + day7 + "      " + day8 + "      " + day9 + "        " + day10 + "        " + day11 + "         " + day12 + "         " + day13 + "         " + day14 + "         " + day15 + "         " + day16 + "         " + day17 + "         " + day18 + "         " + day19 + "         " + day20 + "         " + day21 + "         " + day22 + "         " + day23 + "         " + day24 + "         " + day25 + "         " + day26 + "         " + day27 + "         " + day28 + "         " + day29 + "         " + day30 + "         " + day31, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CAttendanceval.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CAttendanceval.Border = 15;
        //                    CAttendanceval.Colspan = tableCells;
        //                    Secondtable.AddCell(CAttendanceval);


        //                    //PdfPCell CAttendance = new PdfPCell(new Phrase(" 1 - " + day1 + "  |  " + " 2 - " + day2 + "  |  " + " 3 - " + day3 + "  |  " + " 4 - " + day4 + "  |  " + " 5 - " + day5 + "  |  " + " 6 - " + day6 + "  |  " + " 7 - " + day7 + "  |  " + " 8 - " + day8 + "  |  " + " 9 - " + day9 + "  |  " + " 10 - " + day10 + "  |  " + " 11 - " + day11 + "  |  " + " 12 - " + day12 + "  |  " + " 13 - " + day13 + "  |  " + " 14 - " + day14 + "  |  " + " 15 - " + day15 + "  |  " + " 16 - " + day16 + "  |  " + " 17 - " + day17 + "  |  " + " 18 - " + day18 + "  |  " + " 19 - " + day19 + "  |  " + " 20 - " + day20 + "  |  " + " 21 - " + day21 + "  |  " + " 22 - " + day22 + "  |  " + " 23 - " + day23 + "  |  " + " 24 - " + day24 + "  |  " + " 25 - " + day25 + "  |  " + " 26 - " + day26 + "  |  " + " 27 - " + day27 + "  |  " + " 28 - " + day28 + "  |  " + " 29 - " + day29 + "  |  " + " 30 - " + day30 + "  |  " + " 31 - " + day31, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    //CAttendance.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    //CAttendance.Colspan = tableCells;
        //                    //Secondtable.AddCell(CAttendance);







        //                }


        //            }
        //            #endregion

        //            #region Table Total values

        //            SecondtableFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableFooter.TotalWidth = 1000f;
        //            }
        //            else
        //            {
        //                SecondtableFooter.TotalWidth = 850f;
        //            }
        //            SecondtableFooter.LockedWidth = true;
        //            float[] SecondFooterWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 39)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 38)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 37)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 2f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 5f };
        //            }
        //            #endregion

        //            SecondtableFooter.SetWidths(SecondFooterWidth);

        //            //1
        //            PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSNo.Border = 15;
        //            SecondtableFooter.AddCell(FCSNo);
        //            //2
        //            PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpId1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpId1);
        //            //3
        //            PdfPCell FCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpName1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpName1);

        //            PdfPCell FCBasicDetails1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            FCBasicDetails1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FCBasicDetails1.Border = 15;// 15;
        //            SecondtableFooter.AddCell(FCBasicDetails1);
        //            //4
        //            PdfPCell FCEmpDesgn = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpDesgn.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpDesgn);

        //            // A
        //            if (payrate != 0)
        //            {
        //                PdfPCell FCpayrate1 = new PdfPCell(new Phrase(totalpayrate.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCpayrate1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCpayrate1.Border = 15;
        //                SecondtableFooter.AddCell(FCpayrate1);
        //            }

        //            if(Dtofleaving!=0)
        //            { 
        //            PdfPCell FCdateofsusp = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCdateofsusp.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //            FCdateofsusp.Border = 15;
        //            SecondtableFooter.AddCell(FCdateofsusp);
        //            }

        //            //5
        //            if (dts != 0)
        //            {
        //                PdfPCell FCNoOfDuties = new PdfPCell(new Phrase(totalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNoOfDuties.Border = 15;
        //                SecondtableFooter.AddCell(FCNoOfDuties);
        //            }

        //            //6
        //            if (ots != 0)
        //            {
        //                PdfPCell FCots = new PdfPCell(new Phrase(totalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCots.Border = 15;
        //                SecondtableFooter.AddCell(FCots);
        //            }

        //            //7
        //            if (wos != 0)
        //            {
        //                PdfPCell FCwos = new PdfPCell(new Phrase(totalwos.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCwos.Border = 15;
        //                SecondtableFooter.AddCell(FCwos);
        //            }

        //            //8
        //            if (nhs != 0)
        //            {
        //                PdfPCell FCnhs = new PdfPCell(new Phrase(totalnhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCnhs.Border = 15;
        //                SecondtableFooter.AddCell(FCnhs);
        //            }

        //            //9
        //            if (npots != 0)
        //            {
        //                PdfPCell FCnpots = new PdfPCell(new Phrase(totalnpots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCnpots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCnpots.Border = 15;
        //                SecondtableFooter.AddCell(FCnpots);
        //            }



        //            //10
        //            if (basic != 0)
        //            {
        //                PdfPCell FCBasic1 = new PdfPCell(new Phrase(totalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCBasic1.Border = 15;
        //                SecondtableFooter.AddCell(FCBasic1);
        //            }


        //            //11
        //            if (da != 0)
        //            {
        //                PdfPCell FDa = new PdfPCell(new Phrase(totalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FDa.Border = 15;
        //                SecondtableFooter.AddCell(FDa);
        //            }


        //            //12
        //            if (hra != 0)
        //            {

        //                PdfPCell FCHRA1 = new PdfPCell(new Phrase(totalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCHRA1.Border = 15;
        //                SecondtableFooter.AddCell(FCHRA1);
        //            }

        //            //13
        //            if (cca != 0)
        //            {
        //                PdfPCell FCcca = new PdfPCell(new Phrase(totalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCcca.Border = 15;
        //                SecondtableFooter.AddCell(FCcca);
        //            }

        //            //14
        //            if (conveyance != 0)
        //            {
        //                PdfPCell FCConveyance = new PdfPCell(new Phrase(totalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCConveyance.Border = 15;
        //                SecondtableFooter.AddCell(FCConveyance);
        //            }


        //            //15
        //            if (washallowance != 0)
        //            {
        //                PdfPCell FCWa = new PdfPCell(new Phrase(totalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCWa.Border = 15;
        //                SecondtableFooter.AddCell(FCWa);
        //            }

        //            //16
        //            if (otherallowance != 0)
        //            {
        //                PdfPCell FCOa = new PdfPCell(new Phrase(totalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCOa.Border = 15;
        //                SecondtableFooter.AddCell(FCOa);
        //            }


        //            //17
        //            if (leavewages != 0)
        //            {
        //                PdfPCell FLa = new PdfPCell(new Phrase(totalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FLa.Border = 15;
        //                SecondtableFooter.AddCell(FLa);
        //            }

        //            //18
        //            if (gratuity != 0)
        //            {
        //                PdfPCell FGratuity = new PdfPCell(new Phrase(totalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FGratuity.Border = 15;
        //                SecondtableFooter.AddCell(FGratuity);
        //            }

        //            //19
        //            if (bonus != 0)
        //            {
        //                PdfPCell Fbonus = new PdfPCell(new Phrase(totalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Fbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                Fbonus.Border = 15;
        //                SecondtableFooter.AddCell(Fbonus);
        //            }

        //            //20
        //            if (nfhs != 0)
        //            {
        //                PdfPCell FNfhs = new PdfPCell(new Phrase(totalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FNfhs.Border = 15;
        //                SecondtableFooter.AddCell(FNfhs);
        //            }

        //            //21
        //            if (rc != 0)
        //            {
        //                PdfPCell FRc = new PdfPCell(new Phrase(totalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FRc.Border = 15;
        //                SecondtableFooter.AddCell(FRc);
        //            }

        //            //22
        //            if (cs != 0)
        //            {
        //                PdfPCell FCs = new PdfPCell(new Phrase(totalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCs.Border = 15;
        //                SecondtableFooter.AddCell(FCs);
        //            }

        //            if(Arrears!=0)
        //            {
        //                PdfPCell FCarrears1 = new PdfPCell(new Phrase(totalarrears.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCarrears1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //            FCarrears1.Border = 15;
        //            SecondtableFooter.AddCell(FCarrears1);
        //            }
        //            //23
        //            if (gross != 0)
        //            {
        //                PdfPCell FCGross1 = new PdfPCell(new Phrase(totalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCGross1.Border = 15;
        //                SecondtableFooter.AddCell(FCGross1);
        //            }

        //            //24
        //            if (otamt != 0)
        //            {
        //                PdfPCell FCotamt = new PdfPCell(new Phrase(totalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCotamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCotamt.Border = 15;
        //                SecondtableFooter.AddCell(FCotamt);
        //            }

        //            //25
        //            if (wosamt != 0)
        //            {
        //                PdfPCell FCEwosamt = new PdfPCell(new Phrase(totalwosamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCEwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCEwosamt.Border = 15;
        //                SecondtableFooter.AddCell(FCEwosamt);
        //            }



        //            //26
        //            if (nhsamt != 0)
        //            {
        //                PdfPCell FCnhsamt = new PdfPCell(new Phrase(totalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCnhsamt.Border = 15;
        //                SecondtableFooter.AddCell(FCnhsamt);
        //            }

        //            //27
        //            if (npotsamt != 0)
        //            {
        //                PdfPCell FCnpotsamt = new PdfPCell(new Phrase(totalnpotsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCnpotsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCnpotsamt.Border = 15;
        //                SecondtableFooter.AddCell(FCnpotsamt);
        //            }


        //            //28
        //            if (incentivs != 0)
        //            {
        //                PdfPCell FIncentivs = new PdfPCell(new Phrase(totalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FIncentivs.Border = 15;
        //                SecondtableFooter.AddCell(FIncentivs);
        //            }

        //            //28A
        //            if (totalearned != 0)
        //            {
        //                PdfPCell FCtotalearned = new PdfPCell(new Phrase(totaltotalearned.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCtotalearned.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCtotalearned.Border = 15;
        //                SecondtableFooter.AddCell(FCtotalearned);
        //            }

        //            //29
        //            if (pf != 0)
        //            {
        //                PdfPCell FCPF1 = new PdfPCell(new Phrase(totalPF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCPF1.Border = 15;
        //                SecondtableFooter.AddCell(FCPF1);
        //            }

        //            //30
        //            if (esi != 0)
        //            {
        //                PdfPCell FCESI1 = new PdfPCell(new Phrase(totalESI.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCESI1.Border = 15;
        //                SecondtableFooter.AddCell(FCESI1);
        //            }






        //            //31
        //            if (proftax != 0)
        //            {
        //                PdfPCell FCProTax1 = new PdfPCell(new Phrase(totalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCProTax1.Border = 15;
        //                SecondtableFooter.AddCell(FCProTax1);


        //            }

        //            if (TDS != 0)
        //            {
        //                PdfPCell FCTDS1 = new PdfPCell(new Phrase(totalTDS.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCTDS1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                FCTDS1.Border = 15;
        //                SecondtableFooter.AddCell(FCTDS1);
        //            }

        //            if (Soceity != 0)
        //            {


        //                PdfPCell FCSoceity1 = new PdfPCell(new Phrase(totalSoceity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCSoceity1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                FCSoceity1.Border = 15;
        //                SecondtableFooter.AddCell(FCSoceity1);
        //            }

        //            if (Mobile != 0)
        //            {


        //                PdfPCell FCmobexp1 = new PdfPCell(new Phrase(totalMobile.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCmobexp1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                FCmobexp1.Border = 15;
        //                SecondtableFooter.AddCell(FCmobexp1);
        //            }

        //            if (KLWF != 0)
        //            {


        //                PdfPCell FCKLWF1 = new PdfPCell(new Phrase(totalKLWF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCKLWF1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                FCKLWF1.Border = 15;
        //                SecondtableFooter.AddCell(FCKLWF1);
        //            }

        //            if (Loss != 0)
        //            {
        //                PdfPCell FCLoss1 = new PdfPCell(new Phrase(totalLoss.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCLoss1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                FCLoss1.Border = 15;
        //                SecondtableFooter.AddCell(FCLoss1);
        //            }

        //            //32
        //            if (salAdvDed != 0)
        //            {
        //                PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCSalAdv1.Border = 15;
        //                SecondtableFooter.AddCell(FCSalAdv1);
        //            }

        //            //33
        //            if (uniformDed != 0)
        //            {
        //                PdfPCell FCUnifDed1 = new PdfPCell(new Phrase(totalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCUnifDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCUnifDed1);
        //            }

        //            //34
        //            if (otherDed != 0)
        //            {
        //                PdfPCell FCOtherDed1 = new PdfPCell(new Phrase(totalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCOtherDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCOtherDed1);
        //            }

        //            //35
        //            if (canteenAdv != 0)
        //            {
        //                PdfPCell FCCanteended = new PdfPCell(new Phrase(totalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCCanteended.Border = 15;
        //                SecondtableFooter.AddCell(FCCanteended);
        //            }


        //            //36
        //            if (penalty != 0)
        //            {
        //                PdfPCell FPenalty = new PdfPCell(new Phrase(totalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FPenalty.Border = 15;
        //                SecondtableFooter.AddCell(FPenalty);
        //            }


        //            //37
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCTotDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //            }

        //            //38
        //            if (netpay != 0)
        //            {
        //                PdfPCell FCNetPay1 = new PdfPCell(new Phrase(totalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtableFooter.AddCell(FCNetPay1);
        //            }

        //            if (modeofpayment != 0)
        //            {
        //                PdfPCell FCmodepay1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                FCmodepay1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                FCmodepay1.Border = 15;
        //                SecondtableFooter.AddCell(FCmodepay1);
        //            }


        //            //39
        //            PdfPCell FCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtableFooter.AddCell(FCSignature1);

        //            #endregion

        //            SecondtableGrandtotalFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableGrandtotalFooter.TotalWidth = 1000f;
        //            }
        //            else
        //            {
        //                SecondtableGrandtotalFooter.TotalWidth = 850f;
        //            }
        //            SecondtableGrandtotalFooter.LockedWidth = true;
        //            float[] SecondGrandtotalFooterWidth = new float[] { };
        //            #region Table Cells

        //            if (tableCells == 39)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 38)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 37)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 2f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 5f };
        //            }
        //            #endregion
        //            SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

        //            SecondtablecheckbyFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtablecheckbyFooter.TotalWidth = 1000f;
        //            }
        //            else
        //            {
        //                SecondtablecheckbyFooter.TotalWidth = 850f;
        //            }
        //            SecondtablecheckbyFooter.LockedWidth = true;
        //            float[] SecondcheckbyFooterWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 39)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 38)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 37)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 2f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 5f };
        //            }
        //            #endregion

        //            SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);

        //            #region Table   Grand   Total  Footer

        //            //1
        //            PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSNo.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCSNo);

        //            //2
        //            PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpId1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpId1);

        //            //3
        //            PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpName1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpName1);

        //            PdfPCell GFCBasicDetails1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            GFCBasicDetails1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            GFCBasicDetails1.Border = 15;// 15;
        //            SecondtablecheckbyFooter.AddCell(GFCBasicDetails1);

        //            //4
        //            PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("Grand  Total: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpDesgn.Border = 15;
        //            //FCEmpDesgn.Colspan = 4;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);

        //            // A
        //            if (payrate != 0)
        //            {
        //                PdfPCell GFCpayrate1 = new PdfPCell(new Phrase(Grandtotalpayrate.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCpayrate1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCpayrate1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCpayrate1);
        //            }

        //            if (Dtofleaving != 0)
        //            {
        //                PdfPCell GFCdateofsusp = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCdateofsusp.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCdateofsusp.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCdateofsusp);
        //            }

        //            //5
        //            if (dts != 0)
        //            {
        //                PdfPCell GFCNoOfDuties = new PdfPCell(new Phrase(GrandtotalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNoOfDuties.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCNoOfDuties);
        //            }

        //            //6
        //            if (ots != 0)
        //            {
        //                PdfPCell GFCOts = new PdfPCell(new Phrase(Grandtotalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCOts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOts.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOts);
        //            }

        //            //7
        //            if (wos != 0)
        //            {
        //                PdfPCell GFCWos = new PdfPCell(new Phrase(Grandtotalwos.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCWos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCWos.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCWos);
        //            }

        //            //8
        //            if (nhs != 0)
        //            {
        //                PdfPCell GFCnhs = new PdfPCell(new Phrase(Grandtotalnhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCnhs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCnhs);
        //            }

        //            //9
        //            if (npots != 0)
        //            {
        //                PdfPCell GFCnpots = new PdfPCell(new Phrase(Grandtotalnpots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCnpots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCnpots.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCnpots);
        //            }





        //            //10
        //            if (basic != 0)
        //            {
        //                PdfPCell GFCBasic1 = new PdfPCell(new Phrase(GrandtotalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCBasic1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCBasic1);
        //            }


        //            //11
        //            if (da != 0)
        //            {
        //                PdfPCell GFDa = new PdfPCell(new Phrase(GrandtotalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFDa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFDa);
        //            }


        //            //12
        //            if (hra != 0)
        //            {
        //                PdfPCell GFCHRA1 = new PdfPCell(new Phrase(GrandtotalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCHRA1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCHRA1);
        //            }

        //            //13
        //            if (cca != 0)
        //            {
        //                PdfPCell GFCcca = new PdfPCell(new Phrase(GrandtotalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCcca.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCcca);
        //            }

        //            //14
        //            if (conveyance != 0)
        //            {
        //                PdfPCell GFCConveyance = new PdfPCell(new Phrase(GrandtotalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCConveyance.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCConveyance);
        //            }


        //            //15
        //            if (washallowance != 0)
        //            {
        //                PdfPCell GFCWa = new PdfPCell(new Phrase(GrandtotalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCWa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCWa);
        //            }

        //            //16
        //            if (otherallowance != 0)
        //            {
        //                PdfPCell GFCOa = new PdfPCell(new Phrase(GrandtotalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOa);
        //            }

        //            //17
        //            if (leavewages != 0)
        //            {
        //                PdfPCell GFLa = new PdfPCell(new Phrase(GrandtotalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFLa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFLa);
        //            }

        //            //18
        //            if (gratuity != 0)
        //            {
        //                PdfPCell GFGratuity = new PdfPCell(new Phrase(GrandtotalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFGratuity.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFGratuity);
        //            }

        //            //19
        //            if (bonus != 0)
        //            {
        //                PdfPCell GFbonus = new PdfPCell(new Phrase(Grandtotalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFbonus.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFbonus);
        //            }


        //            //20
        //            if (nfhs != 0)
        //            {
        //                PdfPCell GFNfhs = new PdfPCell(new Phrase(GrandtotalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFNfhs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFNfhs);
        //            }

        //            //21
        //            if (rc != 0)
        //            {
        //                PdfPCell GFRc = new PdfPCell(new Phrase(GrandtotalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFRc.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFRc);
        //            }

        //            //22
        //            if (cs != 0)
        //            {
        //                PdfPCell GFCs = new PdfPCell(new Phrase(GrandtotalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCs);
        //            }

        //            if (Arrears != 0)
        //            {
        //                PdfPCell GFCarrears1 = new PdfPCell(new Phrase(Grandtotalarrears.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCarrears1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCarrears1.Border = 15;
        //                SecondtableFooter.AddCell(GFCarrears1);
        //            }

        //            //23
        //            if (gross != 0)
        //            {
        //                PdfPCell GFCGross1 = new PdfPCell(new Phrase(GrandtotalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCGross1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCGross1);
        //            }

        //            //24
        //            if (otamt != 0)
        //            {
        //                PdfPCell GFCOtamt = new PdfPCell(new Phrase(Grandtotalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCOtamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOtamt.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOtamt);
        //            }

        //            //25
        //            if (wosamt != 0)
        //            {
        //                PdfPCell GFCwosamt = new PdfPCell(new Phrase(Grandtotalwosamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCwosamt.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCwosamt);
        //            }



        //            //26
        //            if (nhsamt != 0)
        //            {
        //                PdfPCell GFCNhsamt = new PdfPCell(new Phrase(Grandtotalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNhsamt.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCNhsamt);
        //            }

        //            //27
        //            if (npotsamt != 0)
        //            {
        //                PdfPCell GFCNpotsamt = new PdfPCell(new Phrase(Grandtotalnpotsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNpotsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNpotsamt.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCNpotsamt);
        //            }


        //            //28
        //            if (incentivs != 0)
        //            {
        //                PdfPCell GFIncentivs = new PdfPCell(new Phrase(GrandtotalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFIncentivs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFIncentivs);
        //            }

        //            //28A
        //            if (totalearned != 0)
        //            {
        //                PdfPCell GFCtotalearned = new PdfPCell(new Phrase(Grandtotaltotalearned.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCtotalearned.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCtotalearned.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCtotalearned);
        //            }


        //            //29
        //            if (pf != 0)
        //            {
        //                PdfPCell GFCPF1 = new PdfPCell(new Phrase(GrandtotalPF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCPF1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCPF1);
        //            }

        //            //30
        //            if (esi != 0)
        //            {
        //                PdfPCell GFCESI1 = new PdfPCell(new Phrase(GrandtotalESI.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCESI1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCESI1);
        //            }





        //            //31
        //            if (proftax != 0)
        //            {
        //                PdfPCell GFCProTax1 = new PdfPCell(new Phrase(GrandtotalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCProTax1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCProTax1);
        //            }

        //            if (TDS != 0)
        //            {
        //                PdfPCell GFCTDS1 = new PdfPCell(new Phrase(GrandtotalTDS.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCTDS1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                GFCTDS1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCTDS1);
        //            }

        //            if (Soceity != 0)
        //            {


        //                PdfPCell GFCSoceity1 = new PdfPCell(new Phrase(GrandtotalSoceity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCSoceity1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                GFCSoceity1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCSoceity1);
        //            }

        //            if (Mobile != 0)
        //            {


        //                PdfPCell GFCmobexp1 = new PdfPCell(new Phrase(GrandtotalMobile.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCmobexp1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                GFCmobexp1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCmobexp1);
        //            }

        //            if (KLWF != 0)
        //            {


        //                PdfPCell GFCKLWF1 = new PdfPCell(new Phrase(GrandtotalKLWF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCKLWF1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                GFCKLWF1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCKLWF1);
        //            }

        //            if (Loss != 0)
        //            {
        //                PdfPCell GFCLoss1 = new PdfPCell(new Phrase(GrandtotalLoss.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCLoss1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                GFCLoss1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCLoss1);
        //            }

        //            //32
        //            if (salAdvDed != 0)
        //            {
        //                PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCSalAdv1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
        //            }

        //            //33
        //            if (uniformDed != 0)
        //            {
        //                PdfPCell GFCUnifDed1 = new PdfPCell(new Phrase(GrandtotalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCUnifDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCUnifDed1);
        //            }

        //            //34
        //            if (otherDed != 0)
        //            {
        //                PdfPCell GFCOtherDed1 = new PdfPCell(new Phrase(GrandtotalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOtherDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOtherDed1);
        //            }


        //            //35
        //            if (canteenAdv != 0)
        //            {
        //                PdfPCell GFCCanteended = new PdfPCell(new Phrase(GrandtotalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCCanteended.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCCanteended);
        //            }

        //            //36
        //            if (penalty != 0)
        //            {
        //                PdfPCell GFPenalty = new PdfPCell(new Phrase(GrandtotalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFPenalty.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFPenalty);
        //            }

        //            //37
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(GrandtotalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCTotDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //            }

        //            //38
        //            if (netpay != 0)
        //            {
        //                PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(GrandtotalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtablecheckbyFooter.AddCell(GFCNetPay1);
        //            }

        //            if (modeofpayment != 0)
        //            {
        //                PdfPCell GFCmodepay1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                GFCmodepay1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                GFCmodepay1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCmodepay1);
        //            }

        //            //39
        //            PdfPCell GFCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtablecheckbyFooter.AddCell(GFCSignature1);
        //            #endregion


        //            #region   Footer Headings
        //            //1
        //            PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHCheckedbybr1.Border = 0;
        //            FHCheckedbybr1.Rowspan = 0;
        //            FHCheckedbybr1.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            //2
        //            PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHApprovedbr2.Border = 0;
        //            FHApprovedbr2.Colspan = tableCells;

        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


        //            //1
        //            PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedby.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FHCheckedby.Border = 0;
        //            FHCheckedby.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedby);
        //            //2
        //            PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Gross  Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedBy.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //            FHApprovedBy.Border = 0;
        //            FHApprovedBy.PaddingTop = -5;
        //            FHApprovedBy.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHApprovedBy);



        //            #endregion

        //            document.Add(Secondtable);

        //            if (nextpagerecordscount == targetpagerecors)
        //            {
        //                targetpagerecors = secondpagerecords;
        //                //document.Add(SecondtableFooter);
        //                document.NewPage();
        //                nextpagerecordscount = 0;
        //                #region  Zero variables
        //                totaltotalearned = 0;
        //                totalNetpay = 0;
        //                totalDuties = 0;
        //                totalpayrate = 0;
        //                totalBasic = 0;
        //                totalDA = 0;
        //                totalHRA = 0;
        //                totalCCA = 0;
        //                totalConveyance = 0;
        //                totalWA = 0;
        //                totalOA = 0;
        //                totalGross = 0;
        //                totalPF = 0;
        //                totalESI = 0;
        //                totalProfTax = 0;
        //                totalDed = 0;
        //                totalSalAdv = 0;
        //                totalUniforDed = 0;
        //                totalCanteenAdv = 0;
        //                totalOtherdedn = 0;
        //                totalbonus = 0;
        //                totalLw = 0;
        //                totalGratuity = 0;
        //                totalNfhs = 0;
        //                totalRc = 0;
        //                totalCs = 0;
        //                totalIncentivs = 0;
        //                totalPenalty = 0;

        //                totalots = 0;
        //                totalotamt = 0;
        //                totalwos = 0;
        //                totalwosamt = 0;
        //                totalnhs = 0;
        //                totalnhsamt = 0;

        //                #endregion
        //            }
        //        }

        //        if (nextpagerecordscount >= 0)
        //        {
        //            //document.Add(SecondtableFooter);
        //            document.Add(SecondtableGrandtotalFooter);
        //            document.Add(SecondtablecheckbyFooter);
        //        }
        //        document.Close();
        //        if (nextpagehasPages)
        //        {

        //            Response.ContentType = "application/pdf";
        //            Response.AddHeader("content-disposition", "attachment;filename=Dutieswithots.pdf");
        //            Response.Buffer = true;
        //            Response.Clear();
        //            Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        //            Response.OutputStream.Flush();
        //            Response.End();
        //        }
        //    }
        //}

        //protected void btnall_Click(object sender, EventArgs e)
        //{
        //    int titleofdocumentindex = 0;
        //    if (ddlClients.SelectedIndex <= 0)
        //    {
        //        ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
        //        return;
        //    }

        //    int payMonth = GetMonth(ddlmonth.SelectedValue);
        //    int month = GetMonthAndYear();

        //    string selectmonth = string.Empty;
        //    string SelectmonthWithbankacno = string.Empty;
        //    string SelectmonthWithoutbankacno = string.Empty;
        //    DataTable dt = null;


        //    var clientid = ddlClients.SelectedValue;
        //    var Paysheetoption = ddlpaymenttype.SelectedIndex;
        //    var Noofattendance = ddlnoofattendance.SelectedIndex;
        //    var pfesioptions = ddl_Pf_Esi_Options.SelectedIndex;

        //    var SPName = "";
        //    Hashtable HTPaysheet = new Hashtable();
        //    SPName = "IMEPaysheetpdfs";
        //    HTPaysheet.Add("@ClientId", clientid);
        //    HTPaysheet.Add("@month", month);
        //    HTPaysheet.Add("@PaymentOption", Paysheetoption);
        //    HTPaysheet.Add("@Attendance", Noofattendance);
        //    HTPaysheet.Add("@PfesiOptions", pfesioptions);
        //    dt = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTPaysheet);

        //    MemoryStream ms = new MemoryStream();
        //    if (dt.Rows.Count > 0)
        //    {
        //        Document document = new Document(PageSize.LEGAL.Rotate());
        //        PdfWriter writer = PdfWriter.GetInstance(document, ms);
        //        document.Open();
        //        document.AddTitle("FaMS");
        //        document.AddAuthor("WebWonders");
        //        document.AddSubject("Wage Sheet");
        //        document.AddKeywords("Keyword1, keyword2, …");//
        //        float forConvert;
        //        string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
        //        DataTable compInfo = SqlHelper.Instance.GetTableByQuery(strQry);
        //        string companyName1 = "Your Company Name";
        //        string companyAddress = "Your Company Address";
        //        if (compInfo.Rows.Count > 0)
        //        {
        //            companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
        //            companyAddress = compInfo.Rows[0]["Address"].ToString();
        //        }

        //        #region Variables for table cells counting

        //        int dts = 0;
        //        int payrate = 0;
        //        int basic = 0;
        //        int da = 0;
        //        int hra = 0;
        //        int cca = 0;
        //        int conveyance = 0;
        //        int washallowance = 0;
        //        int otherallowance = 0;
        //        int leavewages = 0;
        //        int gratuity = 0;
        //        int bonus = 0;
        //        int nfhs = 0;
        //        int rc = 0;
        //        int cs = 0;
        //        int gross = 0;
        //        int incentivs = 0;
        //        int pf = 0;
        //        int esi = 0;
        //        int proftax = 0;
        //        int salAdvDed = 0;
        //        int uniformDed = 0;
        //        int otherDed = 0;
        //        int canteenAdv = 0;
        //        int penalty = 0;
        //        int totalDeductions = 0;
        //        int netpay = 0;

        //        int ots = 0;
        //        int otamt = 0;
        //        int wos = 0;
        //        int wosamt = 0;
        //        int nhs = 0;
        //        int nhsamt = 0;

        //        int npots = 0;
        //        int npotsamt = 0;
        //        int totalearned = 0;


        //        float dts1 = 0;
        //        float payrate1 = 0;
        //        float basic1 = 0;
        //        float da1 = 0;
        //        float hra1 = 0;
        //        float cca1 = 0;
        //        float conveyance1 = 0;
        //        float washallowance1 = 0;
        //        float otherallowance1 = 0;
        //        float leavewages1 = 0;
        //        float gratuity1 = 0;
        //        float bonus1 = 0;
        //        float nfhs1 = 0;
        //        float rc1 = 0;
        //        float cs1 = 0;
        //        float gross1 = 0;
        //        float incentivs1 = 0;
        //        float pf1 = 0;
        //        float esi1 = 0;
        //        float proftax1 = 0;
        //        float salAdvDed1 = 0;
        //        float uniformDed1 = 0;
        //        float otherDed1 = 0;
        //        float canteenAdv1 = 0;
        //        float penalty1 = 0;
        //        float totalDeductions1 = 0;
        //        float netpay1 = 0;
        //        float totalearned1 = 0;

        //        float ots1 = 0;
        //        float otamt1 = 0;
        //        float wos1 = 0;
        //        float wosamt1 = 0;
        //        float nhs1 = 0;
        //        float nhsamt1 = 0;
        //        float npots1 = 0;
        //        float npotsamt1 = 0;




        //        #endregion


        //        #region Data for counting tablecells

        //        for (int i = 0; i < dt.Rows.Count; i++)
        //        {
        //            dts1 = float.Parse(dt.Rows[i]["NoOfDuties"].ToString());
        //            if (dts1 != 0)
        //            {
        //                dts1 += 1;
        //                if (dts1 > 0)
        //                {
        //                    dts = 1;
        //                }
        //            }

        //            payrate1 = float.Parse(dt.Rows[i]["tempgross"].ToString());
        //            if (payrate1 != 0)
        //            {
        //                payrate1 += 1;
        //                if (payrate1 > 0)
        //                {
        //                    payrate = 1;
        //                }
        //            }

        //            basic1 = float.Parse(dt.Rows[i]["basic"].ToString());
        //            if (basic1 != 0)
        //            {
        //                basic1 += 1;
        //                if (basic1 > 0)
        //                {
        //                    basic = 1;
        //                }
        //            }
        //            da1 = float.Parse(dt.Rows[i]["da"].ToString());
        //            if (da1 != 0)
        //            {
        //                da1 += 1;
        //                if (da1 > 0)
        //                {
        //                    da = 1;
        //                }
        //            }
        //            hra1 = float.Parse(dt.Rows[i]["hra"].ToString());
        //            if (hra1 != 0)
        //            {
        //                hra1 += 1;
        //                if (hra1 > 0)
        //                {
        //                    hra = 1;
        //                }
        //            }
        //            cca1 = float.Parse(dt.Rows[i]["cca"].ToString());
        //            if (cca1 != 0)
        //            {
        //                cca1 += 1;
        //                if (cca1 > 0)
        //                {
        //                    cca = 1;
        //                }
        //            }
        //            conveyance1 = float.Parse(dt.Rows[i]["Conveyance"].ToString());
        //            if (conveyance1 != 0)
        //            {
        //                conveyance1 += 1;
        //                if (conveyance1 > 0)
        //                {
        //                    conveyance = 1;
        //                }
        //            }

        //            washallowance1 = float.Parse(dt.Rows[i]["washallowance"].ToString());
        //            if (washallowance1 != 0)
        //            {
        //                washallowance1 += 1;
        //                if (washallowance1 > 0)
        //                {
        //                    washallowance = 1;
        //                }
        //            }
        //            otherallowance1 = float.Parse(dt.Rows[i]["otherallowance"].ToString());
        //            if (otherallowance1 != 0)
        //            {
        //                otherallowance1 += 1;
        //                if (otherallowance1 > 0)
        //                {
        //                    otherallowance = 1;
        //                }
        //            }
        //            leavewages1 = float.Parse(dt.Rows[i]["Leavewages"].ToString());
        //            if (leavewages1 != 0)
        //            {
        //                leavewages1 += 1;
        //                if (leavewages1 > 0)
        //                {
        //                    leavewages = 1;
        //                }
        //            }
        //            gratuity1 = float.Parse(dt.Rows[i]["gratuity"].ToString());
        //            if (gratuity1 != 0)
        //            {
        //                gratuity1 += 1;
        //                if (gratuity1 > 0)
        //                {
        //                    gratuity = 1;
        //                }
        //            }
        //            bonus1 = float.Parse(dt.Rows[i]["bonus"].ToString());
        //            if (bonus1 != 0)
        //            {
        //                bonus1 += 1;
        //                if (bonus1 > 0)
        //                {
        //                    bonus = 1;
        //                }
        //            }

        //            nfhs1 = float.Parse(dt.Rows[i]["nfhs"].ToString());
        //            if (nfhs1 != 0)
        //            {
        //                nfhs1 += 1;
        //                if (nfhs1 > 0)
        //                {
        //                    nfhs = 1;
        //                }
        //            }
        //            rc1 = float.Parse(dt.Rows[i]["rc"].ToString());
        //            if (rc1 != 0)
        //            {
        //                rc1 += 1;
        //                if (rc1 > 0)
        //                {
        //                    rc = 1;
        //                }
        //            }

        //            cs1 = float.Parse(dt.Rows[i]["cs"].ToString());
        //            if (cs1 != 0)
        //            {
        //                cs1 += 1;
        //                if (cs1 > 0)
        //                {
        //                    cs = 1;
        //                }
        //            }
        //            gross1 = float.Parse(dt.Rows[i]["gross"].ToString());
        //            if (gross1 != 0)
        //            {
        //                gross1 += 1;
        //                if (gross1 > 0)
        //                {
        //                    gross = 1;
        //                }
        //            }

        //            incentivs1 = float.Parse(dt.Rows[i]["incentivs"].ToString());
        //            if (incentivs1 != 0)
        //            {
        //                incentivs1 += 1;
        //                if (incentivs1 > 0)
        //                {
        //                    incentivs = 1;
        //                }
        //            }

        //            totalearned1 = float.Parse(dt.Rows[i]["TotalEarned"].ToString());
        //            if (totalearned1 != 0)
        //            {
        //                totalearned1 += 1;
        //                if (totalearned1 > 0)
        //                {
        //                    totalearned = 1;
        //                }
        //            }
        //            pf1 = float.Parse(dt.Rows[i]["Pf"].ToString());
        //            if (pf1 != 0)
        //            {
        //                pf1 += 1;
        //                if (pf1 > 0)
        //                {
        //                    pf = 1;
        //                }
        //            }
        //            esi1 = float.Parse(dt.Rows[i]["Esi"].ToString());
        //            if (esi1 != 0)
        //            {
        //                esi1 += 1;
        //                if (esi1 > 0)
        //                {
        //                    esi = 1;
        //                }
        //            }
        //            proftax1 = float.Parse(dt.Rows[i]["proftax"].ToString());
        //            if (proftax1 != 0)
        //            {
        //                proftax1 += 1;
        //                if (proftax1 > 0)
        //                {
        //                    proftax = 1;
        //                }
        //            }
        //            salAdvDed1 = float.Parse(dt.Rows[i]["salAdvDed"].ToString());
        //            if (salAdvDed1 != 0)
        //            {
        //                salAdvDed1 += 1;
        //                if (salAdvDed1 > 0)
        //                {
        //                    salAdvDed = 1;
        //                }
        //            }
        //            uniformDed1 = float.Parse(dt.Rows[i]["uniformDed"].ToString());
        //            if (uniformDed1 != 0)
        //            {
        //                uniformDed1 += 1;
        //                if (uniformDed1 > 0)
        //                {
        //                    uniformDed = 1;
        //                }
        //            }
        //            otherDed1 = float.Parse(dt.Rows[i]["otherDed"].ToString());
        //            if (otherDed1 != 0)
        //            {
        //                otherDed1 += 1;
        //                if (otherDed1 > 0)
        //                {
        //                    otherDed = 1;
        //                }
        //            }
        //            canteenAdv1 = float.Parse(dt.Rows[i]["canteenAdv"].ToString());
        //            if (canteenAdv1 != 0)
        //            {
        //                canteenAdv1 += 1;
        //                if (canteenAdv1 > 0)
        //                {
        //                    canteenAdv = 1;
        //                }
        //            }

        //            penalty1 = float.Parse(dt.Rows[i]["penalty"].ToString());
        //            if (penalty1 != 0)
        //            {
        //                penalty1 += 1;
        //                if (penalty1 > 0)
        //                {
        //                    penalty = 1;
        //                }
        //            }
        //            totalDeductions1 = float.Parse(dt.Rows[i]["Totaldeduct"].ToString());
        //            if (totalDeductions1 != 0)
        //            {
        //                totalDeductions1 += 1;
        //                if (totalDeductions1 > 0)
        //                {
        //                    totalDeductions = 1;
        //                }
        //            }
        //            netpay1 = float.Parse(dt.Rows[i]["NetAmount"].ToString());
        //            if (netpay1 != 0)
        //            {
        //                netpay1 += 1;
        //                if (netpay1 > 0)
        //                {
        //                    netpay = 1;
        //                }
        //            }

        //            ots1 = float.Parse(dt.Rows[i]["Duties"].ToString());
        //            if (ots1 != 0)
        //            {
        //                ots1 += 1;
        //                if (ots1 > 0)
        //                {
        //                    ots = 1;
        //                }
        //            }

        //            otamt1 = float.Parse(dt.Rows[i]["Amount"].ToString());
        //            if (otamt1 != 0)
        //            {
        //                otamt1 += 1;
        //                if (otamt1 > 0)
        //                {
        //                    otamt = 1;
        //                }
        //            }

        //            wos1 = float.Parse(dt.Rows[i]["Wo"].ToString());
        //            if (wos1 != 0)
        //            {
        //                wos1 += 1;
        //                if (wos1 > 0)
        //                {
        //                    wos = 1;
        //                }
        //            }

        //            wosamt1 = float.Parse(dt.Rows[i]["woamt"].ToString());
        //            if (wosamt1 != 0)
        //            {
        //                wosamt1 += 1;
        //                if (wosamt1 > 0)
        //                {
        //                    wosamt = 1;
        //                }
        //            }

        //            nhs1 = float.Parse(dt.Rows[i]["nhs"].ToString());
        //            if (nhs1 != 0)
        //            {
        //                nhs1 += 1;
        //                if (nhs1 > 0)
        //                {
        //                    nhs = 1;
        //                }
        //            }
        //            nhsamt1 = float.Parse(dt.Rows[i]["nhsamt"].ToString());
        //            if (nhsamt1 != 0)
        //            {
        //                nhsamt1 += 1;
        //                if (nhsamt1 > 0)
        //                {
        //                    nhsamt = 1;
        //                }
        //            }

        //            npots1 = float.Parse(dt.Rows[i]["npots"].ToString());
        //            if (npots1 != 0)
        //            {
        //                npots1 += 1;
        //                if (npots1 > 0)
        //                {
        //                    npots = 1;
        //                }
        //            }
        //            npotsamt1 = float.Parse(dt.Rows[i]["npotsamt"].ToString());
        //            if (npotsamt1 != 0)
        //            {
        //                npotsamt1 += 1;
        //                if (npotsamt1 > 0)
        //                {
        //                    npotsamt = 1;
        //                }
        //            }

        //        }

        //        #endregion

        //        int sno = 1;
        //        int empid = 1;
        //        int empname = 1;
        //        int design = 1;
        //        int bankacno = 1;
        //        int EmpEpfNo = 1;
        //        int EmpEsiNo = 1;

        //        int tableCells = dts + basic + da + hra + cca + conveyance + washallowance + otherallowance + leavewages +
        //                        gratuity + bonus + nfhs + rc + cs + gross + incentivs + pf + esi + proftax +
        //                        salAdvDed + uniformDed + otherDed + canteenAdv + penalty + totalDeductions + netpay + sno +
        //                        empid + empname + design + bankacno + ots + otamt + wos + wosamt + nhs + nhsamt + npots + npotsamt + totalearned + payrate;




        //        #region variables for total

        //        float totalDuties = 0;
        //        float totalpayrate = 0;
        //        float totalBasic = 0;
        //        float totalDA = 0;
        //        float totalHRA = 0;
        //        float totalCCA = 0;
        //        float totalConveyance = 0;
        //        float totalWA = 0;
        //        float totalOA = 0;
        //        float totalLw = 0;
        //        float totalGratuity = 0;
        //        float totalbonus = 0;
        //        float totalNfhs = 0;
        //        float totalRc = 0;
        //        float totalCs = 0;
        //        float totalGross = 0;
        //        float totalIncentivs = 0;
        //        float totalPF = 0;
        //        float totalESI = 0;
        //        float totalProfTax = 0;
        //        float totalSalAdv = 0;
        //        float totalUniforDed = 0;
        //        float totalOtherdedn = 0;
        //        float totalCanteenAdv = 0;
        //        float totalPenalty = 0;
        //        float totalDed = 0;
        //        float totalNetpay = 0;

        //        float totalots = 0;
        //        float totalotamt = 0;
        //        float totalwos = 0;
        //        float totalwosamt = 0;
        //        float totalnhs = 0;
        //        float totalnhsamt = 0;

        //        float totalnpots = 0;
        //        float totalnpotsamt = 0;
        //        float totaltotalearned = 0;


        //        #endregion

        //        #region variables for  Grand  total


        //        float GrandtotalDuties = 0;
        //        float GrandtotalBasic = 0;
        //        float Grandtotalpayrate = 0;
        //        float GrandtotalDA = 0;
        //        float GrandtotalHRA = 0;
        //        float GrandtotalCCA = 0;
        //        float GrandtotalConveyance = 0;
        //        float GrandtotalWA = 0;
        //        float GrandtotalOA = 0;
        //        float GrandtotalLw = 0;
        //        float GrandtotalGratuity = 0;
        //        float Grandtotalbonus = 0;
        //        float GrandtotalNfhs = 0;
        //        float GrandtotalRc = 0;
        //        float GrandtotalCs = 0;
        //        float GrandtotalGross = 0;
        //        float GrandtotalIncentivs = 0;
        //        float GrandtotalPF = 0;
        //        float GrandtotalESI = 0;
        //        float GrandtotalProfTax = 0;
        //        float GrandtotalSalAdv = 0;
        //        float GrandtotalUniforDed = 0;
        //        float GrandtotalOtherdedn = 0;
        //        float GrandtotalCanteenAdv = 0;
        //        float GrandtotalPenalty = 0;
        //        float GrandtotalDed = 0;
        //        float GrandtotalNetpay = 0;

        //        float Grandtotalots = 0;
        //        float Grandtotalotamt = 0;
        //        float Grandtotalwos = 0;
        //        float Grandtotalwosamt = 0;
        //        float Grandtotalnhs = 0;
        //        float Grandtotalnhsamt = 0;

        //        float Grandtotalnpots = 0;
        //        float Grandtotalnpotsamt = 0;
        //        float Grandtotaltotalearned = 0;

        //        #endregion

        //        int nextpagerecordscount = 0;
        //        int targetpagerecors = 7;
        //        int secondpagerecords = targetpagerecors + 2;
        //        bool nextpagehasPages = false;
        //        int j = 0;
        //        PdfPTable SecondtablecheckbyFooter = null;
        //        PdfPTable SecondtableFooter = null;
        //        PdfPTable SecondtableGrandtotalFooter = null;
        //        for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
        //        {
        //            nextpagehasPages = true;


        //            #region Titles of Document
        //            PdfPTable Maintable = new PdfPTable(27);
        //            if (tableCells > 20)
        //            {
        //                Maintable.TotalWidth = 980f;
        //            }
        //            else
        //            {
        //                Maintable.TotalWidth = 850f;
        //            }
        //            Maintable.LockedWidth = true;
        //            float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };


        //            Maintable.SetWidths(width);
        //            uint FONT_SIZE = 10;

        //            //Company Name & wage act details

        //            PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
        //            cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            cellemp.Colspan = 27;
        //            cellemp.Border = 0;

        //            PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
        //            Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            Heading.Colspan = 27;
        //            Heading.Border = 0;
        //            Maintable.AddCell(Heading);


        //            PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 15, Font.BOLD, BaseColor.BLACK)));
        //            actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            actDetails.Colspan = 27;
        //            actDetails.Border = 0;// 15;
        //            Maintable.AddCell(actDetails);

        //            Maintable.AddCell(cellemp);
        //            #endregion


        //            #region Sub Headings

        //            PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 20, Font.BOLD, BaseColor.BLACK)));
        //            companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            companyName.Colspan = 27;
        //            companyName.Border = 0;// 15;
        //            Maintable.AddCell(companyName);

        //            PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        //            paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            paySheet.Colspan = 27;
        //            paySheet.Border = 0;// 15;
        //            Maintable.AddCell(paySheet);

        //            PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CClient.Colspan = 3;
        //            CClient.Border = 0;// 15;
        //            Maintable.AddCell(CClient);

        //            PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlcname.SelectedItem, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CClientName.Colspan = 10;
        //            CClientName.Border = 0;// 15;
        //            Maintable.AddCell(CClientName);

        //            PdfPCell CDates = new PdfPCell(new Phrase("Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //            CDates.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CDates.Colspan = 8;
        //            CDates.Border = 0;// 15;
        //            Maintable.AddCell(CDates);

        //            //PdfPCell CPaySheetDate = new PdfPCell(new Phrase("Pay Sheet Date :  " + DateTime.Now.Date.ToString("dd/MM/yyyy"), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            PdfPCell CPaySheetDate = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CPaySheetDate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CPaySheetDate.Colspan = 1;
        //            CPaySheetDate.Border = 0;// 15;
        //            Maintable.AddCell(CPaySheetDate);

        //            PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :   " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
        //            CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            CPayMonth.Colspan = 7;
        //            CPayMonth.Border = 0;// 15;
        //            Maintable.AddCell(CPayMonth);

        //            Maintable.AddCell(cellemp);
        //            //document.Add(Maintable);

        //            if (titleofdocumentindex == 0)
        //            {
        //                document.Add(Maintable);
        //                titleofdocumentindex = 1;
        //            }

        //            #endregion


        //            #region Table Headings

        //            PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableHeadings.TotalWidth = 1000f;
        //            }
        //            else
        //            {
        //                SecondtableHeadings.TotalWidth = 850f;
        //            }
        //            SecondtableHeadings.LockedWidth = true;
        //            float[] SecondHeadingsWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 42)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 41)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 40)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 39)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 38)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 37)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 2f, 5f };
        //            }
        //            #endregion

        //            SecondtableHeadings.SetWidths(SecondHeadingsWidth);

        //            //Cell Headings
        //            //1
        //            PdfPCell sNo = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            //sNo.Colspan = 1;
        //            sNo.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(sNo);

        //            //2
        //            PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpId.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpId);

        //            //3
        //            PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CEmpName.Border = 15;// 15;
        //            SecondtableHeadings.AddCell(CEmpName);

        //            //4
        //            PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CDesgn.Border = 15;
        //            SecondtableHeadings.AddCell(CDesgn);

        //            //5
        //            if (dts != 0)
        //            {
        //                PdfPCell CDuties = new PdfPCell(new Phrase("Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CDuties.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CDuties.Border = 15;
        //                SecondtableHeadings.AddCell(CDuties);
        //            }

        //            //6
        //            if (ots != 0)
        //            {
        //                PdfPCell Cots = new PdfPCell(new Phrase("OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cots.Border = 15;
        //                SecondtableHeadings.AddCell(Cots);
        //            }

        //            //7
        //            if (wos != 0)
        //            {
        //                PdfPCell CWos = new PdfPCell(new Phrase("WOs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CWos.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CWos.Border = 15;
        //                SecondtableHeadings.AddCell(CWos);
        //            }

        //            //8
        //            if (nhs != 0)
        //            {
        //                PdfPCell CNHs = new PdfPCell(new Phrase("NHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNHs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNHs.Border = 15;
        //                SecondtableHeadings.AddCell(CNHs);
        //            }

        //            //9
        //            if (npots != 0)
        //            {
        //                PdfPCell CNpots = new PdfPCell(new Phrase("NPOTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNpots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNpots.Border = 15;
        //                SecondtableHeadings.AddCell(CNpots);
        //            }

        //            //9 A
        //            if (payrate != 0)
        //            {
        //                PdfPCell Cpayrate = new PdfPCell(new Phrase("Pay Rate", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cpayrate.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cpayrate.Border = 15;
        //                SecondtableHeadings.AddCell(Cpayrate);
        //            }

        //            //10
        //            if (basic != 0)
        //            {
        //                PdfPCell CBasic = new PdfPCell(new Phrase("Basic", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CBasic.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CBasic.Border = 15;
        //                SecondtableHeadings.AddCell(CBasic);
        //            }

        //            //11
        //            if (da != 0)
        //            {
        //                PdfPCell CDa = new PdfPCell(new Phrase("DA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CDa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CDa.Border = 15;
        //                SecondtableHeadings.AddCell(CDa);
        //            }

        //            //12
        //            if (hra != 0)
        //            {
        //                PdfPCell CHRa = new PdfPCell(new Phrase("HRA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CHRa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CHRa.Border = 15;
        //                SecondtableHeadings.AddCell(CHRa);
        //            }

        //            //13
        //            if (cca != 0)
        //            {
        //                PdfPCell CCca = new PdfPCell(new Phrase("CCA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CCca.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CCca.Border = 15;
        //                SecondtableHeadings.AddCell(CCca);
        //            }

        //            //14
        //            if (conveyance != 0)
        //            {
        //                PdfPCell Cconveyance = new PdfPCell(new Phrase("Conv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cconveyance.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Cconveyance.Border = 15;
        //                SecondtableHeadings.AddCell(Cconveyance);
        //            }

        //            //15
        //            if (washallowance != 0)
        //            {
        //                PdfPCell Cwa = new PdfPCell(new Phrase("WA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Cwa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                Cwa.Border = 15;
        //                SecondtableHeadings.AddCell(Cwa);
        //            }

        //            //16
        //            if (otherallowance != 0)
        //            {
        //                PdfPCell COa = new PdfPCell(new Phrase("OA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COa.Border = 15;
        //                SecondtableHeadings.AddCell(COa);
        //            }

        //            //17
        //            if (leavewages != 0)
        //            {
        //                PdfPCell CLa = new PdfPCell(new Phrase("LA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CLa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CLa.Border = 15;
        //                SecondtableHeadings.AddCell(CLa);
        //            }

        //            //18
        //            if (gratuity != 0)
        //            {
        //                PdfPCell CGratuity = new PdfPCell(new Phrase("Gratuity", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CGratuity.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CGratuity.Border = 15;
        //                SecondtableHeadings.AddCell(CGratuity);
        //            }

        //            //19
        //            if (bonus != 0)
        //            {
        //                PdfPCell CBonus = new PdfPCell(new Phrase("Bonus", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CBonus.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CBonus.Border = 15;
        //                SecondtableHeadings.AddCell(CBonus);
        //            }




        //            //20
        //            if (nfhs != 0)
        //            {
        //                PdfPCell CNfhs = new PdfPCell(new Phrase("NFHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNfhs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNfhs.Border = 15;
        //                SecondtableHeadings.AddCell(CNfhs);
        //            }

        //            //21
        //            if (rc != 0)
        //            {
        //                PdfPCell CRc = new PdfPCell(new Phrase("R.C", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CRc.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CRc.Border = 15;
        //                SecondtableHeadings.AddCell(CRc);
        //            }

        //            //22
        //            if (cs != 0)
        //            {
        //                PdfPCell CCs = new PdfPCell(new Phrase("C.S", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CCs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CCs.Border = 15;
        //                SecondtableHeadings.AddCell(CCs);
        //            }



        //            //23
        //            if (gross != 0)
        //            {
        //                PdfPCell CGross = new PdfPCell(new Phrase("Gross", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CGross.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CGross.Border = 15;
        //                SecondtableHeadings.AddCell(CGross);
        //            }

        //            //24
        //            if (otamt != 0)
        //            {
        //                PdfPCell COtamt = new PdfPCell(new Phrase("OT Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COtamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COtamt.Border = 15;
        //                SecondtableHeadings.AddCell(COtamt);
        //            }

        //            //25
        //            if (wosamt != 0)
        //            {
        //                PdfPCell CWoamt = new PdfPCell(new Phrase("WO Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CWoamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CWoamt.Border = 15;
        //                SecondtableHeadings.AddCell(CWoamt);
        //            }

        //            //26
        //            if (nhsamt != 0)
        //            {
        //                PdfPCell CNHsamt = new PdfPCell(new Phrase("NHs Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNHsamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNHsamt.Border = 15;
        //                SecondtableHeadings.AddCell(CNHsamt);
        //            }

        //            //27
        //            if (npotsamt != 0)
        //            {
        //                PdfPCell CNpotsamt = new PdfPCell(new Phrase("NPOTs Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNpotsamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNpotsamt.Border = 15;
        //                SecondtableHeadings.AddCell(CNpotsamt);
        //            }

        //            //28
        //            if (incentivs != 0)
        //            {
        //                PdfPCell CIncentivs = new PdfPCell(new Phrase("Incentivs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CIncentivs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CIncentivs.Border = 15;
        //                SecondtableHeadings.AddCell(CIncentivs);
        //            }

        //            //28A
        //            if (totalearned != 0)
        //            {
        //                PdfPCell Ctotalearned = new PdfPCell(new Phrase("Total Earnd", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Ctotalearned.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Ctotalearned.Border = 15;
        //                SecondtableHeadings.AddCell(Ctotalearned);
        //            }


        //            //29
        //            if (pf != 0)
        //            {
        //                PdfPCell CPFondts = new PdfPCell(new Phrase("PF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPFondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPFondts.Border = 15;
        //                SecondtableHeadings.AddCell(CPFondts);
        //            }

        //            //30
        //            if (esi != 0)
        //            {
        //                PdfPCell CESIondts = new PdfPCell(new Phrase("ESI", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CESIondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CESIondts.Border = 15;
        //                SecondtableHeadings.AddCell(CESIondts);
        //            }


        //            //31
        //            if (proftax != 0)
        //            {
        //                PdfPCell CPT = new PdfPCell(new Phrase("PT", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPT.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPT.Border = 15;
        //                SecondtableHeadings.AddCell(CPT);
        //            }

        //            //32
        //            if (salAdvDed != 0)
        //            {
        //                PdfPCell CSalAdv = new PdfPCell(new Phrase("Sal Adv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CSalAdv.Border = 15;
        //                SecondtableHeadings.AddCell(CSalAdv);
        //            }

        //            //33
        //            if (uniformDed != 0)
        //            {
        //                PdfPCell CUnifDed = new PdfPCell(new Phrase("Unif. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CUnifDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CUnifDed.Border = 15;
        //                SecondtableHeadings.AddCell(CUnifDed);
        //            }

        //            //34
        //            if (otherDed != 0)
        //            {
        //                PdfPCell COtherDed = new PdfPCell(new Phrase("Other Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                COtherDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                COtherDed.Border = 15;
        //                SecondtableHeadings.AddCell(COtherDed);
        //            }

        //            //35
        //            if (canteenAdv != 0)
        //            {
        //                PdfPCell Ccanteended = new PdfPCell(new Phrase("Mess. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Ccanteended.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                Ccanteended.Border = 15;
        //                SecondtableHeadings.AddCell(Ccanteended);
        //            }



        //            //36
        //            if (penalty != 0)
        //            {
        //                PdfPCell CPenalty = new PdfPCell(new Phrase("Penalty", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CPenalty.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CPenalty.Border = 15;
        //                SecondtableHeadings.AddCell(CPenalty);
        //            }

        //            //37
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell CTotDed = new PdfPCell(new Phrase("Tot Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CTotDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CTotDed.Border = 15;
        //                SecondtableHeadings.AddCell(CTotDed);
        //            }

        //            //38
        //            if (netpay != 0)
        //            {
        //                PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                CNetPay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                CNetPay.Border = 15;
        //                SecondtableHeadings.AddCell(CNetPay);
        //            }

        //            //39
        //            PdfPCell CSignature = new PdfPCell(new Phrase("Bank A/c No./ Signature", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            CSignature.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            CSignature.Border = 15;
        //            SecondtableHeadings.AddCell(CSignature);


        //            #endregion


        //            #region Table Data

        //            PdfPTable Secondtable = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                Secondtable.TotalWidth = 1000f;
        //            }
        //            else
        //            {
        //                Secondtable.TotalWidth = 850f;
        //            }
        //            Secondtable.LockedWidth = true;
        //            float[] SecondWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 39)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 38)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 37)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 2f, 5f};
        //            }
        //            #endregion


        //            Secondtable.SetWidths(SecondWidth);




        //            int rowCount = 0;
        //            int pageCount = 0;
        //            int i = nextpagei;

        //            //for (int i = 0; i < dt.Rows.Count; i++)
        //            {
        //                float ForconvertOt = 0;
        //                forConvert = 0;
        //                if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
        //                    forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());

        //                //if (forConvert > 0)
        //                {

        //                    if (nextpagerecordscount == 0)
        //                    {
        //                        document.Add(SecondtableHeadings);
        //                    }

        //                    nextpagerecordscount++;

        //                    //1
        //                    PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //                    CSNo.Border = 15;
        //                    Secondtable.AddCell(CSNo);

        //                    //2
        //                    PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpId1.Border = 15;
        //                    Secondtable.AddCell(CEmpId1);

        //                    //3
        //                    PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpName"].ToString() + "\n" + "\n" + "PF No:" +
        //                   dt.Rows[i]["EmpEpfNo"].ToString() + "\n" + "\n" + "ESI No:" + dt.Rows[i]["EmpEsiNo"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpName1.Border = 15;
        //                    Secondtable.AddCell(CEmpName1);

        //                    //4
        //                    PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Design"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CEmpDesgn.Border = 15;
        //                    Secondtable.AddCell(CEmpDesgn);

        //                    //5
        //                    if (dts != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());
        //                        totalDuties += forConvert;
        //                        GrandtotalDuties += forConvert;

        //                        PdfPCell CNoOfDuties = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNoOfDuties.Border = 15;
        //                        Secondtable.AddCell(CNoOfDuties);
        //                    }

        //                    //6
        //                    if (ots != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Duties"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["Duties"].ToString());
        //                        totalots += forConvert;
        //                        Grandtotalots += forConvert;

        //                        PdfPCell COts = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        COts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        COts.Border = 15;
        //                        Secondtable.AddCell(COts);
        //                    }

        //                    //7
        //                    if (wos != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["wo"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["wo"].ToString());
        //                        totalwos += forConvert;
        //                        Grandtotalwos += forConvert;

        //                        PdfPCell Cwos = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cwos.Border = 15;
        //                        Secondtable.AddCell(Cwos);
        //                    }

        //                    //8
        //                    if (nhs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["nhs"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["nhs"].ToString());
        //                        totalnhs += forConvert;
        //                        Grandtotalnhs += forConvert;

        //                        PdfPCell CNhs = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNhs.Border = 15;
        //                        Secondtable.AddCell(CNhs);
        //                    }

        //                    //9
        //                    if (npots != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["npots"].ToString().Trim().Length > 0)
        //                            forConvert = Convert.ToSingle(dt.Rows[i]["npots"].ToString());
        //                        totalnpots += forConvert;
        //                        Grandtotalnpots+= forConvert;

        //                        PdfPCell Cnpots = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cnpots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cnpots.Border = 15;
        //                        Secondtable.AddCell(Cnpots);
        //                    }

        //                    //9 A
        //                    if (payrate != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["TempGross"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TempGross"].ToString()));
        //                        totalpayrate += forConvert;
        //                        Grandtotalpayrate += forConvert;
        //                        PdfPCell Cpayrate1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cpayrate1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cpayrate1.Border = 15;
        //                        Secondtable.AddCell(Cpayrate1);
        //                    }

        //                    //10
        //                    if (basic != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Basic"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Basic"].ToString()));
        //                        totalBasic += forConvert;
        //                        GrandtotalBasic += forConvert;
        //                        PdfPCell CBasic1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CBasic1.Border = 15;
        //                        Secondtable.AddCell(CBasic1);
        //                    }

        //                    //11
        //                    if (da != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["DA"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["DA"].ToString()));
        //                        totalDA += forConvert;
        //                        GrandtotalDA += forConvert;

        //                        PdfPCell CDa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CDa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CDa1.Border = 15;
        //                        Secondtable.AddCell(CDa1);
        //                    }

        //                    //12
        //                    if (hra != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["HRA"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["HRA"].ToString()));
        //                        totalHRA += forConvert;
        //                        GrandtotalHRA += forConvert;

        //                        PdfPCell CHRA1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CHRA1.Border = 15;
        //                        Secondtable.AddCell(CHRA1);
        //                    }

        //                    //13
        //                    if (cca != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["cca"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cca"].ToString()));
        //                        totalCCA += forConvert;

        //                        GrandtotalCCA += forConvert;

        //                        PdfPCell Ccca = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Ccca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Ccca.Border = 15;
        //                        Secondtable.AddCell(Ccca);
        //                    }

        //                    //14
        //                    if (conveyance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Conveyance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString()));
        //                        totalConveyance += forConvert;
        //                        GrandtotalConveyance += forConvert;

        //                        PdfPCell CConveyance = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CConveyance.Border = 15;
        //                        Secondtable.AddCell(CConveyance);
        //                    }


        //                    //15
        //                    if (washallowance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["washallowance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["washallowance"].ToString()));
        //                        totalWA += forConvert;
        //                        GrandtotalWA += forConvert;

        //                        PdfPCell CWa = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CWa.Border = 15;
        //                        Secondtable.AddCell(CWa);
        //                    }

        //                    //16
        //                    if (otherallowance != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["OtherAllowance"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString()));
        //                        totalOA += forConvert;
        //                        GrandtotalOA += forConvert;
        //                        PdfPCell COA = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        COA.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        COA.Border = 15;
        //                        Secondtable.AddCell(COA);
        //                    }

        //                    //17
        //                    if (leavewages != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Leavewages"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Leavewages"].ToString()));
        //                        totalLw += forConvert;
        //                        GrandtotalLw += forConvert;
        //                        PdfPCell CLa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CLa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CLa1.Border = 15;
        //                        Secondtable.AddCell(CLa1);
        //                    }

        //                    //18
        //                    if (gratuity != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Gratuity"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gratuity"].ToString()));
        //                        totalGratuity += forConvert;
        //                        GrandtotalGratuity += forConvert;
        //                        PdfPCell CGratuity1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CGratuity1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CGratuity1.Border = 15;
        //                        Secondtable.AddCell(CGratuity1);
        //                    }

        //                    //19
        //                    if (bonus != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["bonus"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["bonus"].ToString()));
        //                        totalbonus += forConvert;

        //                        Grandtotalbonus += forConvert;
        //                        PdfPCell Cbonus = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cbonus.Border = 15;
        //                        Secondtable.AddCell(Cbonus);
        //                    }



        //                    //20
        //                    if (nfhs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Nfhs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Nfhs"].ToString()));
        //                        totalNfhs += forConvert;
        //                        GrandtotalNfhs += forConvert;
        //                        PdfPCell CNfhs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNfhs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNfhs1.Border = 15;
        //                        Secondtable.AddCell(CNfhs1);
        //                    }

        //                    //21
        //                    if (rc != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["RC"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["RC"].ToString()));
        //                        totalRc += forConvert;
        //                        GrandtotalRc += forConvert;
        //                        PdfPCell CRc1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CRc1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CRc1.Border = 15;
        //                        Secondtable.AddCell(CRc1);
        //                    }

        //                    //22
        //                    if (cs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["cs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cs"].ToString()));
        //                        totalCs += forConvert;
        //                        GrandtotalCs += forConvert;
        //                        PdfPCell CCs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CCs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CCs1.Border = 15;
        //                        Secondtable.AddCell(CCs1);
        //                    }


        //                    //23
        //                    if (gross != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Gross"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gross"].ToString()));
        //                        totalGross += forConvert;
        //                        GrandtotalGross += forConvert;

        //                        PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CGross1.Border = 15;
        //                        Secondtable.AddCell(CGross1);
        //                    }

        //                    //24
        //                    if (otamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Amount"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Amount"].ToString()));
        //                        totalotamt += forConvert;
        //                        Grandtotalotamt += forConvert;

        //                        PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CGross1.Border = 15;
        //                        Secondtable.AddCell(CGross1);
        //                    }


        //                    //25
        //                    if (wosamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["woamt"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["woamt"].ToString()));
        //                        totalwosamt += forConvert;

        //                        Grandtotalwosamt += forConvert;

        //                        PdfPCell Cwosamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cwosamt.Border = 15;
        //                        Secondtable.AddCell(Cwosamt);
        //                    }



        //                    //26
        //                    if (nhsamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["nhsamt"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["nhsamt"].ToString()));
        //                        totalnhsamt += forConvert;

        //                        Grandtotalnhsamt += forConvert;

        //                        PdfPCell Cnhsamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cnhsamt.Border = 15;
        //                        Secondtable.AddCell(Cnhsamt);
        //                    }

        //                    //27
        //                    if (npotsamt != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["npotsamt"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["npotsamt"].ToString()));
        //                        totalnpotsamt += forConvert;

        //                        Grandtotalnpotsamt += forConvert;

        //                        PdfPCell Cnpotsamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Cnpotsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Cnpotsamt.Border = 15;
        //                        Secondtable.AddCell(Cnpotsamt);
        //                    }

        //                    //28
        //                    if (incentivs != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Incentivs"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Incentivs"].ToString()));
        //                        totalIncentivs += forConvert;
        //                        GrandtotalIncentivs += forConvert;
        //                        PdfPCell CIncentivs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CIncentivs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CIncentivs1.Border = 15;
        //                        Secondtable.AddCell(CIncentivs1);
        //                    }

        //                    //28A

        //                    if (totalearned != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["TotalEarned"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TotalEarned"].ToString()));
        //                        totaltotalearned += forConvert;

        //                        Grandtotaltotalearned += forConvert;

        //                        PdfPCell Ctotalearned = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        Ctotalearned.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        Ctotalearned.Border = 15;
        //                        Secondtable.AddCell(Ctotalearned);
        //                    }


        //                    //29
        //                    if (pf != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Pf"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Pf"].ToString()));
        //                        totalPF += forConvert;
        //                        GrandtotalPF += forConvert;

        //                        PdfPCell CPF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CPF1.Border = 15;
        //                        Secondtable.AddCell(CPF1);
        //                    }

        //                    //30
        //                    if (esi != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Esi"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Esi"].ToString()));
        //                        totalESI += forConvert;

        //                        GrandtotalESI += forConvert;

        //                        PdfPCell CESI1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CESI1.Border = 15;
        //                        Secondtable.AddCell(CESI1);
        //                    }




        //                    //31
        //                    if (proftax != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["ProfTax"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString()));
        //                        totalProfTax += forConvert;
        //                        GrandtotalProfTax += forConvert;

        //                        PdfPCell CProTax1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CProTax1.Border = 15;
        //                        Secondtable.AddCell(CProTax1);
        //                    }

        //                    //32
        //                    if (salAdvDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["SalAdvDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString()));
        //                        totalSalAdv += forConvert;
        //                        GrandtotalSalAdv += forConvert;

        //                        PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CSalAdv1.Border = 15;
        //                        Secondtable.AddCell(CSalAdv1);
        //                    }

        //                    //33
        //                    if (uniformDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["UniformDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString()));
        //                        totalUniforDed += forConvert;
        //                        GrandtotalUniforDed += forConvert;

        //                        PdfPCell CUnifDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CUnifDed1.Border = 15;
        //                        Secondtable.AddCell(CUnifDed1);
        //                    }

        //                    //34
        //                    if (otherDed != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["OtherDed"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherDed"].ToString()));
        //                        totalOtherdedn += forConvert;
        //                        GrandtotalOtherdedn += forConvert;

        //                        PdfPCell COtherDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        COtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        COtherDed1.Border = 15;
        //                        Secondtable.AddCell(COtherDed1);
        //                    }

        //                    //35
        //                    if (canteenAdv != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["CanteenAdv"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["CanteenAdv"].ToString()));
        //                        totalCanteenAdv += forConvert;
        //                        GrandtotalCanteenAdv += forConvert;

        //                        PdfPCell CCanteended = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CCanteended.Border = 15;
        //                        Secondtable.AddCell(CCanteended);
        //                    }



        //                    //36
        //                    if (penalty != 0)
        //                    {
        //                        if (dt.Rows[i]["Penalty"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Penalty"].ToString()));
        //                        totalPenalty += forConvert;
        //                        GrandtotalPenalty += forConvert;

        //                        PdfPCell CPenalty1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CPenalty1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CPenalty1.Border = 15;
        //                        Secondtable.AddCell(CPenalty1);
        //                    }


        //                    //37
        //                    if (totalDeductions != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["Totaldeduct"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Totaldeduct"].ToString()));
        //                        totalDed += forConvert;
        //                        GrandtotalDed += forConvert;

        //                        PdfPCell CTotDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CTotDed1.Border = 15;
        //                        Secondtable.AddCell(CTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //                    }

        //                    //38
        //                    if (netpay != 0)
        //                    {
        //                        forConvert = 0;
        //                        if (dt.Rows[i]["NetAmount"].ToString().Trim().Length > 0)
        //                            forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["NetAmount"].ToString()));
        //                        if (forConvert <= 0)
        //                        {
        //                            forConvert = 0;
        //                        }
        //                        totalNetpay += forConvert;
        //                        GrandtotalNetpay += forConvert;
        //                        PdfPCell CNetPay1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                        CNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                        CNetPay1.Border = 15;
        //                        Secondtable.AddCell(CNetPay1);
        //                    }

        //                    //39
        //                    string EmpBankAcNo = dt.Rows[i]["EmpBankAcNo"].ToString();
        //                    PdfPCell CSignature1 = new PdfPCell(new Phrase(EmpBankAcNo, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                    CSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                    CSignature1.Border = 15;
        //                    CSignature1.MinimumHeight = 25;
        //                    Secondtable.AddCell(CSignature1);
        //                }


        //            }
        //            #endregion

        //            #region Table Total values

        //            SecondtableFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableFooter.TotalWidth = 1000f;
        //            }
        //            else
        //            {
        //                SecondtableFooter.TotalWidth = 850f;
        //            }
        //            SecondtableFooter.LockedWidth = true;
        //            float[] SecondFooterWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 39)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 38)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 37)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 2f, 5f};
        //            }
        //            #endregion

        //            SecondtableFooter.SetWidths(SecondFooterWidth);

        //            //1
        //            PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSNo.Border = 15;
        //            SecondtableFooter.AddCell(FCSNo);
        //            //2
        //            PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpId1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpId1);
        //            //3
        //            PdfPCell FCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpName1.Border = 15;
        //            SecondtableFooter.AddCell(FCEmpName1);
        //            //4
        //            PdfPCell FCEmpDesgn = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCEmpDesgn.Border = 15;
        //            FCEmpDesgn.Colspan = 0;
        //            SecondtableFooter.AddCell(FCEmpDesgn);

        //            //5
        //            if (dts != 0)
        //            {
        //                PdfPCell FCNoOfDuties = new PdfPCell(new Phrase(totalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNoOfDuties.Border = 15;
        //                SecondtableFooter.AddCell(FCNoOfDuties);
        //            }

        //            //6
        //            if (ots != 0)
        //            {
        //                PdfPCell FCots = new PdfPCell(new Phrase(totalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCots.Border = 15;
        //                SecondtableFooter.AddCell(FCots);
        //            }

        //            //7
        //            if (wos != 0)
        //            {
        //                PdfPCell FCwos = new PdfPCell(new Phrase(totalwos.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCwos.Border = 15;
        //                SecondtableFooter.AddCell(FCwos);
        //            }

        //            //8
        //            if (nhs != 0)
        //            {
        //                PdfPCell FCnhs = new PdfPCell(new Phrase(totalnhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCnhs.Border = 15;
        //                SecondtableFooter.AddCell(FCnhs);
        //            }

        //            //9
        //            if (npots != 0)
        //            {
        //                PdfPCell FCnpots = new PdfPCell(new Phrase(totalnpots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCnpots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCnpots.Border = 15;
        //                SecondtableFooter.AddCell(FCnpots);
        //            }

        //            //9 A
        //            if (payrate != 0)
        //            {
        //                PdfPCell FCpayrate1 = new PdfPCell(new Phrase(totalpayrate.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCpayrate1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCpayrate1.Border = 15;
        //                SecondtableFooter.AddCell(FCpayrate1);
        //            }

        //            //10
        //            if (basic != 0)
        //            {
        //                PdfPCell FCBasic1 = new PdfPCell(new Phrase(totalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCBasic1.Border = 15;
        //                SecondtableFooter.AddCell(FCBasic1);
        //            }


        //            //11
        //            if (da != 0)
        //            {
        //                PdfPCell FDa = new PdfPCell(new Phrase(totalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FDa.Border = 15;
        //                SecondtableFooter.AddCell(FDa);
        //            }


        //            //12
        //            if (hra != 0)
        //            {

        //                PdfPCell FCHRA1 = new PdfPCell(new Phrase(totalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCHRA1.Border = 15;
        //                SecondtableFooter.AddCell(FCHRA1);
        //            }

        //            //13
        //            if (cca != 0)
        //            {
        //                PdfPCell FCcca = new PdfPCell(new Phrase(totalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCcca.Border = 15;
        //                SecondtableFooter.AddCell(FCcca);
        //            }

        //            //14
        //            if (conveyance != 0)
        //            {
        //                PdfPCell FCConveyance = new PdfPCell(new Phrase(totalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCConveyance.Border = 15;
        //                SecondtableFooter.AddCell(FCConveyance);
        //            }


        //            //15
        //            if (washallowance != 0)
        //            {
        //                PdfPCell FCWa = new PdfPCell(new Phrase(totalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCWa.Border = 15;
        //                SecondtableFooter.AddCell(FCWa);
        //            }

        //            //16
        //            if (otherallowance != 0)
        //            {
        //                PdfPCell FCOa = new PdfPCell(new Phrase(totalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCOa.Border = 15;
        //                SecondtableFooter.AddCell(FCOa);
        //            }


        //            //17
        //            if (leavewages != 0)
        //            {
        //                PdfPCell FLa = new PdfPCell(new Phrase(totalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FLa.Border = 15;
        //                SecondtableFooter.AddCell(FLa);
        //            }

        //            //18
        //            if (gratuity != 0)
        //            {
        //                PdfPCell FGratuity = new PdfPCell(new Phrase(totalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FGratuity.Border = 15;
        //                SecondtableFooter.AddCell(FGratuity);
        //            }

        //            //19
        //            if (bonus != 0)
        //            {
        //                PdfPCell Fbonus = new PdfPCell(new Phrase(totalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                Fbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                Fbonus.Border = 15;
        //                SecondtableFooter.AddCell(Fbonus);
        //            }

        //            //20
        //            if (nfhs != 0)
        //            {
        //                PdfPCell FNfhs = new PdfPCell(new Phrase(totalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FNfhs.Border = 15;
        //                SecondtableFooter.AddCell(FNfhs);
        //            }

        //            //21
        //            if (rc != 0)
        //            {
        //                PdfPCell FRc = new PdfPCell(new Phrase(totalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FRc.Border = 15;
        //                SecondtableFooter.AddCell(FRc);
        //            }

        //            //22
        //            if (cs != 0)
        //            {
        //                PdfPCell FCs = new PdfPCell(new Phrase(totalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCs.Border = 15;
        //                SecondtableFooter.AddCell(FCs);
        //            }


        //            //23
        //            if (gross != 0)
        //            {
        //                PdfPCell FCGross1 = new PdfPCell(new Phrase(totalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCGross1.Border = 15;
        //                SecondtableFooter.AddCell(FCGross1);
        //            }

        //            //24
        //            if (otamt != 0)
        //            {
        //                PdfPCell FCotamt = new PdfPCell(new Phrase(totalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCotamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCotamt.Border = 15;
        //                SecondtableFooter.AddCell(FCotamt);
        //            }

        //            //25
        //            if (wosamt != 0)
        //            {
        //                PdfPCell FCEwosamt = new PdfPCell(new Phrase(totalwosamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCEwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCEwosamt.Border = 15;
        //                SecondtableFooter.AddCell(FCEwosamt);
        //            }



        //            //26
        //            if (nhsamt != 0)
        //            {
        //                PdfPCell FCnhsamt = new PdfPCell(new Phrase(totalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCnhsamt.Border = 15;
        //                SecondtableFooter.AddCell(FCnhsamt);
        //            }

        //            //27
        //            if (npotsamt != 0)
        //            {
        //                PdfPCell FCnpotsamt = new PdfPCell(new Phrase(totalnpotsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCnpotsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCnpotsamt.Border = 15;
        //                SecondtableFooter.AddCell(FCnpotsamt);
        //            }


        //            //28
        //            if (incentivs != 0)
        //            {
        //                PdfPCell FIncentivs = new PdfPCell(new Phrase(totalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FIncentivs.Border = 15;
        //                SecondtableFooter.AddCell(FIncentivs);
        //            }

        //            //28A
        //            if (totalearned != 0)
        //            {
        //                PdfPCell FCtotalearned = new PdfPCell(new Phrase(totaltotalearned.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCtotalearned.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCtotalearned.Border = 15;
        //                SecondtableFooter.AddCell(FCtotalearned);
        //            }

        //            //29
        //            if (pf != 0)
        //            {
        //                PdfPCell FCPF1 = new PdfPCell(new Phrase(totalPF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCPF1.Border = 15;
        //                SecondtableFooter.AddCell(FCPF1);
        //            }

        //            //30
        //            if (esi != 0)
        //            {
        //                PdfPCell FCESI1 = new PdfPCell(new Phrase(totalESI.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCESI1.Border = 15;
        //                SecondtableFooter.AddCell(FCESI1);
        //            }






        //            //31
        //            if (proftax != 0)
        //            {
        //                PdfPCell FCProTax1 = new PdfPCell(new Phrase(totalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCProTax1.Border = 15;
        //                SecondtableFooter.AddCell(FCProTax1);
        //            }

        //            //32
        //            if (salAdvDed != 0)
        //            {
        //                PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCSalAdv1.Border = 15;
        //                SecondtableFooter.AddCell(FCSalAdv1);
        //            }

        //            //33
        //            if (uniformDed != 0)
        //            {
        //                PdfPCell FCUnifDed1 = new PdfPCell(new Phrase(totalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCUnifDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCUnifDed1);
        //            }

        //            //34
        //            if (otherDed != 0)
        //            {
        //                PdfPCell FCOtherDed1 = new PdfPCell(new Phrase(totalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCOtherDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCOtherDed1);
        //            }

        //            //35
        //            if (canteenAdv != 0)
        //            {
        //                PdfPCell FCCanteended = new PdfPCell(new Phrase(totalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCCanteended.Border = 15;
        //                SecondtableFooter.AddCell(FCCanteended);
        //            }


        //            //36
        //            if (penalty != 0)
        //            {
        //                PdfPCell FPenalty = new PdfPCell(new Phrase(totalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FPenalty.Border = 15;
        //                SecondtableFooter.AddCell(FPenalty);
        //            }


        //            //37
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCTotDed1.Border = 15;
        //                SecondtableFooter.AddCell(FCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //            }

        //            //38
        //            if (netpay != 0)
        //            {
        //                PdfPCell FCNetPay1 = new PdfPCell(new Phrase(totalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                FCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                FCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtableFooter.AddCell(FCNetPay1);
        //            }

        //            //39
        //            PdfPCell FCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtableFooter.AddCell(FCSignature1);

        //            #endregion

        //            SecondtableGrandtotalFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtableGrandtotalFooter.TotalWidth = 1000f;
        //            }
        //            else
        //            {
        //                SecondtableGrandtotalFooter.TotalWidth = 850f;
        //            }
        //            SecondtableGrandtotalFooter.LockedWidth = true;
        //            float[] SecondGrandtotalFooterWidth = new float[] { };
        //            #region Table Cells

        //            if (tableCells == 39)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 38)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 37)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f};
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f, 5f};
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 2f, 5f};
        //            }
        //            #endregion
        //            SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

        //            SecondtablecheckbyFooter = new PdfPTable(tableCells);
        //            if (tableCells > 20)
        //            {
        //                SecondtablecheckbyFooter.TotalWidth = 1000f;
        //            }
        //            else
        //            {
        //                SecondtablecheckbyFooter.TotalWidth = 850f;
        //            }
        //            SecondtablecheckbyFooter.LockedWidth = true;
        //            float[] SecondcheckbyFooterWidth = new float[] { };

        //            #region Table Cells

        //            if (tableCells == 39)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 38)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 37)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 36)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 35)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 34)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 33)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 32)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 31)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 30)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 29)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 28)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 27)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 26)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 25)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 24)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 23)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 22)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 21)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 20)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 19)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 18)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 17)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 16)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 15)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 14)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 13)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 12)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 11)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 10)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 9)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f };
        //            }
        //            if (tableCells == 8)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 7)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f, 5f };
        //            }

        //            if (tableCells == 6)
        //            {
        //                SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 2f, 5f };
        //            }
        //            #endregion

        //            SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);

        //            #region Table   Grand   Total  Footer

        //            //1
        //            PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSNo.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCSNo);

        //            //2
        //            PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpId1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpId1);

        //            //3
        //            PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //            GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpName1.Border = 15;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpName1);

        //            //4
        //            PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("Grand  Total: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCEmpDesgn.Border = 15;
        //            //FCEmpDesgn.Colspan = 4;
        //            SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);

        //            //5
        //            if (dts != 0)
        //            {
        //                PdfPCell GFCNoOfDuties = new PdfPCell(new Phrase(GrandtotalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNoOfDuties.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCNoOfDuties);
        //            }

        //            //6
        //            if (ots != 0)
        //            {
        //                PdfPCell GFCOts = new PdfPCell(new Phrase(Grandtotalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCOts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOts.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOts);
        //            }

        //            //7
        //            if (wos != 0)
        //            {
        //                PdfPCell GFCWos = new PdfPCell(new Phrase(Grandtotalwos.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCWos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCWos.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCWos);
        //            }

        //            //8
        //            if (nhs != 0)
        //            {
        //                PdfPCell GFCnhs = new PdfPCell(new Phrase(Grandtotalnhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCnhs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCnhs);
        //            }

        //            //9
        //            if (npots != 0)
        //            {
        //                PdfPCell GFCnpots = new PdfPCell(new Phrase(Grandtotalnpots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCnpots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCnpots.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCnpots);
        //            }

        //            //9 A
        //            if (payrate != 0)
        //            {
        //                PdfPCell GFCpayrate1 = new PdfPCell(new Phrase(Grandtotalpayrate.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCpayrate1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCpayrate1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCpayrate1);
        //            }



        //            //10
        //            if (basic != 0)
        //            {
        //                PdfPCell GFCBasic1 = new PdfPCell(new Phrase(GrandtotalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCBasic1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCBasic1);
        //            }


        //            //11
        //            if (da != 0)
        //            {
        //                PdfPCell GFDa = new PdfPCell(new Phrase(GrandtotalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFDa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFDa);
        //            }


        //            //12
        //            if (hra != 0)
        //            {
        //                PdfPCell GFCHRA1 = new PdfPCell(new Phrase(GrandtotalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCHRA1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCHRA1);
        //            }

        //            //13
        //            if (cca != 0)
        //            {
        //                PdfPCell GFCcca = new PdfPCell(new Phrase(GrandtotalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCcca.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCcca);
        //            }

        //            //14
        //            if (conveyance != 0)
        //            {
        //                PdfPCell GFCConveyance = new PdfPCell(new Phrase(GrandtotalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCConveyance.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCConveyance);
        //            }


        //            //15
        //            if (washallowance != 0)
        //            {
        //                PdfPCell GFCWa = new PdfPCell(new Phrase(GrandtotalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCWa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCWa);
        //            }

        //            //16
        //            if (otherallowance != 0)
        //            {
        //                PdfPCell GFCOa = new PdfPCell(new Phrase(GrandtotalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOa);
        //            }

        //            //17
        //            if (leavewages != 0)
        //            {
        //                PdfPCell GFLa = new PdfPCell(new Phrase(GrandtotalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFLa.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFLa);
        //            }

        //            //18
        //            if (gratuity != 0)
        //            {
        //                PdfPCell GFGratuity = new PdfPCell(new Phrase(GrandtotalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFGratuity.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFGratuity);
        //            }

        //            //19
        //            if (bonus != 0)
        //            {
        //                PdfPCell GFbonus = new PdfPCell(new Phrase(Grandtotalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFbonus.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFbonus);
        //            }


        //            //20
        //            if (nfhs != 0)
        //            {
        //                PdfPCell GFNfhs = new PdfPCell(new Phrase(GrandtotalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFNfhs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFNfhs);
        //            }

        //            //21
        //            if (rc != 0)
        //            {
        //                PdfPCell GFRc = new PdfPCell(new Phrase(GrandtotalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFRc.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFRc);
        //            }

        //            //22
        //            if (cs != 0)
        //            {
        //                PdfPCell GFCs = new PdfPCell(new Phrase(GrandtotalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCs);
        //            }


        //            //23
        //            if (gross != 0)
        //            {
        //                PdfPCell GFCGross1 = new PdfPCell(new Phrase(GrandtotalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCGross1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCGross1);
        //            }

        //            //24
        //            if (otamt != 0)
        //            {
        //                PdfPCell GFCOtamt = new PdfPCell(new Phrase(Grandtotalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCOtamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOtamt.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOtamt);
        //            }

        //            //25
        //            if (wosamt != 0)
        //            {
        //                PdfPCell GFCwosamt = new PdfPCell(new Phrase(Grandtotalwosamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCwosamt.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCwosamt);
        //            }



        //            //26
        //            if (nhsamt != 0)
        //            {
        //                PdfPCell GFCNhsamt = new PdfPCell(new Phrase(Grandtotalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNhsamt.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCNhsamt);
        //            }

        //            //27
        //            if (npotsamt != 0)
        //            {
        //                PdfPCell GFCNpotsamt = new PdfPCell(new Phrase(Grandtotalnpotsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNpotsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNpotsamt.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCNpotsamt);
        //            }


        //            //28
        //            if (incentivs != 0)
        //            {
        //                PdfPCell GFIncentivs = new PdfPCell(new Phrase(GrandtotalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFIncentivs.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFIncentivs);
        //            }

        //            //28A
        //            if (totalearned != 0)
        //            {
        //                PdfPCell GFCtotalearned = new PdfPCell(new Phrase(Grandtotaltotalearned.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCtotalearned.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCtotalearned.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCtotalearned);
        //            }


        //            //29
        //            if (pf != 0)
        //            {
        //                PdfPCell GFCPF1 = new PdfPCell(new Phrase(GrandtotalPF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCPF1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCPF1);
        //            }

        //            //30
        //            if (esi != 0)
        //            {
        //                PdfPCell GFCESI1 = new PdfPCell(new Phrase(GrandtotalESI.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCESI1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCESI1);
        //            }





        //            //31
        //            if (proftax != 0)
        //            {
        //                PdfPCell GFCProTax1 = new PdfPCell(new Phrase(GrandtotalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCProTax1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCProTax1);
        //            }

        //            //32
        //            if (salAdvDed != 0)
        //            {
        //                PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCSalAdv1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
        //            }

        //            //33
        //            if (uniformDed != 0)
        //            {
        //                PdfPCell GFCUnifDed1 = new PdfPCell(new Phrase(GrandtotalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCUnifDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCUnifDed1);
        //            }

        //            //34
        //            if (otherDed != 0)
        //            {
        //                PdfPCell GFCOtherDed1 = new PdfPCell(new Phrase(GrandtotalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCOtherDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCOtherDed1);
        //            }


        //            //35
        //            if (canteenAdv != 0)
        //            {
        //                PdfPCell GFCCanteended = new PdfPCell(new Phrase(GrandtotalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCCanteended.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCCanteended);
        //            }

        //            //36
        //            if (penalty != 0)
        //            {
        //                PdfPCell GFPenalty = new PdfPCell(new Phrase(GrandtotalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFPenalty.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFPenalty);
        //            }

        //            //37
        //            if (totalDeductions != 0)
        //            {
        //                PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(GrandtotalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCTotDed1.Border = 15;
        //                SecondtablecheckbyFooter.AddCell(GFCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
        //            }

        //            //38
        //            if (netpay != 0)
        //            {
        //                PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(GrandtotalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //                GFCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                GFCNetPay1.Border = 15;
        //                //FCNetPay1.Colspan = 2;
        //                SecondtablecheckbyFooter.AddCell(GFCNetPay1);
        //            }

        //            //39
        //            PdfPCell GFCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            GFCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            GFCSignature1.Border = 15;
        //            //FCSignature1.MinimumHeight = 25;
        //            SecondtablecheckbyFooter.AddCell(GFCSignature1);
        //            #endregion


        //            #region   Footer Headings
        //            //1
        //            PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHCheckedbybr1.Border = 0;
        //            FHCheckedbybr1.Rowspan = 0;
        //            FHCheckedbybr1.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            //2
        //            PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            FHApprovedbr2.Border = 0;
        //            FHApprovedbr2.Colspan = tableCells;

        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
        //            SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
        //            SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


        //            //1
        //            PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHCheckedby.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //            FHCheckedby.Border = 0;
        //            FHCheckedby.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHCheckedby);
        //            //2
        //            PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Gross  Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //            FHApprovedBy.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //            FHApprovedBy.Border = 0;
        //            FHApprovedBy.PaddingTop = -5;
        //            FHApprovedBy.Colspan = tableCells;
        //            SecondtablecheckbyFooter.AddCell(FHApprovedBy);



        //            #endregion

        //            document.Add(Secondtable);

        //            if (nextpagerecordscount == targetpagerecors)
        //            {
        //                targetpagerecors = secondpagerecords;
        //                //document.Add(SecondtableFooter);
        //                document.NewPage();
        //                nextpagerecordscount = 0;
        //                #region  Zero variables
        //                totaltotalearned = 0;
        //                totalNetpay = 0;
        //                totalDuties = 0;
        //                totalpayrate = 0;
        //                totalBasic = 0;
        //                totalDA = 0;
        //                totalHRA = 0;
        //                totalCCA = 0;
        //                totalConveyance = 0;
        //                totalWA = 0;
        //                totalOA = 0;
        //                totalGross = 0;
        //                totalPF = 0;
        //                totalESI = 0;
        //                totalProfTax = 0;
        //                totalDed = 0;
        //                totalSalAdv = 0;
        //                totalUniforDed = 0;
        //                totalCanteenAdv = 0;
        //                totalOtherdedn = 0;
        //                totalbonus = 0;
        //                totalLw = 0;
        //                totalGratuity = 0;
        //                totalNfhs = 0;
        //                totalRc = 0;
        //                totalCs = 0;
        //                totalIncentivs = 0;
        //                totalPenalty = 0;

        //                totalots = 0;
        //                totalotamt = 0;
        //                totalwos = 0;
        //                totalwosamt = 0;
        //                totalnhs = 0;
        //                totalnhsamt = 0;

        //                #endregion
        //            }
        //        }

        //        if (nextpagerecordscount >= 0)
        //        {
        //            //document.Add(SecondtableFooter);
        //            document.Add(SecondtableGrandtotalFooter);
        //            document.Add(SecondtablecheckbyFooter);
        //        }
        //        document.Close();
        //        if (nextpagehasPages)
        //        {

        //            Response.ContentType = "application/pdf";
        //            Response.AddHeader("content-disposition", "attachment;filename=Dutieswithots.pdf");
        //            Response.Buffer = true;
        //            Response.Clear();
        //            Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        //            Response.OutputStream.Flush();
        //            Response.End();
        //        }
        //    }
        //}

        public void ClearNonPaysheetGenerated()
        {
            lblPaysheetGeneratedTime.Text = "";
            PnlNonGeneratedPaysheet.Visible = false;
            GvNonGeneratedEmp.DataSource = null;
            GvNonGeneratedEmp.DataBind();
        }

        protected void ddlClients_SelectedIndexChanged(object sender, EventArgs e)
        {
            ClearNonPaysheetGenerated();

            if (ddlClients.SelectedIndex > 0)
            {
                Fillcname();
                DisplayData();
                if (ddlmonth.SelectedIndex > 0 || Txt_Month.Text != "")
                {
                    //GetBillingDuties();
                    NonGeneratedPaysheetList();
                }
            }
            else
            {
                Cleardata();
                ClearNonPaysheetGenerated();
            }
        }

        protected void ddlcname_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            ClearNonPaysheetGenerated();

            if (ddlcname.SelectedIndex > 0)
            {
                FillClientid();
                DisplayData();
                if (ddlmonth.SelectedIndex > 0 || Txt_Month.Text != "")
                {
                    // GetBillingDuties();
                    NonGeneratedPaysheetList();
                }
            }
            else
            {
                Cleardata();
                ClearNonPaysheetGenerated();
            }
        }

        protected void Cleardata()
        {
            ddlcname.SelectedIndex = 0;
            ddlClients.SelectedIndex = 0;
            gvattendancezero.DataSource = null;
            gvattendancezero.DataBind();
        }

        protected string loandatedetailsMonth()
        {
            int Month = 0;
            if (ddlmonth.SelectedIndex == 0)
            {
                Month = DateTime.Now.Month;
            }
            else if (ddlmonth.SelectedIndex == 1)
            {
                Month = DateTime.Now.Month;
                if (Month == 1)
                {
                    Month = DateTime.Now.Month + 11;
                }
                else
                {
                    Month = DateTime.Now.Month - 1;
                }

            }
            else
            {
                Month = DateTime.Now.Month;
                if (Month == 1)
                {
                    Month = DateTime.Now.Month + 10;
                }
                else
                {
                    if (Month == 2)
                    {
                        Month = DateTime.Now.Month + 10;
                    }
                    else
                    {

                        Month = DateTime.Now.Month - 2;
                    }
                }
            }

            return Month.ToString();

        }

        protected string loandatedetailsYear()
        {
            int Year = 2000;
            int Month = 0;
            if (ddlmonth.SelectedIndex == 0)
            {
                Year = DateTime.Now.Year;
            }
            else if (ddlmonth.SelectedIndex == 1)
            {
                Month = DateTime.Now.Month;
                if (Month == 1)
                {
                    Year = DateTime.Now.Year - 1;
                }
                else
                {
                    Year = DateTime.Now.Year;
                }
            }
            else
            {
                Month = DateTime.Now.Month;
                if (Month == 1)
                {
                    Year = DateTime.Now.Year - 1;
                }
                else
                {
                    if (Month == 2)
                    {
                        Year = DateTime.Now.Year - 1;
                    }
                    else
                    {
                        Year = DateTime.Now.Year;
                    }
                }

            }

            return Year.ToString();

        }

        protected void linkrefresh_Click(object sender, EventArgs e)
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Select Client ID');", true);

            if (ddlClients.SelectedIndex > 0)
            {
                int month = 0;
                if (ddlmonth.SelectedIndex == 0)
                {
                    month = GlobalData.Instance.GetIDForNextMonth();
                }
                else if (ddlmonth.SelectedIndex == 1)
                {
                    month = GlobalData.Instance.GetIDForThisMonth();
                }
                else
                {
                    month = GlobalData.Instance.GetIDForPrviousMonth();
                }

                string Sqlqry = "delete from   EmpLoanDeductionones Where ClientId='" + ddlClients.SelectedValue + "' and MONTH='" + month + "'";
                int status = config.ExecuteNonQueryWithQueryAsync(Sqlqry).Result;
                if (status != 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Once Please Generate Payment');", true);
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Once Please  Generate Payment');", true);

                }
                return;
            }
            else
            {

            }

        }

        protected void btnbellowtenattendance_Click(object sender, EventArgs e)
        {
            int titleofdocumentindex = 0;
            if (ddlClients.SelectedIndex <= 0)
            {
                lblpayment.Text = "Please select Client ID to generate wage sheet";
                return;
            }

            int payMonth = GetMonth(ddlmonth.SelectedValue);
            int month = GetMonthAndYear();

            string selectmonth = "select Eps.EmpId,Eps.Desgn,TempGross as salaryrate, Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.HRA,Eps.CCA, " +
                " Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax,Eps.Bonus," +
           "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount, " +
           " Eps.OWF,EmpDetails.EmpFName,EmpDetails.EmpMName," +
           "EmpDetails.UnitId, EmpDetails.EmpBankAppNo,EmpDetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT from  " +
           " EmpPaySheet as Eps INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId  " +
           " And  Eps.NoOfDuties<=10   AND EmpAttendance.ClientId=Eps.ClientId AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
           ddlClients.SelectedValue + "' AND Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn   " +
           " Order by  Eps.EmpId";
            DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(selectmonth).Result;


            MemoryStream ms = new MemoryStream();
            if (dt.Rows.Count > 0)
            {
                Document document = new Document(PageSize.LEGAL.Rotate());
                PdfWriter writer = PdfWriter.GetInstance(document, ms);
                document.Open();
                document.AddTitle("FaMS");
                document.AddAuthor("WebWonders");
                document.AddSubject("Wage Sheet");
                document.AddKeywords("Keyword1, keyword2, …");//
                float forConvert;
                string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
                DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                string companyName1 = "Your Company Name";
                string companyAddress = "Your Company Address";
                if (compInfo.Rows.Count > 0)
                {
                    companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
                    companyAddress = compInfo.Rows[0]["Address"].ToString();
                }

                int tableCells = 27;
                #region variables for total
                float totalActualamount = 0;
                float totalDuties = 0;
                float totalOts = 0;
                float totalBasic = 0;
                float totalDA = 0;
                float totalHRA = 0;
                float totalCCA = 0;
                float totalConveyance = 0;
                float totalWA = 0;
                float totalOA = 0;
                float totalGrass = 0;
                float totalOTAmount = 0;
                float totalPF = 0;
                float totalESI = 0;
                float totalProfTax = 0;
                float totalDed = 0;
                float totalSalAdv = 0;
                float totalUniforDed = 0;
                float totalCanteenAdv = 0;
                float totalOwf = 0;
                float totalPenalty = 0;
                float totalbonus = 0;

                #endregion


                #region variables for  Grand  total
                float GrandtotalActualamount = 0;
                float GrandtotalDuties = 0;
                float GrandtotalOts = 0;
                float GrandtotalBasic = 0;
                float GrandtotalDA = 0;
                float GrandtotalHRA = 0;
                float GrandtotalCCA = 0;
                float GrandtotalConveyance = 0;
                float GrandtotalWA = 0;
                float GrandtotalOA = 0;
                float GrandtotalGrass = 0;
                float GrandtotalOTAmount = 0;
                float GrandtotalPF = 0;
                float GrandtotalESI = 0;
                float GrandtotalProfTax = 0;
                float GrandtotalDed = 0;
                float GrandtotalSalAdv = 0;
                float GrandtotalUniforDed = 0;
                float GrandtotalCanteenAdv = 0;
                float GrandtotalOwf = 0;
                float GrandtotalPenalty = 0;
                float Grandtotalbonus = 0;

                #endregion

                int nextpagerecordscount = 0;
                int targetpagerecors = 10;
                int secondpagerecords = targetpagerecors + 3;
                bool nextpagehasPages = false;
                int j = 0;
                PdfPTable SecondtablecheckbyFooter = null;
                PdfPTable SecondtableFooter = null;
                PdfPTable SecondtableGrandtotalFooter = null;
                for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
                {
                    nextpagehasPages = true;


                    #region Titles of Document
                    PdfPTable Maintable = new PdfPTable(tableCells);
                    Maintable.TotalWidth = 950f;
                    Maintable.LockedWidth = true;
                    float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2.5f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
                    Maintable.SetWidths(width);
                    uint FONT_SIZE = 8;

                    //Company Name & vage act details

                    PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cellemp.Colspan = tableCells;
                    cellemp.Border = 0;

                    PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
                    Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    Heading.Colspan = tableCells;
                    Heading.Border = 0;
                    Maintable.AddCell(Heading);



                    PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 15, Font.BOLD, BaseColor.BLACK)));
                    actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    actDetails.Colspan = tableCells;
                    actDetails.Border = 0;// 15;
                    Maintable.AddCell(actDetails);

                    Maintable.AddCell(cellemp);
                    #endregion


                    #region Table Headings
                    PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 20, Font.BOLD, BaseColor.BLACK)));
                    companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    companyName.Colspan = tableCells;
                    companyName.Border = 0;// 15;
                    Maintable.AddCell(companyName);

                    PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
                    paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    paySheet.Colspan = tableCells;
                    paySheet.Border = 0;// 15;
                    Maintable.AddCell(paySheet);

                    PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClient.Colspan = 3;
                    CClient.Border = 0;// 15;
                    Maintable.AddCell(CClient);

                    PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlcname.SelectedItem, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClientName.Colspan = 10;
                    CClientName.Border = 0;// 15;
                    Maintable.AddCell(CClientName);

                    PdfPCell CDates = new PdfPCell(new Phrase("Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
                    CDates.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CDates.Colspan = 6;
                    CDates.Border = 0;// 15;
                    Maintable.AddCell(CDates);

                    // PdfPCell CPaySheetDate = new PdfPCell(new Phrase("Pay Sheet Date :  " + DateTime.Now.Date.ToString("dd/MM/yyyy"), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    PdfPCell CPaySheetDate = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CPaySheetDate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CPaySheetDate.Colspan = 4;
                    CPaySheetDate.Border = 0;// 15;
                    Maintable.AddCell(CPaySheetDate);

                    PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :   " + ddlmonth.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CPayMonth.Colspan = 4;
                    CPayMonth.Border = 0;// 15;
                    Maintable.AddCell(CPayMonth);

                    Maintable.AddCell(cellemp);
                    //document.Add(Maintable);

                    if (titleofdocumentindex == 0)
                    {
                        document.Add(Maintable);
                        titleofdocumentindex = 1;
                    }
                    PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
                    SecondtableHeadings.TotalWidth = 950f;
                    SecondtableHeadings.LockedWidth = true;
                    float[] SecondHeadingsWidth = new float[] { 2f, 2f, 6f, 3f, 2f, 1.5f, 1.8f, 1.8f, 1.5f, 1.5f, 1.5f, 1.5f, 1.8f, 1.5f, 1.5f, 2f, 2f, 1.5f, 1.5f, 2f, 2f, 1.5f, 1.5f, 1.5f, 2f, 2f, 6f };
                    SecondtableHeadings.SetWidths(SecondHeadingsWidth);

                    //Cell Headings
                    //1
                    PdfPCell sNo = new PdfPCell(new Phrase("S.No ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    sNo.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //sNo.Colspan = 1;
                    sNo.Border = 15;// 15;
                    SecondtableHeadings.AddCell(sNo);
                    //2
                    PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CEmpId.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CEmpId.Border = 15;// 15;
                    SecondtableHeadings.AddCell(CEmpId);
                    //3
                    PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CEmpName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CEmpName.Border = 15;// 15;
                    SecondtableHeadings.AddCell(CEmpName);
                    //4
                    PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CDesgn.Border = 15;
                    SecondtableHeadings.AddCell(CDesgn);
                    //5
                    PdfPCell CDuties = new PdfPCell(new Phrase("Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CDuties.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CDuties.Border = 15;
                    SecondtableHeadings.AddCell(CDuties);
                    //6
                    PdfPCell COTs = new PdfPCell(new Phrase("Ots", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    COTs.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    COTs.Border = 15;
                    SecondtableHeadings.AddCell(COTs);
                    //7

                    PdfPCell CBasic = new PdfPCell(new Phrase("Basic", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CBasic.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CBasic.Border = 15;
                    SecondtableHeadings.AddCell(CBasic);
                    //8
                    PdfPCell CDa = new PdfPCell(new Phrase("DA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CBasic.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CBasic.Border = 15;
                    SecondtableHeadings.AddCell(CDa);

                    //9

                    PdfPCell CHRa = new PdfPCell(new Phrase("HRA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CHRa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CHRa.Border = 15;
                    SecondtableHeadings.AddCell(CHRa);

                    //10
                    PdfPCell Cconveyance = new PdfPCell(new Phrase("Conv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    Cconveyance.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    Cconveyance.Border = 15;
                    SecondtableHeadings.AddCell(Cconveyance);
                    //11
                    PdfPCell CCca = new PdfPCell(new Phrase("CCA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CCca.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CCca.Border = 15;
                    SecondtableHeadings.AddCell(CCca);
                    //12
                    PdfPCell Cwa = new PdfPCell(new Phrase("WA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    Cwa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    Cwa.Border = 15;
                    SecondtableHeadings.AddCell(Cwa);
                    //13
                    PdfPCell COa = new PdfPCell(new Phrase("OA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    COa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    COa.Border = 15;
                    SecondtableHeadings.AddCell(COa);

                    //14
                    PdfPCell CBonus = new PdfPCell(new Phrase("Bonus", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CBonus.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CBonus.Border = 15;
                    SecondtableHeadings.AddCell(CBonus);

                    //15
                    PdfPCell Cotamt = new PdfPCell(new Phrase("OTamt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    Cotamt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    Cotamt.Border = 15;
                    SecondtableHeadings.AddCell(Cotamt);
                    //16

                    PdfPCell CGross = new PdfPCell(new Phrase("Gross", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CGross.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CGross.Border = 15;
                    SecondtableHeadings.AddCell(CGross);
                    //17
                    PdfPCell CPF = new PdfPCell(new Phrase("PF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CPF.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CPF.Border = 15;
                    SecondtableHeadings.AddCell(CPF);
                    //18
                    PdfPCell CESI = new PdfPCell(new Phrase("ESI", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CESI.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CESI.Border = 15;
                    SecondtableHeadings.AddCell(CESI);
                    //19
                    PdfPCell CPT = new PdfPCell(new Phrase("PT", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CPT.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CPT.Border = 15;
                    SecondtableHeadings.AddCell(CPT);
                    //20
                    PdfPCell CSalAdv = new PdfPCell(new Phrase("Sal Adv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CSalAdv.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CSalAdv.Border = 15;
                    SecondtableHeadings.AddCell(CSalAdv);
                    //21
                    PdfPCell CUnifDed = new PdfPCell(new Phrase("Unif. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CUnifDed.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CUnifDed.Border = 15;
                    SecondtableHeadings.AddCell(CUnifDed);

                    //22
                    PdfPCell Ccanteended = new PdfPCell(new Phrase("Mess. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    Ccanteended.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    Ccanteended.Border = 15;
                    SecondtableHeadings.AddCell(Ccanteended);

                    //23
                    PdfPCell COWF = new PdfPCell(new Phrase("OWF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    COWF.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    COWF.Border = 15;
                    SecondtableHeadings.AddCell(COWF);
                    //24
                    PdfPCell COtherDed = new PdfPCell(new Phrase("Other Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    COtherDed.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    COtherDed.Border = 15;
                    SecondtableHeadings.AddCell(COtherDed);
                    //25
                    PdfPCell CTotDed = new PdfPCell(new Phrase("Tot Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CTotDed.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CTotDed.Border = 15;
                    SecondtableHeadings.AddCell(CTotDed);
                    //26
                    PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CNetPay.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CNetPay.Border = 15;
                    SecondtableHeadings.AddCell(CNetPay);
                    //27
                    PdfPCell CSignature = new PdfPCell(new Phrase("Bank A/c No./ Signature", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CSignature.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CSignature.Border = 15;
                    SecondtableHeadings.AddCell(CSignature);
                    #endregion


                    PdfPTable Secondtable = new PdfPTable(tableCells);
                    Secondtable.TotalWidth = 950f;
                    Secondtable.LockedWidth = true;
                    float[] SecondWidth = new float[] { 2f, 2f, 6f, 3f, 2f, 1.5f, 1.8f, 1.8f, 1.5f, 1.5f, 1.5f, 1.5f, 1.8f, 1.5f, 1.5f, 2f, 2f, 1.5f, 1.5f, 2f, 2f, 1.5f, 1.5f, 1.5f, 2f, 2f, 6f };
                    Secondtable.SetWidths(SecondWidth);


                    #region Table Data
                    int rowCount = 0;
                    int pageCount = 0;
                    int i = nextpagei;

                    // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
                    {
                        forConvert = 0;
                        if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
                            forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());
                        if (forConvert > 0)
                        {

                            if (nextpagerecordscount == 0)
                            {
                                document.Add(SecondtableHeadings);
                            }

                            nextpagerecordscount++;
                            //1
                            PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n \n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CSNo.Border = 15;
                            Secondtable.AddCell(CSNo);
                            //2
                            PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpId1.Border = 15;
                            Secondtable.AddCell(CEmpId1);
                            //3
                            PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpFName"].ToString() + " " + dt.Rows[i]["EmpMName"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpName1.Border = 15;
                            Secondtable.AddCell(CEmpName1);
                            //4
                            PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Desgn"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpDesgn.Border = 15;
                            Secondtable.AddCell(CEmpDesgn);
                            //5
                            forConvert = 0;
                            if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());
                            totalDuties += forConvert;
                            GrandtotalDuties += forConvert;

                            PdfPCell CNoOfDuties = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CNoOfDuties.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CNoOfDuties.Border = 15;
                            Secondtable.AddCell(CNoOfDuties);
                            //6
                            if (dt.Rows[i]["ot"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["ot"].ToString());
                            totalOts += forConvert;
                            GrandtotalOts += forConvert;
                            PdfPCell CNoOfots = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CNoOfots.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CNoOfots.Border = 15;
                            Secondtable.AddCell(CNoOfots);

                            //7
                            forConvert = 0;
                            if (dt.Rows[i]["Basic"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Basic"].ToString()));
                            totalBasic += forConvert;
                            GrandtotalBasic += forConvert;
                            PdfPCell CBasic1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CBasic1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CBasic1.Border = 15;
                            Secondtable.AddCell(CBasic1);
                            //8

                            forConvert = 0;

                            if (dt.Rows[i]["DA"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["DA"].ToString()));
                            totalDA += forConvert;
                            GrandtotalDA += forConvert;

                            PdfPCell CDa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CDa1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CDa1.Border = 15;
                            Secondtable.AddCell(CDa1);

                            //9

                            forConvert = 0;
                            if (dt.Rows[i]["HRA"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["HRA"].ToString()));
                            totalHRA += forConvert;
                            GrandtotalHRA += forConvert;

                            PdfPCell CHRA1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CHRA1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CHRA1.Border = 15;
                            Secondtable.AddCell(CHRA1);

                            //10
                            forConvert = 0;
                            if (dt.Rows[i]["Conveyance"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString()));
                            totalConveyance += forConvert;
                            GrandtotalConveyance += forConvert;



                            PdfPCell CConveyance = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CConveyance.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CConveyance.Border = 15;
                            Secondtable.AddCell(CConveyance);

                            //11
                            forConvert = 0;
                            if (dt.Rows[i]["cca"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cca"].ToString()));
                            totalCCA += forConvert;

                            GrandtotalCCA += forConvert;

                            PdfPCell Ccca = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            Ccca.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            Ccca.Border = 15;
                            Secondtable.AddCell(Ccca);
                            //12
                            forConvert = 0;
                            if (dt.Rows[i]["washallowance"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["washallowance"].ToString()));
                            totalWA += forConvert;


                            GrandtotalWA += forConvert;

                            PdfPCell CWa = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CWa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CWa.Border = 15;
                            Secondtable.AddCell(CWa);

                            //13
                            forConvert = 0;
                            if (dt.Rows[i]["OtherAllowance"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString()));
                            totalOA += forConvert;
                            GrandtotalOA += forConvert;
                            PdfPCell COA = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            COA.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            COA.Border = 15;
                            Secondtable.AddCell(COA);

                            //14
                            forConvert = 0;
                            if (dt.Rows[i]["bonus"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["bonus"].ToString()));
                            totalbonus += forConvert;

                            Grandtotalbonus += forConvert;
                            PdfPCell Cbonus = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            Cbonus.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            Cbonus.Border = 15;
                            Secondtable.AddCell(Cbonus);


                            //15
                            forConvert = 0;
                            if (dt.Rows[i]["otamt"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["otamt"].ToString()));
                            totalOTAmount += forConvert;

                            Grandtotalbonus += forConvert;

                            PdfPCell Cottamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            Cottamt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            Cottamt.Border = 15;
                            Secondtable.AddCell(Cottamt);
                            //16
                            forConvert = 0;
                            if (dt.Rows[i]["Gross"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gross"].ToString()));
                            totalGrass += forConvert;
                            GrandtotalGrass += forConvert;

                            PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CGross1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CGross1.Border = 15;
                            Secondtable.AddCell(CGross1);
                            //17
                            forConvert = 0;
                            if (dt.Rows[i]["PF"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PF"].ToString()));
                            totalPF += forConvert;
                            GrandtotalPF += forConvert;

                            PdfPCell CPF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CPF1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CPF1.Border = 15;
                            Secondtable.AddCell(CPF1);
                            //18
                            forConvert = 0;
                            if (dt.Rows[i]["ESI"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESI"].ToString()));
                            totalESI += forConvert;

                            GrandtotalESI += forConvert;

                            PdfPCell CESI1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CESI1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CESI1.Border = 15;
                            Secondtable.AddCell(CESI1);
                            //19
                            forConvert = 0;
                            if (dt.Rows[i]["ProfTax"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString()));
                            totalProfTax += forConvert;
                            GrandtotalProfTax += forConvert;

                            PdfPCell CProTax1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CProTax1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CProTax1.Border = 15;
                            Secondtable.AddCell(CProTax1);
                            //20
                            forConvert = 0;
                            if (dt.Rows[i]["SalAdvDed"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString()));
                            totalSalAdv += forConvert;
                            GrandtotalSalAdv += forConvert;

                            PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CSalAdv1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CSalAdv1.Border = 15;
                            Secondtable.AddCell(CSalAdv1);
                            //21
                            forConvert = 0;
                            if (dt.Rows[i]["UniformDed"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString()));
                            totalUniforDed += forConvert;
                            GrandtotalUniforDed += forConvert;

                            PdfPCell CUnifDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CUnifDed1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CUnifDed1.Border = 15;
                            Secondtable.AddCell(CUnifDed1);
                            //22

                            forConvert = 0;
                            if (dt.Rows[i]["CanteenAdv"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["CanteenAdv"].ToString()));
                            totalCanteenAdv += forConvert;
                            GrandtotalCanteenAdv += forConvert;

                            PdfPCell CCanteended = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CCanteended.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CCanteended.Border = 15;
                            Secondtable.AddCell(CCanteended);

                            //23
                            if (dt.Rows[i]["OWF"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OWF"].ToString()));
                            totalOwf += forConvert;
                            GrandtotalOwf += forConvert;

                            PdfPCell COwf1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            COwf1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            COwf1.Border = 15;
                            Secondtable.AddCell(COwf1);
                            //24
                            forConvert = 0;


                            if (dt.Rows[i]["Penalty"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Penalty"].ToString()));
                            totalPenalty += forConvert;
                            GrandtotalPenalty += forConvert;

                            PdfPCell COtherDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            COtherDed1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            COtherDed1.Border = 15;
                            Secondtable.AddCell(COtherDed1);
                            //25
                            forConvert = 0;
                            if (dt.Rows[i]["Deductions"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Deductions"].ToString()));
                            totalDed += forConvert;
                            GrandtotalDed += forConvert;

                            PdfPCell CTotDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CTotDed1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CTotDed1.Border = 15;
                            Secondtable.AddCell(CTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                            //26
                            forConvert = 0;
                            if (dt.Rows[i]["ActualAmount"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ActualAmount"].ToString()));
                            totalActualamount += forConvert;
                            GrandtotalActualamount += forConvert;
                            PdfPCell CNetPay1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNetPay1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CNetPay1.Border = 15;
                            Secondtable.AddCell(CNetPay1);
                            //27
                            string EmpBankAcNo = dt.Rows[i]["EmpBankAcNo"].ToString();
                            PdfPCell CSignature1 = new PdfPCell(new Phrase(EmpBankAcNo, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CSignature1.Border = 15;
                            CSignature1.MinimumHeight = 25;
                            Secondtable.AddCell(CSignature1);
                        }


                    }
                    #endregion


                    SecondtableFooter = new PdfPTable(tableCells);
                    SecondtableFooter.TotalWidth = 950f;
                    SecondtableFooter.LockedWidth = true;
                    float[] SecondFooterWidth = new float[] { 2f, 2f, 6f, 3f, 2f, 1.5f, 1.8f, 1.8f, 1.5f, 1.5f, 1.5f, 1.5f, 1.8f, 1.5f, 1.5f, 2f, 2f, 1.5f, 1.5f, 2f, 2f, 1.5f, 1.5f, 1.5f, 2f, 2f, 6f };
                    SecondtableFooter.SetWidths(SecondFooterWidth);
                    #region Table Footer
                    //1
                    PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCSNo.Border = 15;
                    SecondtableFooter.AddCell(FCSNo);
                    //2
                    PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpId1.Border = 15;
                    SecondtableFooter.AddCell(FCEmpId1);
                    //3
                    PdfPCell FCEmpName1 = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpName1.Border = 15;
                    SecondtableFooter.AddCell(FCEmpName1);
                    //4
                    PdfPCell FCEmpDesgn = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpDesgn.Border = 15;
                    //FCEmpDesgn.Colspan = 4;
                    SecondtableFooter.AddCell(FCEmpDesgn);
                    //5
                    PdfPCell FCNoOfDuties = new PdfPCell(new Phrase(totalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCNoOfDuties.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCNoOfDuties.Border = 15;
                    SecondtableFooter.AddCell(FCNoOfDuties);
                    //6
                    PdfPCell FCNoOfots = new PdfPCell(new Phrase(totalOts.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCNoOfots.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCNoOfots.Border = 15;
                    SecondtableFooter.AddCell(FCNoOfots);

                    //7
                    PdfPCell FCBasic1 = new PdfPCell(new Phrase(Math.Round(totalBasic).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCBasic1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCBasic1.Border = 15;
                    SecondtableFooter.AddCell(FCBasic1);


                    //8
                    PdfPCell FDa = new PdfPCell(new Phrase(Math.Round(totalDA).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FDa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FDa.Border = 15;
                    SecondtableFooter.AddCell(FDa);


                    //9

                    forConvert = 0;
                    PdfPCell FCHRA1 = new PdfPCell(new Phrase(Math.Round(totalHRA).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCHRA1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCHRA1.Border = 15;
                    SecondtableFooter.AddCell(FCHRA1);

                    //10
                    PdfPCell FCConveyance = new PdfPCell(new Phrase(Math.Round(totalConveyance).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCConveyance.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCConveyance.Border = 15;
                    SecondtableFooter.AddCell(FCConveyance);

                    //11
                    PdfPCell FCcca = new PdfPCell(new Phrase(Math.Round(totalCCA).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCcca.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCcca.Border = 15;
                    SecondtableFooter.AddCell(FCcca);
                    //12
                    PdfPCell FCWa = new PdfPCell(new Phrase(Math.Round(totalWA).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCWa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCWa.Border = 15;
                    SecondtableFooter.AddCell(FCWa);

                    //13
                    PdfPCell FCOa = new PdfPCell(new Phrase(Math.Round(totalOA).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCOa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCOa.Border = 15;
                    SecondtableFooter.AddCell(FCOa);

                    //14
                    PdfPCell Fbonus = new PdfPCell(new Phrase(Math.Round(totalbonus).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    Fbonus.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    Fbonus.Border = 15;
                    SecondtableFooter.AddCell(Fbonus);

                    //15
                    PdfPCell FCottamt = new PdfPCell(new Phrase(Math.Round(totalOTAmount).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCottamt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCottamt.Border = 15;
                    SecondtableFooter.AddCell(FCottamt);
                    //16
                    PdfPCell FCGross1 = new PdfPCell(new Phrase(Math.Round(totalGrass).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCGross1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCGross1.Border = 15;
                    SecondtableFooter.AddCell(FCGross1);
                    //17
                    PdfPCell FCPF1 = new PdfPCell(new Phrase(Math.Round(totalPF).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCPF1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCPF1.Border = 15;
                    SecondtableFooter.AddCell(FCPF1);
                    //18
                    PdfPCell FCESI1 = new PdfPCell(new Phrase(Math.Round(totalESI).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCESI1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCESI1.Border = 15;
                    SecondtableFooter.AddCell(FCESI1);
                    //19
                    PdfPCell FCProTax1 = new PdfPCell(new Phrase(Math.Round(totalProfTax).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCProTax1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCProTax1.Border = 15;
                    SecondtableFooter.AddCell(FCProTax1);
                    //20
                    PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(Math.Round(totalSalAdv).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCSalAdv1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCSalAdv1.Border = 15;
                    SecondtableFooter.AddCell(FCSalAdv1);
                    //21
                    PdfPCell FCUnifDed1 = new PdfPCell(new Phrase(Math.Round(totalUniforDed).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCUnifDed1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCUnifDed1.Border = 15;
                    SecondtableFooter.AddCell(FCUnifDed1);
                    //22
                    PdfPCell FCCanteended = new PdfPCell(new Phrase(Math.Round(totalCanteenAdv).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCCanteended.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCCanteended.Border = 15;
                    SecondtableFooter.AddCell(FCCanteended);
                    //23
                    PdfPCell FCOwf1 = new PdfPCell(new Phrase(Math.Round(totalOwf).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCOwf1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCOwf1.Border = 15;
                    SecondtableFooter.AddCell(FCOwf1);
                    //24
                    PdfPCell FCOtherDed1 = new PdfPCell(new Phrase(Math.Round(totalPenalty).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCOtherDed1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCOtherDed1.Border = 15;
                    SecondtableFooter.AddCell(FCOtherDed1);
                    //25
                    PdfPCell FCTotDed1 = new PdfPCell(new Phrase(Math.Round(totalDed).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCTotDed1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCTotDed1.Border = 15;
                    SecondtableFooter.AddCell(FCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                    //26
                    PdfPCell FCNetPay1 = new PdfPCell(new Phrase(Math.Round(totalActualamount).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCNetPay1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCNetPay1.Border = 15;
                    //FCNetPay1.Colspan = 2;
                    SecondtableFooter.AddCell(FCNetPay1);
                    //27
                    PdfPCell FCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCSignature1.Border = 15;
                    //FCSignature1.MinimumHeight = 25;
                    SecondtableFooter.AddCell(FCSignature1);
                    #endregion


                    SecondtableGrandtotalFooter = new PdfPTable(tableCells);
                    SecondtableGrandtotalFooter.TotalWidth = 950f;
                    SecondtableGrandtotalFooter.LockedWidth = true;
                    float[] SecondGrandtotalFooterWidth = new float[] { 2f, 2f, 6f, 3f, 2f, 1.5f, 1.8f, 1.8f, 1.5f, 1.5f, 1.5f, 1.5f, 1.8f, 1.5f, 1.5f, 2f, 2f, 1.5f, 1.5f, 2f, 2f, 1.5f, 1.5f, 1.5f, 2f, 2f, 6f };
                    SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

                    SecondtablecheckbyFooter = new PdfPTable(tableCells);
                    SecondtablecheckbyFooter.TotalWidth = 950f;
                    SecondtablecheckbyFooter.LockedWidth = true;
                    float[] SecondcheckbyFooterWidth = new float[] { 2f, 2f, 6f, 3f, 2f, 1.5f, 1.8f, 1.8f, 1.5f, 1.5f, 1.5f, 1.5f, 1.8f, 1.5f, 1.5f, 2f, 2f, 1.5f, 1.5f, 2f, 2f, 1.5f, 1.5f, 1.5f, 2f, 2f, 6f };
                    SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);


                    #region   Footer Headings

                    #region Table   Grand   Total  Footer
                    //1
                    PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCSNo.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCSNo);
                    //2
                    PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpId1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCEmpId1);
                    //3
                    PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("Grand  Totals: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpName1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCEmpName1);
                    //4
                    PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpDesgn.Border = 15;
                    //FCEmpDesgn.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);
                    //5
                    PdfPCell GFCNoOfDuties = new PdfPCell(new Phrase(GrandtotalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCNoOfDuties.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCNoOfDuties.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCNoOfDuties);
                    //6
                    PdfPCell GFCNoOfots = new PdfPCell(new Phrase(GrandtotalOts.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCNoOfots.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCNoOfots.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCNoOfots);

                    //7
                    PdfPCell GFCBasic1 = new PdfPCell(new Phrase(Math.Round(GrandtotalBasic).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCBasic1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCBasic1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCBasic1);


                    //8
                    PdfPCell GFDa = new PdfPCell(new Phrase(Math.Round(GrandtotalDA).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFDa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFDa.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFDa);


                    //9

                    forConvert = 0;
                    PdfPCell GFCHRA1 = new PdfPCell(new Phrase(Math.Round(GrandtotalHRA).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCHRA1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCHRA1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCHRA1);

                    //10
                    PdfPCell GFCConveyance = new PdfPCell(new Phrase(Math.Round(GrandtotalConveyance).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCConveyance.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCConveyance.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCConveyance);

                    //11
                    PdfPCell GFCcca = new PdfPCell(new Phrase(Math.Round(GrandtotalCCA).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCcca.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCcca.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCcca);
                    //12
                    PdfPCell GFCWa = new PdfPCell(new Phrase(Math.Round(GrandtotalWA).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCWa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCWa.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCWa);

                    //13
                    PdfPCell GFCOa = new PdfPCell(new Phrase(Math.Round(GrandtotalOA).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCOa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCOa.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCOa);

                    //14
                    PdfPCell GFbonus = new PdfPCell(new Phrase(Math.Round(Grandtotalbonus).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFbonus.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFbonus.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFbonus);

                    //15
                    PdfPCell GFCottamt = new PdfPCell(new Phrase(Math.Round(GrandtotalOTAmount).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCottamt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCottamt.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCottamt);
                    //16
                    PdfPCell GFCGross1 = new PdfPCell(new Phrase(Math.Round(GrandtotalGrass).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCGross1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCGross1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCGross1);
                    //17
                    PdfPCell GFCPF1 = new PdfPCell(new Phrase(Math.Round(GrandtotalPF).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCPF1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCPF1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCPF1);
                    //18
                    PdfPCell GFCESI1 = new PdfPCell(new Phrase(Math.Round(GrandtotalESI).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCESI1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCESI1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCESI1);
                    //19
                    PdfPCell GFCProTax1 = new PdfPCell(new Phrase(Math.Round(GrandtotalProfTax).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCProTax1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCProTax1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCProTax1);
                    //20
                    PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(Math.Round(GrandtotalSalAdv).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCSalAdv1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCSalAdv1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
                    //21
                    PdfPCell GFCUnifDed1 = new PdfPCell(new Phrase(Math.Round(GrandtotalUniforDed).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCUnifDed1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCUnifDed1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCUnifDed1);
                    //22
                    PdfPCell GFCCanteended = new PdfPCell(new Phrase(Math.Round(GrandtotalCanteenAdv).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCCanteended.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCCanteended.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCCanteended);
                    //23
                    PdfPCell GFCOwf1 = new PdfPCell(new Phrase(Math.Round(GrandtotalOwf).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCOwf1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCOwf1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCOwf1);
                    //24
                    PdfPCell GFCOtherDed1 = new PdfPCell(new Phrase(Math.Round(GrandtotalPenalty).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCOtherDed1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCOtherDed1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCOtherDed1);
                    //25
                    PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(Math.Round(GrandtotalDed).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCTotDed1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCTotDed1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                    //26
                    PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(Math.Round(GrandtotalActualamount).ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCNetPay1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCNetPay1.Border = 15;
                    //FCNetPay1.Colspan = 2;
                    SecondtablecheckbyFooter.AddCell(GFCNetPay1);
                    //27
                    PdfPCell GFCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCSignature1.Border = 15;
                    //FCSignature1.MinimumHeight = 25;
                    SecondtablecheckbyFooter.AddCell(GFCSignature1);
                    #endregion

                    //1
                    PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHCheckedbybr1.Border = 0;
                    FHCheckedbybr1.Rowspan = 0;
                    FHCheckedbybr1.Colspan = 14;
                    SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                    //2
                    PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHApprovedbr2.Border = 0;
                    FHApprovedbr2.Colspan = 13;

                    SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
                    SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                    SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


                    //1
                    PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHCheckedby.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHCheckedby.Border = 0;
                    FHCheckedby.Rowspan = 0;
                    FHCheckedby.Colspan = 14;
                    SecondtablecheckbyFooter.AddCell(FHCheckedby);
                    //2
                    PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Gross  Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHApprovedBy.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHApprovedBy.Border = 0;
                    FHApprovedBy.Colspan = 13;
                    SecondtablecheckbyFooter.AddCell(FHApprovedBy);



                    #endregion

                    document.Add(Secondtable);

                    if (nextpagerecordscount == targetpagerecors)
                    {
                        targetpagerecors = secondpagerecords;
                        document.Add(SecondtableFooter);
                        document.NewPage();
                        nextpagerecordscount = 0;
                        #region  Zero variables

                        totalActualamount = 0;
                        totalDuties = 0;
                        totalOts = 0;
                        totalBasic = 0;
                        totalDA = 0;
                        totalHRA = 0;
                        totalCCA = 0;
                        totalConveyance = 0;
                        totalWA = 0;
                        totalOA = 0;
                        totalGrass = 0;
                        totalOTAmount = 0;
                        totalPF = 0;
                        totalESI = 0;
                        totalProfTax = 0;
                        totalDed = 0;
                        totalSalAdv = 0;
                        totalUniforDed = 0;
                        totalCanteenAdv = 0;
                        totalOwf = 0;
                        totalPenalty = 0;
                        totalbonus = 0;

                        #endregion
                    }
                }

                if (nextpagerecordscount >= 0)
                {
                    document.Add(SecondtableFooter);
                    document.Add(SecondtableGrandtotalFooter);
                    document.Add(SecondtablecheckbyFooter);
                }
                document.Close();
                if (nextpagehasPages)
                {

                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=Wage Sheet.pdf");
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
            }
        }

        protected void btndownloadpdffile_Click(object sender, EventArgs e)
        {

            if (ddlpaymenttype.SelectedIndex == 0)
            {
                btnFormTNew_Click(sender, e);
                return;
            }
            if (ddlpaymenttype.SelectedIndex == 1)
            {
                btndutieswithots_Click(sender, e);
                return;
            }

            if (ddlpaymenttype.SelectedIndex == 2)
            {
                btndutieswithots_Click(sender, e);
                return;
            }

            if (ddlpaymenttype.SelectedIndex == 3)
            {
                btndutieswithots_Click(sender, e);
                return;
            }

            if (ddlpaymenttype.SelectedIndex == 4)
            {
                lbtn_Export_Click(sender, e);
                return;
            }


            //    //if (ddlpaymenttype.SelectedIndex == 1)
            //    //{
            //    //    btnonlyduties_Click(sender, e);
            //    //    return;
            //    //}

            //    //if (ddlpaymenttype.SelectedIndex == 2)
            //    //{
            //    //    btnonlyots_Click(sender, e);
            //    //    return;
            //    //}
            //    //if (ddlpaymenttype.SelectedIndex == 3)
            //    //{
            //    //    btnonlyWos_Click(sender, e);
            //    //    return;
            //    //}

            //    //if (ddlpaymenttype.SelectedIndex == 4)
            //    //{
            //    //    btnonlyNhs_Click(sender, e);
            //    //    return;
            //    //}

            //    // if (ddlpaymenttype.SelectedIndex ==5)
            //    //{
            //    //    btnonlyNpots_Click(sender, e);
            //    //    return;
            //    //}



            //    // if (ddlpaymenttype.SelectedIndex == 7)
            //    // {

            //    //     btnall_Click(sender, e);
            //    //     return;
            //    // }

            //    // if (ddlpaymenttype.SelectedIndex == 8)
            //    // {

            //    //     btnIncentives_Click(sender, e);
            //    //     return;
            //    // }

            //    // // if (ddlpaymenttype.SelectedIndex == 8)
            //    // //{
            //    // //    btnbellowtenattendance_Click(sender, e);
            //    // //    return;
            //    // //}
            //    // if (ddlpaymenttype.SelectedIndex == 9)
            //    // {
            //    //     btnonlyots1_Click(sender, e);
            //    //     return;
            //    // }

            //    // if (ddlpaymenttype.SelectedIndex == 10)
            //    // {
            //    //     NhsPdf();
            //    //     return;
            //    // }

            //    // if (ddlpaymenttype.SelectedIndex == 11)
            //    // {
            //    //     NPOTsPdf();
            //    //     return;
            //    // }

            //    // if (ddlpaymenttype.SelectedIndex == 12)
            //    // {
            //    //     WOsPdf();
            //    //     return;
            //    // }
        }

        protected int GetMonthAndYear()
        {
            int month = 0;
            if (ddlmonth.SelectedIndex == 1)
            {
                month = GlobalData.Instance.GetIDForNextMonth();
            }
            else if (ddlmonth.SelectedIndex == 2)
            {
                month = GlobalData.Instance.GetIDForThisMonth();
            }
            else if (ddlmonth.SelectedIndex == 3)
            {
                month = GlobalData.Instance.GetIDForPrviousMonth();
            }
            return month;
        }

        //protected void btnonlyots1_Click(object sender, EventArgs e)
        //{
        //    if (ddlClients.SelectedIndex <= 0)
        //    {
        //        ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please select Client ID to generate wage sheet')", true);
        //        return;
        //    }

        //    int payMonth = GetMonth(ddlmonth.SelectedValue);
        //    int month = GetMonthAndYear();

        //    string selectmonth = string.Empty;
        //    string SelectmonthWithbankacno = string.Empty;
        //    string SelectmonthWithoutbankacno = string.Empty;
        //    DataTable dt = null;
        //    DataTable Dtwithoutaccountno = null;


        //    if (ddlnoofattendance.SelectedIndex == 1)
        //    {

        //        if (radioempid.Checked)
        //        {

        //            selectmonth = "select Eps.EmpId,Eps.Desgn,OTSalaryRate as salaryrate, Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.HRA,Eps.CCA," +
        //                 " Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax,eps.otamtonlw,eps.otamtonnfhs,(eps.otamt+eps.otamtonlw+eps.otamtonnfhs) as Total," +
        //               "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount,Eps.OWF, " +
        //               "(ISnull(EmpDetails.EmpFName,'')+' '+ ISnull(EmpDetails.EmpmName,'') +' '+ISnull(EmpDetails.EmplName,'') ) As Fullname,EmpDetails.EmpMName," +
        //               "EmpDetails.UnitId, EmpDetails.EmpBankAppNo,Empdetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT from EmpPaySheet as Eps  " +
        //               " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND  " +
        //               " EmpAttendance.ClientId=Eps.ClientId  And  Eps.NoOfDuties>10 AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
        //                // ddlClients.SelectedValue + "' AND Eps.Month=" + month + "  Order by   case when EmpDetails.EmpBankAcNo is null then 1 else 0 end, Eps.EmpId   "; 
        //                // ddlClients.SelectedValue + "'  And  Eps.PF<>0  And Eps.Esi<>0 AND Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn  Order by cast(substring(Eps.EmpId," + Elength +
        //               ddlClients.SelectedValue + "'  And   Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn  Order by  Eps.EmpId";

        //            dt = SqlHelper.Instance.GetTableByQuery(selectmonth);
        //        }
        //        else
        //        {
        //            SelectmonthWithbankacno = "select Eps.EmpId,Eps.Desgn,OTSalaryRate as salaryrate, Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.HRA,Eps.CCA," +
        //           " Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax,eps.otamtonlw,eps.otamtonnfhs,(eps.otamt+eps.otamtonlw+eps.otamtonnfhs) as Total," +
        //         "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount,Eps.OWF, " +
        //         "(ISnull(EmpDetails.EmpFName,'')+' '+ ISnull(EmpDetails.EmpmName,'') +' '+ISnull(EmpDetails.EmplName,'') ) As Fullname, EmpDetails.EmpFName,EmpDetails.EmpMName," +
        //         "EmpDetails.UnitId, EmpDetails.EmpBankAppNo,Empdetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT from EmpPaySheet as Eps  " +
        //         " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND  " +
        //         " EmpAttendance.ClientId=Eps.ClientId  And  Eps.NoOfDuties>10 AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
        //                // ddlClients.SelectedValue + "' AND Eps.Month=" + month + "  Order by   case when EmpDetails.EmpBankAcNo is null then 1 else 0 end, Eps.EmpId   "; 
        //                //ddlClients.SelectedValue + "'  And  Eps.PF<>0  And Eps.Esi<>0 AND Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn "+
        //         ddlClients.SelectedValue + "'  And   Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn " +
        //         " And  len( EmpDetails.EmpBankAcNo)<>0   Order by  Eps.EmpId";
        //            dt = SqlHelper.Instance.GetTableByQuery(SelectmonthWithbankacno);

        //            SelectmonthWithoutbankacno = "select Eps.EmpId,Eps.Desgn,OTSalaryRate as salaryrate, Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.HRA,Eps.CCA," +
        //       " Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax,eps.otamtonlw,eps.otamtonnfhs,(eps.otamt+eps.otamtonlw+eps.otamtonnfhs) as Total," +
        //     "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount,Eps.OWF, " +
        //     "(ISnull(EmpDetails.EmpFName,'')+' '+ ISnull(EmpDetails.EmpmName,'') +' '+ISnull(EmpDetails.EmplName,'') ) As Fullname, EmpDetails.EmpFName,EmpDetails.EmpMName," +
        //     "EmpDetails.UnitId, EmpDetails.EmpBankAppNo,Empdetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT from EmpPaySheet as Eps  " +
        //     " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND  " +
        //     " EmpAttendance.ClientId=Eps.ClientId  And  Eps.NoOfDuties>10 AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
        //                // ddlClients.SelectedValue + "' AND Eps.Month=" + month + "  Order by   case when EmpDetails.EmpBankAcNo is null then 1 else 0 end, Eps.EmpId   "; 
        //                //ddlClients.SelectedValue + "'  And  Eps.PF<>0  And Eps.Esi<>0 AND Eps.Month=" + month + 
        //     ddlClients.SelectedValue + "'  And  Eps.Month=" + month +
        //     " and  EmpAttendance.Design=Eps.Desgn " +
        //     " And  (len( EmpDetails.EmpBankAcNo)=0  or  EmpDetails.EmpBankAcNo is null)  Order by Eps.EmpId";
        //            Dtwithoutaccountno = SqlHelper.Instance.GetTableByQuery(SelectmonthWithoutbankacno);
        //            if (Dtwithoutaccountno.Rows.Count > 0)
        //            {
        //                dt.Merge(Dtwithoutaccountno);
        //            }

        //        }
        //    }
        //    if (ddlnoofattendance.SelectedIndex == 2)
        //    {

        //        if (radioempid.Checked)
        //        {

        //            selectmonth = "select Eps.EmpId,Eps.Desgn,OTSalaryRate as salaryrate, Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.HRA,Eps.CCA," +
        //                    " Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax,eps.otamtonlw,eps.otamtonnfhs,(eps.otamt+eps.otamtonlw+eps.otamtonnfhs) as Total," +
        //                  "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount,Eps.OWF, " +
        //                  "(ISnull(EmpDetails.EmpFName,'')+' '+ ISnull(EmpDetails.EmpmName,'') +' '+ISnull(EmpDetails.EmplName,'') ) As Fullname, EmpDetails.EmpFName,EmpDetails.EmpMName," +
        //                  "EmpDetails.UnitId, EmpDetails.EmpBankAppNo,Empdetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT from EmpPaySheet as Eps  " +
        //                  " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND  " +
        //                   " EmpAttendance.ClientId=Eps.ClientId  And  Eps.NoOfDuties<=10 AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
        //                // ddlClients.SelectedValue + "' AND Eps.Month=" + month + "  Order by   case when EmpDetails.EmpBankAcNo is null then 1 else 0 end, Eps.EmpId   "; 
        //                // ddlClients.SelectedValue + "'  And  Eps.PF<>0  And Eps.Esi<>0 AND Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn  Order by cast(substring(Eps.EmpId," + Elength +
        //                  ddlClients.SelectedValue + "'  And    Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn  Order by  Eps.EmpId";


        //            dt = SqlHelper.Instance.GetTableByQuery(selectmonth);
        //        }
        //        else
        //        {

        //            SelectmonthWithbankacno = "select Eps.EmpId,Eps.Desgn,OTSalaryRate as salaryrate, Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.HRA,Eps.CCA," +
        //                 " Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax,eps.otamtonlw,eps.otamtonnfhs,(eps.otamt+eps.otamtonlw+eps.otamtonnfhs) as Total," +
        //               "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount,Eps.OWF, " +
        //               "(ISnull(EmpDetails.EmpFName,'')+' '+ ISnull(EmpDetails.EmpmName,'') +' '+ISnull(EmpDetails.EmplName,'') ) As Fullname, EmpDetails.EmpFName,EmpDetails.EmpMName," +
        //               "EmpDetails.UnitId, EmpDetails.EmpBankAppNo,Empdetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT from EmpPaySheet as Eps  " +
        //               " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND  " +
        //               " EmpAttendance.ClientId=Eps.ClientId  And  Eps.NoOfDuties<=10 AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +

        //               // ddlClients.SelectedValue + "' AND Eps.Month=" + month + "  Order by   case when EmpDetails.EmpBankAcNo is null then 1 else 0 end, Eps.EmpId   "; 
        //                //ddlClients.SelectedValue + "'  And  Eps.PF<>0  And Eps.Esi<>0 AND Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn "+
        //               ddlClients.SelectedValue + "'  And   Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn " +

        //               " And  len( EmpDetails.EmpBankAcNo)<>0  Order by  Eps.EmpId";
        //            dt = SqlHelper.Instance.GetTableByQuery(SelectmonthWithbankacno);

        //            SelectmonthWithoutbankacno = "select Eps.EmpId,Eps.Desgn,OTSalaryRate as salaryrate, Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.HRA,Eps.CCA," +
        //                 " Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax,eps.otamtonlw,eps.otamtonnfhs,(eps.otamt+eps.otamtonlw+eps.otamtonnfhs) as Total," +
        //               "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount,Eps.OWF, " +
        //               "(ISnull(EmpDetails.EmpFName,'')+' '+ ISnull(EmpDetails.EmpmName,'') +' '+ISnull(EmpDetails.EmplName,'') ) As Fullname,  EmpDetails.EmpFName,EmpDetails.EmpMName," +
        //               "EmpDetails.UnitId, EmpDetails.EmpBankAppNo,Empdetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT from EmpPaySheet as Eps  " +
        //               " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND  " +
        //               " EmpAttendance.ClientId=Eps.ClientId  And  Eps.NoOfDuties<=10 AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
        //                // ddlClients.SelectedValue + "' AND Eps.Month=" + month + "  Order by   case when EmpDetails.EmpBankAcNo is null then 1 else 0 end, Eps.EmpId   "; 
        //                //ddlClients.SelectedValue + "'  And  Eps.PF<>0  And Eps.Esi<>0 AND Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn "+
        //               ddlClients.SelectedValue + "'  And   Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn " +

        //               " And  (len( EmpDetails.EmpBankAcNo)=0  or  EmpDetails.EmpBankAcNo is null)  Order by Eps.EmpId";
        //            Dtwithoutaccountno = SqlHelper.Instance.GetTableByQuery(SelectmonthWithoutbankacno);
        //            if (Dtwithoutaccountno.Rows.Count > 0)
        //            {
        //                dt.Merge(Dtwithoutaccountno);
        //            }
        //        }
        //    }
        //    if (ddlnoofattendance.SelectedIndex == 0)
        //    {
        //        if (radioempid.Checked)
        //        {
        //            selectmonth = "select Eps.EmpId,Eps.Desgn,OTSalaryRate as salaryrate, Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.HRA,Eps.CCA," +
        //                    " Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax,eps.otamtonlw,eps.otamtonnfhs,(eps.otamt+eps.otamtonlw+eps.otamtonnfhs) as Total," +
        //                  "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount,Eps.OWF, " +
        //                  "(ISnull(EmpDetails.EmpFName,'')+' '+ ISnull(EmpDetails.EmpmName,'') +' '+ISnull(EmpDetails.EmplName,'') ) As Fullname,  EmpDetails.EmpFName,EmpDetails.EmpMName," +
        //                  "EmpDetails.UnitId, EmpDetails.EmpBankAppNo,Empdetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT from EmpPaySheet as Eps  " +
        //                  " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND  " +
        //                  " EmpAttendance.ClientId=Eps.ClientId   AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
        //                // ddlClients.SelectedValue + "' AND Eps.Month=" + month + "  Order by   case when EmpDetails.EmpBankAcNo is null then 1 else 0 end, Eps.EmpId   "; 
        //                //  ddlClients.SelectedValue + "'  And  Eps.PF<>0  And Eps.Esi<>0 AND Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn  Order by cast(substring(Eps.EmpId," + Elength +
        //                  ddlClients.SelectedValue + "'  And   Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn  Order by  Eps.EmpId";
        //            dt = SqlHelper.Instance.GetTableByQuery(selectmonth);
        //        }
        //        else
        //        {
        //            SelectmonthWithbankacno = "select Eps.EmpId,Eps.Desgn,OTSalaryRate as salaryrate, Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.HRA,Eps.CCA," +
        //                 " Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax,eps.otamtonlw,eps.otamtonnfhs,(eps.otamt+eps.otamtonlw+eps.otamtonnfhs) as Total," +
        //               "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount,Eps.OWF, " +
        //               "(ISnull(EmpDetails.EmpFName,'')+' '+ ISnull(EmpDetails.EmpmName,'') +' '+ISnull(EmpDetails.EmplName,'') ) As Fullname,  EmpDetails.EmpFName,EmpDetails.EmpMName," +
        //               "EmpDetails.UnitId, EmpDetails.EmpBankAppNo,Empdetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT from EmpPaySheet as Eps  " +
        //               " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND  " +
        //               " EmpAttendance.ClientId=Eps.ClientId   AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
        //                // ddlClients.SelectedValue + "' AND Eps.Month=" + month + "  Order by   case when EmpDetails.EmpBankAcNo is null then 1 else 0 end, Eps.EmpId   "; 
        //                // ddlClients.SelectedValue + "'  And  Eps.PF<>0  And Eps.Esi<>0 AND Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn "+
        //               ddlClients.SelectedValue + "'  And  Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn " +
        //              " And  len( EmpDetails.EmpBankAcNo)<>0   Order by  Eps.EmpId";
        //            dt = SqlHelper.Instance.GetTableByQuery(SelectmonthWithbankacno);


        //            SelectmonthWithoutbankacno = "select Eps.EmpId,Eps.Desgn,OTSalaryRate as salaryrate, Eps.NoOfDuties,Eps.Basic,Eps.DA,Eps.HRA,Eps.CCA," +
        //             " Eps.Conveyance,Eps.WashAllowance,Eps.OtherAllowance,Eps.PF,Eps.ESI,Eps.OTAmt,Eps.ProfTax,eps.otamtonlw,eps.otamtonnfhs,(eps.otamt+eps.otamtonlw+eps.otamtonnfhs) as Total," +
        //           "Eps.SalAdvDed,Eps.CanteenAdv,Eps.UniformDed,Eps.Penalty,Eps.OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount,Eps.OWF, " +
        //           "(ISnull(EmpDetails.EmpFName,'')+' '+ ISnull(EmpDetails.EmpmName,'') +' '+ISnull(EmpDetails.EmplName,'') ) As Fullname,  EmpDetails.EmpFName,EmpDetails.EmpMName," +
        //           "EmpDetails.UnitId, EmpDetails.EmpBankAppNo,Empdetails.EmpBankAcNo, EmpDetails.EmpBankCardRef,EmpAttendance.OT from EmpPaySheet as Eps  " +
        //           " INNER JOIN EmpDetails ON Eps.EmpId = EmpDetails.EmpId INNER JOIN EmpAttendance ON EmpAttendance.EmpId=Eps.EmpId AND  " +
        //           " EmpAttendance.ClientId=Eps.ClientId   AND EmpAttendance.Month=Eps.Month AND Eps.ClientId='" +
        //                // ddlClients.SelectedValue + "' AND Eps.Month=" + month + "  Order by   case when EmpDetails.EmpBankAcNo is null then 1 else 0 end, Eps.EmpId   "; 
        //                //ddlClients.SelectedValue + "'  And  Eps.PF<>0  And Eps.Esi<>0 AND Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn "+
        //           ddlClients.SelectedValue + "'  And  Eps.Month=" + month + " and  EmpAttendance.Design=Eps.Desgn " +
        //           " And  (len( EmpDetails.EmpBankAcNo)=0  or  EmpDetails.EmpBankAcNo is null)  Order by  Eps.EmpId";
        //            Dtwithoutaccountno = SqlHelper.Instance.GetTableByQuery(SelectmonthWithoutbankacno);

        //            if (Dtwithoutaccountno.Rows.Count > 0)
        //            {
        //                dt.Merge(Dtwithoutaccountno);
        //            }
        //        }
        //    }



        //    MemoryStream ms = new MemoryStream();
        //    if (dt.Rows.Count > 0)
        //    {
        //        Document document = new Document(PageSize.LEGAL.Rotate());
        //        PdfWriter writer = PdfWriter.GetInstance(document, ms);
        //        document.Open();
        //        document.AddTitle("FaMS");
        //        document.AddAuthor("WebWonders");
        //        document.AddSubject("Only OTs");
        //        document.AddKeywords("Keyword1, keyword2, …");//
        //        float forConvert;
        //        string strQry = "Select * from CompanyInfo  where   ClientidPrefix='" + CmpIDPrefix + "'";
        //        DataTable compInfo = SqlHelper.Instance.GetTableByQuery(strQry);
        //        string companyName1 = "Your Company Name";
        //        string companyAddress = "Your Company Address";
        //        if (compInfo.Rows.Count > 0)
        //        {
        //            companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
        //            companyAddress = compInfo.Rows[0]["Address"].ToString();
        //        }

        //        int tableCells = 21;
        //        #region variables for total
        //        float totalOts = 0;
        //        float totalSalaryrte = 0;
        //        float totalOTAmount = 0;
        //        float totalLw = 0;
        //        float totalNfhs = 0;
        //        float ttotal = 0;


        //        #endregion
        //        #region Titles of Document
        //        PdfPTable Maintable = new PdfPTable(tableCells);
        //        Maintable.TotalWidth = 950f;
        //        Maintable.LockedWidth = true;
        //        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        //        Maintable.SetWidths(width);
        //        uint FONT_SIZE = 10;

        //        //Company Name & vage act details
        //        PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
        //        cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //        cellemp.Colspan = tableCells;
        //        cellemp.Border = 0;

        //        PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
        //        Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //        Heading.Colspan = tableCells;
        //        Heading.Border = 0;
        //        Maintable.AddCell(Heading);

        //        PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)",
        //            FontFactory.GetFont(Fontstyle, 15, Font.BOLD, BaseColor.BLACK)));
        //        actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //        actDetails.Colspan = tableCells;
        //        actDetails.Border = 0;// 15;
        //        Maintable.AddCell(actDetails);

        //        Maintable.AddCell(cellemp);
        //        #endregion
        //        #region Table Headings
        //        PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
        //        companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //        companyName.Colspan = tableCells;
        //        companyName.Border = 0;// 15;
        //        Maintable.AddCell(companyName);

        //        PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 15, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        //        paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //        paySheet.Colspan = tableCells;
        //        paySheet.Border = 0;// 15;
        //        Maintable.AddCell(paySheet);

        //        PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //        CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        CClient.Colspan = 3;
        //        CClient.Border = 0;// 15;
        //        Maintable.AddCell(CClient);

        //        PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlcname.SelectedItem, FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //        CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        CClientName.Colspan = 6;
        //        CClientName.Border = 0;// 15;
        //        Maintable.AddCell(CClientName);

        //        PdfPCell CDates = new PdfPCell(new Phrase("Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //        CDates.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        CDates.Colspan = 6;
        //        CDates.Border = 0;// 15;
        //        Maintable.AddCell(CDates);

        //        //PdfPCell CPaySheetDate = new PdfPCell(new Phrase("Pay Sheet Date :  " + DateTime.Now.Date.ToString("dd/MM/yyyy"), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //        PdfPCell CPaySheetDate = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //        CPaySheetDate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        CPaySheetDate.Colspan = 3;
        //        CPaySheetDate.Border = 0;// 15;
        //        Maintable.AddCell(CPaySheetDate);

        //        PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :   " + ddlmonth.SelectedValue, FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
        //        CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        CPayMonth.Colspan = 3;
        //        CPayMonth.Border = 0;// 15;
        //        Maintable.AddCell(CPayMonth);

        //        Maintable.AddCell(cellemp);
        //        document.Add(Maintable);
        //        tableCells = 11;

        //        PdfPTable Secondtable = new PdfPTable(tableCells);
        //        Secondtable.TotalWidth = 950f;
        //        //Secondtable.
        //        Secondtable.LockedWidth = true;
        //        float[] SecondWidth = new float[] { 0.8f, 1.3f, 3f, 2f, 2f, 1f, 1f, 1f,1f,1f, 4f };
        //        Secondtable.SetWidths(SecondWidth);

        //        //Cell Headings
        //        PdfPCell sNo = new PdfPCell(new Phrase("S . No.", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        sNo.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //        //sNo.Colspan = 1;
        //        sNo.Border = 15;// 15;

        //        Secondtable.AddCell(sNo);

        //        PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        CEmpId.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        CEmpId.Border = 15;// 15;
        //        Secondtable.AddCell(CEmpId);

        //        PdfPCell CEmpName = new PdfPCell(new Phrase("Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        CEmpName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        CEmpName.Border = 15;// 15;
        //        Secondtable.AddCell(CEmpName);

        //        PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        CDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        CDesgn.Border = 15;
        //        Secondtable.AddCell(CDesgn);



        //        PdfPCell COTs = new PdfPCell(new Phrase("OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        COTs.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        COTs.Border = 15;
        //        Secondtable.AddCell(COTs);

        //        PdfPCell CSalaryRate = new PdfPCell(new Phrase("S.Rate", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        CSalaryRate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        CSalaryRate.Border = 15;
        //        Secondtable.AddCell(CSalaryRate);

        //        PdfPCell COTamt = new PdfPCell(new Phrase("OTAmt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        COTamt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        COTamt.Border = 15;
        //        Secondtable.AddCell(COTamt);

        //        PdfPCell COLw = new PdfPCell(new Phrase("Leave Wages", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        COLw.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        COLw.Border = 15;
        //        Secondtable.AddCell(COLw);


        //        PdfPCell CONfhs = new PdfPCell(new Phrase("NFHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        CONfhs.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        CONfhs.Border = 15;
        //        Secondtable.AddCell(CONfhs);

        //        PdfPCell COTotal = new PdfPCell(new Phrase("Total", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        COTotal.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        COTotal.Border = 15;
        //        Secondtable.AddCell(COTotal);

        //        PdfPCell CSignature = new PdfPCell(new Phrase("Bank A/c No./ Signature", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        CSignature.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        CSignature.Border = 15;
        //        Secondtable.AddCell(CSignature);
        //        #endregion
        //        #region Table Data
        //        //int rowCount = 0;
        //        //int pageCount = 0;
        //        for (int i = 0, j = 0; i < dt.Rows.Count; i++)
        //        {
        //            forConvert = 0;


        //            if (dt.Rows[i]["OT"].ToString().Trim().Length > 0)
        //                forConvert = Convert.ToSingle(dt.Rows[i]["OT"].ToString());


        //            if (forConvert > 0)
        //            {
        //                PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                CSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CSNo.Border = 15;
        //                Secondtable.AddCell(CSNo);

        //                PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CEmpId1.Border = 15;
        //                Secondtable.AddCell(CEmpId1);

        //                PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["FullName"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CEmpName1.Border = 15;
        //                Secondtable.AddCell(CEmpName1);

        //                PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Desgn"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CEmpDesgn.Border = 15;
        //                Secondtable.AddCell(CEmpDesgn);

        //                forConvert = 0;
        //                if (dt.Rows[i]["OT"].ToString().Trim().Length > 0)
        //                    forConvert = Convert.ToSingle(dt.Rows[i]["OT"].ToString());
        //                totalOts += forConvert;
        //                PdfPCell CNoOfots = new PdfPCell(new Phrase(forConvert.ToString("0.0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                CNoOfots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                CNoOfots.Border = 15;
        //                Secondtable.AddCell(CNoOfots);

        //                if (dt.Rows[i]["salaryrate"].ToString().Trim().Length > 0)
        //                    forConvert = Convert.ToSingle(dt.Rows[i]["salaryrate"].ToString());
        //                totalSalaryrte += forConvert;
        //                PdfPCell CSalRate = new PdfPCell(new Phrase(forConvert.ToString("#,##0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                CSalRate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                CSalRate.Border = 15;
        //                Secondtable.AddCell(CSalRate);

        //                forConvert = 0;
        //                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["otamt"].ToString()));
        //                totalOTAmount += forConvert;
        //                PdfPCell CSalotamt = new PdfPCell(new Phrase(forConvert.ToString("#,##0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                CSalotamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                CSalotamt.Border = 15;
        //                Secondtable.AddCell(CSalotamt);

        //                forConvert = 0;
        //                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["otamtonlw"].ToString()));
        //                totalLw += forConvert;
        //                PdfPCell COlw1 = new PdfPCell(new Phrase(forConvert.ToString("#,##0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                COlw1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                COlw1.Border = 15;
        //                Secondtable.AddCell(COlw1);

        //                forConvert = 0;
        //                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["otamtonnfhs"].ToString()));
        //                totalNfhs += forConvert;
        //                PdfPCell COnfhs1 = new PdfPCell(new Phrase(forConvert.ToString("#,##0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                COnfhs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                COnfhs1.Border = 15;
        //                Secondtable.AddCell(COnfhs1);

        //                forConvert = 0;
        //                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Total"].ToString()));
        //                ttotal += forConvert;
        //                PdfPCell COTotal1 = new PdfPCell(new Phrase(forConvert.ToString("#,##0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                COTotal1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //                COTotal1.Border = 15;
        //                Secondtable.AddCell(COTotal1);

        //                string EmpBankAcNo = dt.Rows[i]["EmpBankAcNo"].ToString();

        //                PdfPCell CEmpBankAcNo = new PdfPCell(new Phrase(EmpBankAcNo, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //                CEmpBankAcNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //                CEmpBankAcNo.Border = 15;
        //                CEmpBankAcNo.MinimumHeight = 25;
        //                Secondtable.AddCell(CEmpBankAcNo);
        //            }
        //        }
        //        #endregion
        //        #region Table Footer
        //        //1
        //        PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        FCSNo.Border = 15;
        //        Secondtable.AddCell(FCSNo);
        //        //2
        //        PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        FCEmpId1.Border = 15;
        //        Secondtable.AddCell(FCEmpId1);
        //        //3
        //        PdfPCell FCEmpName1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        FCEmpName1.Border = 15;
        //        Secondtable.AddCell(FCEmpName1);
        //        //4
        //        PdfPCell FCEmpDesgn = new PdfPCell(new Phrase("Total", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        FCEmpDesgn.Border = 15;
        //        //FCEmpDesgn.Colspan = 4;
        //        Secondtable.AddCell(FCEmpDesgn);
        //        //5
        //        PdfPCell FCNoOfDuties = new PdfPCell(new Phrase(totalOts.ToString("0.0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //        FCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //        FCNoOfDuties.Border = 15;
        //        Secondtable.AddCell(FCNoOfDuties);
        //        //6
        //        PdfPCell FCNsalaryrate = new PdfPCell(new Phrase(Math.Round(totalSalaryrte).ToString("#,##0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //        FCNsalaryrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //        FCNsalaryrate.Border = 15;
        //        Secondtable.AddCell(FCNsalaryrate);

        //        //7
        //        PdfPCell FCOtamt = new PdfPCell(new Phrase(Math.Round(totalOTAmount).ToString("#,##0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //        FCOtamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //        FCOtamt.Border = 15;
        //        Secondtable.AddCell(FCOtamt);
        //        //8

        //        forConvert = 0;
        //        PdfPCell FClw = new PdfPCell(new Phrase(Math.Round(totalLw).ToString("#,##0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //        FClw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //        FClw.Border = 15;
        //        Secondtable.AddCell(FClw);


        //        forConvert = 0;
        //        PdfPCell FCNfhs = new PdfPCell(new Phrase(Math.Round(totalNfhs).ToString("#,##0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //        FCNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //        FCNfhs.Border = 15;
        //        Secondtable.AddCell(FCNfhs);


        //        forConvert = 0;
        //        PdfPCell FCTotal = new PdfPCell(new Phrase(Math.Round(ttotal).ToString("#,##0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
        //        FCTotal.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
        //        FCTotal.Border = 15;
        //        Secondtable.AddCell(FCTotal);
        //        //9
        //        PdfPCell FCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        FCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        FCSignature1.Border = 15;
        //        //FCSignature1.MinimumHeight = 25;
        //        Secondtable.AddCell(FCSignature1);
        //        #endregion

        //        #region   Footer Headings


        //        //1
        //        PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //        FHCheckedbybr1.Border = 0;
        //        FHCheckedbybr1.Rowspan = 0;
        //        FHCheckedbybr1.Colspan = 11;
        //        Secondtable.AddCell(FHCheckedbybr1);
        //        //2
        //        PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //        FHApprovedbr2.Border = 0;
        //        FHApprovedbr2.Colspan = 11;
        //        Secondtable.AddCell(FHApprovedbr2);

        //        //1
        //        PdfPCell FHCheckedby = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        FHCheckedby.HorizontalAlignment =0; //0=Left, 1=Centre, 2=Right
        //        FHCheckedby.Border = 0;
        //        FHCheckedby.Rowspan = 0;
        //        FHCheckedby.Colspan = 11;
        //        Secondtable.AddCell(FHCheckedby);
        //        //2

        //        PdfPCell FHApprovedBy1 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        FHApprovedBy1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        FHApprovedBy1.Border = 0;
        //        FHApprovedBy1.Colspan = 11;
        //        Secondtable.AddCell(FHApprovedBy1);
        //        Secondtable.AddCell(FHApprovedBy1);
        //        Secondtable.AddCell(FHApprovedBy1);

        //        PdfPCell FHApprovedBy = new PdfPCell(new Phrase(" Checked By                                                                                                                            Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
        //        FHApprovedBy.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        //        FHApprovedBy.Border = 0;
        //        FHApprovedBy.Colspan =11;
        //        Secondtable.AddCell(FHApprovedBy);


        //        #endregion
        //        document.Add(Secondtable);
        //        document.Close();

        //        Response.ContentType = "application/pdf";
        //        Response.AddHeader("content-disposition", "attachment;filename=Wage slip for OTs1.pdf");
        //        Response.Buffer = true;
        //        Response.Clear();
        //        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        //        Response.OutputStream.Flush();
        //        Response.End();
        //    }

        //}

        static int CountSundays(int year, int month)
        {
            var firstDay = new DateTime(year, month, 1);

            var day29 = firstDay.AddDays(28);
            var day30 = firstDay.AddDays(29);
            var day31 = firstDay.AddDays(30);

            if ((day29.Month == month && day29.DayOfWeek == DayOfWeek.Sunday)
            || (day30.Month == month && day30.DayOfWeek == DayOfWeek.Sunday)
            || (day31.Month == month && day31.DayOfWeek == DayOfWeek.Sunday))
            {
                return 5;
            }
            else
            {
                return 4;
            }
        }

        protected void NhsPdf()
        {
            int titleofdocumentindex = 0;
            if (ddlClients.SelectedIndex <= 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
                return;
            }

            int payMonth = GetMonth(ddlmonth.SelectedValue);
            int month = GetMonthAndYear();

            string selectmonth = string.Empty;

            if (ddlnoofattendance.SelectedIndex == 1)
            {

                selectmonth = "select ep.EmpId,ISNULL(e.EmpFName,'')+' '+ISNULL(e.EmpMName,'')+' '+ISNULL(e.EmpLName,'') as Name,D.Design,ep.NHS,ep.Nhsamt," +
                    " ep.esionnhs,ep.PFonnhs,(ep.Nhsamt-ep.PFonnhs-ep.esionnhs)  as Total    from EmpPaySheet as Ep inner join EmpDetails as E on ep.EmpId=e.EmpId" +
                " Inner Join Designations  D on D.DesignID=Eps.Desgn and Ep.NHS>10 and Ep.ClientId='" + ddlClients.SelectedValue + "' AND Ep.Month=" + month + "  Order by empid";

            }

            if (ddlnoofattendance.SelectedIndex == 2)
            {

                selectmonth = "select ep.EmpId,ISNULL(e.EmpFName,'')+' '+ISNULL(e.EmpMName,'')+' '+ISNULL(e.EmpLName,'') as Name,D.Design,ep.NHS,ep.Nhsamt," +
                    "  ep.esionnhs,ep.PFonnhs,(ep.Nhsamt-ep.PFonnhs-ep.esionnhs)  as Total from EmpPaySheet as Ep inner join EmpDetails as E on ep.EmpId=e.EmpId " +
                    " Inner Join Designations  D on D.DesignID=Eps.Desgn and Ep.NHS<=10 AND Ep.ClientId='" + ddlClients.SelectedValue + "' AND Ep.Month=" + month + " Order by empid";

            }
            if (ddlnoofattendance.SelectedIndex == 0)
            {

                selectmonth = "select ep.EmpId,ISNULL(e.EmpFName,'')+' '+ISNULL(e.EmpMName,'')+' '+ISNULL(e.EmpLName,'') as Name,D.Design,ep.NHS," +
                    "ep.Nhsamt,ep.esionnhs,ep.PFonnhs,(ep.Nhsamt-ep.PFonnhs-ep.esionnhs)  as Total " +
                    "   from EmpPaySheet as Ep inner join EmpDetails as E on ep.EmpId=e.EmpId Inner Join Designations  D on D.DesignID=Eps.Desgn " +
                    " and  Ep.ClientId='" +
                ddlClients.SelectedValue + "' AND Ep.Month=" + month + " Order by empid";

            }

            DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(selectmonth).Result;

            MemoryStream ms = new MemoryStream();
            if (dt.Rows.Count > 0)
            {
                Document document = new Document(PageSize.A4);
                PdfWriter writer = PdfWriter.GetInstance(document, ms);
                document.Open();
                document.AddTitle("FaMS");
                document.AddAuthor("WebWonders");
                document.AddSubject("Wage Sheet");
                document.AddKeywords("Keyword1, keyword2, …");//
                float forConvert;
                string strQry = "Select * from  where   ClientidPrefix='" + CmpIDPrefix + "'";
                DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                string companyName1 = "Your Company Name";
                string companyAddress = "Your Company Address";
                if (compInfo.Rows.Count > 0)
                {
                    companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
                    companyAddress = compInfo.Rows[0]["Address"].ToString();
                }

                // int tableCells = 27;
                #region variables for total

                float totalNhs = 0;
                float totalNhsamt = 0;
                float totalEsi = 0;
                float totalPf = 0;
                float totalTotal = 0;

                #endregion


                #region variables for  Grand  total

                float GrandtotalNhs = 0;
                float GrandtotalNhsamt = 0;
                float GrandtotalEsi = 0;
                float GrandtotalPf = 0;
                float GrandtotalTotal = 0;

                #endregion

                int nextpagerecordscount = 0;
                int targetpagerecors = 10;
                int secondpagerecords = targetpagerecors + 3;
                bool nextpagehasPages = false;
                int j = 0;
                PdfPTable SecondtablecheckbyFooter = null;
                PdfPTable SecondtableFooter = null;
                PdfPTable SecondtableGrandtotalFooter = null;
                for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
                {
                    nextpagehasPages = true;

                    #region Titles of Document
                    PdfPTable Maintable = new PdfPTable(8);
                    Maintable.TotalWidth = 550f;
                    Maintable.LockedWidth = true;
                    float[] width = new float[] { 2.5f, 2f, 2f, 2f, 2f, 2f, 2f, 3f };
                    Maintable.SetWidths(width);
                    uint FONT_SIZE = 8;

                    //Company Name & vage act details

                    PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cellemp.Colspan = 8;
                    cellemp.Border = 0;

                    PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 16, Font.BOLD, BaseColor.BLACK)));
                    Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    Heading.Colspan = 8;
                    Heading.Border = 0;
                    Maintable.AddCell(Heading);



                    PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 14, Font.BOLD, BaseColor.BLACK)));
                    actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    actDetails.Colspan = 8;
                    actDetails.Border = 0;// 15;
                    Maintable.AddCell(actDetails);

                    Maintable.AddCell(cellemp);
                    #endregion


                    #region Table Headings

                    PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 16, Font.BOLD, BaseColor.BLACK)));
                    companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    companyName.Colspan = 8;
                    companyName.Border = 0;// 15;
                    Maintable.AddCell(companyName);

                    PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
                    paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    paySheet.Colspan = 8;
                    paySheet.Border = 0;// 15;
                    Maintable.AddCell(paySheet);

                    PdfPCell CClient = new PdfPCell(new Phrase("Client ID : " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClient.Colspan = 4;
                    CClient.Border = 0;// 15;
                    Maintable.AddCell(CClient);


                    PdfPCell CDates = new PdfPCell(new Phrase("      Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CDates.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CDates.Colspan = 4;
                    CDates.Border = 0;// 15;
                    Maintable.AddCell(CDates);

                    PdfPCell CClientName = new PdfPCell(new Phrase("Client Name : " + ddlcname.SelectedItem, FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClientName.Colspan = 4;
                    CClientName.Border = 0;// 15;
                    Maintable.AddCell(CClientName);

                    PdfPCell CPayMonth = new PdfPCell(new Phrase("                       For the month of : " + ddlmonth.SelectedValue, FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CPayMonth.Colspan = 4;
                    CPayMonth.Border = 0;// 15;
                    Maintable.AddCell(CPayMonth);

                    Maintable.AddCell(cellemp);
                    //document.Add(Maintable);

                    if (titleofdocumentindex == 0)
                    {
                        document.Add(Maintable);
                        titleofdocumentindex = 1;
                    }
                    PdfPTable SecondtableHeadings = new PdfPTable(8);
                    SecondtableHeadings.TotalWidth = 550f;
                    SecondtableHeadings.LockedWidth = true;
                    float[] SecondHeadingsWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    SecondtableHeadings.SetWidths(SecondHeadingsWidth);

                    //Cell Headings
                    //1
                    PdfPCell sNo = new PdfPCell(new Phrase("S.No ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //sNo.Colspan = 1;
                    sNo.Border = 15;// 15;
                    SecondtableHeadings.AddCell(sNo);
                    //2
                    PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CEmpId.Border = 15;// 15;
                    SecondtableHeadings.AddCell(CEmpId);
                    //3
                    PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CEmpName.Border = 15;// 15;
                    SecondtableHeadings.AddCell(CEmpName);
                    //4
                    PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CDesgn.Border = 15;
                    SecondtableHeadings.AddCell(CDesgn);
                    //5
                    PdfPCell CNHs = new PdfPCell(new Phrase("NHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CNHs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CNHs.Border = 15;
                    SecondtableHeadings.AddCell(CNHs);
                    //6
                    PdfPCell CNHsAmt = new PdfPCell(new Phrase("NHs Amount", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CNHsAmt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CNHsAmt.Border = 15;
                    SecondtableHeadings.AddCell(CNHsAmt);
                    //7

                    PdfPCell CesiAmt = new PdfPCell(new Phrase("ESI Amount", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CesiAmt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CesiAmt.Border = 15;
                    SecondtableHeadings.AddCell(CesiAmt);
                    //8

                    PdfPCell CTotal = new PdfPCell(new Phrase("Total", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CTotal.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CTotal.Border = 15;
                    SecondtableHeadings.AddCell(CTotal);

                    #endregion


                    PdfPTable Secondtable = new PdfPTable(8);
                    Secondtable.TotalWidth = 550f;
                    Secondtable.LockedWidth = true;
                    float[] SecondWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    Secondtable.SetWidths(SecondWidth);


                    #region Table Data
                    int rowCount = 0;
                    int pageCount = 0;
                    int i = nextpagei;

                    // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
                    {
                        forConvert = 0;
                        if (dt.Rows[i]["NHS"].ToString().Trim().Length > 0)
                            forConvert = Convert.ToSingle(dt.Rows[i]["NHS"].ToString());
                        if (forConvert > 0)
                        {

                            if (nextpagerecordscount == 0)
                            {
                                document.Add(SecondtableHeadings);
                            }

                            nextpagerecordscount++;
                            //1
                            PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n \n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CSNo.Border = 15;
                            Secondtable.AddCell(CSNo);
                            //2
                            PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpId1.Border = 15;
                            Secondtable.AddCell(CEmpId1);
                            //3
                            PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["Name"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpName1.Border = 15;
                            Secondtable.AddCell(CEmpName1);
                            //4
                            PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Desgn"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpDesgn.Border = 15;
                            Secondtable.AddCell(CEmpDesgn);
                            //5
                            forConvert = 0;
                            if (dt.Rows[i]["NHS"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["NHS"].ToString());
                            totalNhs += forConvert;
                            GrandtotalNhs += forConvert;
                            PdfPCell CNHs1 = new PdfPCell(new Phrase(forConvert.ToString("0.0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNHs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CNHs1.Border = 15;
                            Secondtable.AddCell(CNHs1);
                            //6
                            forConvert = 0;
                            if (dt.Rows[i]["Nhsamt"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["Nhsamt"].ToString());
                            totalNhsamt += forConvert;
                            GrandtotalNhsamt += forConvert;
                            PdfPCell CNHsAmt1 = new PdfPCell(new Phrase(forConvert.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNHsAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CNHsAmt1.Border = 15;
                            Secondtable.AddCell(CNHsAmt1);

                            //7
                            forConvert = 0;
                            if (dt.Rows[i]["esionnhs"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["esionnhs"].ToString());
                            totalEsi += forConvert;
                            GrandtotalEsi += forConvert;
                            PdfPCell esionnhs = new PdfPCell(new Phrase(forConvert.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            esionnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            esionnhs.Border = 15;
                            Secondtable.AddCell(esionnhs);

                            //8
                            forConvert = 0;
                            if (dt.Rows[i]["pfonnhs"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["pfonnhs"].ToString());
                            totalEsi += forConvert;
                            GrandtotalEsi += forConvert;

                            PdfPCell pfonnhs = new PdfPCell(new Phrase(forConvert.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            pfonnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            pfonnhs.Border = 15;
                            Secondtable.AddCell(pfonnhs);

                            //9
                            forConvert = 0;
                            if (dt.Rows[i]["Total"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["Total"].ToString());
                            totalTotal += forConvert;
                            GrandtotalTotal += forConvert;
                            PdfPCell CTotal1 = new PdfPCell(new Phrase(forConvert.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CTotal1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CTotal1.Border = 15;
                            Secondtable.AddCell(CTotal1);
                        }


                    }
                    #endregion


                    SecondtableFooter = new PdfPTable(8);
                    SecondtableFooter.TotalWidth = 550f;
                    SecondtableFooter.LockedWidth = true;
                    float[] SecondFooterWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    SecondtableFooter.SetWidths(SecondFooterWidth);
                    #region Table Footer
                    //1
                    PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCSNo.Border = 15;
                    SecondtableFooter.AddCell(FCSNo);
                    //2
                    PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpId1.Border = 15;
                    SecondtableFooter.AddCell(FCEmpId1);
                    //3
                    PdfPCell FCEmpName1 = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpName1.Border = 15;
                    SecondtableFooter.AddCell(FCEmpName1);
                    //4
                    PdfPCell FCEmpDesgn = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpDesgn.Border = 15;
                    //FCEmpDesgn.Colspan = 4;
                    SecondtableFooter.AddCell(FCEmpDesgn);
                    //5

                    PdfPCell FCNHs1 = new PdfPCell(new Phrase(totalNhs.ToString("0.0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCNHs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FCNHs1.Border = 15;
                    SecondtableFooter.AddCell(FCNHs1);
                    //6

                    PdfPCell FCNHsAmt1 = new PdfPCell(new Phrase(totalNhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCNHsAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FCNHsAmt1.Border = 15;
                    SecondtableFooter.AddCell(FCNHsAmt1);

                    //7

                    PdfPCell FCesiamt = new PdfPCell(new Phrase(totalEsi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCesiamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FCesiamt.Border = 15;
                    SecondtableFooter.AddCell(FCesiamt);

                    //8
                    PdfPCell FCTotal1 = new PdfPCell(new Phrase(totalTotal.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCTotal1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FCTotal1.Border = 15;
                    SecondtableFooter.AddCell(FCTotal1);
                    #endregion


                    SecondtableGrandtotalFooter = new PdfPTable(8);
                    SecondtableGrandtotalFooter.TotalWidth = 550f;
                    SecondtableGrandtotalFooter.LockedWidth = true;
                    float[] SecondGrandtotalFooterWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

                    SecondtablecheckbyFooter = new PdfPTable(8);
                    SecondtablecheckbyFooter.TotalWidth = 550f;
                    SecondtablecheckbyFooter.LockedWidth = true;
                    float[] SecondcheckbyFooterWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);


                    #region   Footer Headings

                    #region Table   Grand   Total  Footer
                    //1
                    PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCSNo.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCSNo);
                    //2
                    PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpId1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCEmpId1);
                    //3
                    PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("Grand  Totals: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpName1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCEmpName1);
                    //4
                    PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpDesgn.Border = 15;
                    //FCEmpDesgn.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);
                    //5
                    PdfPCell GFCNHs1 = new PdfPCell(new Phrase(GrandtotalNhs.ToString("0.0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCNHs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    GFCNHs1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCNHs1);
                    //6

                    PdfPCell GFCNHsAmt1 = new PdfPCell(new Phrase(GrandtotalNhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCNHsAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    GFCNHsAmt1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCNHsAmt1);

                    //7

                    PdfPCell GFCesiamt = new PdfPCell(new Phrase(GrandtotalEsi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCesiamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    GFCesiamt.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCesiamt);


                    //8
                    PdfPCell GFCTotal1 = new PdfPCell(new Phrase(GrandtotalTotal.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCTotal1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    GFCTotal1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCTotal1);
                    #endregion

                    //1
                    PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHCheckedbybr1.Border = 0;
                    FHCheckedbybr1.Rowspan = 0;
                    FHCheckedbybr1.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                    //2
                    PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHApprovedbr2.Border = 0;
                    FHApprovedbr2.Colspan = 4;

                    SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
                    SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                    SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


                    //1
                    PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHCheckedby.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHCheckedby.Border = 0;
                    FHCheckedby.Rowspan = 0;
                    FHCheckedby.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(FHCheckedby);
                    //2
                    PdfPCell FHApprovedBy = new PdfPCell(new Phrase(" Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHApprovedBy.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHApprovedBy.Border = 0;
                    FHApprovedBy.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(FHApprovedBy);



                    #endregion

                    document.Add(Secondtable);

                    if (nextpagerecordscount == targetpagerecors)
                    {
                        targetpagerecors = secondpagerecords;
                        document.Add(SecondtableFooter);
                        document.NewPage();
                        nextpagerecordscount = 0;
                        #region  Zero variables

                        totalNhs = 0;
                        totalNhsamt = 0;
                        totalEsi = 0;
                        totalTotal = 0;
                        #endregion
                    }
                }

                if (nextpagerecordscount >= 0)
                {
                    document.Add(SecondtableFooter);
                    document.Add(SecondtableGrandtotalFooter);
                    document.Add(SecondtablecheckbyFooter);
                }
                document.Close();
                if (nextpagehasPages)
                {

                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=NHS.pdf");
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
            }
        }

        protected void NPOTsPdf()
        {
            int titleofdocumentindex = 0;
            if (ddlClients.SelectedIndex <= 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
                return;
            }

            int payMonth = GetMonth(ddlmonth.SelectedValue);
            int month = GetMonthAndYear();

            string selectmonth = string.Empty;

            if (ddlnoofattendance.SelectedIndex == 1)
            {
                selectmonth = "select ep.EmpId,ISNULL(e.EmpFName,'')+' '+ISNULL(e.EmpMName,'')+' '+ISNULL(e.EmpLName,'') as Name,ep.Desgn,ep.Npots,ep.Npotsamt," +
                    " ep.esionnpots, (ep.Npotsamt-ep.esionnpots) as Total,ep.NoOfDuties from EmpPaySheet as Ep inner join EmpDetails as E on ep.EmpId=e.EmpId " +
                " and Ep.npots<>0 and Ep.ClientId='" + ddlClients.SelectedValue + "' AND Ep.Month=" + month + "  Order by Right(Ep.EmpId,6)";
            }

            if (ddlnoofattendance.SelectedIndex == 2)
            {
                selectmonth = "select ep.EmpId,ISNULL(e.EmpFName,'')+' '+ISNULL(e.EmpMName,'')+' '+ISNULL(e.EmpLName,'') as Name,ep.Desgn,ep.Npots,ep.Npotsamt," +
                    " ep.esionnpots, (ep.Npotsamt-ep.esionnpots) as Total,ep.Npotsamt as Total,ep.NoOfDuties from EmpPaySheet as Ep inner join EmpDetails as E on ep.EmpId=e.EmpId " +
                    " and Ep.npots<>0 AND Ep.ClientId='" + ddlClients.SelectedValue + "' AND Ep.Month=" + month + " Order by Right(Ep.EmpId,6)";
            }
            if (ddlnoofattendance.SelectedIndex == 0)
            {
                selectmonth = "select ep.EmpId,ISNULL(e.EmpFName,'')+' '+ISNULL(e.EmpMName,'')+' '+ISNULL(e.EmpLName,'') as Name,ep.Desgn,ep.Npots,ep.Npotsamt," +
                    "ep.esionnpots, (ep.Npotsamt-ep.esionnpots) as Total, ep.Npotsamt as Total,ep.NoOfDuties  from EmpPaySheet as Ep inner join EmpDetails as E on ep.EmpId=e.EmpId and  Ep.ClientId='" +
                ddlClients.SelectedValue + "' AND Ep.Month=" + month + " Order by Right(Ep.EmpId,6)";
            }

            DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(selectmonth).Result;

            MemoryStream ms = new MemoryStream();
            if (dt.Rows.Count > 0)
            {
                Document document = new Document(PageSize.A4);
                PdfWriter writer = PdfWriter.GetInstance(document, ms);
                document.Open();
                document.AddTitle("FaMS");
                document.AddAuthor("WebWonders");
                document.AddSubject("Wage Sheet");
                document.AddKeywords("Keyword1, keyword2, …");//
                float forConvert;
                string strQry = "Select * from  where   ClientidPrefix='" + CmpIDPrefix + "'";
                DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                string companyName1 = "Your Company Name";
                string companyAddress = "Your Company Address";
                if (compInfo.Rows.Count > 0)
                {
                    companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
                    companyAddress = compInfo.Rows[0]["Address"].ToString();
                }

                // int tableCells = 27;
                #region variables for total
                float totalNPOTs = 0;
                float totalNPOTsamt = 0;
                float totalEsi = 0;
                float totalTotal = 0;

                #endregion


                #region variables for  Grand  total
                float GrandtotalNPOTs = 0;
                float GrandtotalNPOTsamt = 0;
                float GrandtotalEsi = 0;
                float GrandtotalTotal = 0;

                #endregion

                int nextpagerecordscount = 0;
                int targetpagerecors = 10;
                int secondpagerecords = targetpagerecors + 3;
                bool nextpagehasPages = false;
                int j = 0;
                PdfPTable SecondtablecheckbyFooter = null;
                PdfPTable SecondtableFooter = null;
                PdfPTable SecondtableGrandtotalFooter = null;
                for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
                {
                    nextpagehasPages = true;


                    #region Titles of Document
                    PdfPTable Maintable = new PdfPTable(8);
                    Maintable.TotalWidth = 550f;
                    Maintable.LockedWidth = true;
                    float[] width = new float[] { 2.5f, 2f, 2f, 2f, 2f, 2f, 2f, 3f };
                    Maintable.SetWidths(width);
                    uint FONT_SIZE = 8;

                    //Company Name & vage act details

                    PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cellemp.Colspan = 8;
                    cellemp.Border = 0;

                    PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 16, Font.BOLD, BaseColor.BLACK)));
                    Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    Heading.Colspan = 8;
                    Heading.Border = 0;
                    Maintable.AddCell(Heading);



                    PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 12, Font.BOLD, BaseColor.BLACK)));
                    actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    actDetails.Colspan = 8;
                    actDetails.Border = 0;// 15;
                    Maintable.AddCell(actDetails);

                    Maintable.AddCell(cellemp);
                    #endregion


                    #region Table Headings
                    PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 16, Font.BOLD, BaseColor.BLACK)));
                    companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    companyName.Colspan = 8;
                    companyName.Border = 0;// 15;
                    Maintable.AddCell(companyName);

                    PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 9, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
                    paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    paySheet.Colspan = 8;
                    paySheet.Border = 0;// 15;
                    Maintable.AddCell(paySheet);

                    PdfPCell CClient = new PdfPCell(new Phrase("Client ID : " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClient.Colspan = 4;
                    CClient.Border = 0;// 15;
                    Maintable.AddCell(CClient);


                    PdfPCell CDates = new PdfPCell(new Phrase("   Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CDates.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CDates.Colspan = 4;
                    CDates.Border = 0;// 15;
                    Maintable.AddCell(CDates);

                    PdfPCell CClientName = new PdfPCell(new Phrase("Client Name : " + ddlcname.SelectedItem, FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClientName.Colspan = 4;
                    CClientName.Border = 0;// 15;
                    Maintable.AddCell(CClientName);

                    PdfPCell CPayMonth = new PdfPCell(new Phrase("                      For the month of : " + ddlmonth.SelectedValue, FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CPayMonth.Colspan = 4;
                    CPayMonth.Border = 0;// 15;
                    Maintable.AddCell(CPayMonth);

                    PdfPCell CClientNamespace = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CClientNamespace.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClientNamespace.Colspan = 3;
                    CClientNamespace.Border = 0;// 15;
                    //Maintable.AddCell(CClientNamespace);

                    PdfPCell CDatesspace = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CDatesspace.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CDatesspace.Colspan = 4;
                    CDatesspace.Border = 0;// 15;
                    //Maintable.AddCell(CDatesspace);



                    // PdfPCell CPaySheetDate = new PdfPCell(new Phrase("Pay Sheet Date :  " + DateTime.Now.Date.ToString("dd/MM/yyyy"), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    PdfPCell CPaySheetDate = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CPaySheetDate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CPaySheetDate.Colspan = 4;
                    CPaySheetDate.Border = 0;// 15;
                    //Maintable.AddCell(CPaySheetDate);



                    Maintable.AddCell(cellemp);
                    //document.Add(Maintable);

                    if (titleofdocumentindex == 0)
                    {
                        document.Add(Maintable);
                        titleofdocumentindex = 1;
                    }
                    PdfPTable SecondtableHeadings = new PdfPTable(8);
                    SecondtableHeadings.TotalWidth = 550f;
                    SecondtableHeadings.LockedWidth = true;
                    float[] SecondHeadingsWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    SecondtableHeadings.SetWidths(SecondHeadingsWidth);

                    //Cell Headings
                    //1
                    PdfPCell sNo = new PdfPCell(new Phrase("S.No ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //sNo.Colspan = 1;
                    sNo.Border = 15;// 15;
                    SecondtableHeadings.AddCell(sNo);
                    //2
                    PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CEmpId.Border = 15;// 15;
                    SecondtableHeadings.AddCell(CEmpId);
                    //3
                    PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CEmpName.Border = 15;// 15;
                    SecondtableHeadings.AddCell(CEmpName);
                    //4
                    PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CDesgn.Border = 15;
                    SecondtableHeadings.AddCell(CDesgn);
                    //5
                    PdfPCell CNHs = new PdfPCell(new Phrase("NPOTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CNHs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CNHs.Border = 15;
                    SecondtableHeadings.AddCell(CNHs);
                    //6
                    PdfPCell CNHsAmt = new PdfPCell(new Phrase("NPOTs Amount", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CNHsAmt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CNHsAmt.Border = 15;
                    SecondtableHeadings.AddCell(CNHsAmt);

                    //7
                    PdfPCell CesiAmt = new PdfPCell(new Phrase("ESI Amount", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CesiAmt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CesiAmt.Border = 15;
                    SecondtableHeadings.AddCell(CesiAmt);
                    //8
                    PdfPCell CTotal = new PdfPCell(new Phrase("Total", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CTotal.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CTotal.Border = 15;
                    SecondtableHeadings.AddCell(CTotal);

                    #endregion


                    PdfPTable Secondtable = new PdfPTable(8);
                    Secondtable.TotalWidth = 550f;
                    Secondtable.LockedWidth = true;
                    float[] SecondWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    Secondtable.SetWidths(SecondWidth);


                    #region Table Data
                    int rowCount = 0;
                    int pageCount = 0;
                    int i = nextpagei;

                    // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
                    {
                        forConvert = 0;
                        if (dt.Rows[i]["npots"].ToString().Trim().Length > 0)
                            forConvert = Convert.ToSingle(dt.Rows[i]["npots"].ToString());
                        if (forConvert > 0)
                        {

                            if (nextpagerecordscount == 0)
                            {
                                document.Add(SecondtableHeadings);
                            }

                            nextpagerecordscount++;
                            //1
                            PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n \n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CSNo.Border = 15;
                            Secondtable.AddCell(CSNo);
                            //2
                            PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpId1.Border = 15;
                            Secondtable.AddCell(CEmpId1);
                            //3
                            PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["Name"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpName1.Border = 15;
                            Secondtable.AddCell(CEmpName1);
                            //4
                            PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Desgn"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpDesgn.Border = 15;
                            Secondtable.AddCell(CEmpDesgn);
                            //5
                            forConvert = 0;
                            if (dt.Rows[i]["Npots"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["Npots"].ToString());
                            totalNPOTs += forConvert;
                            GrandtotalNPOTs += forConvert;
                            PdfPCell CNHs1 = new PdfPCell(new Phrase(forConvert.ToString("0.0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNHs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CNHs1.Border = 15;
                            Secondtable.AddCell(CNHs1);
                            //6
                            forConvert = 0;
                            if (dt.Rows[i]["Npotsamt"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["Npotsamt"].ToString());
                            totalNPOTsamt += forConvert;
                            GrandtotalNPOTsamt += forConvert;
                            PdfPCell CNHsAmt1 = new PdfPCell(new Phrase(forConvert.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNHsAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CNHsAmt1.Border = 15;
                            Secondtable.AddCell(CNHsAmt1);

                            //7

                            forConvert = 0;
                            if (dt.Rows[i]["esionnpots"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["esionnpots"].ToString());
                            totalEsi += forConvert;
                            GrandtotalEsi += forConvert;
                            PdfPCell Cesiamtd = new PdfPCell(new Phrase(forConvert.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cesiamtd.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Cesiamtd.Border = 15;
                            Secondtable.AddCell(Cesiamtd);


                            //8

                            forConvert = 0;
                            if (dt.Rows[i]["Total"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["Total"].ToString());
                            totalTotal += forConvert;
                            GrandtotalTotal += forConvert;
                            PdfPCell CTotal1 = new PdfPCell(new Phrase(forConvert.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CTotal1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CTotal1.Border = 15;
                            Secondtable.AddCell(CTotal1);
                        }


                    }
                    #endregion


                    SecondtableFooter = new PdfPTable(8);
                    SecondtableFooter.TotalWidth = 550f;
                    SecondtableFooter.LockedWidth = true;
                    float[] SecondFooterWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    SecondtableFooter.SetWidths(SecondFooterWidth);
                    #region Table Footer
                    //1
                    PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCSNo.Border = 15;
                    SecondtableFooter.AddCell(FCSNo);
                    //2
                    PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpId1.Border = 15;
                    SecondtableFooter.AddCell(FCEmpId1);
                    //3
                    PdfPCell FCEmpName1 = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpName1.Border = 15;
                    SecondtableFooter.AddCell(FCEmpName1);
                    //4
                    PdfPCell FCEmpDesgn = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpDesgn.Border = 15;
                    //FCEmpDesgn.Colspan = 4;
                    SecondtableFooter.AddCell(FCEmpDesgn);
                    //5

                    PdfPCell FCNHs1 = new PdfPCell(new Phrase(totalNPOTs.ToString("0.0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCNHs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FCNHs1.Border = 15;
                    SecondtableFooter.AddCell(FCNHs1);
                    //6

                    PdfPCell FCNHsAmt1 = new PdfPCell(new Phrase(totalNPOTsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCNHsAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FCNHsAmt1.Border = 15;
                    SecondtableFooter.AddCell(FCNHsAmt1);

                    //7

                    PdfPCell FCesiaamt = new PdfPCell(new Phrase(totalEsi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCesiaamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FCesiaamt.Border = 15;
                    SecondtableFooter.AddCell(FCesiaamt);
                    //8

                    PdfPCell FCTotal1 = new PdfPCell(new Phrase(totalTotal.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCTotal1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FCTotal1.Border = 15;
                    SecondtableFooter.AddCell(FCTotal1);
                    #endregion


                    SecondtableGrandtotalFooter = new PdfPTable(8);
                    SecondtableGrandtotalFooter.TotalWidth = 550f;
                    SecondtableGrandtotalFooter.LockedWidth = true;
                    float[] SecondGrandtotalFooterWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

                    SecondtablecheckbyFooter = new PdfPTable(8);
                    SecondtablecheckbyFooter.TotalWidth = 550f;
                    SecondtablecheckbyFooter.LockedWidth = true;
                    float[] SecondcheckbyFooterWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);


                    #region   Footer Headings

                    #region Table   Grand   Total  Footer
                    //1
                    PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCSNo.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCSNo);
                    //2
                    PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpId1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCEmpId1);
                    //3
                    PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("Grand  Totals: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpName1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCEmpName1);
                    //4
                    PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpDesgn.Border = 15;
                    //FCEmpDesgn.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);
                    //5
                    PdfPCell GFCNHs1 = new PdfPCell(new Phrase(GrandtotalNPOTs.ToString("0.0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCNHs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    GFCNHs1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCNHs1);
                    //6

                    PdfPCell GFCNHsAmt1 = new PdfPCell(new Phrase(GrandtotalNPOTsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCNHsAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    GFCNHsAmt1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCNHsAmt1);

                    //7


                    PdfPCell GFesiamt = new PdfPCell(new Phrase(GrandtotalEsi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFesiamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    GFesiamt.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFesiamt);
                    //8
                    PdfPCell GFCTotal1 = new PdfPCell(new Phrase(GrandtotalTotal.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCTotal1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    GFCTotal1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCTotal1);
                    #endregion

                    //1
                    PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHCheckedbybr1.Border = 0;
                    FHCheckedbybr1.Rowspan = 0;
                    FHCheckedbybr1.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                    //2
                    PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHApprovedbr2.Border = 0;
                    FHApprovedbr2.Colspan = 4;

                    SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
                    SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                    SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


                    //1
                    PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHCheckedby.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHCheckedby.Border = 0;
                    FHCheckedby.Rowspan = 0;
                    FHCheckedby.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(FHCheckedby);
                    //2
                    PdfPCell FHApprovedBy = new PdfPCell(new Phrase(" Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHApprovedBy.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHApprovedBy.Border = 0;
                    FHApprovedBy.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(FHApprovedBy);



                    #endregion

                    document.Add(Secondtable);

                    if (nextpagerecordscount == targetpagerecors)
                    {
                        targetpagerecors = secondpagerecords;
                        document.Add(SecondtableFooter);
                        document.NewPage();
                        nextpagerecordscount = 0;
                        #region  Zero variables

                        totalNPOTs = 0;
                        totalNPOTsamt = 0;
                        totalEsi = 0;
                        totalTotal = 0;
                        #endregion
                    }
                }

                if (nextpagerecordscount >= 0)
                {
                    document.Add(SecondtableFooter);
                    document.Add(SecondtableGrandtotalFooter);
                    document.Add(SecondtablecheckbyFooter);
                }
                document.Close();
                if (nextpagehasPages)
                {

                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=NPOTs.pdf");
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
            }
        }

        protected void WOsPdf()
        {
            int titleofdocumentindex = 0;
            if (ddlClients.SelectedIndex <= 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
                return;
            }

            int payMonth = GetMonth(ddlmonth.SelectedValue);
            int month = GetMonthAndYear();

            string selectmonth = string.Empty;

            if (ddlnoofattendance.SelectedIndex == 1)
            {
                selectmonth = "select ep.EmpId,ISNULL(e.EmpFName,'')+' '+ISNULL(e.EmpMName,'')+' '+ISNULL(e.EmpLName,'') as Name,ep.Desgn,ep.Npots,ep.Npotsamt," +
                    " ep.esionnpots, (ep.Npotsamt-ep.esionnpots) as Total,ep.NoOfDuties from EmpPaySheet as Ep inner join EmpDetails as E on ep.EmpId=e.EmpId " +
                " and Ep.npots<>0 and Ep.ClientId='" + ddlClients.SelectedValue + "' AND Ep.Month=" + month + "  Order by Right(Ep.EmpId,6)";
            }

            if (ddlnoofattendance.SelectedIndex == 2)
            {
                selectmonth = "select ep.EmpId,ISNULL(e.EmpFName,'')+' '+ISNULL(e.EmpMName,'')+' '+ISNULL(e.EmpLName,'') as Name,ep.Desgn,ep.Npots,ep.Npotsamt," +
                    " ep.esionnpots, (ep.Npotsamt-ep.esionnpots) as Total,ep.Npotsamt as Total,ep.NoOfDuties from EmpPaySheet as Ep inner join EmpDetails as E on ep.EmpId=e.EmpId " +
                    " and Ep.npots<>0 AND Ep.ClientId='" + ddlClients.SelectedValue + "' AND Ep.Month=" + month + " Order by Right(Ep.EmpId,6)";
            }
            if (ddlnoofattendance.SelectedIndex == 0)
            {
                selectmonth = "select ep.EmpId,ISNULL(e.EmpFName,'')+' '+ISNULL(e.EmpMName,'')+' '+ISNULL(e.EmpLName,'') as Name,ep.Desgn,ep.Npots,ep.Npotsamt," +
                    "ep.esionnpots, (ep.Npotsamt-ep.esionnpots) as Total, ep.Npotsamt as Total,ep.NoOfDuties  from EmpPaySheet as Ep inner join EmpDetails as E on ep.EmpId=e.EmpId and  Ep.ClientId='" +
                ddlClients.SelectedValue + "' AND Ep.Month=" + month + " Order by Right(Ep.EmpId,6)";
            }

            DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(selectmonth).Result;

            MemoryStream ms = new MemoryStream();
            if (dt.Rows.Count > 0)
            {
                Document document = new Document(PageSize.A4);
                PdfWriter writer = PdfWriter.GetInstance(document, ms);
                document.Open();
                document.AddTitle("FaMS");
                document.AddAuthor("WebWonders");
                document.AddSubject("Wage Sheet");
                document.AddKeywords("Keyword1, keyword2, …");//
                float forConvert;
                string strQry = "Select * from  where   ClientidPrefix='" + CmpIDPrefix + "'";
                DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                string companyName1 = "Your Company Name";
                string companyAddress = "Your Company Address";
                if (compInfo.Rows.Count > 0)
                {
                    companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
                    companyAddress = compInfo.Rows[0]["Address"].ToString();
                }

                // int tableCells = 27;
                #region variables for total
                float totalNPOTs = 0;
                float totalNPOTsamt = 0;
                float totalEsi = 0;
                float totalTotal = 0;

                #endregion


                #region variables for  Grand  total
                float GrandtotalNPOTs = 0;
                float GrandtotalNPOTsamt = 0;
                float GrandtotalEsi = 0;
                float GrandtotalTotal = 0;

                #endregion

                int nextpagerecordscount = 0;
                int targetpagerecors = 10;
                int secondpagerecords = targetpagerecors + 3;
                bool nextpagehasPages = false;
                int j = 0;
                PdfPTable SecondtablecheckbyFooter = null;
                PdfPTable SecondtableFooter = null;
                PdfPTable SecondtableGrandtotalFooter = null;
                for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
                {
                    nextpagehasPages = true;


                    #region Titles of Document
                    PdfPTable Maintable = new PdfPTable(8);
                    Maintable.TotalWidth = 550f;
                    Maintable.LockedWidth = true;
                    float[] width = new float[] { 2.5f, 2f, 2f, 2f, 2f, 2f, 2f, 3f };
                    Maintable.SetWidths(width);
                    uint FONT_SIZE = 8;

                    //Company Name & vage act details

                    PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cellemp.Colspan = 8;
                    cellemp.Border = 0;

                    PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 16, Font.BOLD, BaseColor.BLACK)));
                    Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    Heading.Colspan = 8;
                    Heading.Border = 0;
                    Maintable.AddCell(Heading);



                    PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 12, Font.BOLD, BaseColor.BLACK)));
                    actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    actDetails.Colspan = 8;
                    actDetails.Border = 0;// 15;
                    Maintable.AddCell(actDetails);

                    Maintable.AddCell(cellemp);
                    #endregion


                    #region Table Headings
                    PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 16, Font.BOLD, BaseColor.BLACK)));
                    companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    companyName.Colspan = 8;
                    companyName.Border = 0;// 15;
                    Maintable.AddCell(companyName);

                    PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 9, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
                    paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    paySheet.Colspan = 8;
                    paySheet.Border = 0;// 15;
                    Maintable.AddCell(paySheet);

                    PdfPCell CClient = new PdfPCell(new Phrase("Client ID : " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClient.Colspan = 4;
                    CClient.Border = 0;// 15;
                    Maintable.AddCell(CClient);


                    PdfPCell CDates = new PdfPCell(new Phrase("   Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CDates.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CDates.Colspan = 4;
                    CDates.Border = 0;// 15;
                    Maintable.AddCell(CDates);

                    PdfPCell CClientName = new PdfPCell(new Phrase("Client Name : " + ddlcname.SelectedItem, FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClientName.Colspan = 4;
                    CClientName.Border = 0;// 15;
                    Maintable.AddCell(CClientName);

                    PdfPCell CPayMonth = new PdfPCell(new Phrase("                      For the month of : " + ddlmonth.SelectedValue, FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CPayMonth.Colspan = 4;
                    CPayMonth.Border = 0;// 15;
                    Maintable.AddCell(CPayMonth);

                    PdfPCell CClientNamespace = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CClientNamespace.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClientNamespace.Colspan = 3;
                    CClientNamespace.Border = 0;// 15;
                    //Maintable.AddCell(CClientNamespace);

                    PdfPCell CDatesspace = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    CDatesspace.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CDatesspace.Colspan = 4;
                    CDatesspace.Border = 0;// 15;
                    //Maintable.AddCell(CDatesspace);



                    // PdfPCell CPaySheetDate = new PdfPCell(new Phrase("Pay Sheet Date :  " + DateTime.Now.Date.ToString("dd/MM/yyyy"), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    PdfPCell CPaySheetDate = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CPaySheetDate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CPaySheetDate.Colspan = 4;
                    CPaySheetDate.Border = 0;// 15;
                    //Maintable.AddCell(CPaySheetDate);



                    Maintable.AddCell(cellemp);
                    //document.Add(Maintable);

                    if (titleofdocumentindex == 0)
                    {
                        document.Add(Maintable);
                        titleofdocumentindex = 1;
                    }
                    PdfPTable SecondtableHeadings = new PdfPTable(8);
                    SecondtableHeadings.TotalWidth = 550f;
                    SecondtableHeadings.LockedWidth = true;
                    float[] SecondHeadingsWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    SecondtableHeadings.SetWidths(SecondHeadingsWidth);

                    //Cell Headings
                    //1
                    PdfPCell sNo = new PdfPCell(new Phrase("S.No ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //sNo.Colspan = 1;
                    sNo.Border = 15;// 15;
                    SecondtableHeadings.AddCell(sNo);
                    //2
                    PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CEmpId.Border = 15;// 15;
                    SecondtableHeadings.AddCell(CEmpId);
                    //3
                    PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CEmpName.Border = 15;// 15;
                    SecondtableHeadings.AddCell(CEmpName);
                    //4
                    PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CDesgn.Border = 15;
                    SecondtableHeadings.AddCell(CDesgn);
                    //5
                    PdfPCell CNHs = new PdfPCell(new Phrase("NPOTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CNHs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CNHs.Border = 15;
                    SecondtableHeadings.AddCell(CNHs);
                    //6
                    PdfPCell CNHsAmt = new PdfPCell(new Phrase("NPOTs Amount", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CNHsAmt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CNHsAmt.Border = 15;
                    SecondtableHeadings.AddCell(CNHsAmt);

                    //7
                    PdfPCell CesiAmt = new PdfPCell(new Phrase("ESI Amount", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CesiAmt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CesiAmt.Border = 15;
                    SecondtableHeadings.AddCell(CesiAmt);
                    //8
                    PdfPCell CTotal = new PdfPCell(new Phrase("Total", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CTotal.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CTotal.Border = 15;
                    SecondtableHeadings.AddCell(CTotal);

                    #endregion


                    PdfPTable Secondtable = new PdfPTable(8);
                    Secondtable.TotalWidth = 550f;
                    Secondtable.LockedWidth = true;
                    float[] SecondWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    Secondtable.SetWidths(SecondWidth);


                    #region Table Data
                    int rowCount = 0;
                    int pageCount = 0;
                    int i = nextpagei;

                    // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
                    {
                        forConvert = 0;
                        if (dt.Rows[i]["npots"].ToString().Trim().Length > 0)
                            forConvert = Convert.ToSingle(dt.Rows[i]["npots"].ToString());
                        if (forConvert > 0)
                        {

                            if (nextpagerecordscount == 0)
                            {
                                document.Add(SecondtableHeadings);
                            }

                            nextpagerecordscount++;
                            //1
                            PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n \n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CSNo.Border = 15;
                            Secondtable.AddCell(CSNo);
                            //2
                            PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpId1.Border = 15;
                            Secondtable.AddCell(CEmpId1);
                            //3
                            PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["Name"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpName1.Border = 15;
                            Secondtable.AddCell(CEmpName1);
                            //4
                            PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Desgn"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpDesgn.Border = 15;
                            Secondtable.AddCell(CEmpDesgn);
                            //5
                            forConvert = 0;
                            if (dt.Rows[i]["Npots"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["Npots"].ToString());
                            totalNPOTs += forConvert;
                            GrandtotalNPOTs += forConvert;
                            PdfPCell CNHs1 = new PdfPCell(new Phrase(forConvert.ToString("0.0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNHs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CNHs1.Border = 15;
                            Secondtable.AddCell(CNHs1);
                            //6
                            forConvert = 0;
                            if (dt.Rows[i]["Npotsamt"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["Npotsamt"].ToString());
                            totalNPOTsamt += forConvert;
                            GrandtotalNPOTsamt += forConvert;
                            PdfPCell CNHsAmt1 = new PdfPCell(new Phrase(forConvert.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNHsAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CNHsAmt1.Border = 15;
                            Secondtable.AddCell(CNHsAmt1);

                            //7

                            forConvert = 0;
                            if (dt.Rows[i]["esionnpots"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["esionnpots"].ToString());
                            totalEsi += forConvert;
                            GrandtotalEsi += forConvert;
                            PdfPCell Cesiamtd = new PdfPCell(new Phrase(forConvert.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cesiamtd.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Cesiamtd.Border = 15;
                            Secondtable.AddCell(Cesiamtd);


                            //8

                            forConvert = 0;
                            if (dt.Rows[i]["Total"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["Total"].ToString());
                            totalTotal += forConvert;
                            GrandtotalTotal += forConvert;
                            PdfPCell CTotal1 = new PdfPCell(new Phrase(forConvert.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CTotal1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CTotal1.Border = 15;
                            Secondtable.AddCell(CTotal1);
                        }


                    }
                    #endregion


                    SecondtableFooter = new PdfPTable(8);
                    SecondtableFooter.TotalWidth = 550f;
                    SecondtableFooter.LockedWidth = true;
                    float[] SecondFooterWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    SecondtableFooter.SetWidths(SecondFooterWidth);
                    #region Table Footer
                    //1
                    PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCSNo.Border = 15;
                    SecondtableFooter.AddCell(FCSNo);
                    //2
                    PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpId1.Border = 15;
                    SecondtableFooter.AddCell(FCEmpId1);
                    //3
                    PdfPCell FCEmpName1 = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpName1.Border = 15;
                    SecondtableFooter.AddCell(FCEmpName1);
                    //4
                    PdfPCell FCEmpDesgn = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpDesgn.Border = 15;
                    //FCEmpDesgn.Colspan = 4;
                    SecondtableFooter.AddCell(FCEmpDesgn);
                    //5

                    PdfPCell FCNHs1 = new PdfPCell(new Phrase(totalNPOTs.ToString("0.0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCNHs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FCNHs1.Border = 15;
                    SecondtableFooter.AddCell(FCNHs1);
                    //6

                    PdfPCell FCNHsAmt1 = new PdfPCell(new Phrase(totalNPOTsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCNHsAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FCNHsAmt1.Border = 15;
                    SecondtableFooter.AddCell(FCNHsAmt1);

                    //7

                    PdfPCell FCesiaamt = new PdfPCell(new Phrase(totalEsi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCesiaamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FCesiaamt.Border = 15;
                    SecondtableFooter.AddCell(FCesiaamt);
                    //8

                    PdfPCell FCTotal1 = new PdfPCell(new Phrase(totalTotal.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCTotal1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FCTotal1.Border = 15;
                    SecondtableFooter.AddCell(FCTotal1);
                    #endregion


                    SecondtableGrandtotalFooter = new PdfPTable(8);
                    SecondtableGrandtotalFooter.TotalWidth = 550f;
                    SecondtableGrandtotalFooter.LockedWidth = true;
                    float[] SecondGrandtotalFooterWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

                    SecondtablecheckbyFooter = new PdfPTable(8);
                    SecondtablecheckbyFooter.TotalWidth = 550f;
                    SecondtablecheckbyFooter.LockedWidth = true;
                    float[] SecondcheckbyFooterWidth = new float[] { 1f, 2f, 6f, 3f, 2f, 2f, 2f, 2f };
                    SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);


                    #region   Footer Headings

                    #region Table   Grand   Total  Footer
                    //1
                    PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCSNo.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCSNo);
                    //2
                    PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpId1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCEmpId1);
                    //3
                    PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("Grand  Totals: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpName1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCEmpName1);
                    //4
                    PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpDesgn.Border = 15;
                    //FCEmpDesgn.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);
                    //5
                    PdfPCell GFCNHs1 = new PdfPCell(new Phrase(GrandtotalNPOTs.ToString("0.0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCNHs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    GFCNHs1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCNHs1);
                    //6

                    PdfPCell GFCNHsAmt1 = new PdfPCell(new Phrase(GrandtotalNPOTsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCNHsAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    GFCNHsAmt1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCNHsAmt1);

                    //7


                    PdfPCell GFesiamt = new PdfPCell(new Phrase(GrandtotalEsi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFesiamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    GFesiamt.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFesiamt);
                    //8
                    PdfPCell GFCTotal1 = new PdfPCell(new Phrase(GrandtotalTotal.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCTotal1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    GFCTotal1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCTotal1);
                    #endregion

                    //1
                    PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHCheckedbybr1.Border = 0;
                    FHCheckedbybr1.Rowspan = 0;
                    FHCheckedbybr1.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                    //2
                    PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHApprovedbr2.Border = 0;
                    FHApprovedbr2.Colspan = 4;

                    SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
                    SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                    SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


                    //1
                    PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHCheckedby.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHCheckedby.Border = 0;
                    FHCheckedby.Rowspan = 0;
                    FHCheckedby.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(FHCheckedby);
                    //2
                    PdfPCell FHApprovedBy = new PdfPCell(new Phrase(" Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHApprovedBy.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHApprovedBy.Border = 0;
                    FHApprovedBy.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(FHApprovedBy);



                    #endregion

                    document.Add(Secondtable);

                    if (nextpagerecordscount == targetpagerecors)
                    {
                        targetpagerecors = secondpagerecords;
                        document.Add(SecondtableFooter);
                        document.NewPage();
                        nextpagerecordscount = 0;
                        #region  Zero variables

                        totalNPOTs = 0;
                        totalNPOTsamt = 0;
                        totalEsi = 0;
                        totalTotal = 0;
                        #endregion
                    }
                }

                if (nextpagerecordscount >= 0)
                {
                    document.Add(SecondtableFooter);
                    document.Add(SecondtableGrandtotalFooter);
                    document.Add(SecondtablecheckbyFooter);
                }
                document.Close();
                if (nextpagehasPages)
                {

                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=NPOTs.pdf");
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
            }
        }

        public string GetMonthName()
        {
            string monthname = string.Empty;
            int payMonth = 0;
            DateTimeFormatInfo mfi = new DateTimeFormatInfo();

            if (Chk_Month.Checked == false)
            {
                payMonth = GetMonth(ddlmonth.SelectedValue);
                monthname = mfi.GetMonthName(payMonth).ToString();
            }
            if (Chk_Month.Checked == true)
            {

                DateTime date = Convert.ToDateTime(Txt_Month.Text, CultureInfo.GetCultureInfo("en-gb"));
                monthname = mfi.GetMonthName(date.Month).ToString();
                //payMonth = GetMonth(monthname);
            }
            return monthname;
        }

        public string GetMonthOfYear()
        {
            string MonthYear = "";

            int month = GetMonthBasedOnSelectionDateorMonth();
            if (month.ToString().Length == 4)
            {
                MonthYear = "20" + month.ToString().Substring(2, 2);
            }
            if (month.ToString().Length == 3)
            {
                MonthYear = "20" + month.ToString().Substring(1, 2);

            }
            return MonthYear;
        }

        protected void btnSubmit_Click(object sender, EventArgs e)
        {


            var password = string.Empty;
            var SPName = string.Empty;
            password = txtPassword.Text.Trim();
            string sqlPassword = "select password from IouserDetails where password='" + txtPassword.Text + "'";
            DataTable dtpassword = config.ExecuteAdaptorAsyncWithQueryParams(sqlPassword).Result;
            if (dtpassword.Rows.Count == 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Invalid Password');", true);
                return;
            }

            #region Validation

            gvattendancezero.DataSource = null;
            gvattendancezero.DataBind();
            Txt_Month.Text = string.Empty;
            ddlmonth.SelectedIndex = 0;
            ddlpaymenttype.SelectedIndex = 0;


            if (ddlClients.SelectedIndex == 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Select The client Id');", true);
                Chk_Month.Checked = false;
                return;
            }

            #endregion

            Chk_Month.Checked = true;

            if (Chk_Month.Checked)
            {
                Txt_Month.Visible = true;
                ddlmonth.SelectedIndex = 0;
                ddlmonth.Visible = false;

            }

        }

        protected void btnClose_Click(object sender, EventArgs e)
        {
            modelLogindetails.Hide();
            Chk_Month.Checked = false;
            gvattendancezero.DataSource = null;
            gvattendancezero.DataBind();
            Txt_Month.Text = string.Empty;
            ddlmonth.SelectedIndex = 0;
            ddlpaymenttype.SelectedIndex = 0;
            if (Chk_Month.Checked == false)
            {
                Txt_Month.Visible = false;
                Txt_Month.Text = "";
                ddlmonth.SelectedIndex = 0;
                ddlmonth.Visible = true;
            }
        }

        protected void Txt_Month_TextChanged(object sender, EventArgs e)
        {

            lblPaysheetGeneratedTime.Text = "";
            PnlNonGeneratedPaysheet.Visible = false;
            GvNonGeneratedEmp.DataSource = null;
            GvNonGeneratedEmp.DataBind();
            NonGeneratedPaysheetList();
            DisplayData();
            //GetBillingDuties();

        }

        protected void btnFormTNew_Click(object sender, EventArgs e)
        {
            try
            {
                int titleofdocumentindex = 0;
                if (ddlClients.SelectedIndex <= 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
                    return;
                }

                int days = 0;

                int payMonth = GetMonth(ddlmonth.SelectedValue);
                int month = GetMonthBasedOnSelectionDateorMonth();

                if (Chk_Month.Checked == false)
                {
                    if (ddlmonth.SelectedIndex == 1)
                    {
                        days = GlobalData.Instance.GetNoOfDaysForNextMonth();
                    }
                    if (ddlmonth.SelectedIndex == 2)
                    {
                        days = GlobalData.Instance.GetNoOfDaysForThisMonth();
                    }
                    if (ddlmonth.SelectedIndex == 3)
                    {
                        days = GlobalData.Instance.GetNoOfDaysForPrviousMonth();
                    }
                }
                if (Chk_Month.Checked == true)
                {
                    string date = string.Empty;

                    if (Txt_Month.Text.Trim().Length > 0)
                    {
                        date = DateTime.Parse(Txt_Month.Text.Trim(), CultureInfo.GetCultureInfo("en-gb")).ToString();
                    }

                    int year = Convert.ToDateTime(date).Year;
                    int monthn = Convert.ToDateTime(date).Month;
                    days = DateTime.DaysInMonth(year, monthn);
                }

                string selectmonth = string.Empty;
                string SelectmonthWithbankacno = string.Empty;
                string SelectmonthWithoutbankacno = string.Empty;
                DataTable dt = null;


                var clientid = ddlClients.SelectedValue;
                var Paysheetoption = ddlpaymenttype.SelectedIndex;
                var Noofattendance = ddlnoofattendance.SelectedIndex;
                //var pfesioptions = ddl_Pf_Esi_Options.SelectedIndex;

                var ContractID = string.Empty;
                var bPaySheetDates = 0;
                var Gendays = 0;
                var G_Sdays = 0;

                DateTime LastDay = DateTime.Now;
                if (Chk_Month.Checked == false)
                {
                    LastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                }
                if (Chk_Month.Checked == true)
                {
                    LastDay = DateTime.Parse(Txt_Month.Text, CultureInfo.GetCultureInfo("en-gb"));
                }


                #region  Begin Get Contract Id Based on The Last Day


                Hashtable HtGetContractID = new Hashtable();
                var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                HtGetContractID.Add("@clientid", ddlClients.SelectedValue);
                HtGetContractID.Add("@LastDay", LastDay);
                DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                if (DTContractID.Rows.Count > 0)
                {
                    ContractID = DTContractID.Rows[0]["contractid"].ToString();
                    bPaySheetDates = int.Parse(DTContractID.Rows[0]["PaySheetDates"].ToString());
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "", "alert('Contract Details Are Not  Avaialable For This Client.');", true);
                    return;
                }

                #endregion  End Get Contract Id Based on The Last Day


                if (Chk_Month.Checked == false)
                {
                    //Gendays = Timings.Instance.GetNoofDaysForSelectedMonth(ddlmonth.SelectedIndex, bBillDates);
                    Gendays = Timings.Instance.GetNoofDaysForSelectedMonth(ddlmonth.SelectedIndex, bPaySheetDates);
                }

                //New Code when select month in Textbox
                if (Chk_Month.Checked == true)
                {
                    DateTime mGendays = DateTime.Now;
                    DateTime date = DateTime.Parse(Txt_Month.Text, CultureInfo.GetCultureInfo("en-gb"));
                    mGendays = DateTime.Parse(date.ToString());
                    // Gendays = Timings.Instance.GetNoofDaysForEnteredMonth(mGendays, bBillDates);
                    Gendays = Timings.Instance.GetNoofDaysForEnteredMonth(mGendays, bPaySheetDates);
                }
                G_Sdays = Timings.Instance.Get_GS_Days(month, Gendays);


                var SPName = "";
                Hashtable HTPaysheet = new Hashtable();
                SPName = "IMEPaysheetpdfs";
                HTPaysheet.Add("@ClientId", clientid);
                HTPaysheet.Add("@month", month);
                HTPaysheet.Add("@PaymentOption", Paysheetoption);
                HTPaysheet.Add("@Attendance", Noofattendance);
                //  HTPaysheet.Add("@PfesiOptions", pfesioptions);
                HTPaysheet.Add("@Gendays", Gendays);
                HTPaysheet.Add("@G_Sdays", G_Sdays);

                dt = config.ExecuteAdaptorAsyncWithParams(SPName, HTPaysheet).Result;

                MemoryStream ms = new MemoryStream();
                if (dt.Rows.Count > 0)
                {
                    Document document = new Document(PageSize.LEGAL.Rotate());
                    PdfWriter writer = PdfWriter.GetInstance(document, ms);
                    document.Open();
                    document.AddTitle("FaMS");
                    document.AddAuthor("WebWonders");
                    document.AddSubject("Wage Sheet");
                    document.AddKeywords("Keyword1, keyword2, …");//
                    float forConvert;
                    string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
                    DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                    string companyName1 = "Your Company Name";
                    string companyAddress = "Your Company Address";
                    if (compInfo.Rows.Count > 0)
                    {
                        companyName1 = compInfo.Rows[0]["CompanyName"].ToString();
                        companyAddress = compInfo.Rows[0]["Address"].ToString();
                    }

                    #region Variables for table cells counting
                    int ATMDed = 0;

                    int IDCardDed = 0;
                    int Extra = 0;
                    float IDCardDed1 = 0;
                    float Extra1 = 0;


                    float ATMDed1 = 0;
                    int paydays = 0;
                    int dts = 0;
                    int payrate = 0;
                    int basic = 0;
                    int da = 0;
                    int hra = 0;
                    int cca = 0;
                    int conveyance = 0;
                    int washallowance = 0;
                    int otherallowance = 0;
                    int splallw = 0;
                    int leavewages = 0;
                    int gratuity = 0;
                    int bonus = 0;
                    int nfhs = 0;
                    int rc = 0;
                    int cs = 0;
                    int cfoodallowance = 0;
                    int cmedicalallowance = 0;

                    int TravelAllw = 0;
                    int PerformanceAllw = 0;
                    int MobileAllw = 0;


                    int gross = 0;
                    int incentivs = 0;
                    int pf = 0;
                    int esi = 0;
                    int proftax = 0;
                    int salAdvDed = 0;
                    int uniformDed = 0;
                    int otherDed = 0;
                    int canteenAdv = 0;
                    int penalty = 0;
                    int totalDeductions = 0;


                    int ots = 0;
                    int otamt = 0;
                    int wos = 0;
                    int wosamt = 0;
                    int nhs = 0;
                    int nhsamt = 0;

                    int owf = 0;
                    float owf1 = 0;

                    int npots = 0;
                    int total = 0;

                    int npotsamt = 0;
                    int totalearned = 0;
                    int TDS = 0;
                    int Soceity = 0;
                    int Mobile = 0;
                    int KLWF = 0;
                    int Loss = 0;
                    int Arrears = 0;
                    int MatAllw = 0;
                    int RoomUniform = 0;

                    int Advance = 0;
                    int SecurityDepDed = 0;
                    int Loan = 0;
                    int MBSDed = 0;
                    int TelephoneBillDed = 0;


                    float SecurityDepDed1 = 0;
                    float Loan1 = 0;
                    float MBSDed1 = 0;
                    float dts1 = 0;
                    float payrate1 = 0;
                    float basic1 = 0;
                    float da1 = 0;
                    float hra1 = 0;
                    float cca1 = 0;
                    float conveyance1 = 0;
                    float washallowance1 = 0;
                    float otherallowance1 = 0;
                    float splallw1 = 0;
                    float leavewages1 = 0;
                    float gratuity1 = 0;
                    float bonus1 = 0;
                    float total1 = 0;
                    float nfhs1 = 0;
                    float rc1 = 0;
                    float cs1 = 0;
                    float cfoodallowance1 = 0;
                    float cmedicalallowance1 = 0;

                    float TravelAllw1 = 0;
                    float PerformanceAllw1 = 0;
                    float MobileAllw1 = 0;

                    float gross1 = 0;
                    float incentivs1 = 0;
                    float pf1 = 0;
                    float esi1 = 0;
                    float proftax1 = 0;
                    float salAdvDed1 = 0;
                    float uniformDed1 = 0;
                    float otherDed1 = 0;
                    float canteenAdv1 = 0;
                    float penalty1 = 0;
                    float totalDeductions1 = 0;
                    float netpay1 = 0;
                    float totalearned1 = 0;
                    float paydays1 = 0;


                    float ots1 = 0;
                    float otamt1 = 0;
                    float wos1 = 0;
                    float wosamt1 = 0;
                    float nhs1 = 0;
                    float nhsamt1 = 0;
                    float npots1 = 0;
                    float npotsamt1 = 0;

                    float TDS1 = 0;
                    float Soceity1 = 0;
                    float Mobile1 = 0;
                    float KLWF1 = 0;
                    float Loss1 = 0;
                    float Arrears1 = 0;
                    float MatAllw1 = 0;
                    float RoomUniform1 = 0;

                    float Advance1 = 0;
                    float TelephoneBillDed1 = 0;

                    #endregion


                    #region Data for counting tablecells

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        paydays1 = float.Parse(dt.Rows[i]["NoOfWorkingDays"].ToString());
                        if (paydays1 != 0)
                        {
                            paydays1 += 1;
                            if (paydays1 > 0)
                            {
                                paydays = 1;
                            }
                        }

                        ATMDed1 = float.Parse(dt.Rows[i]["ATMDed"].ToString());
                        if (ATMDed1 != 0)
                        {
                            ATMDed1 += 1;
                            if (ATMDed1 > 0)
                            {
                                ATMDed = 1;
                            }
                        }

                        IDCardDed1 = float.Parse(dt.Rows[i]["IDCardDed"].ToString());
                        if (IDCardDed1 != 0)
                        {
                            IDCardDed1 += 1;
                            if (IDCardDed1 > 0)
                            {
                                IDCardDed = 1;
                            }
                        }

                        Extra1 = float.Parse(dt.Rows[i]["Extra"].ToString());
                        if (Extra1 != 0)
                        {
                            Extra1 += 1;
                            if (Extra1 > 0)
                            {
                                Extra = 1;
                            }
                        }

                        owf1 = float.Parse(dt.Rows[i]["owf"].ToString());
                        if (owf1 != 0)
                        {
                            owf1 += 1;
                            if (owf1 > 0)
                            {
                                owf = 1;
                            }
                        }

                        dts1 = float.Parse(dt.Rows[i]["NoOfDuties"].ToString());
                        if (dts1 != 0)
                        {
                            dts1 += 1;
                            if (dts1 > 0)
                            {
                                dts = 1;
                            }
                        }


                        Soceity1 = float.Parse(dt.Rows[i]["Soceity"].ToString());
                        if (Soceity1 != 0)
                        {
                            Soceity1 += 1;
                            if (Soceity1 > 0)
                            {
                                Soceity = 1;
                            }
                        }

                        TDS1 = float.Parse(dt.Rows[i]["TDS"].ToString());
                        if (TDS1 != 0)
                        {
                            TDS1 += 1;
                            if (TDS1 > 0)
                            {
                                TDS = 1;
                            }
                        }

                        Mobile1 = float.Parse(dt.Rows[i]["Mobile"].ToString());
                        if (Mobile1 != 0)
                        {
                            Mobile1 += 1;
                            if (Mobile1 > 0)
                            {
                                Mobile = 1;
                            }
                        }

                        KLWF1 = float.Parse(dt.Rows[i]["KLWF"].ToString());
                        if (KLWF1 != 0)
                        {
                            KLWF1 += 1;
                            if (KLWF1 > 0)
                            {
                                KLWF = 1;
                            }
                        }

                        Loss1 = float.Parse(dt.Rows[i]["Loss"].ToString());
                        if (Loss1 != 0)
                        {
                            Loss1 += 1;
                            if (Loss1 > 0)
                            {
                                Loss = 1;
                            }
                        }

                        Arrears1 = float.Parse(dt.Rows[i]["Arrears"].ToString());
                        if (Arrears1 != 0)
                        {
                            Arrears1 += 1;
                            if (Arrears1 > 0)
                            {
                                Arrears = 1;
                            }
                        }

                        //MatAllw1 = float.Parse(dt.Rows[i]["MatAllw"].ToString());
                        //if (MatAllw1 != 0)
                        //{
                        //    MatAllw1 += 1;
                        //    if (MatAllw1 > 0)
                        //    {
                        //        MatAllw = 1;
                        //    }
                        //}

                        //RoomUniform1 = float.Parse(dt.Rows[i]["RoomUniform"].ToString());
                        //if (RoomUniform1 != 0)
                        //{
                        //    RoomUniform1 += 1;
                        //    if (RoomUniform1 > 0)
                        //    {
                        //        RoomUniform = 1;
                        //    }
                        //}

                        //modeofpayment1 = float.Parse(dt.Rows[i]["modeofpayment"].ToString());
                        //if (modeofpayment1 != 0)
                        //{
                        //    modeofpayment1 += 1;
                        //    if (modeofpayment1 > 0)
                        //    {
                        //        modeofpayment = 1;
                        //    }
                        //}

                        //Advance1 = float.Parse(dt.Rows[i]["Advance"].ToString());
                        //if (Advance1 != 0)
                        //{
                        //    Advance1 += 1;
                        //    if (Advance1 > 0)
                        //    {
                        //        Advance = 1;
                        //    }
                        //}

                        cfoodallowance1 = float.Parse(dt.Rows[i]["foodallowance"].ToString());
                        if (cfoodallowance1 != 0)
                        {
                            cfoodallowance1 += 1;
                            if (cfoodallowance1 > 0)
                            {
                                cfoodallowance = 1;
                            }
                        }

                        cmedicalallowance1 = float.Parse(dt.Rows[i]["medicalallowance"].ToString());
                        if (cmedicalallowance1 != 0)
                        {
                            cmedicalallowance1 += 1;
                            if (cmedicalallowance1 > 0)
                            {
                                cmedicalallowance = 1;
                            }
                        }
                        splallw1 = float.Parse(dt.Rows[i]["SplAllowance"].ToString());
                        if (splallw1 != 0)
                        {
                            splallw1 += 1;
                            if (splallw1 > 0)
                            {
                                splallw = 1;
                            }
                        }

                        ///////

                        TravelAllw1 = float.Parse(dt.Rows[i]["TravelAllw"].ToString());
                        if (TravelAllw1 != 0)
                        {
                            TravelAllw1 += 1;
                            if (TravelAllw1 > 0)
                            {
                                TravelAllw = 1;
                            }
                        }

                        PerformanceAllw1 = float.Parse(dt.Rows[i]["PerformanceAllw"].ToString());
                        if (PerformanceAllw1 != 0)
                        {
                            PerformanceAllw1 += 1;
                            if (PerformanceAllw1 > 0)
                            {
                                PerformanceAllw = 1;
                            }
                        }

                        MobileAllw1 = float.Parse(dt.Rows[i]["MobileAllw"].ToString());
                        if (MobileAllw1 != 0)
                        {
                            MobileAllw1 += 1;
                            if (MobileAllw1 > 0)
                            {
                                MobileAllw = 1;
                            }
                        }

                        /////

                        payrate1 = float.Parse(dt.Rows[i]["tempgross"].ToString());
                        if (payrate1 != 0)
                        {
                            payrate1 += 1;
                            if (payrate1 > 0)
                            {
                                payrate = 1;
                            }
                        }

                        basic1 = float.Parse(dt.Rows[i]["basic"].ToString());
                        if (basic1 != 0)
                        {
                            basic1 += 1;
                            if (basic1 > 0)
                            {
                                basic = 1;
                            }
                        }
                        da1 = float.Parse(dt.Rows[i]["da"].ToString());
                        if (da1 != 0)
                        {
                            da1 += 1;
                            if (da1 > 0)
                            {
                                da = 1;
                            }
                        }
                        hra1 = float.Parse(dt.Rows[i]["hra"].ToString());
                        if (hra1 != 0)
                        {
                            hra1 += 1;
                            if (hra1 > 0)
                            {
                                hra = 1;
                            }
                        }
                        cca1 = float.Parse(dt.Rows[i]["cca"].ToString());
                        if (cca1 != 0)
                        {
                            cca1 += 1;
                            if (cca1 > 0)
                            {
                                cca = 1;
                            }
                        }
                        conveyance1 = float.Parse(dt.Rows[i]["Conveyance"].ToString());
                        if (conveyance1 != 0)
                        {
                            conveyance1 += 1;
                            if (conveyance1 > 0)
                            {
                                conveyance = 1;
                            }
                        }

                        washallowance1 = float.Parse(dt.Rows[i]["washallowance"].ToString());
                        if (washallowance1 != 0)
                        {
                            washallowance1 += 1;
                            if (washallowance1 > 0)
                            {
                                washallowance = 1;
                            }
                        }
                        otherallowance1 = float.Parse(dt.Rows[i]["otherallowance"].ToString());
                        if (otherallowance1 != 0)
                        {
                            otherallowance1 += 1;
                            if (otherallowance1 > 0)
                            {
                                otherallowance = 1;
                            }
                        }
                        leavewages1 = float.Parse(dt.Rows[i]["Leavewages"].ToString());
                        if (leavewages1 != 0)
                        {
                            leavewages1 += 1;
                            if (leavewages1 > 0)
                            {
                                leavewages = 1;
                            }
                        }
                        gratuity1 = float.Parse(dt.Rows[i]["gratuity"].ToString());
                        if (gratuity1 != 0)
                        {
                            gratuity1 += 1;
                            if (gratuity1 > 0)
                            {
                                gratuity = 1;
                            }
                        }
                        bonus1 = float.Parse(dt.Rows[i]["bonus"].ToString());
                        if (bonus1 != 0)
                        {
                            bonus1 += 1;
                            if (bonus1 > 0)
                            {
                                bonus = 1;
                            }
                        }

                        nfhs1 = float.Parse(dt.Rows[i]["nfhs"].ToString());
                        if (nfhs1 != 0)
                        {
                            nfhs1 += 1;
                            if (nfhs1 > 0)
                            {
                                nfhs = 1;
                            }
                        }
                        rc1 = float.Parse(dt.Rows[i]["rc"].ToString());
                        if (rc1 != 0)
                        {
                            rc1 += 1;
                            if (rc1 > 0)
                            {
                                rc = 1;
                            }
                        }

                        cs1 = float.Parse(dt.Rows[i]["cs"].ToString());
                        if (cs1 != 0)
                        {
                            cs1 += 1;
                            if (cs1 > 0)
                            {
                                cs = 1;
                            }
                        }
                        gross1 = float.Parse(dt.Rows[i]["gross"].ToString());
                        if (gross1 != 0)
                        {
                            gross1 += 1;
                            if (gross1 > 0)
                            {
                                gross = 1;
                            }
                        }

                        incentivs1 = float.Parse(dt.Rows[i]["incentivs"].ToString());
                        if (incentivs1 != 0)
                        {
                            incentivs1 += 1;
                            if (incentivs1 > 0)
                            {
                                incentivs = 1;
                            }
                        }

                        totalearned1 = float.Parse(dt.Rows[i]["gross"].ToString());
                        if (totalearned1 != 0)
                        {
                            totalearned1 += 1;
                            if (totalearned1 > 0)
                            {
                                totalearned = 1;
                            }
                        }
                        pf1 = float.Parse(dt.Rows[i]["Pf"].ToString());
                        if (pf1 != 0)
                        {
                            pf1 += 1;
                            if (pf1 > 0)
                            {
                                pf = 1;
                            }
                        }
                        esi1 = float.Parse(dt.Rows[i]["Esi"].ToString());
                        if (esi1 != 0)
                        {
                            esi1 += 1;
                            if (esi1 > 0)
                            {
                                esi = 1;
                            }
                        }
                        proftax1 = float.Parse(dt.Rows[i]["proftax"].ToString());
                        if (proftax1 != 0)
                        {
                            proftax1 += 1;
                            if (proftax1 > 0)
                            {
                                proftax = 1;
                            }
                        }

                        Loan1 = float.Parse(dt.Rows[i]["LoanDed"].ToString());
                        if (Loan1 != 0)
                        {
                            Loan1 += 1;
                            if (Loan1 > 0)
                            {
                                Loan = 1;
                            }
                        }


                        SecurityDepDed1 = float.Parse(dt.Rows[i]["SecurityDepDed"].ToString());
                        if (SecurityDepDed1 != 0)
                        {
                            SecurityDepDed1 += 1;
                            if (SecurityDepDed1 > 0)
                            {
                                SecurityDepDed = 1;
                            }
                        }

                        salAdvDed1 = float.Parse(dt.Rows[i]["salAdvDed"].ToString());
                        if (salAdvDed1 != 0)
                        {
                            salAdvDed1 += 1;
                            if (salAdvDed1 > 0)
                            {
                                salAdvDed = 1;
                            }
                        }
                        uniformDed1 = float.Parse(dt.Rows[i]["uniformDed"].ToString());
                        if (uniformDed1 != 0)
                        {
                            uniformDed1 += 1;
                            if (uniformDed1 > 0)
                            {
                                uniformDed = 1;
                            }
                        }
                        otherDed1 = float.Parse(dt.Rows[i]["otherDed"].ToString());
                        if (otherDed1 != 0)
                        {
                            otherDed1 += 1;
                            if (otherDed1 > 0)
                            {
                                otherDed = 1;
                            }
                        }

                        MBSDed1 = float.Parse(dt.Rows[i]["MBSDed"].ToString());
                        if (MBSDed1 != 0)
                        {
                            MBSDed1 += 1;
                            if (MBSDed1 > 0)
                            {
                                MBSDed = 1;
                            }
                        }
                        canteenAdv1 = float.Parse(dt.Rows[i]["canteenAdv"].ToString());
                        if (canteenAdv1 != 0)
                        {
                            canteenAdv1 += 1;
                            if (canteenAdv1 > 0)
                            {
                                canteenAdv = 1;
                            }
                        }

                        penalty1 = float.Parse(dt.Rows[i]["penalty"].ToString());
                        if (penalty1 != 0)
                        {
                            penalty1 += 1;
                            if (penalty1 > 0)
                            {
                                penalty = 1;
                            }
                        }
                        totalDeductions1 = float.Parse(dt.Rows[i]["Totaldeduct"].ToString());
                        if (totalDeductions1 != 0)
                        {
                            totalDeductions1 += 1;
                            if (totalDeductions1 > 0)
                            {
                                totalDeductions = 1;
                            }
                        }
                        //netpay1 = float.Parse(dt.Rows[i]["NetAmount"].ToString());
                        //if (netpay1 != 0)
                        //{
                        //    netpay1 += 1;
                        //    if (netpay1 > 0)
                        //    {
                        //        netpay = 1;
                        //    }
                        //}

                        ots1 = float.Parse(dt.Rows[i]["Duties"].ToString());
                        if (ots1 != 0)
                        {
                            ots1 += 1;
                            if (ots1 > 0)
                            {
                                ots = 1;
                            }
                        }

                        otamt1 = float.Parse(dt.Rows[i]["Amount"].ToString());
                        if (otamt1 != 0)
                        {
                            otamt1 += 1;
                            if (otamt1 > 0)
                            {
                                otamt = 1;
                            }
                        }

                        wos1 = float.Parse(dt.Rows[i]["Wo"].ToString());
                        if (wos1 != 0)
                        {
                            wos1 += 1;
                            if (wos1 > 0)
                            {
                                wos = 1;
                            }
                        }

                        wosamt1 = float.Parse(dt.Rows[i]["woamt"].ToString());
                        if (wosamt1 != 0)
                        {
                            wosamt1 += 1;
                            if (wosamt1 > 0)
                            {
                                wosamt = 1;
                            }
                        }

                        nhs1 = float.Parse(dt.Rows[i]["nhs"].ToString());
                        if (nhs1 != 0)
                        {
                            nhs1 += 1;
                            if (nhs1 > 0)
                            {
                                nhs = 1;
                            }
                        }
                        nhsamt1 = float.Parse(dt.Rows[i]["nhsamt"].ToString());
                        if (nhsamt1 != 0)
                        {
                            nhsamt1 += 1;
                            if (nhsamt1 > 0)
                            {
                                nhsamt = 1;
                            }
                        }

                        total1 = float.Parse(dt.Rows[i]["total"].ToString());
                        if (total1 != 0)
                        {
                            total1 += 1;
                            if (total1 > 0)
                            {
                                total = 1;
                            }
                        }
                        npotsamt1 = float.Parse(dt.Rows[i]["npotsamt"].ToString());
                        if (npotsamt1 != 0)
                        {
                            npotsamt1 += 1;
                            if (npotsamt1 > 0)
                            {
                                npotsamt = 1;
                            }
                        }

                        TelephoneBillDed1 = float.Parse(dt.Rows[i]["TelephoneBillDed"].ToString());
                        if (TelephoneBillDed1 != 0)
                        {
                            TelephoneBillDed1 += 1;
                            if (TelephoneBillDed1 > 0)
                            {
                                TelephoneBillDed = 1;
                            }
                        }



                    }

                    #endregion

                    int sno = 1;
                    int empid = 1;
                    int empname = 1;
                    int fathername = 1;
                    int design = 1;
                    int EmpBankAcNo = 1;
                    int EmpEpfNo = 1;
                    int EmpEsiNo = 1;
                    int Dtofleaving = 1;
                    int modeofpayment = 1;
                    int netpay = 1;

                    int tableCells = dts + basic + da + hra + cca + conveyance + washallowance + otherallowance + leavewages +
                                    gratuity + bonus + nfhs + rc + cs + gross + incentivs + pf + esi + proftax + cfoodallowance + cmedicalallowance + splallw + TravelAllw + PerformanceAllw + MobileAllw +
                                    salAdvDed + uniformDed + IDCardDed + Extra + ATMDed + otherDed + canteenAdv + penalty + totalDeductions + netpay + sno + Arrears +
                                    Loss + KLWF + Soceity + Loan + SecurityDepDed + MBSDed + owf +TelephoneBillDed+
                                    empid + empname + design + EmpBankAcNo + ots + otamt + wos + wosamt + nhs + nhsamt + total + npotsamt + payrate + fathername + paydays;

                    #region for individual attendance

                    string day1 = "";
                    string day2 = "";
                    string day3 = "";
                    string day4 = "";
                    string day5 = "";
                    string day6 = "";
                    string day7 = "";
                    string day8 = "";
                    string day9 = "";
                    string day10 = "";
                    string day11 = "";
                    string day12 = "";
                    string day13 = "";
                    string day14 = "";
                    string day15 = "";
                    string day16 = "";
                    string day17 = "";
                    string day18 = "";
                    string day19 = "";
                    string day20 = "";
                    string day21 = "";
                    string day22 = "";
                    string day23 = "";
                    string day24 = "";
                    string day25 = "";
                    string day26 = "";
                    string day27 = "";
                    string day28 = "";
                    string day29 = "";
                    string day30 = "";
                    string day31 = "";

                    #endregion for individual attendance

                    #region variables for total

                    float totalIDCardDed = 0;
                    float totalExtra = 0;


                    float totalATMDed = 0;
                    float totalTDS = 0;
                    float totalowf = 0;
                    float Grandtotalowf = 0;
                    float totalSoceity = 0;
                    float totalLoss = 0;
                    float totalKLWF = 0;
                    float totalMobile = 0;
                    float totalDuties = 0;
                    float totalpayrate = 0;
                    float totalPayDays = 0;
                    float totalBasic = 0;
                    float totalDA = 0;
                    float totalHRA = 0;
                    float totalCCA = 0;
                    float totalConveyance = 0;
                    float totalWA = 0;
                    float totalOA = 0;
                    float totalLw = 0;
                    float totalGratuity = 0;
                    float totalbonus = 0;
                    float totalNfhs = 0;
                    float totalRc = 0;
                    float totalCs = 0;
                    float totalGross = 0;
                    float totalfoodallowance = 0;
                    float totalmedicalallowance = 0;
                    float totalSplAllowance = 0;

                    float totalTravelAllw = 0;
                    float totalPerformanceAllw = 0;
                    float totalMobileAllw = 0;

                    float totalIncentivs = 0;
                    float totalPF = 0;
                    float totalESI = 0;
                    float totalProfTax = 0;
                    float totalSalAdv = 0;
                    float totalUniforDed = 0;
                    float totalOtherdedn = 0;
                    float totalCanteenAdv = 0;
                    float totalPenalty = 0;
                    float totalDed = 0;
                    float totalNetpay = 0;

                    float totalLoanDed = 0;
                    float totalSecurityDepDed = 0;

                    float totalots = 0;
                    float totalotamt = 0;
                    float totalwos = 0;
                    float totalwosamt = 0;
                    float totalnhs = 0;
                    float totalnhsamt = 0;
                    float totaltotal = 0;
                    float totalnpots = 0;
                    float totalnpotsamt = 0;
                    float totaltotalearned = 0;
                    float totalarrears = 0;
                    float totalTelephoneBillDed = 0;
                    #endregion

                    #region variables for  Grand  total

                    float GrandtotalIDCardDed = 0;
                    float GrandtotalExtra = 0;

                    float GrandtotalATMDed = 0;
                    float GrandtotalLoanDed = 0;
                    float GrandtotalSecurityDepDed = 0;
                    float GrandtotalPayDays = 0;
                    float Grandtotalarrears = 0;
                    float GrandtotalTDS = 0;
                    float GrandtotalSoceity = 0;
                    float GrandtotalLoss = 0;
                    float GrandtotalKLWF = 0;
                    float GrandtotalMobile = 0;
                    float GrandtotalDuties = 0;
                    float GrandtotalBasic = 0;
                    float Grandtotalpayrate = 0;
                    float GrandtotalDA = 0;
                    float GrandtotalHRA = 0;
                    float GrandtotalCCA = 0;
                    float GrandtotalConveyance = 0;
                    float GrandtotalWA = 0;
                    float GrandtotalOA = 0;
                    float GrandtotalLw = 0;
                    float GrandtotalGratuity = 0;
                    float Grandtotalbonus = 0;
                    float GrandtotalNfhs = 0;
                    float GrandtotalRc = 0;
                    float GrandtotalCs = 0;
                    float GrandtotalGross = 0;
                    float GrandtotalIncentivs = 0;
                    float GrandtotalPF = 0;
                    float GrandtotalESI = 0;
                    float GrandtotalProfTax = 0;
                    float GrandtotalSalAdv = 0;
                    float GrandtotalUniforDed = 0;
                    float GrandtotalOtherdedn = 0;
                    float GrandtotalMBSdedn = 0;
                    float Grandtotaltotal = 0;
                    float GrandtotalCanteenAdv = 0;
                    float GrandtotalPenalty = 0;
                    float GrandtotalDed = 0;
                    float GrandtotalNetpay = 0;
                    float Grandtotalfoodallowance = 0;
                    float Grandtotalmedicalallowance = 0;
                    float GrandtotalSplAllowance = 0;

                    float GrandtotalTravelAllw = 0;
                    float GrandtotalPerformanceAllw = 0;
                    float GrandtotalMobileAllw = 0;

                    float Grandtotalots = 0;
                    float Grandtotalotamt = 0;
                    float Grandtotalwos = 0;
                    float Grandtotalwosamt = 0;
                    float Grandtotalnhs = 0;
                    float Grandtotalnhsamt = 0;

                    float Grandtotalnpots = 0;
                    float Grandtotalnpotsamt = 0;
                    float Grandtotaltotalearned = 0;
                    float GrandtotalTelephoneBillDed = 0;
                    #endregion

                    string selectclientaddress = "select * from clients where clientid= '" + ddlClients.SelectedValue + "'";
                    DataTable dtclientaddress = config.ExecuteAdaptorAsyncWithQueryParams(selectclientaddress).Result;

                    int nextpagerecordscount = 0;
                    int targetpagerecors = 4;
                    int secondpagerecords = targetpagerecors;
                    bool nextpagehasPages = false;
                    int j = 0;
                    PdfPTable SecondtablecheckbyFooter = null;
                    PdfPTable SecondtableFooter = null;
                    PdfPTable SecondtableGrandtotalFooter = null;
                    for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
                    {
                        nextpagehasPages = true;

                        #region Titles of Document
                        PdfPTable Maintable = new PdfPTable(30);
                        if (tableCells > 20)
                        {
                            Maintable.TotalWidth = 980f;
                        }
                        else
                        {
                            Maintable.TotalWidth = 850f;
                        }
                        Maintable.LockedWidth = true;
                        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };


                        Maintable.SetWidths(width);
                        uint FONT_SIZE = 8;
                        string FontStyle = "verdana";

                        //Company Name & wage act details

                        PdfPCell headingnew = new PdfPCell(new Phrase("Salary Sheet (Unit Wise)", FontFactory.GetFont(Fontstyle, 12, Font.BOLD, BaseColor.BLACK)));
                        headingnew.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        headingnew.Colspan = 30;
                        headingnew.Border = 0;
                        Maintable.AddCell(headingnew);


                        PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        cellemp.Colspan = 30;
                        cellemp.Border = 0;


                        PdfPCell Heading = new PdfPCell(new Phrase("FORM T \n [ See Rule 24(9-B) of the Karnataka Shops & Commercial Establishments Rules, 1963] in lieu of \n 1. Form I, II of Rule 22(4): Form IV of Rule 28(2); Form V & VII of Rule 29(1) & (5) of Karnataka Minimum wages Rules 1958; \n 2. Form I of Rules 3 (1) of Karnataka Payment of Wages Rules, 1963; \n 3. Form XIII of Rules 75; Form XV, XVII, XX, XXI, XXII, XXIII, of Rule 78 (1) a(i), (ii) &(iii) of the Karnataka Contract Labour (Regulation & Abolition) Rules, 1974; \n 4. Form XIII of Rule 43, Form XVII, XVIII, XIX, XX, XXI, XXII, of Rule 46(2) (a), (c) & (d) of Karnataka inter state Migrant Workmen Rules, 1981  ", FontFactory.GetFont(Fontstyle, 6, Font.BOLD, BaseColor.BLACK)));
                        Heading.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Heading.Colspan = 10;
                        Heading.Border = 0;
                        Heading.SetLeading(0.0f, 1.5f);
                        // Maintable.AddCell(Heading);

                        PdfPCell cellemp1 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cellemp1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        cellemp1.Colspan = 1;
                        cellemp1.Border = 0;
                        // Maintable.AddCell(cellemp1);

                        PdfPCell Heading1 = new PdfPCell(new Phrase("Name & Address of the Establishment : \n" + companyName1 + "\n" + companyAddress, FontFactory.GetFont(Fontstyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Heading1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Heading1.Colspan = 10;
                        Heading1.Border = 0;
                        Heading1.SetLeading(0.0f, 1.5f);
                        Maintable.AddCell(Heading1);

                        Maintable.AddCell(cellemp1);


                        PdfPCell Heading2 = new PdfPCell(new Phrase("Name & Address of the Principle Employer : ", FontFactory.GetFont(Fontstyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Heading2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        Heading2.Colspan = 10;
                        Heading2.Border = 0;
                        Maintable.AddCell(Heading2);

                        string addressData1 = "";
                        string addressData2 = "";
                        string addressData3 = "";
                        string addressData4 = "";
                        string addressData5 = "";
                        string addressData6 = "";
                        string addressData7 = "";


                        if (dtclientaddress.Rows.Count > 0)
                        {
                            addressData1 = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                            addressData2 = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                            addressData3 = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                            addressData4 = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                            addressData5 = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                            addressData6 = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                            addressData7 = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();


                        }



                        PdfPCell Heading3 = new PdfPCell(new Phrase(addressData1 + " " + addressData2 + " " + addressData3 + " " + addressData4 + " " + addressData5 + " " + addressData6 + " " + addressData7, FontFactory.GetFont(Fontstyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Heading3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Heading3.Colspan = 10;
                        Heading3.Border = 0;
                        Maintable.AddCell(Heading3);





                        //PdfPTable tempTable1 = new PdfPTable(1);
                        //if (tableCells > 20)
                        //{
                        //    tempTable1.TotalWidth = 245f;
                        //}
                        //else
                        //{
                        //    tempTable1.TotalWidth = 180f;
                        //}
                        //tempTable1.LockedWidth = true;
                        //float[] tempWidth1 = new float[] { 1f };
                        //tempTable1.SetWidths(tempWidth1);

                        //string addressData = "";







                        //PdfPCell childTable1 = new PdfPCell(tempTable1);
                        //childTable1.Border = 0;
                        //childTable1.Colspan = 6;
                        //childTable1.HorizontalAlignment = 0;
                        //Maintable.AddCell(childTable1);

                        //Maintable.AddCell(cellemp1);

                        //addressData = dtclientaddress.Rows[0]["Location"].ToString();
                        //if (addressData.Trim().Length > 0)
                        //{

                        //    PdfPCell Heading3 = new PdfPCell(new Phrase("Location :\n " + addressData.ToString(), FontFactory.GetFont(Fontstyle, 6, Font.BOLD, BaseColor.BLACK)));
                        //    Heading3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Heading3.Colspan = 6;
                        //    Heading3.Border = 0;
                        //    Heading3.SetLeading(0.0f, 1.5f);
                        //    Maintable.AddCell(Heading3);
                        //}

                        //PdfPCell Heading = new PdfPCell(new Phrase("Form - XVII REGISTER OF WAGES", FontFactory.GetFont(Fontstyle, 20, Font.BOLD, BaseColor.BLACK)));
                        //Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        //Heading.Colspan = 27;
                        //Heading.Border = 0;
                        //Maintable.AddCell(Heading);


                        //PdfPCell actDetails = new PdfPCell(new Phrase("(vide Rule 78(1) a(i) of Contract Labour (Reg. & abolition)", FontFactory.GetFont(Fontstyle, 15, Font.BOLD, BaseColor.BLACK)));
                        //actDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        //actDetails.Colspan = 27;
                        //actDetails.Border = 0;// 15;
                        //Maintable.AddCell(actDetails);

                        //PdfPCell Heading = new PdfPCell(new Phrase("Form XIII of Rule 43, Form XVII, XVIII, XIX, XX, XXI, XXII, of Rule 46(2) (a), (c) & (d) of Karnataka inter state Migrant Workmen Rules, 1981", FontFactory.GetFont(Fontstyle, 12, Font.BOLD, BaseColor.BLACK)));
                        //Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        //Heading.Colspan = 30;
                        //Heading.Border = 0;
                        //Maintable.AddCell(Heading);

                        // Maintable.AddCell(cellemp);
                        #endregion

                        #region Sub Headings

                        PdfPCell companyName = new PdfPCell(new Phrase(companyName1, FontFactory.GetFont("Arial Black", 12, Font.BOLD, BaseColor.BLACK)));
                        companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        companyName.Colspan = 30;
                        companyName.Border = 0;// 15;
                        //Maintable.AddCell(companyName);



                        //PdfPCell paySheet = new PdfPCell(new Phrase("Pay Sheet", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
                        //paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        //paySheet.Colspan = 27;
                        //paySheet.Border = 0;// 15;
                        //Maintable.AddCell(paySheet);

                        //PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        //CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //CClient.Colspan = 3;
                        //CClient.Border = 0;// 15;
                        //Maintable.AddCell(CClient);

                        //PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlcname.SelectedItem, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        //CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //CClientName.Colspan = 10;
                        //CClientName.Border = 0;// 15;
                        //Maintable.AddCell(CClientName);

                        //PdfPCell CDates = new PdfPCell(new Phrase("Payment for the period of : " + GetPaymentPeriod(), FontFactory.GetFont(Fontstyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //CDates.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //CDates.Colspan = 8;
                        //CDates.Border = 0;// 15;
                        //Maintable.AddCell(CDates);

                        //PdfPCell CPaySheetDate = new PdfPCell(new Phrase("Pay Sheet Date :  " + DateTime.Now.Date.ToString("dd/MM/yyyy"), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        //PdfPCell CPaySheetDate = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        //CPaySheetDate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //CPaySheetDate.Colspan = 1;
                        //CPaySheetDate.Border = 0;// 15;
                        //Maintable.AddCell(CPaySheetDate);

                        //PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :   " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        //CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //CPayMonth.Colspan = 7;
                        //CPayMonth.Border = 0;// 15;
                        //Maintable.AddCell(CPayMonth);

                        // Maintable.AddCell(cellemp);
                        //document.Add(Maintable);

                        //if (titleofdocumentindex == 0)
                        //{
                        //    document.Add(Maintable);
                        //    titleofdocumentindex = 1;
                        //}

                        #endregion

                        #region Table Headings

                        PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
                        if (tableCells > 20)
                        {
                            SecondtableHeadings.TotalWidth = 1000f;
                        }
                        else
                        {
                            SecondtableHeadings.TotalWidth = 850f;
                        }
                        SecondtableHeadings.LockedWidth = true;
                        float[] SecondHeadingsWidth = new float[] { };

                        #region Table Cells

                        if (tableCells == 42)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 41)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 40)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 39)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 38)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 37)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 36)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 35)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 34)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 33)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 32)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 31)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 30)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 29)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 28)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 27)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 26)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 25)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 24)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 23)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 22)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 21)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 20)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 19)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 18)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 17)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 16)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 15)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 14)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 13)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 12)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 11)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 10)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 9)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 8)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 7)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 2f, 5f };
                        }

                        if (tableCells == 6)
                        {
                            SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 5f };
                        }
                        #endregion

                        SecondtableHeadings.SetWidths(SecondHeadingsWidth);

                        //Cell Headings

                        PdfPCell CClientName = new PdfPCell(new Phrase("For the Month of " + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "                                                         Client ID : " + ddlClients.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        CClientName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CClientName.Colspan = tableCells;
                        CClientName.Border = 0;
                        CClientName.PaddingBottom = 4;
                        CClientName.PaddingTop = 4;
                        SecondtableHeadings.AddCell(CClientName);

                        //1
                        PdfPCell sNo = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        //sNo.Colspan = 1;
                        sNo.Border = 15;// 15;
                        SecondtableHeadings.AddCell(sNo);

                        //2
                        PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CEmpId.Border = 15;// 15;
                        SecondtableHeadings.AddCell(CEmpId);

                        //3
                        PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CEmpName.Border = 15;// 15;
                        SecondtableHeadings.AddCell(CEmpName);

                        PdfPCell CBasicDetails = new PdfPCell(new Phrase("Basic Details", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CBasicDetails.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CBasicDetails.Border = 15;// 15;
                        SecondtableHeadings.AddCell(CBasicDetails);

                        //4
                        PdfPCell CDesgn = new PdfPCell(new Phrase("Design", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CDesgn.Border = 15;
                        SecondtableHeadings.AddCell(CDesgn);

                        //4 A
                        if (payrate != 0)
                        {
                            PdfPCell Cpayrate = new PdfPCell(new Phrase("Pay Rate", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cpayrate.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cpayrate.Border = 15;
                            SecondtableHeadings.AddCell(Cpayrate);
                        }

                        if (paydays != 0)
                        {

                            PdfPCell CDateofleaving = new PdfPCell(new Phrase("Pay Days", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CDateofleaving.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CDateofleaving.Border = 15;
                            SecondtableHeadings.AddCell(CDateofleaving);
                        }

                        //5
                        if (dts != 0)
                        {
                            PdfPCell CDuties = new PdfPCell(new Phrase("Pr Days", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CDuties.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CDuties.Border = 15;
                            SecondtableHeadings.AddCell(CDuties);
                        }
                        if (wos != 0)
                        {
                            PdfPCell CWos = new PdfPCell(new Phrase("W/O", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CWos.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CWos.Border = 15;
                            SecondtableHeadings.AddCell(CWos);
                        }

                        if (nhs != 0)
                        {
                            PdfPCell CNHs = new PdfPCell(new Phrase("G/H", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNHs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CNHs.Border = 15;
                            SecondtableHeadings.AddCell(CNHs);
                        }
                        //6
                        if (ots != 0)
                        {
                            PdfPCell Cots = new PdfPCell(new Phrase("O.T.", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cots.Border = 15;
                            SecondtableHeadings.AddCell(Cots);
                        }

                        //7
                        if (total != 0)
                        {
                            PdfPCell CNpots = new PdfPCell(new Phrase("Total", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNpots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CNpots.Border = 15;
                            SecondtableHeadings.AddCell(CNpots);
                        }



                        //10
                        if (basic != 0)
                        {
                            PdfPCell CBasic = new PdfPCell(new Phrase("Basic", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CBasic.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CBasic.Border = 15;
                            SecondtableHeadings.AddCell(CBasic);
                        }

                        //11
                        if (da != 0)
                        {
                            PdfPCell CDa = new PdfPCell(new Phrase("DA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CDa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CDa.Border = 15;
                            SecondtableHeadings.AddCell(CDa);
                        }

                        //12
                        if (hra != 0)
                        {
                            PdfPCell CHRa = new PdfPCell(new Phrase("HRA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CHRa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CHRa.Border = 15;
                            SecondtableHeadings.AddCell(CHRa);
                        }

                        //13
                        if (cca != 0)
                        {
                            PdfPCell CCca = new PdfPCell(new Phrase("CCA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CCca.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CCca.Border = 15;
                            SecondtableHeadings.AddCell(CCca);
                        }

                        //14
                        if (conveyance != 0)
                        {
                            PdfPCell Cconveyance = new PdfPCell(new Phrase("Conv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cconveyance.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cconveyance.Border = 15;
                            SecondtableHeadings.AddCell(Cconveyance);
                        }

                        //15
                        if (washallowance != 0)
                        {
                            PdfPCell Cwa = new PdfPCell(new Phrase("WA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cwa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            Cwa.Border = 15;
                            SecondtableHeadings.AddCell(Cwa);
                        }

                        //16
                        if (otherallowance != 0)
                        {
                            PdfPCell COa = new PdfPCell(new Phrase("OA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            COa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            COa.Border = 15;
                            SecondtableHeadings.AddCell(COa);
                        }

                        //17
                        if (leavewages != 0)
                        {
                            PdfPCell CLa = new PdfPCell(new Phrase("LA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CLa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CLa.Border = 15;
                            SecondtableHeadings.AddCell(CLa);
                        }

                        //18
                        if (gratuity != 0)
                        {
                            PdfPCell CGratuity = new PdfPCell(new Phrase("Gratuity", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CGratuity.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CGratuity.Border = 15;
                            SecondtableHeadings.AddCell(CGratuity);
                        }

                        //19
                        if (bonus != 0)
                        {
                            PdfPCell CBonus = new PdfPCell(new Phrase("Bonus", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CBonus.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CBonus.Border = 15;
                            SecondtableHeadings.AddCell(CBonus);
                        }




                        //20
                        if (nfhs != 0)
                        {
                            PdfPCell CNfhs = new PdfPCell(new Phrase("NFHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNfhs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CNfhs.Border = 15;
                            SecondtableHeadings.AddCell(CNfhs);
                        }

                        //21
                        if (rc != 0)
                        {
                            PdfPCell CRc = new PdfPCell(new Phrase("R.C", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CRc.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CRc.Border = 15;
                            SecondtableHeadings.AddCell(CRc);
                        }

                        //22
                        if (cs != 0)
                        {
                            PdfPCell CCs = new PdfPCell(new Phrase("C.S", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CCs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CCs.Border = 15;
                            SecondtableHeadings.AddCell(CCs);
                        }

                        if (Arrears != 0)
                        {
                            PdfPCell Carrears = new PdfPCell(new Phrase("Arrears", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            Carrears.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Carrears.Border = 15;
                            SecondtableHeadings.AddCell(Carrears);
                        }

                        //24
                        if (cfoodallowance != 0)
                        {
                            PdfPCell CFoodAllw = new PdfPCell(new Phrase("Food Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CFoodAllw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CFoodAllw.Border = 15;
                            SecondtableHeadings.AddCell(CFoodAllw);
                        }

                        if (cmedicalallowance != 0)
                        {
                            PdfPCell CMedicalAllw = new PdfPCell(new Phrase("Medical Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CMedicalAllw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CMedicalAllw.Border = 15;
                            SecondtableHeadings.AddCell(CMedicalAllw);
                        }
                        if (splallw != 0)
                        {
                            PdfPCell Csplallw = new PdfPCell(new Phrase("Spl. Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Csplallw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Csplallw.Border = 15;
                            SecondtableHeadings.AddCell(Csplallw);
                        }
                        //

                        if (TravelAllw != 0)
                        {
                            PdfPCell Csplallw = new PdfPCell(new Phrase("Travel. Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Csplallw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Csplallw.Border = 15;
                            SecondtableHeadings.AddCell(Csplallw);
                        }

                        if (PerformanceAllw != 0)
                        {
                            PdfPCell Csplallw = new PdfPCell(new Phrase("Performance. Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Csplallw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Csplallw.Border = 15;
                            SecondtableHeadings.AddCell(Csplallw);
                        }

                        if (MobileAllw != 0)
                        {
                            PdfPCell Csplallw = new PdfPCell(new Phrase("Mobile. Allw", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Csplallw.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Csplallw.Border = 15;
                            SecondtableHeadings.AddCell(Csplallw);
                        }




                        //



                        if (wosamt != 0)
                        {
                            PdfPCell CWoamt = new PdfPCell(new Phrase("WO Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CWoamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CWoamt.Border = 15;
                            SecondtableHeadings.AddCell(CWoamt);
                        }

                        //26
                        if (nhsamt != 0)
                        {
                            PdfPCell CNHsamt = new PdfPCell(new Phrase("NHs Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNHsamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CNHsamt.Border = 15;
                            SecondtableHeadings.AddCell(CNHsamt);
                        }

                        //23
                        if (gross != 0)
                        {
                            PdfPCell CGross = new PdfPCell(new Phrase("Gross", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CGross.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CGross.Border = 15;
                            SecondtableHeadings.AddCell(CGross);
                        }
                        if (otamt != 0)
                        {
                            PdfPCell COtamt = new PdfPCell(new Phrase("OT Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            COtamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            COtamt.Border = 15;
                            SecondtableHeadings.AddCell(COtamt);
                        }


                        //25

                        //27
                        if (npotsamt != 0)
                        {
                            PdfPCell CNpotsamt = new PdfPCell(new Phrase("NPOTs Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNpotsamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CNpotsamt.Border = 15;
                            SecondtableHeadings.AddCell(CNpotsamt);
                        }

                        //28
                        if (incentivs != 0)
                        {
                            PdfPCell CIncentivs = new PdfPCell(new Phrase("Incentivs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CIncentivs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CIncentivs.Border = 15;
                            SecondtableHeadings.AddCell(CIncentivs);
                        }

                        //28A
                        if (totalearned != 0)
                        {
                            PdfPCell Ctotalearned = new PdfPCell(new Phrase("Total Earnd", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Ctotalearned.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Ctotalearned.Border = 15;
                            // SecondtableHeadings.AddCell(Ctotalearned);
                        }


                        //29
                        if (pf != 0)
                        {
                            PdfPCell CPFondts = new PdfPCell(new Phrase("PF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CPFondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CPFondts.Border = 15;
                            SecondtableHeadings.AddCell(CPFondts);
                        }

                        //30
                        if (esi != 0)
                        {
                            PdfPCell CESIondts = new PdfPCell(new Phrase("ESI", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CESIondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CESIondts.Border = 15;
                            SecondtableHeadings.AddCell(CESIondts);
                        }


                        //31
                        if (proftax != 0)
                        {
                            PdfPCell CPT = new PdfPCell(new Phrase("PT", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CPT.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CPT.Border = 15;
                            SecondtableHeadings.AddCell(CPT);
                        }

                        if (owf != 0)
                        {
                            PdfPCell Cowf = new PdfPCell(new Phrase("LWF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cowf.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cowf.Border = 15;
                            SecondtableHeadings.AddCell(Cowf);
                        }

                        if (TDS != 0)
                        {
                            PdfPCell CTDS = new PdfPCell(new Phrase("TDS", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CTDS.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CTDS.Border = 15;
                            SecondtableHeadings.AddCell(CTDS);
                        }

                        if (Soceity != 0)
                        {
                            PdfPCell CSoceity = new PdfPCell(new Phrase("Soceity", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CSoceity.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSoceity.Border = 15;
                            SecondtableHeadings.AddCell(CSoceity);
                        }

                        if (Mobile != 0)
                        {
                            PdfPCell Cmobexp = new PdfPCell(new Phrase("Mobile exp", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cmobexp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cmobexp.Border = 15;
                            SecondtableHeadings.AddCell(Cmobexp);
                        }

                        if (KLWF != 0)
                        {
                            PdfPCell CKLWF = new PdfPCell(new Phrase("KLWF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CKLWF.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CKLWF.Border = 15;
                            SecondtableHeadings.AddCell(CKLWF);
                        }

                        if (Loss != 0)
                        {
                            PdfPCell CLoss = new PdfPCell(new Phrase("Loss", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CLoss.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CLoss.Border = 15;
                            SecondtableHeadings.AddCell(CLoss);
                        }

                        if (Loan != 0)
                        {
                            PdfPCell CLoanDed = new PdfPCell(new Phrase("Loan", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CLoanDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CLoanDed.Border = 15;
                            SecondtableHeadings.AddCell(CLoanDed);
                        }
                        //32
                        if (salAdvDed != 0)
                        {
                            PdfPCell CSalAdv = new PdfPCell(new Phrase("Adv 1", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSalAdv.Border = 15;
                            SecondtableHeadings.AddCell(CSalAdv);
                        }
                        if (ATMDed != 0)
                        {
                            PdfPCell CSalAdv = new PdfPCell(new Phrase("ATM Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSalAdv.Border = 15;
                            SecondtableHeadings.AddCell(CSalAdv);
                        }
                        //

                        if (IDCardDed != 0)
                        {
                            PdfPCell CSalAdv = new PdfPCell(new Phrase("IDCard Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSalAdv.Border = 15;
                            SecondtableHeadings.AddCell(CSalAdv);
                        }
                        if (Extra != 0)
                        {
                            PdfPCell CSalAdv = new PdfPCell(new Phrase("Extra", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSalAdv.Border = 15;
                            SecondtableHeadings.AddCell(CSalAdv);
                        }

                        //33
                        if (uniformDed != 0)
                        {
                            PdfPCell CUnifDed = new PdfPCell(new Phrase("Adv 2", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CUnifDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CUnifDed.Border = 15;
                            SecondtableHeadings.AddCell(CUnifDed);
                        }


                        if (SecurityDepDed != 0)
                        {
                            PdfPCell CSecurityDepDed = new PdfPCell(new Phrase("Adv 3", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CSecurityDepDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSecurityDepDed.Border = 15;
                            SecondtableHeadings.AddCell(CSecurityDepDed);
                        }


                        //34
                        if (otherDed != 0)
                        {
                            PdfPCell COtherDed = new PdfPCell(new Phrase("Adv 4", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            COtherDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            COtherDed.Border = 15;
                            SecondtableHeadings.AddCell(COtherDed);
                        }


                        if (MBSDed != 0)
                        {
                            PdfPCell CMBSDed = new PdfPCell(new Phrase("MBS", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CMBSDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CMBSDed.Border = 15;
                            SecondtableHeadings.AddCell(CMBSDed);
                        }

                        //35
                        if (canteenAdv != 0)
                        {
                            PdfPCell Ccanteended = new PdfPCell(new Phrase("Mess. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Ccanteended.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Ccanteended.Border = 15;
                            SecondtableHeadings.AddCell(Ccanteended);
                        }



                        //36
                        if (penalty != 0)
                        {
                            PdfPCell CPenalty = new PdfPCell(new Phrase("Penalty", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CPenalty.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CPenalty.Border = 15;
                            SecondtableHeadings.AddCell(CPenalty);
                        }

                        //36
                        if (TelephoneBillDed != 0)
                        {
                            PdfPCell CTelephoneBillDed = new PdfPCell(new Phrase("Telephone Bill Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CTelephoneBillDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CTelephoneBillDed.Border = 15;
                            SecondtableHeadings.AddCell(CTelephoneBillDed);
                        }


                        //37
                        if (totalDeductions != 0)
                        {
                            PdfPCell CTotDed = new PdfPCell(new Phrase("Tot Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CTotDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CTotDed.Border = 15;
                            SecondtableHeadings.AddCell(CTotDed);
                        }

                        //if (Advance != 0)
                        //{
                        //    PdfPCell CAdvance = new PdfPCell(new Phrase("Advance", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        //    CAdvance.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        //    CAdvance.Border = 15;
                        //    SecondtableHeadings.AddCell(CAdvance);
                        //}

                        //if (RoomUniform != 0)
                        //{
                        //    PdfPCell CRoomUniform = new PdfPCell(new Phrase("Room Unif", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        //    CRoomUniform.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        //    CRoomUniform.Border = 15;
                        //    SecondtableHeadings.AddCell(CRoomUniform);
                        //}

                        //38
                        //if (netpay != 0)
                        {
                            PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            CNetPay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CNetPay.Border = 15;
                            SecondtableHeadings.AddCell(CNetPay);
                        }

                        if (modeofpayment != 0)
                        {
                            PdfPCell Cmodepay = new PdfPCell(new Phrase("Mode of Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Cmodepay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Cmodepay.Border = 15;
                            //SecondtableHeadings.AddCell(Cmodepay);
                        }

                        //39
                        PdfPCell CSignature = new PdfPCell(new Phrase("Bank A/c No./ Signature & Bank Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CSignature.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CSignature.Border = 15;
                        SecondtableHeadings.AddCell(CSignature);


                        #endregion

                        #region Table Data

                        PdfPTable Secondtable = new PdfPTable(tableCells);
                        if (tableCells > 20)
                        {
                            Secondtable.TotalWidth = 1000f;
                        }
                        else
                        {
                            Secondtable.TotalWidth = 850f;
                        }
                        Secondtable.LockedWidth = true;
                        float[] SecondWidth = new float[] { };

                        #region Table Cells

                        if (tableCells == 39)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 38)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 37)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 36)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 35)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 34)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 33)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 32)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 31)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 30)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 29)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 28)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 27)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 26)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 25)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 24)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 23)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 22)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 21)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 20)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 19)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 18)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 17)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 16)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 15)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 14)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 13)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 12)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 11)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 10)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 9)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 8)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 7)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 2f, 5f };
                        }

                        if (tableCells == 6)
                        {
                            SecondWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 5f };
                        }
                        #endregion


                        Secondtable.SetWidths(SecondWidth);




                        int rowCount = 0;
                        int pageCount = 0;
                        int i = nextpagei;

                        //for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            float ForconvertOt = 0;
                            forConvert = 0;
                            if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
                                forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());

                            //if (forConvert > 0)
                            {

                                if (nextpagerecordscount == 0)
                                {
                                    document.NewPage();
                                    document.Add(Maintable);
                                    document.Add(SecondtableHeadings);
                                }

                                nextpagerecordscount++;

                                //1
                                PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CSNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                CSNo.Border = 15;
                                Secondtable.AddCell(CSNo);

                                //2
                                PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                CEmpId1.Border = 15;
                                Secondtable.AddCell(CEmpId1);

                                //3
                                PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpName"].ToString() + "\n" + "\n" + "EPF No:" +
                                dt.Rows[i]["EmpEpfNo"].ToString() + "\n" + "\n" + "ESI No:" + dt.Rows[i]["EmpEsiNo"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                CEmpName1.Border = 15;
                                Secondtable.AddCell(CEmpName1);

                                string DOJ = dt.Rows[i]["EmpDtofJoining"].ToString();
                                if (DOJ == "01/01/1900")
                                {
                                    DOJ = "";
                                }

                                string DOB = dt.Rows[i]["EmpDtofBirth"].ToString();
                                if (DOB == "01/01/1900")
                                {
                                    DOB = "";
                                }
                                PdfPCell CBasicDetails1 = new PdfPCell(new Phrase("Father Name:" + dt.Rows[i]["EmpFathername"].ToString() + "\n" + "\n" + "DOB:" + DOB.ToString() +
                                    "\n" + "\n" + "DOJ:" + DOJ.ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CBasicDetails1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                CBasicDetails1.Border = 15;// 15;
                                Secondtable.AddCell(CBasicDetails1);

                                //4
                                PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Design"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                CEmpDesgn.Border = 15;
                                Secondtable.AddCell(CEmpDesgn);

                                //9 A
                                if (payrate != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["TempGross"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TempGross"].ToString()));
                                    totalpayrate += forConvert;
                                    Grandtotalpayrate += forConvert;
                                    PdfPCell Cpayrate1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cpayrate1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Cpayrate1.Border = 15;
                                    Secondtable.AddCell(Cpayrate1);
                                }


                                if (paydays != 0)
                                {

                                    forConvert = 0;
                                    if (dt.Rows[i]["NoOfWorkingDays"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["NoOfWorkingDays"].ToString()));
                                    totalPayDays += forConvert;
                                    GrandtotalPayDays += forConvert;
                                    PdfPCell Cpayrate1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cpayrate1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Cpayrate1.Border = 15;
                                    Secondtable.AddCell(Cpayrate1);
                                }

                                //5
                                if (dts != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
                                        forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());
                                    totalDuties += forConvert;
                                    GrandtotalDuties += forConvert;

                                    PdfPCell CNoOfDuties = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CNoOfDuties.Border = 15;
                                    Secondtable.AddCell(CNoOfDuties);
                                }

                                if (wos != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["wo"].ToString().Trim().Length > 0)
                                        forConvert = Convert.ToSingle(dt.Rows[i]["wo"].ToString());
                                    totalwos += forConvert;
                                    Grandtotalwos += forConvert;

                                    PdfPCell Cwos = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Cwos.Border = 15;
                                    Secondtable.AddCell(Cwos);
                                }
                                if (nhs != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["nhs"].ToString().Trim().Length > 0)
                                        forConvert = Convert.ToSingle(dt.Rows[i]["nhs"].ToString());
                                    totalnhs += forConvert;
                                    Grandtotalnhs += forConvert;

                                    PdfPCell CNhs = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CNhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CNhs.Border = 15;
                                    Secondtable.AddCell(CNhs);
                                }

                                //6
                                if (ots != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Duties"].ToString().Trim().Length > 0)
                                        forConvert = Convert.ToSingle(dt.Rows[i]["Duties"].ToString());
                                    totalots += forConvert;
                                    Grandtotalots += forConvert;

                                    PdfPCell COts = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    COts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    COts.Border = 15;
                                    Secondtable.AddCell(COts);
                                }
                                if (total != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["total"].ToString().Trim().Length > 0)
                                        forConvert = Convert.ToSingle(dt.Rows[i]["total"].ToString());
                                    totaltotal += forConvert;
                                    Grandtotaltotal += forConvert;

                                    PdfPCell Cnpots = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cnpots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Cnpots.Border = 15;
                                    Secondtable.AddCell(Cnpots);
                                }



                                //10
                                if (basic != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Basic"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Basic"].ToString()));
                                    totalBasic += forConvert;
                                    GrandtotalBasic += forConvert;
                                    PdfPCell CBasic1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CBasic1.Border = 15;
                                    Secondtable.AddCell(CBasic1);
                                }

                                //11
                                if (da != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["DA"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["DA"].ToString()));
                                    totalDA += forConvert;
                                    GrandtotalDA += forConvert;

                                    PdfPCell CDa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CDa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CDa1.Border = 15;
                                    Secondtable.AddCell(CDa1);
                                }

                                //12
                                if (hra != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["HRA"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["HRA"].ToString()));
                                    totalHRA += forConvert;
                                    GrandtotalHRA += forConvert;

                                    PdfPCell CHRA1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CHRA1.Border = 15;
                                    Secondtable.AddCell(CHRA1);
                                }

                                //13
                                if (cca != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["cca"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cca"].ToString()));
                                    totalCCA += forConvert;

                                    GrandtotalCCA += forConvert;

                                    PdfPCell Ccca = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Ccca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Ccca.Border = 15;
                                    Secondtable.AddCell(Ccca);
                                }

                                //14
                                if (conveyance != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Conveyance"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString()));
                                    totalConveyance += forConvert;
                                    GrandtotalConveyance += forConvert;

                                    PdfPCell CConveyance = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CConveyance.Border = 15;
                                    Secondtable.AddCell(CConveyance);
                                }


                                //15
                                if (washallowance != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["washallowance"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["washallowance"].ToString()));
                                    totalWA += forConvert;
                                    GrandtotalWA += forConvert;

                                    PdfPCell CWa = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CWa.Border = 15;
                                    Secondtable.AddCell(CWa);
                                }

                                //16
                                if (otherallowance != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["OtherAllowance"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString()));
                                    totalOA += forConvert;
                                    GrandtotalOA += forConvert;
                                    PdfPCell COA = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    COA.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    COA.Border = 15;
                                    Secondtable.AddCell(COA);
                                }

                                //17
                                if (leavewages != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Leavewages"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Leavewages"].ToString()));
                                    totalLw += forConvert;
                                    GrandtotalLw += forConvert;
                                    PdfPCell CLa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CLa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CLa1.Border = 15;
                                    Secondtable.AddCell(CLa1);
                                }

                                //18
                                if (gratuity != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Gratuity"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gratuity"].ToString()));
                                    totalGratuity += forConvert;
                                    GrandtotalGratuity += forConvert;
                                    PdfPCell CGratuity1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CGratuity1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CGratuity1.Border = 15;
                                    Secondtable.AddCell(CGratuity1);
                                }

                                //19
                                if (bonus != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["bonus"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["bonus"].ToString()));
                                    totalbonus += forConvert;

                                    Grandtotalbonus += forConvert;
                                    PdfPCell Cbonus = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Cbonus.Border = 15;
                                    Secondtable.AddCell(Cbonus);
                                }



                                //20
                                if (nfhs != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Nfhs"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Nfhs"].ToString()));
                                    totalNfhs += forConvert;
                                    GrandtotalNfhs += forConvert;
                                    PdfPCell CNfhs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CNfhs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CNfhs1.Border = 15;
                                    Secondtable.AddCell(CNfhs1);
                                }

                                //21
                                if (rc != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["RC"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["RC"].ToString()));
                                    totalRc += forConvert;
                                    GrandtotalRc += forConvert;
                                    PdfPCell CRc1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CRc1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CRc1.Border = 15;
                                    Secondtable.AddCell(CRc1);
                                }

                                //22
                                if (cs != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["cs"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cs"].ToString()));
                                    totalCs += forConvert;
                                    GrandtotalCs += forConvert;
                                    PdfPCell CCs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CCs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CCs1.Border = 15;
                                    Secondtable.AddCell(CCs1);
                                }

                                if (Arrears != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["arrears"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["arrears"].ToString()));
                                    totalarrears += forConvert;
                                    Grandtotalarrears += forConvert;
                                    PdfPCell Carrears1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Carrears1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Carrears1.Border = 15;
                                    Secondtable.AddCell(Carrears1);
                                }


                                if (cfoodallowance != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["foodallowance"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["foodallowance"].ToString()));
                                    totalfoodallowance += forConvert;
                                    Grandtotalfoodallowance += forConvert;
                                    PdfPCell CFoodAllw1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CFoodAllw1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CFoodAllw1.Border = 15;
                                    Secondtable.AddCell(CFoodAllw1);
                                }


                                if (cmedicalallowance != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["medicalallowance"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["medicalallowance"].ToString()));
                                    totalmedicalallowance += forConvert;
                                    Grandtotalmedicalallowance += forConvert;
                                    PdfPCell CMedicalAllw1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CMedicalAllw1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CMedicalAllw1.Border = 15;
                                    Secondtable.AddCell(CMedicalAllw1);
                                }
                                if (splallw != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["SplAllowance"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SplAllowance"].ToString()));
                                    totalSplAllowance += forConvert;
                                    GrandtotalSplAllowance += forConvert;
                                    PdfPCell CSplAllowance1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSplAllowance1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSplAllowance1.Border = 15;
                                    Secondtable.AddCell(CSplAllowance1);
                                }
                                //
                                if (TravelAllw != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["TravelAllw"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TravelAllw"].ToString()));
                                    totalTravelAllw += forConvert;
                                    GrandtotalTravelAllw += forConvert;
                                    PdfPCell CSplAllowance1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSplAllowance1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSplAllowance1.Border = 15;
                                    Secondtable.AddCell(CSplAllowance1);
                                }

                                if (PerformanceAllw != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["PerformanceAllw"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PerformanceAllw"].ToString()));
                                    totalPerformanceAllw += forConvert;
                                    GrandtotalPerformanceAllw += forConvert;
                                    PdfPCell CSplAllowance1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSplAllowance1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSplAllowance1.Border = 15;
                                    Secondtable.AddCell(CSplAllowance1);
                                }

                                if (MobileAllw != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["MobileAllw"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["MobileAllw"].ToString()));
                                    totalMobileAllw += forConvert;
                                    GrandtotalMobileAllw += forConvert;
                                    PdfPCell CSplAllowance1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSplAllowance1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSplAllowance1.Border = 15;
                                    Secondtable.AddCell(CSplAllowance1);
                                }
                                //
                                if (wosamt != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["woamt"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["woamt"].ToString()));
                                    totalwosamt += forConvert;

                                    Grandtotalwosamt += forConvert;

                                    PdfPCell Cwosamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Cwosamt.Border = 15;
                                    Secondtable.AddCell(Cwosamt);
                                }



                                //26
                                if (nhsamt != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["nhsamt"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["nhsamt"].ToString()));
                                    totalnhsamt += forConvert;

                                    Grandtotalnhsamt += forConvert;

                                    PdfPCell Cnhsamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Cnhsamt.Border = 15;
                                    Secondtable.AddCell(Cnhsamt);
                                }
                                //23
                                if (gross != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Gross"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gross"].ToString()));
                                    totalGross += forConvert;
                                    GrandtotalGross += forConvert;

                                    PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CGross1.Border = 15;
                                    Secondtable.AddCell(CGross1);
                                }
                                //24
                                if (otamt != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Amount"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Amount"].ToString()));
                                    totalotamt += forConvert;
                                    Grandtotalotamt += forConvert;

                                    PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CGross1.Border = 15;
                                    Secondtable.AddCell(CGross1);
                                }


                                //25


                                //27
                                if (npotsamt != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["npotsamt"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["npotsamt"].ToString()));
                                    totalnpotsamt += forConvert;

                                    Grandtotalnpotsamt += forConvert;

                                    PdfPCell Cnpotsamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cnpotsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Cnpotsamt.Border = 15;
                                    Secondtable.AddCell(Cnpotsamt);
                                }

                                //28
                                if (incentivs != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Incentivs"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Incentivs"].ToString()));
                                    totalIncentivs += forConvert;
                                    GrandtotalIncentivs += forConvert;
                                    PdfPCell CIncentivs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CIncentivs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CIncentivs1.Border = 15;
                                    Secondtable.AddCell(CIncentivs1);
                                }

                                //28A

                                if (totalearned != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["gross"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["gross"].ToString()));
                                    totaltotalearned += forConvert;

                                    Grandtotaltotalearned += forConvert;

                                    PdfPCell Ctotalearned = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Ctotalearned.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Ctotalearned.Border = 15;
                                    // Secondtable.AddCell(Ctotalearned);
                                }


                                //29
                                if (pf != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Pf"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Pf"].ToString()));
                                    totalPF += forConvert;
                                    GrandtotalPF += forConvert;

                                    PdfPCell CPF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CPF1.Border = 15;
                                    Secondtable.AddCell(CPF1);
                                }

                                //30
                                if (esi != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Esi"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Esi"].ToString()));
                                    totalESI += forConvert;

                                    GrandtotalESI += forConvert;

                                    PdfPCell CESI1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CESI1.Border = 15;
                                    Secondtable.AddCell(CESI1);
                                }




                                //31
                                if (proftax != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["ProfTax"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString()));
                                    totalProfTax += forConvert;
                                    GrandtotalProfTax += forConvert;

                                    PdfPCell CProTax1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CProTax1.Border = 15;
                                    Secondtable.AddCell(CProTax1);
                                }

                                if (owf != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["owf"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["owf"].ToString()));
                                    totalowf += forConvert;
                                    Grandtotalowf += forConvert;

                                    PdfPCell Cowf1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cowf1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    Cowf1.Border = 15;
                                    Secondtable.AddCell(Cowf1);
                                }

                                if (TDS != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["TDS"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TDS"].ToString()));
                                    totalTDS += forConvert;
                                    GrandtotalTDS += forConvert;

                                    PdfPCell CTDS1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CTDS1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    CTDS1.Border = 15;
                                    Secondtable.AddCell(CTDS1);
                                }

                                if (Soceity != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Soceity"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Soceity"].ToString()));
                                    totalSoceity += forConvert;
                                    GrandtotalSoceity += forConvert;

                                    PdfPCell CSoceity1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSoceity1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    CSoceity1.Border = 15;
                                    Secondtable.AddCell(CSoceity1);
                                }

                                if (Mobile != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Mobile"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Mobile"].ToString()));
                                    totalMobile += forConvert;
                                    GrandtotalMobile += forConvert;

                                    PdfPCell Cmobexp1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cmobexp1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    Cmobexp1.Border = 15;
                                    Secondtable.AddCell(Cmobexp1);
                                }

                                if (KLWF != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["KLWF"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["KLWF"].ToString()));
                                    totalKLWF += forConvert;
                                    GrandtotalKLWF += forConvert;

                                    PdfPCell CKLWF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CKLWF1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    CKLWF1.Border = 15;
                                    Secondtable.AddCell(CKLWF1);
                                }

                                if (Loss != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Loss"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Loss"].ToString()));
                                    totalLoss += forConvert;
                                    GrandtotalLoss += forConvert;

                                    PdfPCell CLoss1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CLoss1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    CLoss1.Border = 15;
                                    Secondtable.AddCell(CLoss1);
                                }


                                if (Loan != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["loanded"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["loanded"].ToString()));
                                    totalLoanDed += forConvert;
                                    GrandtotalLoanDed += forConvert;

                                    PdfPCell CLoanDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CLoanDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CLoanDed1.Border = 15;
                                    Secondtable.AddCell(CLoanDed1);
                                }


                                //32
                                if (salAdvDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["SalAdvDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString()));
                                    totalSalAdv += forConvert;
                                    GrandtotalSalAdv += forConvert;

                                    PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSalAdv1.Border = 15;
                                    Secondtable.AddCell(CSalAdv1);
                                }
                                if (ATMDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["ATMDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ATMDed"].ToString()));
                                    totalATMDed += forConvert;
                                    GrandtotalATMDed += forConvert;

                                    PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSalAdv1.Border = 15;
                                    Secondtable.AddCell(CSalAdv1);
                                }
                                //
                                if (IDCardDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["IDCardDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["IDCardDed"].ToString()));
                                    totalIDCardDed += forConvert;
                                    GrandtotalIDCardDed += forConvert;

                                    PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSalAdv1.Border = 15;
                                    Secondtable.AddCell(CSalAdv1);
                                }

                                if (Extra != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Extra"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Extra"].ToString()));
                                    totalExtra += forConvert;
                                    GrandtotalExtra += forConvert;

                                    PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSalAdv1.Border = 15;
                                    Secondtable.AddCell(CSalAdv1);
                                }


                                //33
                                if (uniformDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["UniformDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString()));
                                    totalUniforDed += forConvert;
                                    GrandtotalUniforDed += forConvert;

                                    PdfPCell CUnifDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CUnifDed1.Border = 15;
                                    Secondtable.AddCell(CUnifDed1);
                                }

                                if (SecurityDepDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["SecurityDepDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SecurityDepDed"].ToString()));
                                    totalSecurityDepDed += forConvert;
                                    GrandtotalSecurityDepDed += forConvert;

                                    PdfPCell CSecurityDepDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CSecurityDepDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CSecurityDepDed1.Border = 15;
                                    Secondtable.AddCell(CSecurityDepDed1);
                                }


                                //34
                                if (otherDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["OtherDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherDed"].ToString()));
                                    totalOtherdedn += forConvert;
                                    GrandtotalOtherdedn += forConvert;

                                    PdfPCell COtherDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    COtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    COtherDed1.Border = 15;
                                    Secondtable.AddCell(COtherDed1);
                                }

                                if (MBSDed != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["MBSDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["MBSDed"].ToString()));

                                    GrandtotalMBSdedn += forConvert;

                                    PdfPCell CMBSded1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CMBSded1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CMBSded1.Border = 15;
                                    Secondtable.AddCell(CMBSded1);
                                }

                                //35
                                if (canteenAdv != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["CanteenAdv"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["CanteenAdv"].ToString()));
                                    totalCanteenAdv += forConvert;
                                    GrandtotalCanteenAdv += forConvert;

                                    PdfPCell CCanteended = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CCanteended.Border = 15;
                                    Secondtable.AddCell(CCanteended);
                                }



                                //36
                                if (penalty != 0)
                                {
                                    if (dt.Rows[i]["Penalty"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Penalty"].ToString()));
                                    totalPenalty += forConvert;
                                    GrandtotalPenalty += forConvert;

                                    PdfPCell CPenalty1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CPenalty1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CPenalty1.Border = 15;
                                    Secondtable.AddCell(CPenalty1);
                                }

                                //36
                                if (TelephoneBillDed != 0)
                                {
                                    if (dt.Rows[i]["TelephoneBillDed"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["TelephoneBillDed"].ToString()));
                                    totalTelephoneBillDed += forConvert;
                                    GrandtotalTelephoneBillDed += forConvert;

                                    PdfPCell CTelephoneBillDed = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CTelephoneBillDed.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CTelephoneBillDed.Border = 15;
                                    Secondtable.AddCell(CTelephoneBillDed);
                                }


                                //37
                                if (totalDeductions != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["Totaldeduct"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Totaldeduct"].ToString()));
                                    totalDed += forConvert;
                                    GrandtotalDed += forConvert;

                                    PdfPCell CTotDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CTotDed1.Border = 15;
                                    Secondtable.AddCell(CTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                                }

                                //38
                                //if (netpay != 0)
                                {
                                    forConvert = 0;
                                    if (dt.Rows[i]["NetAmount"].ToString().Trim().Length > 0)
                                        forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["NetAmount"].ToString()));
                                    if (forConvert <= 0)
                                    {
                                        forConvert = 0;
                                    }
                                    totalNetpay += forConvert;
                                    GrandtotalNetpay += forConvert;
                                    PdfPCell CNetPay1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CNetPay1.Border = 15;
                                    Secondtable.AddCell(CNetPay1);
                                }

                                if (modeofpayment != 0)
                                {
                                    PdfPCell Cmodepay1 = new PdfPCell(new Phrase("Bank", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    Cmodepay1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    Cmodepay1.Border = 15;
                                    //Secondtable.AddCell(Cmodepay1);
                                }

                                //39
                                string EmpBankAcNo1 = dt.Rows[i]["EmpBankAcNo"].ToString();
                                string empbankname = dt.Rows[i]["empbankname"].ToString();

                                PdfPCell CSignature1 = new PdfPCell(new Phrase(EmpBankAcNo1 + "\n" + "Bank :" + empbankname, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                CSignature1.Border = 15;
                                Secondtable.AddCell(CSignature1);

                                day1 = dt.Rows[i]["day1"].ToString();
                                if (day1 == "0")
                                {
                                    day1 = "A";
                                }
                                day2 = dt.Rows[i]["day2"].ToString();
                                if (day2 == "0")
                                {
                                    day2 = "A";
                                }
                                day3 = dt.Rows[i]["day3"].ToString();
                                if (day3 == "0")
                                {
                                    day3 = "A";
                                }
                                day4 = dt.Rows[i]["day4"].ToString();
                                if (day4 == "0")
                                {
                                    day4 = "A";
                                }
                                day5 = dt.Rows[i]["day5"].ToString();
                                if (day5 == "0")
                                {
                                    day5 = "A";
                                }
                                day6 = dt.Rows[i]["day6"].ToString();
                                if (day6 == "0")
                                {
                                    day6 = "A";
                                }
                                day7 = dt.Rows[i]["day7"].ToString();
                                if (day7 == "0")
                                {
                                    day7 = "A";
                                }
                                day8 = dt.Rows[i]["day8"].ToString();
                                if (day8 == "0")
                                {
                                    day8 = "A";
                                }
                                day9 = dt.Rows[i]["day9"].ToString();
                                if (day9 == "0")
                                {
                                    day9 = "A";
                                }
                                day10 = dt.Rows[i]["day10"].ToString();
                                if (day10 == "0")
                                {
                                    day10 = "A";
                                }
                                day11 = dt.Rows[i]["day11"].ToString();
                                if (day11 == "0")
                                {
                                    day11 = "A";
                                }
                                day12 = dt.Rows[i]["day12"].ToString();
                                if (day12 == "0")
                                {
                                    day12 = "A";
                                }
                                day13 = dt.Rows[i]["day13"].ToString();
                                if (day13 == "0")
                                {
                                    day13 = "A";
                                }
                                day14 = dt.Rows[i]["day14"].ToString();
                                if (day14 == "0")
                                {
                                    day14 = "A";
                                }
                                day15 = dt.Rows[i]["day15"].ToString();
                                if (day15 == "0")
                                {
                                    day15 = "A";
                                }
                                day16 = dt.Rows[i]["day16"].ToString();
                                if (day16 == "0")
                                {
                                    day16 = "A";
                                }
                                day17 = dt.Rows[i]["day17"].ToString();
                                if (day17 == "0")
                                {
                                    day17 = "A";
                                }
                                day18 = dt.Rows[i]["day18"].ToString();
                                if (day18 == "0")
                                {
                                    day18 = "A";
                                }
                                day19 = dt.Rows[i]["day19"].ToString();
                                if (day19 == "0")
                                {
                                    day19 = "A";
                                }
                                day20 = dt.Rows[i]["day20"].ToString();
                                if (day20 == "0")
                                {
                                    day20 = "A";
                                }
                                day21 = dt.Rows[i]["day21"].ToString();
                                if (day21 == "0")
                                {
                                    day21 = "A";
                                }
                                day22 = dt.Rows[i]["day22"].ToString();
                                if (day22 == "0")
                                {
                                    day22 = "A";
                                }
                                day23 = dt.Rows[i]["day23"].ToString();
                                if (day23 == "0")
                                {
                                    day23 = "A";
                                }
                                day24 = dt.Rows[i]["day24"].ToString();
                                if (day24 == "0")
                                {
                                    day24 = "A";
                                }
                                day25 = dt.Rows[i]["day25"].ToString();
                                if (day25 == "0")
                                {
                                    day25 = "A";
                                }
                                day26 = dt.Rows[i]["day26"].ToString();
                                if (day26 == "0")
                                {
                                    day26 = "A";
                                }
                                day27 = dt.Rows[i]["day27"].ToString();
                                if (day27 == "0")
                                {
                                    day27 = "A";
                                }
                                day28 = dt.Rows[i]["day28"].ToString();
                                if (day28 == "0")
                                {
                                    day28 = "A";
                                }
                                day29 = dt.Rows[i]["day29"].ToString();
                                if (day29 == "0")
                                {
                                    day29 = "A";
                                }
                                day30 = dt.Rows[i]["day30"].ToString();
                                if (day30 == "0")
                                {
                                    day30 = "A";
                                }
                                day31 = dt.Rows[i]["day31"].ToString();
                                if (day31 == "0")
                                {
                                    day31 = "A";
                                }

                                PdfPCell Cemp = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                Cemp.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                Cemp.Colspan = 0;
                                Secondtable.AddCell(Cemp);



                                if (days == 30)
                                {
                                    PdfPCell CAttendance = new PdfPCell(new Phrase("1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17      18       19       20       21       22       23       24       25       26       27       28       29       30", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CAttendance.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    CAttendance.Colspan = tableCells - 1;
                                    Secondtable.AddCell(CAttendance);

                                    Secondtable.AddCell(Cemp);

                                    PdfPCell CAttendanceval = new PdfPCell(new Phrase(day1 + "       " + day2 + "        " + day3 + "       " + day4 + "        " + day5 + "        " + day6 + "        " + day7 + "       " + day8 + "        " + day9 + "        " + day10 + "        " + day11 + "         " + day12 + "         " + day13 + "         " + day14 + "         " + day15 + "        " + day16 + "        " + day17 + "        " + day18 + "        " + day19 + "        " + day20 + "        " + day21 + "         " + day22 + "         " + day23 + "        " + day24 + "        " + day25 + "        " + day26 + "        " + day27 + "         " + day28 + "         " + day29 + "         " + day30, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CAttendanceval.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    CAttendanceval.Border = 15;
                                    CAttendanceval.Colspan = tableCells;
                                    Secondtable.AddCell(CAttendanceval);

                                }
                                else
                                {
                                    PdfPCell CAttendance = new PdfPCell(new Phrase("1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17      18       19       20       21       22       23       24       25       26       27       28       29       30       31", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CAttendance.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    CAttendance.Colspan = tableCells - 1;
                                    Secondtable.AddCell(CAttendance);

                                    Secondtable.AddCell(Cemp);

                                    PdfPCell CAttendanceval = new PdfPCell(new Phrase(day1 + "       " + day2 + "        " + day3 + "       " + day4 + "        " + day5 + "        " + day6 + "        " + day7 + "       " + day8 + "        " + day9 + "        " + day10 + "        " + day11 + "         " + day12 + "         " + day13 + "         " + day14 + "         " + day15 + "        " + day16 + "        " + day17 + "        " + day18 + "        " + day19 + "        " + day20 + "        " + day21 + "         " + day22 + "         " + day23 + "        " + day24 + "        " + day25 + "        " + day26 + "        " + day27 + "         " + day28 + "         " + day29 + "         " + day30 + "         " + day31, FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                    CAttendanceval.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    CAttendanceval.Border = 15;
                                    CAttendanceval.Colspan = tableCells;
                                    Secondtable.AddCell(CAttendanceval);

                                }


                            }


                        }
                        #endregion

                        #region Table Total values

                        SecondtableFooter = new PdfPTable(tableCells);
                        if (tableCells > 20)
                        {
                            SecondtableFooter.TotalWidth = 1000f;
                        }
                        else
                        {
                            SecondtableFooter.TotalWidth = 850f;
                        }
                        SecondtableFooter.LockedWidth = true;
                        float[] SecondFooterWidth = new float[] { };

                        #region Table Cells

                        if (tableCells == 39)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 38)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 37)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 36)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 35)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 34)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 33)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 32)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 31)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 30)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 29)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 28)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 27)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 26)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 25)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 24)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 23)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 22)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 21)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 20)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 19)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 18)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 17)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 16)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 15)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 14)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 13)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 12)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 11)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 10)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 9)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 8)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 7)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 2f, 5f };
                        }

                        if (tableCells == 6)
                        {
                            SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 5f };
                        }
                        #endregion

                        SecondtableFooter.SetWidths(SecondFooterWidth);

                        //1
                        PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        FCSNo.Border = 15;
                        SecondtableFooter.AddCell(FCSNo);
                        //2
                        PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        FCEmpId1.Border = 15;
                        SecondtableFooter.AddCell(FCEmpId1);
                        //3
                        PdfPCell FCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        FCEmpName1.Border = 15;
                        SecondtableFooter.AddCell(FCEmpName1);

                        PdfPCell FCBasicDetails1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCBasicDetails1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        FCBasicDetails1.Border = 15;// 15;
                        SecondtableFooter.AddCell(FCBasicDetails1);
                        //4
                        PdfPCell FCEmpDesgn = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        FCEmpDesgn.Border = 15;
                        SecondtableFooter.AddCell(FCEmpDesgn);

                        // A
                        if (payrate != 0)
                        {
                            PdfPCell FCpayrate1 = new PdfPCell(new Phrase(totalpayrate.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCpayrate1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCpayrate1.Border = 15;
                            SecondtableFooter.AddCell(FCpayrate1);
                        }

                        if (paydays != 0)
                        {
                            PdfPCell FCdateofsusp = new PdfPCell(new Phrase(totalPayDays.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            FCdateofsusp.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCdateofsusp.Border = 15;
                            SecondtableFooter.AddCell(FCdateofsusp);
                        }

                        //5
                        if (dts != 0)
                        {
                            PdfPCell FCNoOfDuties = new PdfPCell(new Phrase(totalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCNoOfDuties.Border = 15;
                            SecondtableFooter.AddCell(FCNoOfDuties);
                        }
                        if (wos != 0)
                        {
                            PdfPCell FCwos = new PdfPCell(new Phrase(totalwos.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCwos.Border = 15;
                            SecondtableFooter.AddCell(FCwos);
                        }

                        //8
                        if (nhs != 0)
                        {
                            PdfPCell FCnhs = new PdfPCell(new Phrase(totalnhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCnhs.Border = 15;
                            SecondtableFooter.AddCell(FCnhs);
                        }

                        //6
                        if (ots != 0)
                        {
                            PdfPCell FCots = new PdfPCell(new Phrase(totalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCots.Border = 15;
                            SecondtableFooter.AddCell(FCots);
                        }

                        //7

                        //9
                        if (total != 0)
                        {
                            PdfPCell FCnpots = new PdfPCell(new Phrase(totaltotal.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCnpots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCnpots.Border = 15;
                            SecondtableFooter.AddCell(FCnpots);
                        }



                        //10
                        if (basic != 0)
                        {
                            PdfPCell FCBasic1 = new PdfPCell(new Phrase(totalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCBasic1.Border = 15;
                            SecondtableFooter.AddCell(FCBasic1);
                        }


                        //11
                        if (da != 0)
                        {
                            PdfPCell FDa = new PdfPCell(new Phrase(totalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FDa.Border = 15;
                            SecondtableFooter.AddCell(FDa);
                        }


                        //12
                        if (hra != 0)
                        {

                            PdfPCell FCHRA1 = new PdfPCell(new Phrase(totalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCHRA1.Border = 15;
                            SecondtableFooter.AddCell(FCHRA1);
                        }

                        //13
                        if (cca != 0)
                        {
                            PdfPCell FCcca = new PdfPCell(new Phrase(totalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCcca.Border = 15;
                            SecondtableFooter.AddCell(FCcca);
                        }

                        //14
                        if (conveyance != 0)
                        {
                            PdfPCell FCConveyance = new PdfPCell(new Phrase(totalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCConveyance.Border = 15;
                            SecondtableFooter.AddCell(FCConveyance);
                        }


                        //15
                        if (washallowance != 0)
                        {
                            PdfPCell FCWa = new PdfPCell(new Phrase(totalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCWa.Border = 15;
                            SecondtableFooter.AddCell(FCWa);
                        }

                        //16
                        if (otherallowance != 0)
                        {
                            PdfPCell FCOa = new PdfPCell(new Phrase(totalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCOa.Border = 15;
                            SecondtableFooter.AddCell(FCOa);
                        }


                        //17
                        if (leavewages != 0)
                        {
                            PdfPCell FLa = new PdfPCell(new Phrase(totalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FLa.Border = 15;
                            SecondtableFooter.AddCell(FLa);
                        }

                        //18
                        if (gratuity != 0)
                        {
                            PdfPCell FGratuity = new PdfPCell(new Phrase(totalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FGratuity.Border = 15;
                            SecondtableFooter.AddCell(FGratuity);
                        }

                        //19
                        if (bonus != 0)
                        {
                            PdfPCell Fbonus = new PdfPCell(new Phrase(totalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            Fbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Fbonus.Border = 15;
                            SecondtableFooter.AddCell(Fbonus);
                        }

                        //20
                        if (nfhs != 0)
                        {
                            PdfPCell FNfhs = new PdfPCell(new Phrase(totalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FNfhs.Border = 15;
                            SecondtableFooter.AddCell(FNfhs);
                        }

                        //21
                        if (rc != 0)
                        {
                            PdfPCell FRc = new PdfPCell(new Phrase(totalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FRc.Border = 15;
                            SecondtableFooter.AddCell(FRc);
                        }

                        //22
                        if (cs != 0)
                        {
                            PdfPCell FCs = new PdfPCell(new Phrase(totalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCs.Border = 15;
                            SecondtableFooter.AddCell(FCs);
                        }

                        if (Arrears != 0)
                        {
                            PdfPCell FCarrears1 = new PdfPCell(new Phrase(totalarrears.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            FCarrears1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCarrears1.Border = 15;
                            SecondtableFooter.AddCell(FCarrears1);
                        }

                        if (cfoodallowance != 0)
                        {
                            PdfPCell FFoodallw = new PdfPCell(new Phrase(totalfoodallowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FFoodallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FFoodallw.Border = 15;
                            SecondtableFooter.AddCell(FFoodallw);
                        }


                        if (cmedicalallowance != 0)
                        {
                            PdfPCell FMedicalallw = new PdfPCell(new Phrase(totalmedicalallowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            FMedicalallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FMedicalallw.Border = 15;
                            SecondtableFooter.AddCell(FMedicalallw);
                        }


                        if (splallw != 0)
                        {
                            PdfPCell Fsplallw = new PdfPCell(new Phrase(totalSplAllowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            Fsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Fsplallw.Border = 15;
                            SecondtableFooter.AddCell(Fsplallw);
                        }

                        //
                        if (TravelAllw != 0)
                        {
                            PdfPCell Fsplallw = new PdfPCell(new Phrase(totalTravelAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            Fsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Fsplallw.Border = 15;
                            SecondtableFooter.AddCell(Fsplallw);
                        }

                        if (PerformanceAllw != 0)
                        {
                            PdfPCell Fsplallw = new PdfPCell(new Phrase(totalPerformanceAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            Fsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Fsplallw.Border = 15;
                            SecondtableFooter.AddCell(Fsplallw);
                        }

                        if (MobileAllw != 0)
                        {
                            PdfPCell Fsplallw = new PdfPCell(new Phrase(totalMobileAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            Fsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Fsplallw.Border = 15;
                            SecondtableFooter.AddCell(Fsplallw);
                        }


                        //
                        if (wosamt != 0)
                        {
                            PdfPCell FCEwosamt = new PdfPCell(new Phrase(totalwosamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCEwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCEwosamt.Border = 15;
                            SecondtableFooter.AddCell(FCEwosamt);
                        }



                        //26
                        if (nhsamt != 0)
                        {
                            PdfPCell FCnhsamt = new PdfPCell(new Phrase(totalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCnhsamt.Border = 15;
                            SecondtableFooter.AddCell(FCnhsamt);
                        }

                        //23
                        if (gross != 0)
                        {
                            PdfPCell FCGross1 = new PdfPCell(new Phrase(totalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCGross1.Border = 15;
                            SecondtableFooter.AddCell(FCGross1);
                        }

                        //24
                        if (otamt != 0)
                        {
                            PdfPCell FCotamt = new PdfPCell(new Phrase(totalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCotamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCotamt.Border = 15;
                            SecondtableFooter.AddCell(FCotamt);
                        }

                        //25

                        //27
                        if (npotsamt != 0)
                        {
                            PdfPCell FCnpotsamt = new PdfPCell(new Phrase(totalnpotsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCnpotsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCnpotsamt.Border = 15;
                            SecondtableFooter.AddCell(FCnpotsamt);
                        }


                        //28
                        if (incentivs != 0)
                        {
                            PdfPCell FIncentivs = new PdfPCell(new Phrase(totalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FIncentivs.Border = 15;
                            SecondtableFooter.AddCell(FIncentivs);
                        }

                        //28A
                        if (totalearned != 0)
                        {
                            PdfPCell FCtotalearned = new PdfPCell(new Phrase(totaltotalearned.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCtotalearned.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCtotalearned.Border = 15;
                            //SecondtableFooter.AddCell(FCtotalearned);
                        }

                        //29
                        if (pf != 0)
                        {
                            PdfPCell FCPF1 = new PdfPCell(new Phrase(totalPF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCPF1.Border = 15;
                            SecondtableFooter.AddCell(FCPF1);
                        }

                        //30
                        if (esi != 0)
                        {
                            PdfPCell FCESI1 = new PdfPCell(new Phrase(totalESI.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCESI1.Border = 15;
                            SecondtableFooter.AddCell(FCESI1);
                        }






                        //31
                        if (proftax != 0)
                        {
                            PdfPCell FCProTax1 = new PdfPCell(new Phrase(totalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCProTax1.Border = 15;
                            SecondtableFooter.AddCell(FCProTax1);


                        }

                        if (owf != 0)
                        {
                            PdfPCell FCowf1 = new PdfPCell(new Phrase(totalowf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCowf1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCowf1.Border = 15;
                            SecondtableFooter.AddCell(FCowf1);


                        }

                        if (TDS != 0)
                        {
                            PdfPCell FCTDS1 = new PdfPCell(new Phrase(totalTDS.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            FCTDS1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            FCTDS1.Border = 15;
                            SecondtableFooter.AddCell(FCTDS1);
                        }

                        if (Soceity != 0)
                        {


                            PdfPCell FCSoceity1 = new PdfPCell(new Phrase(totalSoceity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            FCSoceity1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            FCSoceity1.Border = 15;
                            SecondtableFooter.AddCell(FCSoceity1);
                        }

                        if (Mobile != 0)
                        {


                            PdfPCell FCmobexp1 = new PdfPCell(new Phrase(totalMobile.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            FCmobexp1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            FCmobexp1.Border = 15;
                            SecondtableFooter.AddCell(FCmobexp1);
                        }

                        if (KLWF != 0)
                        {


                            PdfPCell FCKLWF1 = new PdfPCell(new Phrase(totalKLWF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            FCKLWF1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            FCKLWF1.Border = 15;
                            SecondtableFooter.AddCell(FCKLWF1);
                        }

                        if (Loss != 0)
                        {
                            PdfPCell FCLoss1 = new PdfPCell(new Phrase(totalLoss.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            FCLoss1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            FCLoss1.Border = 15;
                            SecondtableFooter.AddCell(FCLoss1);
                        }

                        if (Loan != 0)
                        {
                            PdfPCell FCLoanDed1 = new PdfPCell(new Phrase(totalLoanDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCLoanDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCLoanDed1.Border = 15;
                            SecondtableFooter.AddCell(FCLoanDed1);
                        }


                        //32
                        if (salAdvDed != 0)
                        {
                            PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCSalAdv1.Border = 15;
                            SecondtableFooter.AddCell(FCSalAdv1);
                        }
                        if (ATMDed != 0)
                        {
                            PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalATMDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCSalAdv1.Border = 15;
                            SecondtableFooter.AddCell(FCSalAdv1);
                        }

                        //

                        if (IDCardDed != 0)
                        {
                            PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalIDCardDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCSalAdv1.Border = 15;
                            SecondtableFooter.AddCell(FCSalAdv1);
                        }


                        if (Extra != 0)
                        {
                            PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalExtra.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCSalAdv1.Border = 15;
                            SecondtableFooter.AddCell(FCSalAdv1);
                        }

                        //33
                        if (uniformDed != 0)
                        {
                            PdfPCell FCUnifDed1 = new PdfPCell(new Phrase(totalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCUnifDed1.Border = 15;
                            SecondtableFooter.AddCell(FCUnifDed1);
                        }

                        if (SecurityDepDed != 0)
                        {
                            PdfPCell FCSecurityDepDed1 = new PdfPCell(new Phrase(totalSecurityDepDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCSecurityDepDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCSecurityDepDed1.Border = 15;
                            SecondtableFooter.AddCell(FCSecurityDepDed1);
                        }


                        //34
                        if (otherDed != 0)
                        {
                            PdfPCell FCOtherDed1 = new PdfPCell(new Phrase(totalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCOtherDed1.Border = 15;
                            SecondtableFooter.AddCell(FCOtherDed1);
                        }




                        //35
                        if (canteenAdv != 0)
                        {
                            PdfPCell FCCanteended = new PdfPCell(new Phrase(totalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCCanteended.Border = 15;
                            SecondtableFooter.AddCell(FCCanteended);
                        }


                        //36
                        if (penalty != 0)
                        {
                            PdfPCell FPenalty = new PdfPCell(new Phrase(totalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FPenalty.Border = 15;
                            SecondtableFooter.AddCell(FPenalty);
                        }

                        //36
                        if (TelephoneBillDed != 0)
                        {
                            PdfPCell FTelephoneBillDed = new PdfPCell(new Phrase(totalTelephoneBillDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FTelephoneBillDed.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FTelephoneBillDed.Border = 15;
                            SecondtableFooter.AddCell(FTelephoneBillDed);
                        }


                        //37
                        if (totalDeductions != 0)
                        {
                            PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCTotDed1.Border = 15;
                            SecondtableFooter.AddCell(FCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                        }

                        //38
                        //if (netpay != 0)
                        {
                            PdfPCell FCNetPay1 = new PdfPCell(new Phrase(totalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            FCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            FCNetPay1.Border = 15;
                            //FCNetPay1.Colspan = 2;
                            SecondtableFooter.AddCell(FCNetPay1);
                        }

                        if (modeofpayment != 0)
                        {
                            PdfPCell FCmodepay1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            FCmodepay1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            FCmodepay1.Border = 15;
                            // SecondtableFooter.AddCell(FCmodepay1);
                        }


                        //39
                        PdfPCell FCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        FCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        FCSignature1.Border = 15;
                        //FCSignature1.MinimumHeight = 25;
                        SecondtableFooter.AddCell(FCSignature1);

                        #endregion

                        SecondtableGrandtotalFooter = new PdfPTable(tableCells);
                        if (tableCells > 20)
                        {
                            SecondtableGrandtotalFooter.TotalWidth = 1000f;
                        }
                        else
                        {
                            SecondtableGrandtotalFooter.TotalWidth = 850f;
                        }
                        SecondtableGrandtotalFooter.LockedWidth = true;
                        float[] SecondGrandtotalFooterWidth = new float[] { };
                        #region Table Cells

                        if (tableCells == 39)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 38)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 37)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 36)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 35)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 34)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 33)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 32)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 31)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 30)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 29)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 28)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 27)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 26)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 25)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 24)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 23)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 22)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 21)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 20)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 19)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 18)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 17)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 16)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 15)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 14)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 13)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 12)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 11)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 10)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 9)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 8)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 7)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 2f, 5f };
                        }

                        if (tableCells == 6)
                        {
                            SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 5f };
                        }
                        #endregion
                        SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

                        SecondtablecheckbyFooter = new PdfPTable(tableCells);
                        if (tableCells > 20)
                        {
                            SecondtablecheckbyFooter.TotalWidth = 1000f;
                        }
                        else
                        {
                            SecondtablecheckbyFooter.TotalWidth = 850f;
                        }
                        SecondtablecheckbyFooter.LockedWidth = true;
                        float[] SecondcheckbyFooterWidth = new float[] { };

                        #region Table Cells

                        if (tableCells == 39)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 38)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 37)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 36)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 35)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 34)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 33)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 32)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 31)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 30)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 29)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 28)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 27)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 26)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 25)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 24)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 23)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 22)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 21)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 20)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 19)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 18)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 17)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 16)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 15)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 14)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 13)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 12)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 11)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 10)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 9)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 1.5f, 2f, 5f };
                        }
                        if (tableCells == 8)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 1.5f, 2f, 5f };
                        }

                        if (tableCells == 7)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 2f, 5f };
                        }

                        if (tableCells == 6)
                        {
                            SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 4f, 3f, 5f };
                        }
                        #endregion

                        SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);

                        #region Table   Grand   Total  Footer

                        //1
                        PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        GFCSNo.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCSNo);

                        //2
                        PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        GFCEmpId1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCEmpId1);

                        //3
                        PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        GFCEmpName1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCEmpName1);

                        PdfPCell GFCBasicDetails1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCBasicDetails1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        GFCBasicDetails1.Border = 15;// 15;
                        SecondtablecheckbyFooter.AddCell(GFCBasicDetails1);

                        //4
                        PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("Grand  Total: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        GFCEmpDesgn.Border = 15;
                        //FCEmpDesgn.Colspan = 4;
                        SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);

                        // A
                        if (payrate != 0)
                        {
                            PdfPCell GFCpayrate1 = new PdfPCell(new Phrase(Grandtotalpayrate.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCpayrate1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCpayrate1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCpayrate1);
                        }

                        if (paydays != 0)
                        {
                            PdfPCell GFCdateofsusp = new PdfPCell(new Phrase(GrandtotalPayDays.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCdateofsusp.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCdateofsusp.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCdateofsusp);
                        }

                        //5
                        if (dts != 0)
                        {
                            PdfPCell GFCNoOfDuties = new PdfPCell(new Phrase(GrandtotalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCNoOfDuties.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCNoOfDuties);
                        }
                        if (wos != 0)
                        {
                            PdfPCell GFCWos = new PdfPCell(new Phrase(Grandtotalwos.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCWos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCWos.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCWos);
                        }

                        //8
                        if (nhs != 0)
                        {
                            PdfPCell GFCnhs = new PdfPCell(new Phrase(Grandtotalnhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCnhs.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCnhs);
                        }

                        //6
                        if (ots != 0)
                        {
                            PdfPCell GFCOts = new PdfPCell(new Phrase(Grandtotalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCOts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCOts.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCOts);
                        }

                        //7

                        //9
                        if (total != 0)
                        {
                            PdfPCell GFCnpots = new PdfPCell(new Phrase(Grandtotaltotal.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCnpots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCnpots.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCnpots);
                        }





                        //10
                        if (basic != 0)
                        {
                            PdfPCell GFCBasic1 = new PdfPCell(new Phrase(GrandtotalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCBasic1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCBasic1);
                        }


                        //11
                        if (da != 0)
                        {
                            PdfPCell GFDa = new PdfPCell(new Phrase(GrandtotalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFDa.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFDa);
                        }


                        //12
                        if (hra != 0)
                        {
                            PdfPCell GFCHRA1 = new PdfPCell(new Phrase(GrandtotalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCHRA1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCHRA1);
                        }

                        //13
                        if (cca != 0)
                        {
                            PdfPCell GFCcca = new PdfPCell(new Phrase(GrandtotalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCcca.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCcca);
                        }

                        //14
                        if (conveyance != 0)
                        {
                            PdfPCell GFCConveyance = new PdfPCell(new Phrase(GrandtotalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCConveyance.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCConveyance);
                        }


                        //15
                        if (washallowance != 0)
                        {
                            PdfPCell GFCWa = new PdfPCell(new Phrase(GrandtotalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCWa.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCWa);
                        }

                        //16
                        if (otherallowance != 0)
                        {
                            PdfPCell GFCOa = new PdfPCell(new Phrase(GrandtotalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCOa.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCOa);
                        }

                        //17
                        if (leavewages != 0)
                        {
                            PdfPCell GFLa = new PdfPCell(new Phrase(GrandtotalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFLa.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFLa);
                        }

                        //18
                        if (gratuity != 0)
                        {
                            PdfPCell GFGratuity = new PdfPCell(new Phrase(GrandtotalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFGratuity.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFGratuity);
                        }

                        //19
                        if (bonus != 0)
                        {
                            PdfPCell GFbonus = new PdfPCell(new Phrase(Grandtotalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFbonus.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFbonus);
                        }


                        //20
                        if (nfhs != 0)
                        {
                            PdfPCell GFNfhs = new PdfPCell(new Phrase(GrandtotalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFNfhs.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFNfhs);
                        }

                        //21
                        if (rc != 0)
                        {
                            PdfPCell GFRc = new PdfPCell(new Phrase(GrandtotalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFRc.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFRc);
                        }

                        //22
                        if (cs != 0)
                        {
                            PdfPCell GFCs = new PdfPCell(new Phrase(GrandtotalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCs.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCs);
                        }

                        if (Arrears != 0)
                        {
                            PdfPCell GFCarrears1 = new PdfPCell(new Phrase(Grandtotalarrears.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            GFCarrears1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCarrears1.Border = 15;
                            SecondtableFooter.AddCell(GFCarrears1);
                        }

                        if (cfoodallowance != 0)
                        {
                            PdfPCell GFFoodallw = new PdfPCell(new Phrase(Grandtotalfoodallowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFFoodallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFFoodallw.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFFoodallw);
                        }

                        if (cmedicalallowance != 0)
                        {
                            PdfPCell GFMedicalallw = new PdfPCell(new Phrase(Grandtotalmedicalallowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFMedicalallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFMedicalallw.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFMedicalallw);
                        }


                        if (splallw != 0)
                        {
                            PdfPCell GFsplallw = new PdfPCell(new Phrase(GrandtotalSplAllowance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFsplallw.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFsplallw);
                        }
                        //

                        if (TravelAllw != 0)
                        {
                            PdfPCell GFsplallw = new PdfPCell(new Phrase(GrandtotalTravelAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFsplallw.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFsplallw);
                        }

                        if (PerformanceAllw != 0)
                        {
                            PdfPCell GFsplallw = new PdfPCell(new Phrase(GrandtotalPerformanceAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFsplallw.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFsplallw);
                        }

                        if (MobileAllw != 0)
                        {
                            PdfPCell GFsplallw = new PdfPCell(new Phrase(GrandtotalMobileAllw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE - 2, Font.BOLD, BaseColor.BLACK)));
                            GFsplallw.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFsplallw.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFsplallw);
                        }



                        //




                        if (wosamt != 0)
                        {
                            PdfPCell GFCwosamt = new PdfPCell(new Phrase(Grandtotalwosamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCwosamt.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCwosamt);
                        }



                        //26
                        if (nhsamt != 0)
                        {
                            PdfPCell GFCNhsamt = new PdfPCell(new Phrase(Grandtotalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCNhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCNhsamt.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCNhsamt);
                        }


                        //23
                        if (gross != 0)
                        {
                            PdfPCell GFCGross1 = new PdfPCell(new Phrase(GrandtotalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCGross1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCGross1);
                        }

                        //24
                        if (otamt != 0)
                        {
                            PdfPCell GFCOtamt = new PdfPCell(new Phrase(Grandtotalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCOtamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCOtamt.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCOtamt);
                        }

                        //25

                        //27
                        if (npotsamt != 0)
                        {
                            PdfPCell GFCNpotsamt = new PdfPCell(new Phrase(Grandtotalnpotsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCNpotsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCNpotsamt.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCNpotsamt);
                        }


                        //28
                        if (incentivs != 0)
                        {
                            PdfPCell GFIncentivs = new PdfPCell(new Phrase(GrandtotalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFIncentivs.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFIncentivs);
                        }

                        //28A
                        if (totalearned != 0)
                        {
                            PdfPCell GFCtotalearned = new PdfPCell(new Phrase(Grandtotaltotalearned.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCtotalearned.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCtotalearned.Border = 15;
                            //SecondtablecheckbyFooter.AddCell(GFCtotalearned);
                        }


                        //29
                        if (pf != 0)
                        {
                            PdfPCell GFCPF1 = new PdfPCell(new Phrase(GrandtotalPF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCPF1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCPF1);
                        }

                        //30
                        if (esi != 0)
                        {
                            PdfPCell GFCESI1 = new PdfPCell(new Phrase(GrandtotalESI.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCESI1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCESI1);
                        }





                        //31
                        if (proftax != 0)
                        {
                            PdfPCell GFCProTax1 = new PdfPCell(new Phrase(GrandtotalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCProTax1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCProTax1);
                        }

                        if (owf != 0)
                        {
                            PdfPCell GFCowf1 = new PdfPCell(new Phrase(Grandtotalowf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCowf1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCowf1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCowf1);
                        }

                        if (TDS != 0)
                        {
                            PdfPCell GFCTDS1 = new PdfPCell(new Phrase(GrandtotalTDS.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            GFCTDS1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            GFCTDS1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCTDS1);
                        }

                        if (Soceity != 0)
                        {


                            PdfPCell GFCSoceity1 = new PdfPCell(new Phrase(GrandtotalSoceity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            GFCSoceity1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            GFCSoceity1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCSoceity1);
                        }

                        if (Mobile != 0)
                        {


                            PdfPCell GFCmobexp1 = new PdfPCell(new Phrase(GrandtotalMobile.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            GFCmobexp1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            GFCmobexp1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCmobexp1);
                        }

                        if (KLWF != 0)
                        {


                            PdfPCell GFCKLWF1 = new PdfPCell(new Phrase(GrandtotalKLWF.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            GFCKLWF1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            GFCKLWF1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCKLWF1);
                        }

                        if (Loss != 0)
                        {
                            PdfPCell GFCLoss1 = new PdfPCell(new Phrase(GrandtotalLoss.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            GFCLoss1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            GFCLoss1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCLoss1);
                        }

                        if (Loan != 0)
                        {
                            PdfPCell GFCLoan1 = new PdfPCell(new Phrase(GrandtotalLoanDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCLoan1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCLoan1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCLoan1);
                        }

                        //32
                        if (salAdvDed != 0)
                        {
                            PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCSalAdv1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
                        }
                        if (ATMDed != 0)
                        {
                            PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalATMDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCSalAdv1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
                        }

                        //


                        if (IDCardDed != 0)
                        {
                            PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalIDCardDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCSalAdv1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
                        }

                        if (Extra != 0)
                        {
                            PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalExtra.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCSalAdv1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
                        }
                        //33
                        if (uniformDed != 0)
                        {
                            PdfPCell GFCUnifDed1 = new PdfPCell(new Phrase(GrandtotalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCUnifDed1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCUnifDed1);
                        }


                        if (SecurityDepDed != 0)
                        {
                            PdfPCell GFCSecurityDepDed1 = new PdfPCell(new Phrase(GrandtotalSecurityDepDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCSecurityDepDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCSecurityDepDed1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCSecurityDepDed1);
                        }

                        //34
                        if (otherDed != 0)
                        {
                            PdfPCell GFCOtherDed1 = new PdfPCell(new Phrase(GrandtotalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCOtherDed1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCOtherDed1);
                        }

                        if (MBSDed != 0)
                        {
                            PdfPCell GFCMBSDed1 = new PdfPCell(new Phrase(GrandtotalMBSdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCMBSDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCMBSDed1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCMBSDed1);
                        }


                        //35
                        if (canteenAdv != 0)
                        {
                            PdfPCell GFCCanteended = new PdfPCell(new Phrase(GrandtotalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCCanteended.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCCanteended);
                        }

                        //36
                        if (penalty != 0)
                        {
                            PdfPCell GFPenalty = new PdfPCell(new Phrase(GrandtotalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFPenalty.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFPenalty);
                        }
                        //36
                        if (TelephoneBillDed != 0)
                        {
                            PdfPCell GFTelephoneBillDed = new PdfPCell(new Phrase(GrandtotalTelephoneBillDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFTelephoneBillDed.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFTelephoneBillDed.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFTelephoneBillDed);
                        }

                        //37
                        if (totalDeductions != 0)
                        {
                            PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(GrandtotalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCTotDed1.Border = 15;
                            SecondtablecheckbyFooter.AddCell(GFCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                        }

                        //38
                        //if (netpay != 0)
                        {
                            PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(GrandtotalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                            GFCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            GFCNetPay1.Border = 15;
                            //FCNetPay1.Colspan = 2;
                            SecondtablecheckbyFooter.AddCell(GFCNetPay1);
                        }

                        if (modeofpayment != 0)
                        {
                            PdfPCell GFCmodepay1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            GFCmodepay1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            GFCmodepay1.Border = 15;
                            //SecondtablecheckbyFooter.AddCell(GFCmodepay1);
                        }

                        //39
                        PdfPCell GFCSignature1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        GFCSignature1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        GFCSignature1.Border = 15;
                        //FCSignature1.MinimumHeight = 25;
                        SecondtablecheckbyFooter.AddCell(GFCSignature1);
                        #endregion

                        #region   Footer Headings
                        //1
                        PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        FHCheckedbybr1.Border = 0;
                        FHCheckedbybr1.Rowspan = 0;
                        FHCheckedbybr1.Colspan = tableCells;
                        SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                        //2
                        PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                        FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        FHApprovedbr2.Border = 0;
                        FHApprovedbr2.Colspan = tableCells;

                        SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
                        SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                        SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


                        //1
                        PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By                                                                                          Checked By                                                                                       Checked By                                                                                                          Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FHCheckedby.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        FHCheckedby.Border = 0;
                        FHCheckedby.Colspan = tableCells;
                        SecondtablecheckbyFooter.AddCell(FHCheckedby);
                        //2
                        PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Accounts Manager                                                                                HR Manager                                                                                       CEO                                                                                                                     Managing Director", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FHApprovedBy.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        FHApprovedBy.PaddingTop = 30;
                        FHApprovedBy.Border = 0;
                        FHApprovedBy.Colspan = tableCells;
                        SecondtablecheckbyFooter.AddCell(FHApprovedBy);



                        #endregion

                        document.Add(Secondtable);

                        if (nextpagerecordscount == targetpagerecors)
                        {
                            targetpagerecors = secondpagerecords;
                            //document.Add(SecondtableFooter);
                            // document.NewPage();
                            nextpagerecordscount = 0;
                            #region  Zero variables
                            totaltotalearned = 0;
                            totalowf = 0;
                            totalNetpay = 0;
                            totalDuties = 0;
                            totalpayrate = 0;
                            totalBasic = 0;
                            totalDA = 0;
                            totalHRA = 0;
                            totalCCA = 0;
                            totalConveyance = 0;
                            totalWA = 0;
                            totalOA = 0;
                            totalGross = 0;
                            totalPF = 0;
                            totalESI = 0;
                            totalProfTax = 0;
                            totalDed = 0;
                            totalSalAdv = 0;
                            totalUniforDed = 0;
                            totalCanteenAdv = 0;
                            totalOtherdedn = 0;
                            totalbonus = 0;
                            totalLw = 0;
                            totalGratuity = 0;
                            totalNfhs = 0;
                            totalRc = 0;
                            totalCs = 0;
                            totalIncentivs = 0;
                            totalPenalty = 0;
                            totalfoodallowance = 0;
                            totalmedicalallowance = 0;
                            totalots = 0;
                            totalotamt = 0;
                            totalwos = 0;
                            totalwosamt = 0;
                            totalnhs = 0;
                            totalnhsamt = 0;
                            totalTelephoneBillDed = 0;
                            #endregion
                        }



                    }

                    if (nextpagerecordscount >= 0)
                    {
                        //document.Add(SecondtableFooter);
                        document.Add(SecondtableGrandtotalFooter);
                        document.Add(SecondtablecheckbyFooter);
                    }

                    document.Close();
                    if (nextpagehasPages)
                    {

                        Response.ContentType = "application/pdf";
                        Response.AddHeader("content-disposition", "attachment;filename=Dutieswithots.pdf");
                        Response.Buffer = true;
                        Response.Clear();
                        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                        Response.OutputStream.Flush();
                        Response.End();
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        protected void lbtn_Export_Click(object sender, EventArgs e)
        {

            string date = string.Empty;
            string filename = "";

            string strQry = "Select * from CompanyInfo   where   branchid='" + BranchID + "'";
            DataTable compInfo = SqlHelper.Instance.GetTableByQuery(strQry);
            string companyName = "Your Company Name";
            string companyAddress = "Your Company Address";

            if (compInfo.Rows.Count > 0)
            {
                companyName = compInfo.Rows[0]["CompanyName"].ToString();
                companyAddress = compInfo.Rows[0]["Address"].ToString();

            }

            int month = 0;
            month = GetMonthBasedOnSelectionDateorMonth();

            filename = ddlcname.SelectedItem + ".xlsx";
            var SPName = "";
            Hashtable HTPaysheet = new Hashtable();
            SPName = "IMEPaysheetpdfs";
            HTPaysheet.Add("@ClientId", ddlClients.SelectedValue);
            HTPaysheet.Add("@month", month);
            HTPaysheet.Add("@PaymentOption", ddlpaymenttype.SelectedIndex);

            DataTable dt = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTPaysheet);

            string line1 = "Client Name : " + ddlcname.SelectedItem;
            string line2 = "Salary Sheet for month of " + GetMonthName() + " - " + GetMonthOfYear();

            if (dt.Rows.Count > 0)
            {
                GVNewpaysheet.DataSource = dt;
                GVNewpaysheet.DataBind();
                gve.ExporttoExcelNewPaysheet(dt, line1, line2, filename);

            }
            else
            {
                GVNewpaysheet.DataSource = null;
                GVNewpaysheet.DataBind();
            }

        }

        protected void GVNewpaysheet_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                e.Row.Cells[1].Attributes.Add("class", "text");
                e.Row.Cells[2].Attributes.Add("class", "text");
            }
        }
    }
}