using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using KLTS.Data;
using System.IO;
using System.Globalization;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System.Web.Script.Services;
using System.Data.SqlClient;
using System.Configuration;
using System.Web.Script.Serialization;
using System.Web.Services;
using System.Collections.Generic;
using SIF.Portal.DAL;
namespace SIF.Portal
{
    public partial class Forms : System.Web.UI.Page
    {
        AppConfiguration config = new AppConfiguration();
        GridViewExportUtil gve = new GridViewExportUtil();
       DataTable dt;
    string EmpIDPrefix = "";
    string CmpIDPrefix = "";
        string BranchID = "";
    string Elength = "";
    string Clength = "";
    string FontStyle = "Tahoma";

    protected void Page_Load(object sender, EventArgs e)
    {

        try
        {

            GetWebConfigdata();
            if (!IsPostBack)
            {
                if (Session["UserId"] != null && Session["AccessLevel"] != null)
                {
                    lblDisplayUser.Text = Session["UserId"].ToString();
                    PreviligeUsers(Convert.ToInt32(Session["AccessLevel"]));
                    lblcname.Text = SqlHelper.Instance.GetCompanyname();
                    switch (SqlHelper.Instance.GetCompanyValue())
                    {
                        case 0:// Write Omulance Invisible Links
                            break;
                        case 1://Write KLTS Invisible Links
                            ExpensesReportsLink.Visible = false;
                            break;
                        case 2://write Fames Link
                            ExpensesReportsLink.Visible = true;
                            break;


                        default:
                            break;
                    }
                }
                else
                {
                    Response.Redirect("login.aspx");
                }

                LoadClientList();
                LoadClientNames();
                EmpID();


                FillEmpfnames();
            }
        }
        catch (Exception ex)
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Your Session Expired');", true);
            Response.Redirect("~/Login.aspx");
        }
    }

    protected void PreviligeUsers(int previligerid)
    {
        switch (previligerid)
        {
            case 1:
                break;
            case 2:

                break;
            case 3:
                EmployeeReportLink.Visible = true;
                ClientsReportLink.Visible = true;
                InventoryReportLink.Visible = true;

                EmployeesLink.Visible = true;
                ClientsLink.Visible = true;
                CompanyInfoLink.Visible = false;
                InventoryLink.Visible = false;
                ReportsLink.Visible = true;
                SettingsLink.Visible = true;
                break;

            case 4:
                EmployeeReportLink.Visible = true;
                ClientsReportLink.Visible = true;
                InventoryReportLink.Visible = true;

                EmployeesLink.Visible = true;
                ClientsLink.Visible = true;
                CompanyInfoLink.Visible = true;
                InventoryLink.Visible = true;
                ReportsLink.Visible = true;
                SettingsLink.Visible = true;

                break;
            case 5:
                EmployeeReportLink.Visible = true;
                ClientsReportLink.Visible = true;
                InventoryReportLink.Visible = true;
                EmployeesLink.Visible = true;
                ClientsLink.Visible = true;
                CompanyInfoLink.Visible = false;
                InventoryLink.Visible = false;
                ReportsLink.Visible = true;
                ReportsLink.Visible = true;
                SettingsLink.Visible = true;

                break;
            case 6:
                EmployeesLink.Visible = false;
                ClientsLink.Visible = false;
                CompanyInfoLink.Visible = false;
                InventoryLink.Visible = true;
                ReportsLink.Visible = true;
                SettingsLink.Visible = false;
                EmployeeReportLink.Visible = false;

                break;
            default:
                break;
        }
    }

    protected void GetWebConfigdata()
    {
        EmpIDPrefix = Session["EmpIDPrefix"].ToString();
        CmpIDPrefix = Session["CmpIDPrefix"].ToString();
            BranchID = Session["BranchID"].ToString();
        }




    protected void DropDownListTemplate_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlforms.SelectedIndex == 3 || ddlforms.SelectedIndex == 5 || ddlforms.SelectedIndex == 6 || ddlforms.SelectedIndex == 9 || ddlforms.SelectedIndex == 11 || ddlforms.SelectedIndex == 16)
        {
            empdetails.Visible = true;
            clientdetails.Visible = false;
        }
        else if (ddlforms.SelectedIndex == 2 || ddlforms.SelectedIndex == 7 || ddlforms.SelectedIndex == 10 || ddlforms.SelectedIndex == 5 || ddlforms.SelectedIndex == 21)
        {
            empdetails.Visible = false;
            clientdetails.Visible = true;

        }
        else
        {

            empdetails.Visible = false;
            clientdetails.Visible = false;
        }
    }

    protected void EmpID()
    {
        DataTable DtEmpIds = GlobalData.Instance.LoadEmpIds(EmpIDPrefix,BranchID);
        if (DtEmpIds.Rows.Count > 0)
        {
            ddlempid.DataValueField = "empid";
            ddlempid.DataTextField = "empid";
            ddlempid.DataSource = DtEmpIds;
            ddlempid.DataBind();
        }
        ddlempid.Items.Insert(0, "-Select-");
    }

    protected void FillEmpfnames()
    {
        DataTable DtEmpNames = GlobalData.Instance.LoadEmpNames(EmpIDPrefix,BranchID);
        if (DtEmpNames.Rows.Count > 0)
        {
            ddlempmname.DataValueField = "empid";
            ddlempmname.DataTextField = "FullName";
            ddlempmname.DataSource = DtEmpNames;
            ddlempmname.DataBind();
        }
        ddlempmname.Items.Insert(0, "-Select-");
    }
    protected void GetEmpid()
    {
        if (ddlempmname.SelectedIndex > 0)
        {
            ddlempid.SelectedValue = ddlempmname.SelectedValue;
        }
        else
        {
            ddlempid.SelectedIndex = 0;
        }
    }

    protected void Getempname()
    {
        if (ddlempid.SelectedIndex > 0)
        {
            ddlempid.SelectedValue = ddlempid.SelectedValue;
        }
        else
        {
            ddlempid.SelectedIndex = 0;
        }
    }
    protected void ddlempmname_OnSelectedIndexChanged(object sender, EventArgs e)
    {

        if (ddlempmname.SelectedIndex > 0)
        {

            ddlempid.SelectedValue = ddlempmname.SelectedValue;

        }
        else
        {
            ddlempid.SelectedIndex = 0;
        }
    }

    protected void ddlempid_SelectedIndexChanged(object sender, EventArgs e)
    {


        if (ddlempid.SelectedIndex > 0)
        {

            ddlempmname.SelectedValue = ddlempid.SelectedValue;
        }
        else
        {
            ddlempmname.SelectedIndex = 0;
        }
    }
    protected void LoadClientNames()
    {
        DataTable DtClientids = GlobalData.Instance.LoadCNames(CmpIDPrefix,BranchID);
        if (DtClientids.Rows.Count > 0)
        {
            ddlcname.DataValueField = "Clientid";
            ddlcname.DataTextField = "clientname";
            ddlcname.DataSource = DtClientids;
            ddlcname.DataBind();
        }
        ddlcname.Items.Insert(0, "-Select-");


    }

    protected void LoadClientList()
    {
        DataTable DtClientNames = GlobalData.Instance.LoadCIds(CmpIDPrefix,BranchID);
        if (DtClientNames.Rows.Count > 0)
        {
            ddlclientid.DataValueField = "Clientid";
            ddlclientid.DataTextField = "Clientid";
            ddlclientid.DataSource = DtClientNames;
            ddlclientid.DataBind();
        }
        ddlclientid.Items.Insert(0, "-Select-");

    }

    protected void ddlcname_OnSelectedIndexChanged(object sender, EventArgs e)
    {

        if (ddlcname.SelectedIndex > 0)
        {

            ddlclientid.SelectedValue = ddlcname.SelectedValue;

        }
        else
        {
            ddlclientid.SelectedIndex = 0;
        }
    }

    protected void ddlclientid_SelectedIndexChanged(object sender, EventArgs e)
    {


        if (ddlclientid.SelectedIndex > 0)
        {

            ddlcname.SelectedValue = ddlclientid.SelectedValue;
        }
        else
        {
            ddlcname.SelectedIndex = 0;
        }
    }

    //protected void OnSelectedIndexChangedddlforms_SelectedIndexChanged(object sender, EventArgs e)
    // {

    // }

    protected void BtnformVI_Click(object sender, EventArgs e)
    {



        int Fontsize = 13;
        string fontsyle = "verdana";

        //#region Variable Declaration

        //string contactno = "";
        //string Idno = "";
        //string date = "";
        //string postappliedfor = "";
        //string name = "";
        //string fathername = "";
        //string dateofbirth = "";
        //string educationqualification = "";
        //string TechnicalQualification = "";
        //string previouspost = "";
        //string nationality = "";
        //string community = "";
        //string maritalstatus = "";
        //string height = "";
        //string weight = "";
        //string chest = "";
        //string bloodgroup = "";
        //string identificationmark1 = "";
        //string identificationmark2 = "";

        //string prdoorno = "";
        //string prstreet = "";
        //string prarea = "";
        //string prcity = "";
        //string prLmark = "";
        //string prDistrict = "";
        //string prPincode = "";
        //string prState = "";


        //string pedoor = "";
        //string pestreet = "";
        //string pearea = "";
        //string pecity = "";
        //string pelmark = "";
        //string peDistrict = "";
        //string pePincode = "";
        //string peState = "";

        //string refaddress1 = "";
        //string refaddress2 = "";

        //string sscschool = "";
        //string sscbduniversity = "";
        //string sscstdyear = "";

        //string imschool = "";
        //string imbduniversity = "";
        //string imstdyear = "";

        //string dgschool = "";
        //string dgbduniversity = "";
        //string dgstdyear = "";

        //string pgschool = "";
        //string pgbduniversity = "";
        //string pgstdyear = "";
        //string EmpCertfDet1 = "";

        //float EmpsecurityDeposit = 0;
        //string Referedby = "";
        //string clientname = "";


        //string relationName = "";
        //string relationAge = "";
        //string relationType = "";


        //string EmpCertfDet2 = "";
        //string EmpCertfDet3 = "";
        //string EmpCertfDet4 = "";

        //string Original1 = "";
        //string Original2 = "";
        //string Original3 = "";
        //string Original4 = "";

        //string Xerox1 = "";
        //string Xerox2 = "";
        //string Xerox3 = "";
        //string Xerox4 = "";

        //string Ref1Phone1 = "";
        //string Ref1Phone2 = "";
        //string Ref2Phone1 = "";
        //string Ref2Phone2 = "";

        //string ReplacementFor = "";
        //string PlaceofBirth = "";
        //string Haircolour = "";
        //string eyecolour = "";
        //string Complexion = "";
        //string Languagesknown = "";
        //string EmergencyPhone = "";
        //string Fname = "";
        //string Fage = "";
        //string Mname = "";
        //string Mage = "";
        //string relationoccupation = "";
        //string relationresidence = "";
        //string relationplace = "";
        //string Esino = "";
        //string prphone = "";
        //string pephone = "";

        //#endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablenewa = new PdfPTable(12);
        tablenewa.TotalWidth = 500f;
        tablenewa.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tablenewa.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 12;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell cellHead = new PdfPCell(new Phrase(" [FORM VI-A] ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 12;
        cellHead.Border = 0;

        tablenewa.AddCell(cellHead);

        PdfPCell cellNOTICE = new PdfPCell(new Phrase("NOTICE OF COMMENCEMENT/COMPLETION OF CONTRACT WORK", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 13, Font.NORMAL, BaseColor.BLACK)));
        cellNOTICE.HorizontalAlignment = 1;
        cellNOTICE.Colspan = 12;
        cellNOTICE.Border = 0;
        cellNOTICE.PaddingTop = 10;
        tablenewa.AddCell(cellNOTICE);

        PdfPCell cellRule = new PdfPCell(new Phrase(" [Rule 25(2)(viii)]", FontFactory.GetFont(FontFactory.TIMES_ITALIC, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellRule.HorizontalAlignment = 1;
        cellRule.Colspan = 12;
        cellRule.Border = 0;
        tablenewa.AddCell(cellRule);

        tablenewa.AddCell(cellspace);
        tablenewa.AddCell(cellspace);

        PdfPCell cellShri = new PdfPCell(new Phrase("I/We, Shri/M/s. (Name and address of contractor) hereby intimate that the contract work (Name of work)........................in establishment of the........................(Name and address of principal employer)...........for which license No. ..................dated..................has been issued to me/us by the Licen-sing Officer (name of the headquarters), has been commenced/completed with effect from (date) on (date).", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellShri.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        cellShri.Colspan = 12;
        cellShri.Border = 0;
        cellShri.PaddingLeft = 0;
        cellShri.SetLeading(0, 1.5f);
        tablenewa.AddCell(cellShri);

        tablenewa.AddCell(cellspace);
        tablenewa.AddCell(cellspace);

        PdfPCell cellSignatur = new PdfPCell(new Phrase("Signature of Contractor (s)", FontFactory.GetFont(FontFactory.TIMES_ITALIC, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSignatur.HorizontalAlignment = 2;
        cellSignatur.Colspan = 12;
        cellSignatur.Border = 0;
        cellSignatur.PaddingLeft = 0;
        tablenewa.AddCell(cellSignatur);



        PdfPCell cellTO = new PdfPCell(new Phrase("TO", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellTO.HorizontalAlignment = 0;
        cellTO.Colspan = 12;
        cellTO.Border = 0;
        cellTO.PaddingLeft = 0;
        cellTO.PaddingTop = 20;
        tablenewa.AddCell(cellTO);



        PdfPCell cellTHEINSPECTOR = new PdfPCell(new Phrase("       THE INSPECTOR", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellTHEINSPECTOR.HorizontalAlignment = 0;
        cellTHEINSPECTOR.Colspan = 12;
        cellTHEINSPECTOR.Border = 0;
        cellTHEINSPECTOR.PaddingLeft = 0;
        tablenewa.AddCell(cellTHEINSPECTOR);

        PdfPCell cellINSPECTOR = new PdfPCell(new Phrase("        ..........................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellINSPECTOR.HorizontalAlignment = 0;
        cellINSPECTOR.Colspan = 12;
        cellINSPECTOR.Border = 0;
        cellINSPECTOR.PaddingLeft = 0;
        tablenewa.AddCell(cellINSPECTOR);

        PdfPCell cellNamesINSPECTOR = new PdfPCell(new Phrase("        ..........................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamesINSPECTOR.HorizontalAlignment = 0;
        cellNamesINSPECTOR.Colspan = 5;
        cellNamesINSPECTOR.Border = 0;
        cellNamesINSPECTOR.PaddingLeft = 0;
        tablenewa.AddCell(cellNamesINSPECTOR);

        tablenewa.AddCell(cellspace);
        tablenewa.AddCell(cellspace);
        tablenewa.AddCell(cellspace);

        document.Add(tablenewa);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "FORMVI.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void BtnformXVII1_Click(object sender, EventArgs e)
    {





        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablecoloum = new PdfPTable(16);
        tablecoloum.TotalWidth = 950f;
        tablecoloum.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tablecoloum.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 16;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell cellHead = new PdfPCell(new Phrase("Form-XVII ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 16;
        cellHead.Border = 0;

        tablecoloum.AddCell(cellHead);

        PdfPCell cellreturn12 = new PdfPCell(new Phrase("REGISTER OF WAGES", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD, BaseColor.BLACK)));
        cellreturn12.HorizontalAlignment = 1;
        cellreturn12.Colspan = 16;
        cellreturn12.Border = 0;

        tablecoloum.AddCell(cellreturn12);

        PdfPCell cellreturns123 = new PdfPCell(new Phrase("[Rule 78(1)(a)(i)]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 3, Font.BOLD, BaseColor.BLACK)));
        cellreturns123.HorizontalAlignment = 1;
        cellreturns123.Colspan = 16;
        cellreturns123.Border = 0;
        tablecoloum.AddCell(cellreturns123);

        tablecoloum.AddCell(cellspace);
        tablecoloum.AddCell(cellspace);
        tablecoloum.AddCell(cellspace);






        PdfPCell celladdressof = new PdfPCell(new Phrase("Name and address of contractor..................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celladdressof.HorizontalAlignment = 0;
        celladdressof.Colspan = 7;
        celladdressof.Border = 0;
        celladdressof.PaddingLeft = 0;
        tablecoloum.AddCell(celladdressof);

        PdfPCell cellNames43 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNames43.HorizontalAlignment = 0;
        cellNames43.Colspan = 2;
        cellNames43.Border = 0;
        cellNames43.PaddingLeft = 0;
        tablecoloum.AddCell(cellNames43);

        PdfPCell celladdresso = new PdfPCell(new Phrase("Name and address of establishment in/under	which contract is carried on...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celladdresso.HorizontalAlignment = 0;
        celladdresso.Colspan = 7;
        celladdresso.Border = 0;
        celladdresso.PaddingLeft = 0;
        tablecoloum.AddCell(celladdresso);

        tablecoloum.AddCell(cellspace);

        PdfPCell cellNatureand = new PdfPCell(new Phrase("Nature and location of work...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNatureand.HorizontalAlignment = 0;
        cellNatureand.Colspan = 7;
        cellNatureand.Border = 0;
        cellNatureand.PaddingLeft = 0;
        tablecoloum.AddCell(cellNatureand);

        PdfPCell cellNaturean = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNaturean.HorizontalAlignment = 0;
        cellNaturean.Colspan = 2;
        cellNaturean.Border = 0;
        cellNaturean.PaddingLeft = 0;
        tablecoloum.AddCell(cellNaturean);

        PdfPCell cellprincipalem = new PdfPCell(new Phrase("Name and address of principal employer...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellprincipalem.HorizontalAlignment = 0;
        cellprincipalem.Colspan = 7;
        cellprincipalem.Border = 0;
        cellprincipalem.PaddingLeft = 0;
        tablecoloum.AddCell(cellprincipalem);

        tablecoloum.AddCell(cellspace);

        PdfPCell cellNature = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNature.HorizontalAlignment = 0;
        cellNature.Colspan = 7;
        cellNature.Border = 0;
        cellNature.PaddingLeft = 0;
        tablecoloum.AddCell(cellNature);


        PdfPCell cellPeriod = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellPeriod.HorizontalAlignment = 0;
        cellPeriod.Colspan = 2;
        cellPeriod.Border = 0;
        cellPeriod.PaddingLeft = 0;
        tablecoloum.AddCell(cellPeriod);


        PdfPCell cellMonthly = new PdfPCell(new Phrase("Wage Period: Monthly.................................................. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellMonthly.HorizontalAlignment = 0;
        cellMonthly.Colspan = 7;
        cellMonthly.Border = 0;
        cellMonthly.PaddingLeft = 0;
        tablecoloum.AddCell(cellMonthly);

        tablecoloum.AddCell(cellspace);
        tablecoloum.AddCell(cellspace);
        tablecoloum.AddCell(cellspace);



        PdfPCell cellempty1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty1.HorizontalAlignment = 0;
        cellempty1.Colspan = 7;

        tablecoloum.AddCell(cellempty1);



        PdfPCell cellempty2 = new PdfPCell(new Phrase("Amount of wages earned", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty2.HorizontalAlignment = 1;
        cellempty2.Colspan = 4;

        tablecoloum.AddCell(cellempty2);


        PdfPCell cellempty3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty3.HorizontalAlignment = 0;
        cellempty3.Colspan = 5;

        tablecoloum.AddCell(cellempty3);







        PdfPCell cellSlNo = new PdfPCell(new Phrase("Sl.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSlNo.HorizontalAlignment = 1;
        cellSlNo.Colspan = 0;
        tablecoloum.AddCell(cellSlNo);

        PdfPCell cellworkman = new PdfPCell(new Phrase("Name of workman", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellworkman.HorizontalAlignment = 1;
        cellworkman.Colspan = 0;

        tablecoloum.AddCell(cellworkman);

        PdfPCell cellSerial = new PdfPCell(new Phrase("Serial in the register of workman ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSerial.HorizontalAlignment = 1;
        cellSerial.Colspan = 0;
        tablecoloum.AddCell(cellSerial);

        PdfPCell celldone = new PdfPCell(new Phrase("Designation/of nature of work done", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldone.HorizontalAlignment = 1;
        celldone.Colspan = 0;
        tablecoloum.AddCell(celldone);

        PdfPCell celldays = new PdfPCell(new Phrase("No.of days worked ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldays.HorizontalAlignment = 1;
        celldays.Colspan = 0;

        tablecoloum.AddCell(celldays);

        PdfPCell cellunit = new PdfPCell(new Phrase("unit of work done", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellunit.HorizontalAlignment = 1;
        cellunit.Colspan = 0;

        tablecoloum.AddCell(cellunit);

        PdfPCell cellrate = new PdfPCell(new Phrase("daily rate of wages/piece rate ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellrate.HorizontalAlignment = 1;
        cellrate.Colspan = 0;

        tablecoloum.AddCell(cellrate);

        PdfPCell cellBasic = new PdfPCell(new Phrase(" Basic wages", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellBasic.HorizontalAlignment = 1;
        cellBasic.Colspan = 0;

        tablecoloum.AddCell(cellBasic);

        PdfPCell cellDearness = new PdfPCell(new Phrase("Dearness allowancess", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDearness.HorizontalAlignment = 1;
        cellDearness.Colspan = 0;
        tablecoloum.AddCell(cellDearness);

        PdfPCell cellOvetime = new PdfPCell(new Phrase("Overtime ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellOvetime.HorizontalAlignment = 1;
        cellOvetime.Colspan = 0;
        tablecoloum.AddCell(cellOvetime);

        PdfPCell cellOther = new PdfPCell(new Phrase("Other cash payment (Narture of payment to be indicated)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellOther.HorizontalAlignment = 1;
        cellOther.Colspan = 0;

        tablecoloum.AddCell(cellOther);

        PdfPCell cellTotal = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellTotal.HorizontalAlignment = 1;
        cellTotal.Colspan = 0;

        tablecoloum.AddCell(cellTotal);


        PdfPCell cellDeactions = new PdfPCell(new Phrase("Deactions if any(indicate nature)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDeactions.HorizontalAlignment = 1;
        cellDeactions.Colspan = 0;

        //cellDeactions.BorderWidthBottom = 0.5f;
        tablecoloum.AddCell(cellDeactions);

        PdfPCell cellNet = new PdfPCell(new Phrase("Net amount paid ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNet.HorizontalAlignment = 1;
        cellNet.Colspan = 0;

        tablecoloum.AddCell(cellNet);

        PdfPCell cellthumb = new PdfPCell(new Phrase("Signature/thumb impression of workman", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellthumb.HorizontalAlignment = 1;
        cellthumb.Colspan = 0;

        tablecoloum.AddCell(cellthumb);

        PdfPCell cellinitial = new PdfPCell(new Phrase("initial of contractors or his representative", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellinitial.HorizontalAlignment = 1;
        cellinitial.Colspan = 0;

        tablecoloum.AddCell(cellinitial);



        PdfPCell cellsName1 = new PdfPCell(new Phrase("  1 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName1.HorizontalAlignment = 1;
        cellsName1.Colspan = 0;
        cellsName1.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName1);

        PdfPCell cellsName2 = new PdfPCell(new Phrase("  2", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName2.HorizontalAlignment = 1;
        cellsName2.Colspan = 0;
        cellsName2.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName2);

        PdfPCell cellsName3 = new PdfPCell(new Phrase("  3 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName3.HorizontalAlignment = 1;
        cellsName3.Colspan = 0;
        cellsName3.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName3);

        PdfPCell cellsName4 = new PdfPCell(new Phrase("  4", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName4.HorizontalAlignment = 1;
        cellsName4.Colspan = 0;
        cellsName4.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName4);

        PdfPCell cellsName5 = new PdfPCell(new Phrase("  5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName5.HorizontalAlignment = 1;
        cellsName5.Colspan = 0;
        cellsName5.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName5);

        PdfPCell cellsName6 = new PdfPCell(new Phrase("  6", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName6.HorizontalAlignment = 1;
        cellsName6.Colspan = 0;
        cellsName6.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName6);

        PdfPCell cellsName7 = new PdfPCell(new Phrase("  7 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName7.HorizontalAlignment = 1;
        cellsName7.Colspan = 0;
        cellsName7.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName7);

        PdfPCell cellsName8 = new PdfPCell(new Phrase("  8", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName8.HorizontalAlignment = 1;
        cellsName8.Colspan = 0;
        cellsName8.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName8);

        PdfPCell cellsName9 = new PdfPCell(new Phrase("  9", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName9.HorizontalAlignment = 1;
        cellsName9.Colspan = 0;
        cellsName9.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName9);

        PdfPCell cellsName10 = new PdfPCell(new Phrase("  10", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName10.HorizontalAlignment = 1;
        cellsName10.Colspan = 0;
        cellsName10.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName10);

        PdfPCell cellsName11 = new PdfPCell(new Phrase("  11", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName11.HorizontalAlignment = 1;
        cellsName11.Colspan = 0;
        cellsName11.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName11);

        PdfPCell cellsName12 = new PdfPCell(new Phrase("  12", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName12.HorizontalAlignment = 1;
        cellsName12.Colspan = 0;
        cellsName12.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName12);


        PdfPCell cellsName13 = new PdfPCell(new Phrase("  13", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName13.HorizontalAlignment = 1;
        cellsName13.Colspan = 0;
        cellsName13.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName13);

        PdfPCell cellsName14 = new PdfPCell(new Phrase("  14", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName14.HorizontalAlignment = 1;
        cellsName14.Colspan = 0;
        cellsName14.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName14);

        PdfPCell cellsName15 = new PdfPCell(new Phrase("  15", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName15.HorizontalAlignment = 1;
        cellsName15.Colspan = 0;
        cellsName15.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName15);

        PdfPCell cellsName16 = new PdfPCell(new Phrase("  16", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsName16.HorizontalAlignment = 1;
        cellsName16.Colspan = 0;
        cellsName16.PaddingBottom = 5f;
        tablecoloum.AddCell(cellsName16);

        document.Add(tablecoloum);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "FORMXVII.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;

        //}
    }

    protected void BtnformXII_Click(object sender, EventArgs e)
    {




        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";



        //string Idno = "";
        string address = "";
        string typeofwork = "";
        string quantity = "";
        string startdate = "";
        string enddate = "";


        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        #region Begin Variable Declaration

        string SPName = "";
        Hashtable HTForms = new Hashtable();
        string ClientID = "";
        DataTable dtContractExpiry = null;

        #endregion end Variable Declaration


        #region Begin Assign Values to The Variables
        SPName = "FormsPDF";
        ClientID = ddlclientid.SelectedValue;
        #endregion End Assign values To the Variables

        #region Begin Pass values to the Hash table
        HTForms.Add("@ClientID", ClientID);
        #endregion  end Pass values to the Hash table

        #region Begin  Call Stored Procedure
        dtContractExpiry =config.ExecuteAdaptorAsyncWithParams(SPName, HTForms).Result;
        #endregion  End  Call Stored Procedure

        // #endregion End New Code As on [31-05-2014]




        if (dtContractExpiry.Rows.Count > 0)
        {

            #region Assining data to Variables





            //contactno = dtContractExpiry.Rows[0]["EmpPhone"].ToString();
            Idno = dtContractExpiry.Rows[0]["ClientId"].ToString();
            address = dtContractExpiry.Rows[0]["Address"].ToString();
            typeofwork = dtContractExpiry.Rows[0]["TypeofWork"].ToString();
            quantity = dtContractExpiry.Rows[0]["Quantity"].ToString();

            startdate = dtContractExpiry.Rows[0]["ContractStartDate"].ToString();
            if (startdate == "01/01/1900")
            {
                startdate = string.Empty;
            }

            enddate = dtContractExpiry.Rows[0]["ContractEndDate"].ToString();
            if (enddate == "01/01/1900")
            {
                enddate = string.Empty;
            }
        }



        //string datejoin = dtContractExpiry.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        ////TimeSpan diffDate = new TimeSpan();
        ////if (datejoin.Length > 0)
        // {
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        // }

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablecall1 = new PdfPTable(7);
        tablecall1.TotalWidth = 900f;
        tablecall1.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tablecall1.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 7;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell cellHead = new PdfPCell(new Phrase("Form-XII ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 2, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 7;
        cellHead.Border = 0;

        tablecall1.AddCell(cellHead);

        PdfPCell cellreturn12 = new PdfPCell(new Phrase("REGISTER OF CONTRACTORS", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 2, Font.NORMAL, BaseColor.BLACK)));
        cellreturn12.HorizontalAlignment = 1;
        cellreturn12.Colspan = 7;
        cellreturn12.PaddingTop = 5;
        cellreturn12.Border = 0;
        tablecall1.AddCell(cellreturn12);

        PdfPCell cellRule74 = new PdfPCell(new Phrase("[Rule 74]", FontFactory.GetFont(FontFactory.TIMES_ITALIC, Fontsize + 2, Font.NORMAL, BaseColor.BLACK)));
        cellRule74.HorizontalAlignment = 1;
        cellRule74.Colspan = 7;
        cellRule74.Border = 0;
        tablecall1.AddCell(cellRule74);

        tablecall1.AddCell(cellspace);
        tablecall1.AddCell(cellspace);
        tablecall1.AddCell(cellspace);

        PdfPCell celladdressofemp = new PdfPCell(new Phrase("1. Name and address of the Principal Employer..................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celladdressofemp.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        celladdressofemp.Colspan = 7;
        celladdressofemp.Border = 0;
        celladdressofemp.PaddingLeft = 0;
        tablecall1.AddCell(celladdressofemp);

        PdfPCell cellestablishment = new PdfPCell(new Phrase("2. Name and address of the establishment............................................................................................................................. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellestablishment.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        cellestablishment.PaddingTop = 20;
        cellestablishment.Colspan = 7;
        cellestablishment.Border = 0;
        cellestablishment.PaddingLeft = 0;
        tablecall1.AddCell(cellestablishment);

        tablecall1.AddCell(cellspace);
        tablecall1.AddCell(cellspace);
        tablecall1.AddCell(cellspace);

        PdfPCell cellempty4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty4.HorizontalAlignment = 0;
        cellempty4.Colspan = 4;

        tablecall1.AddCell(cellempty4);

        PdfPCell cellempty5 = new PdfPCell(new Phrase("Period of Contract", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellempty5.HorizontalAlignment = 1;
        cellempty5.Colspan = 2;
        cellempty5.PaddingTop = 5;
        cellempty5.PaddingBottom = 5;
        tablecall1.AddCell(cellempty5);


        PdfPCell cellempty6 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty6.HorizontalAlignment = 1;
        cellempty6.Colspan = 1;

        tablecall1.AddCell(cellempty6);



        PdfPCell cellSlNo1 = new PdfPCell(new Phrase("Sl.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellSlNo1.HorizontalAlignment = 1;
        cellSlNo1.Colspan = 0;
        cellSlNo1.PaddingTop = 5;
        cellSlNo1.PaddingBottom = 5;
        tablecall1.AddCell(cellSlNo1);


        PdfPCell cellworkman1 = new PdfPCell(new Phrase("Name and address of Contractor", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellworkman1.HorizontalAlignment = 1;
        cellworkman1.Colspan = 0;
        cellworkman1.PaddingTop = 5;
        cellworkman1.PaddingBottom = 5;
        tablecall1.AddCell(cellworkman1);




        PdfPCell cellNature = new PdfPCell(new Phrase("Nature of work on contract", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNature.HorizontalAlignment = 1;
        cellNature.Colspan = 0;
        cellNature.PaddingTop = 5;
        cellNature.PaddingBottom = 5;
        tablecall1.AddCell(cellNature);


        PdfPCell cellSerial1 = new PdfPCell(new Phrase("Location of contract work ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellSerial1.HorizontalAlignment = 1;
        cellSerial1.Colspan = 0;
        cellSerial1.PaddingTop = 5;
        cellSerial1.PaddingBottom = 5;
        tablecall1.AddCell(cellSerial1);

        PdfPCell celldone1 = new PdfPCell(new Phrase("From", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        celldone1.HorizontalAlignment = 1;
        celldone1.Colspan = 0;
        celldone1.PaddingTop = 5;
        celldone1.PaddingBottom = 5;
        tablecall1.AddCell(celldone1);

        PdfPCell celldays1 = new PdfPCell(new Phrase("To ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        celldays1.HorizontalAlignment = 1;
        celldays1.Colspan = 0;
        celldays1.PaddingTop = 5;
        celldays1.PaddingBottom = 5;
        tablecall1.AddCell(celldays1);

        PdfPCell cellunit1 = new PdfPCell(new Phrase("Maximum No. of workmen employed by Contractor", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellunit1.HorizontalAlignment = 1;
        cellunit1.Colspan = 0;
        cellunit1.PaddingTop = 5;
        cellunit1.PaddingBottom = 5;
        tablecall1.AddCell(cellunit1);
        int sno = 1;

        if (dtContractExpiry.Rows.Count > 0)
        {
            for (int i = 0; i < dtContractExpiry.Rows.Count; i++)
            {


                PdfPCell cellsName11 = new PdfPCell(new Phrase(sno.ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
                cellsName11.HorizontalAlignment = 1;
                cellsName11.Colspan = 0;
                cellsName11.PaddingTop = 5;
                cellsName11.PaddingBottom = 5;
                tablecall1.AddCell(cellsName11);

                PdfPCell cellsName21 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                cellsName21.HorizontalAlignment = 1;
                cellsName21.Colspan = 0;
                cellsName21.PaddingBottom = 10f;
                tablecall1.AddCell(cellsName21);

                PdfPCell cellsName31 = new PdfPCell(new Phrase(typeofwork, FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                cellsName31.HorizontalAlignment = 1;
                cellsName31.Colspan = 0;
                cellsName31.PaddingBottom = 10f;
                tablecall1.AddCell(cellsName31);

                PdfPCell cellsName41 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                cellsName41.HorizontalAlignment = 1;
                cellsName41.Colspan = 0;
                cellsName41.PaddingBottom = 10f;
                tablecall1.AddCell(cellsName41);


                PdfPCell cellsName51 = new PdfPCell(new Phrase(startdate, FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                cellsName51.HorizontalAlignment = 1;
                cellsName51.Colspan = 0;
                cellsName51.PaddingBottom = 10f;
                tablecall1.AddCell(cellsName51);

                PdfPCell cellsName61 = new PdfPCell(new Phrase(enddate, FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                cellsName61.HorizontalAlignment = 1;
                cellsName61.Colspan = 0;
                cellsName61.PaddingBottom = 10f;
                tablecall1.AddCell(cellsName61);


                PdfPCell cellsName71 = new PdfPCell(new Phrase(quantity, FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                cellsName71.HorizontalAlignment = 1;
                cellsName71.Colspan = 0;
                cellsName71.PaddingBottom = 10f;
                tablecall1.AddCell(cellsName71);



                PdfPCell cellsName151 = new PdfPCell(new Phrase("Place   ..............", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                cellsName151.HorizontalAlignment = 0;
                cellsName151.Colspan = 7;
                cellsName151.PaddingTop = 60;
                cellsName151.PaddingBottom = 5;
                cellsName151.Border = 0;
                tablecall1.AddCell(cellsName151);

                PdfPCell cellsName161 = new PdfPCell(new Phrase("Date   ..............", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
                cellsName161.HorizontalAlignment = 0;
                cellsName161.Colspan = 7;
                cellsName161.Border = 0;
                cellsName161.PaddingTop = 5;
                cellsName161.PaddingBottom = 5;
                tablecall1.AddCell(cellsName161);
            }
        }
        document.Add(tablecall1);


        #endregion Basic Information of the Employee


        string filename = "FormXII.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;


        //}
    }


    protected void BtnformXV_Click(object sender, EventArgs e)
    {



        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablecall2 = new PdfPTable(6);
        tablecall2.TotalWidth = 900f;
        tablecall2.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, };
        tablecall2.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 6;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell cellHead = new PdfPCell(new Phrase("Form-XV ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 6;
        cellHead.Border = 0;

        tablecall2.AddCell(cellHead);

        PdfPCell cellSERVICE = new PdfPCell(new Phrase("SERVICE CERTIFICATE", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD, BaseColor.BLACK)));
        cellSERVICE.HorizontalAlignment = 1;
        cellSERVICE.Colspan = 6;
        cellSERVICE.Border = 0;

        tablecall2.AddCell(cellSERVICE);

        PdfPCell cellRule77 = new PdfPCell(new Phrase("[Rule 77]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellRule77.HorizontalAlignment = 1;
        cellRule77.Colspan = 6;
        cellRule77.Border = 0;
        tablecall2.AddCell(cellRule77);

        tablecall2.AddCell(cellspace);
        tablecall2.AddCell(cellspace);
        tablecall2.AddCell(cellspace);

        PdfPCell celladdressofcon = new PdfPCell(new Phrase("Name and Address of contractor ........................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celladdressofcon.HorizontalAlignment = 0;
        celladdressofcon.Colspan = 2;
        celladdressofcon.Border = 0;

        tablecall2.AddCell(celladdressofcon);

        PdfPCell cellRule741 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellRule741.HorizontalAlignment = 0;
        cellRule741.Colspan = 2;
        cellRule741.Border = 0;
        tablecall2.AddCell(cellRule741);

        PdfPCell cellestablishment = new PdfPCell(new Phrase("Name and address of establishment in/under which contract is carried on............................................................................................................................. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellestablishment.HorizontalAlignment = 0;
        cellestablishment.Colspan = 2;
        cellestablishment.Border = 0;
        tablecall2.AddCell(cellestablishment);

        tablecall2.AddCell(cellspace);


        PdfPCell cellRule1 = new PdfPCell(new Phrase("Nature and location of work.............................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellRule1.HorizontalAlignment = 0;
        cellRule1.Colspan = 2;
        cellRule1.Border = 0;
        tablecall2.AddCell(cellRule1);


        PdfPCell cellempty15 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellempty15.HorizontalAlignment = 0;
        cellempty15.Colspan = 2;
        cellempty15.Border = 0;
        tablecall2.AddCell(cellempty15);

        PdfPCell cellempty14 = new PdfPCell(new Phrase("Name and adress of principal employer.............................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty14.HorizontalAlignment = 0;
        cellempty14.Colspan = 2;
        cellempty14.Border = 0;
        tablecall2.AddCell(cellempty14);

        tablecall2.AddCell(cellspace);
        PdfPCell cellempty13 = new PdfPCell(new Phrase("Age or Date of Birth............................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty13.HorizontalAlignment = 0;
        cellempty13.Colspan = 6;
        cellempty13.Border = 0;
        tablecall2.AddCell(cellempty13);

        tablecall2.AddCell(cellspace);

        PdfPCell cellempty12 = new PdfPCell(new Phrase("Identification Marks.............................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty12.HorizontalAlignment = 0;
        cellempty12.Colspan = 6;
        cellempty12.Border = 0;
        tablecall2.AddCell(cellempty12);

        tablecall2.AddCell(cellspace);
        PdfPCell cellempty11 = new PdfPCell(new Phrase("Father's/Husband's name .........................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty11.HorizontalAlignment = 0;
        cellempty11.Colspan = 6;
        cellempty11.Border = 0;
        tablecall2.AddCell(cellempty11);

        tablecall2.AddCell(cellspace);
        tablecall2.AddCell(cellspace);

        PdfPCell cellempty9 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 13, Font.NORMAL, BaseColor.BLACK)));
        cellempty9.HorizontalAlignment = 0;
        cellempty9.Colspan = 1;
        tablecall2.AddCell(cellempty9);

        PdfPCell cellempty8 = new PdfPCell(new Phrase("Total period for work employed", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty8.HorizontalAlignment = 1;
        cellempty8.Colspan = 2;

        tablecall2.AddCell(cellempty8);

        PdfPCell cellempty7 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty7.HorizontalAlignment = 0;
        cellempty7.Colspan = 3;

        tablecall2.AddCell(cellempty7);

        PdfPCell cellformSlNo1 = new PdfPCell(new Phrase("Sl.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellformSlNo1.HorizontalAlignment = 1;
        cellformSlNo1.Colspan = 0;
        tablecall2.AddCell(cellformSlNo1);

        PdfPCell cellformfrom = new PdfPCell(new Phrase("From", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellformfrom.HorizontalAlignment = 1;
        cellformfrom.Colspan = 0;
        tablecall2.AddCell(cellformfrom);

        PdfPCell cellformto = new PdfPCell(new Phrase("To ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellformto.HorizontalAlignment = 1;
        cellformto.Colspan = 0;
        tablecall2.AddCell(cellformto);

        PdfPCell cellformnature = new PdfPCell(new Phrase("Nature of work done", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellformnature.HorizontalAlignment = 1;
        cellformnature.Colspan = 0;
        tablecall2.AddCell(cellformnature);

        PdfPCell cellformRate = new PdfPCell(new Phrase("Rate of wages(with particulars of unit in caseof piece-work)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellformRate.HorizontalAlignment = 1;
        cellformRate.Colspan = 0;
        tablecall2.AddCell(cellformRate);

        PdfPCell cellSerial1 = new PdfPCell(new Phrase("Remark ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSerial1.HorizontalAlignment = 1;
        cellSerial1.Colspan = 0;
        tablecall2.AddCell(cellSerial1);

        PdfPCell cellform1 = new PdfPCell(new Phrase("1", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellform1.HorizontalAlignment = 1;
        cellform1.Colspan = 0;
        cellform1.PaddingBottom = 10f;
        tablecall2.AddCell(cellform1);

        PdfPCell cellform2 = new PdfPCell(new Phrase("2", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellform2.HorizontalAlignment = 1;
        cellform2.Colspan = 0;
        cellform2.PaddingBottom = 10f;
        tablecall2.AddCell(cellform2);

        PdfPCell cellform3 = new PdfPCell(new Phrase("3", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellform3.HorizontalAlignment = 1;
        cellform3.Colspan = 0;
        cellform3.PaddingBottom = 10f;
        tablecall2.AddCell(cellform3);

        PdfPCell cellform4 = new PdfPCell(new Phrase("4", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellform4.HorizontalAlignment = 1;
        cellform4.Colspan = 0;
        cellform4.PaddingBottom = 10f;
        tablecall2.AddCell(cellform4);


        PdfPCell cellform5 = new PdfPCell(new Phrase("5", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellform5.HorizontalAlignment = 1;
        cellform5.Colspan = 0;
        cellform5.PaddingBottom = 10f;
        tablecall2.AddCell(cellform5);

        PdfPCell cellform6 = new PdfPCell(new Phrase("6", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellform6.HorizontalAlignment = 1;
        cellform6.Colspan = 0;
        cellform6.PaddingBottom = 10f;
        tablecall2.AddCell(cellform6);

        tablecall2.AddCell(cellspace);
        tablecall2.AddCell(cellspace);
        tablecall2.AddCell(cellspace);
        tablecall2.AddCell(cellspace);
        tablecall2.AddCell(cellspace);
        tablecall2.AddCell(cellspace);

        PdfPCell cellsingna = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsingna.HorizontalAlignment = 0;
        cellsingna.Colspan = 3;
        cellsingna.Border = 0;
        tablecall2.AddCell(cellsingna);

        PdfPCell cellsingn = new PdfPCell(new Phrase("singature of contractor", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsingn.HorizontalAlignment = 0;
        cellsingn.Colspan = 3;
        cellsingn.Border = 0;
        cellsingn.PaddingLeft = 200;
        tablecall2.AddCell(cellsingn);



        document.Add(tablecall2);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "FormXV.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;

        //}
    }

    protected void Btnform2XIV_Click(object sender, EventArgs e)
    {



        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL);

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablecall3 = new PdfPTable(6);
        tablecall3.TotalWidth = 500f;
        tablecall3.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, };
        tablecall3.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 6;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell cellHead = new PdfPCell(new Phrase("Form-XIV ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 6;
        cellHead.Border = 0;
        tablecall3.AddCell(cellHead);

        PdfPCell cellEMPLOYMENTCARD = new PdfPCell(new Phrase("EMPLOYMENT CARD", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 13, Font.BOLD, BaseColor.BLACK)));
        cellEMPLOYMENTCARD.HorizontalAlignment = 1;
        cellEMPLOYMENTCARD.Colspan = 6;
        cellEMPLOYMENTCARD.Border = 0;
        tablecall3.AddCell(cellEMPLOYMENTCARD);

        PdfPCell cellRule76 = new PdfPCell(new Phrase("[Rule 76]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellRule76.HorizontalAlignment = 1;
        cellRule76.Colspan = 6;
        cellRule76.Border = 0;
        tablecall3.AddCell(cellRule76);

        tablecall3.AddCell(cellspace);
        tablecall3.AddCell(cellspace);
        tablecall3.AddCell(cellspace);

        PdfPCell celladdressofcontr = new PdfPCell(new Phrase("Name and Address of contractor ........................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celladdressofcontr.HorizontalAlignment = 0;
        celladdressofcontr.Colspan = 2;
        celladdressofcontr.Border = 0;

        tablecall3.AddCell(celladdressofcontr);

        PdfPCell cellRule741 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellRule741.HorizontalAlignment = 0;
        cellRule741.Colspan = 2;
        cellRule741.Border = 0;
        tablecall3.AddCell(cellRule741);

        PdfPCell cellestablishments = new PdfPCell(new Phrase("Name and address of establishment in/under which contract is carried on............................................................................................................................. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellestablishments.HorizontalAlignment = 0;
        cellestablishments.Colspan = 2;
        cellestablishments.Border = 0;
        tablecall3.AddCell(cellestablishments);

        tablecall3.AddCell(cellspace);
        tablecall3.AddCell(cellspace);

        PdfPCell celllocation = new PdfPCell(new Phrase("Nature and location of work.............................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celllocation.HorizontalAlignment = 0;
        celllocation.Colspan = 2;
        celllocation.Border = 0;
        tablecall3.AddCell(celllocation);


        PdfPCell celleempty15 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celleempty15.HorizontalAlignment = 0;
        celleempty15.Colspan = 2;
        celleempty15.Border = 0;
        tablecall3.AddCell(celleempty15);

        PdfPCell cellempty09 = new PdfPCell(new Phrase("Name and adress of principal employer.............................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty09.HorizontalAlignment = 0;
        cellempty09.Colspan = 2;
        cellempty09.Border = 0;
        tablecall3.AddCell(cellempty09);


        tablecall3.AddCell(cellspace);
        tablecall3.AddCell(cellspace);




        tablecall3.AddCell(cellspace);
        PdfPCell cellempty08 = new PdfPCell(new Phrase("Name of the workman............................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty08.HorizontalAlignment = 0;
        cellempty08.Colspan = 6;
        cellempty08.Border = 0;
        tablecall3.AddCell(cellempty08);

        tablecall3.AddCell(cellspace);
        tablecall3.AddCell(cellspace);

        PdfPCell cellempty07 = new PdfPCell(new Phrase("Sl.no in the register of workmen employed.............................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty07.HorizontalAlignment = 0;
        cellempty07.Colspan = 6;
        cellempty07.Border = 0;
        tablecall3.AddCell(cellempty07);

        tablecall3.AddCell(cellspace);
        tablecall3.AddCell(cellspace);

        PdfPCell cellempty06 = new PdfPCell(new Phrase("Nature of employment/designation .........................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty06.HorizontalAlignment = 0;
        cellempty06.Colspan = 6;
        cellempty06.Border = 0;
        tablecall3.AddCell(cellempty06);

        tablecall3.AddCell(cellspace);
        tablecall3.AddCell(cellspace);

        PdfPCell cellempty05 = new PdfPCell(new Phrase("Wage rate  (with particulars of unit,in case of piece-work....................................... )", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty05.HorizontalAlignment = 0;
        cellempty05.Colspan = 6;
        cellempty05.Border = 0;
        tablecall3.AddCell(cellempty05);

        tablecall3.AddCell(cellspace);
        tablecall3.AddCell(cellspace);


        PdfPCell cellempty04 = new PdfPCell(new Phrase("Wage period................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty04.HorizontalAlignment = 0;
        cellempty04.Colspan = 6;
        cellempty04.Border = 0;
        tablecall3.AddCell(cellempty04);

        tablecall3.AddCell(cellspace);
        tablecall3.AddCell(cellspace);


        PdfPCell cellempty03 = new PdfPCell(new Phrase("enure of employment................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty03.HorizontalAlignment = 0;
        cellempty03.Colspan = 6;
        cellempty03.Border = 0;
        tablecall3.AddCell(cellempty03);

        tablecall3.AddCell(cellspace);
        tablecall3.AddCell(cellspace);


        PdfPCell cellempty02 = new PdfPCell(new Phrase("Remarks............................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty02.HorizontalAlignment = 0;
        cellempty02.Colspan = 6;
        cellempty02.Border = 0;
        tablecall3.AddCell(cellempty02);

        tablecall3.AddCell(cellspace);
        tablecall3.AddCell(cellspace);
        tablecall3.AddCell(cellspace);
        tablecall3.AddCell(cellspace);

        PdfPCell cellempty001 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty001.HorizontalAlignment = 0;
        cellempty001.Colspan = 3;
        cellempty001.Border = 0;
        tablecall3.AddCell(cellempty001);



        PdfPCell cellempty01 = new PdfPCell(new Phrase("Signature of Contractor", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty01.HorizontalAlignment = 0;
        cellempty01.Colspan = 3;
        cellempty01.Border = 0;
        cellempty01.PaddingLeft = 100;
        tablecall3.AddCell(cellempty01);




        document.Add(tablecall3);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "Form2XIV.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;

        //}
    }

    protected void BtnformXVI_Click(object sender, EventArgs e)
    {



        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablecall4 = new PdfPTable(6);
        tablecall4.TotalWidth = 900f;
        tablecall4.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, };
        tablecall4.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 6;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell cellHead = new PdfPCell(new Phrase("Form-XVI ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 6;
        cellHead.Border = 0;
        tablecall4.AddCell(cellHead);

        PdfPCell cellMUSTER = new PdfPCell(new Phrase("MUSTER ROLL", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD, BaseColor.BLACK)));
        cellMUSTER.HorizontalAlignment = 1;
        cellMUSTER.Colspan = 6;
        cellMUSTER.Border = 0;
        tablecall4.AddCell(cellMUSTER);

        PdfPCell cellRule77a = new PdfPCell(new Phrase("[Rule 78(1)(a)(i)]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellRule77a.HorizontalAlignment = 1;
        cellRule77a.Colspan = 6;
        cellRule77a.Border = 0;
        tablecall4.AddCell(cellRule77a);

        tablecall4.AddCell(cellspace);
        tablecall4.AddCell(cellspace);
        tablecall4.AddCell(cellspace);

        PdfPCell celladdressofcontrac = new PdfPCell(new Phrase("Name and Address of contractor ........................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celladdressofcontrac.HorizontalAlignment = 0;
        celladdressofcontrac.Colspan = 2;
        celladdressofcontrac.Border = 0;

        tablecall4.AddCell(celladdressofcontrac);

        PdfPCell cellRule7410 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellRule7410.HorizontalAlignment = 0;
        cellRule7410.Colspan = 2;
        cellRule7410.Border = 0;
        tablecall4.AddCell(cellRule7410);

        PdfPCell cellcarried = new PdfPCell(new Phrase("Name and address of establishment in/under which contract is carried on............................................................................................................................. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellcarried.HorizontalAlignment = 0;
        cellcarried.Colspan = 2;
        cellcarried.Border = 0;
        tablecall4.AddCell(cellcarried);

        tablecall4.AddCell(cellspace);


        PdfPCell cellRule10 = new PdfPCell(new Phrase("Nature and location of work.............................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellRule10.HorizontalAlignment = 0;
        cellRule10.Colspan = 2;
        cellRule10.Border = 0;
        tablecall4.AddCell(cellRule10);


        PdfPCell cellempty006 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty006.HorizontalAlignment = 0;
        cellempty006.Colspan = 2;
        cellempty006.Border = 0;
        tablecall4.AddCell(cellempty006);

        PdfPCell cellempty005 = new PdfPCell(new Phrase("Name and adress of principal employer................................................................................................................................................................For month of.........................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty005.HorizontalAlignment = 0;
        cellempty005.Colspan = 2;
        cellempty005.Border = 0;
        tablecall4.AddCell(cellempty005);

        tablecall4.AddCell(cellspace);
        tablecall4.AddCell(cellspace);


        PdfPCell cellempty004 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty004.HorizontalAlignment = 0;
        cellempty004.Colspan = 4;

        tablecall4.AddCell(cellempty004);

        PdfPCell cellempty003 = new PdfPCell(new Phrase("Dates", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty003.HorizontalAlignment = 1;
        cellempty003.Colspan = 1;

        tablecall4.AddCell(cellempty003);

        PdfPCell cellempty002 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty002.HorizontalAlignment = 0;
        cellempty002.Colspan = 1;

        tablecall4.AddCell(cellempty002);

        PdfPCell cellformSlNo3 = new PdfPCell(new Phrase("Sl.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellformSlNo3.HorizontalAlignment = 1;
        cellformSlNo3.Colspan = 0;
        cellformSlNo3.PaddingBottom = 10;
        tablecall4.AddCell(cellformSlNo3);

        PdfPCell cellHusband = new PdfPCell(new Phrase("Name of workman", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellHusband.HorizontalAlignment = 1;
        cellHusband.Colspan = 0;
        cellHusband.PaddingBottom = 10;
        tablecall4.AddCell(cellHusband);

        PdfPCell cellFather = new PdfPCell(new Phrase("Father's/Husband's name ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellFather.HorizontalAlignment = 1;
        cellFather.Colspan = 0;
        cellFather.PaddingBottom = 10;
        tablecall4.AddCell(cellFather);

        PdfPCell cellSex = new PdfPCell(new Phrase("Sex", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSex.HorizontalAlignment = 1;
        cellSex.Colspan = 0;
        cellSex.PaddingBottom = 10;
        tablecall4.AddCell(cellSex);

        PdfPCell cellformRate1 = new PdfPCell(new Phrase("1 2 3 4 5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellformRate1.HorizontalAlignment = 1;
        cellformRate1.Colspan = 0;
        cellformRate1.PaddingBottom = 10;
        tablecall4.AddCell(cellformRate1);

        PdfPCell cellRemarks1 = new PdfPCell(new Phrase("Remarks ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellRemarks1.HorizontalAlignment = 1;
        cellRemarks1.Colspan = 0;
        cellRemarks1.PaddingBottom = 10;
        tablecall4.AddCell(cellRemarks1);

        PdfPCell cellform06 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellform06.HorizontalAlignment = 1;
        cellform06.Colspan = 0;
        cellform06.PaddingBottom = 20f;
        tablecall4.AddCell(cellform06);

        PdfPCell cellform05 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellform05.HorizontalAlignment = 1;
        cellform05.Colspan = 0;
        cellform05.PaddingBottom = 20f;
        tablecall4.AddCell(cellform05);

        PdfPCell cellform04 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellform04.HorizontalAlignment = 1;
        cellform04.Colspan = 0;
        cellform04.PaddingBottom = 20f;
        tablecall4.AddCell(cellform04);

        PdfPCell cellform03 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellform03.HorizontalAlignment = 1;
        cellform03.Colspan = 0;
        cellform03.PaddingBottom = 20f;
        tablecall4.AddCell(cellform03);


        PdfPCell cellform02 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellform02.HorizontalAlignment = 1;
        cellform02.Colspan = 0;
        cellform02.PaddingBottom = 20f;
        tablecall4.AddCell(cellform02);

        PdfPCell cellform01 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellform01.HorizontalAlignment = 1;
        cellform01.Colspan = 0;
        cellform01.PaddingBottom = 10f;
        tablecall4.AddCell(cellform01);




        document.Add(tablecall4);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "FormXVI.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;

        //}
    }

    protected void BtnformXIX_Click(object sender, EventArgs e)
    {


        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablecall5 = new PdfPTable(6);
        tablecall5.TotalWidth = 900f;
        tablecall5.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, };
        tablecall5.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 6;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell cellHead = new PdfPCell(new Phrase("Form-XIX ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 6;
        cellHead.Border = 0;

        tablecall5.AddCell(cellHead);

        PdfPCell cellWAGESLIP = new PdfPCell(new Phrase("WAGE SLIP", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD, BaseColor.BLACK)));
        cellWAGESLIP.HorizontalAlignment = 1;
        cellWAGESLIP.Colspan = 6;
        cellWAGESLIP.Border = 0;

        tablecall5.AddCell(cellWAGESLIP);

        PdfPCell cellRule78b = new PdfPCell(new Phrase("[Rule 78(1)(b)]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellRule78b.HorizontalAlignment = 1;
        cellRule78b.Colspan = 6;
        cellRule78b.Border = 0;
        tablecall5.AddCell(cellRule78b);

        tablecall5.AddCell(cellspace);
        tablecall5.AddCell(cellspace);
        tablecall5.AddCell(cellspace);

        PdfPCell celladdressofcontractor = new PdfPCell(new Phrase("Name and Address of contractor .....................................................................................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celladdressofcontractor.HorizontalAlignment = 0;
        celladdressofcontractor.Colspan = 2;
        celladdressofcontractor.Border = 0;

        tablecall5.AddCell(celladdressofcontractor);

        PdfPCell cellRules741 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellRules741.HorizontalAlignment = 0;
        cellRules741.Colspan = 2;
        cellRules741.Border = 0;
        tablecall5.AddCell(cellRules741);

        PdfPCell cellestablishmentname = new PdfPCell(new Phrase("Name and Father's/Husband's Name of the workman......................................................................................................................................................................For the Week/fornight/month ending..................................................................................................................................................................................................................................................................................................... ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellestablishmentname.HorizontalAlignment = 0;
        cellestablishmentname.Colspan = 2;
        cellestablishmentname.Border = 0;
        tablecall5.AddCell(cellestablishmentname);

        tablecall5.AddCell(cellspace);

        PdfPCell cellNatureand = new PdfPCell(new Phrase("Nature and location of work.............................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNatureand.HorizontalAlignment = 0;
        cellNatureand.Colspan = 6;
        cellNatureand.Border = 0;
        tablecall5.AddCell(cellNatureand);

        tablecall5.AddCell(cellspace);

        PdfPCell cellnoofdays = new PdfPCell(new Phrase("1.  No.of days worked", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellnoofdays.HorizontalAlignment = 0;
        cellnoofdays.Colspan = 6;
        cellnoofdays.Border = 0;
        tablecall5.AddCell(cellnoofdays);

        tablecall5.AddCell(cellspace);

        PdfPCell cellnoofunits = new PdfPCell(new Phrase("2.  No. of units worked in case of piece-rate workers", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellnoofunits.HorizontalAlignment = 0;
        cellnoofunits.Colspan = 6;
        cellnoofunits.Border = 0;
        tablecall5.AddCell(cellnoofunits);

        tablecall5.AddCell(cellspace);
        PdfPCell cellrateofdaily = new PdfPCell(new Phrase("3.  Rate of daily wages/piece-rate", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellrateofdaily.HorizontalAlignment = 0;
        cellrateofdaily.Colspan = 6;
        cellrateofdaily.Border = 0;
        tablecall5.AddCell(cellrateofdaily);

        tablecall5.AddCell(cellspace);

        PdfPCell cellamountof = new PdfPCell(new Phrase("4.  Amount of overtime wages", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellamountof.HorizontalAlignment = 0;
        cellamountof.Colspan = 6;
        cellamountof.Border = 0;
        tablecall5.AddCell(cellamountof);

        tablecall5.AddCell(cellspace);

        PdfPCell cellgrosswages = new PdfPCell(new Phrase("5. Gross wages payable", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellgrosswages.HorizontalAlignment = 0;
        cellgrosswages.Colspan = 6;
        cellgrosswages.Border = 0;
        tablecall5.AddCell(cellgrosswages);

        tablecall5.AddCell(cellspace);
        PdfPCell celldeductionsany = new PdfPCell(new Phrase("6.  Deductions,if any", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldeductionsany.HorizontalAlignment = 0;
        celldeductionsany.Colspan = 6;
        celldeductionsany.Border = 0;
        tablecall5.AddCell(celldeductionsany);

        tablecall5.AddCell(cellspace);
        PdfPCell cellnetamountof = new PdfPCell(new Phrase("7.  Net amount of wages paid", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellnetamountof.HorizontalAlignment = 0;
        cellnetamountof.Colspan = 6;
        cellnetamountof.Border = 0;
        tablecall5.AddCell(cellnetamountof);

        tablecall5.AddCell(cellspace);
        tablecall5.AddCell(cellspace);
        tablecall5.AddCell(cellspace);
        tablecall5.AddCell(cellspace);
        tablecall5.AddCell(cellspace);
        tablecall5.AddCell(cellspace);

        PdfPCell cellinsingnatures = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellinsingnatures.HorizontalAlignment = 0;
        cellinsingnatures.Colspan = 3;
        cellinsingnatures.Border = 0;
        tablecall5.AddCell(cellinsingnatures);

        PdfPCell cellInitials = new PdfPCell(new Phrase("Initials of the contractor or his  representative", FontFactory.GetFont(FontFactory.TIMES_ITALIC, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellInitials.HorizontalAlignment = 0;
        cellInitials.Colspan = 3;
        cellInitials.Border = 0;
        cellInitials.PaddingLeft = 200;
        tablecall5.AddCell(cellInitials);

        document.Add(tablecall5);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "FormXIX.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;

        //}
    }

    protected void Buttonform_Click(object sender, EventArgs e)
    {

        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");






        PdfPTable table = new PdfPTable(6);
        table.TotalWidth = 500f;
        table.LockedWidth = true;
        float[] width = new float[] { 1.5f, 2f, 2f, 2f, 1.5f, 2f };
        table.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 6;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;


        PdfPCell celllogoHead = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        celllogoHead.HorizontalAlignment = 2;
        celllogoHead.Colspan = 3;
        celllogoHead.Border = 0;
        table.AddCell(celllogoHead);



        PdfPCell cellHead = new PdfPCell(new Phrase("Form-XIV ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 0;
        cellHead.Colspan = 3;
        cellHead.Border = 0;
        cellHead.PaddingLeft = -50;
        table.AddCell(cellHead);






        PdfPCell cellrule = new PdfPCell(new Phrase("(see rule 76) ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.BLACK)));
        cellrule.HorizontalAlignment = 0;
        cellrule.Colspan = 6;
        cellrule.Border = 0;
        cellrule.PaddingLeft = 210;
        table.AddCell(cellrule);


        PdfPCell cellHead4 = new PdfPCell(new Phrase("EMPLOYMENT CARD", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 3, Font.BOLD, BaseColor.BLACK)));
        cellHead4.HorizontalAlignment = 1;
        cellHead4.Colspan = 6;
        cellHead4.Border = 0;
        table.AddCell(cellHead4);


        //table.AddCell(cellspace);

        document.Add(table);




        PdfPTable table2 = new PdfPTable(2);
        table2.TotalWidth = 500f;
        table2.LockedWidth = true;
        float[] width1 = new float[] { 2f, 2f };
        table2.SetWidths(width1);

        PdfPCell cellspace3 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellspace3.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace3.Colspan = 2;
        cellspace3.Border = 0;
        table2.AddCell(cellspace3);
        //table2.AddCell(cellspace3);


        PdfPCell cellName2 = new PdfPCell(new Phrase("Name and address of contractor", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName2.HorizontalAlignment = 0;
        cellName2.Colspan = 0;
        cellName2.Border = 0;
        cellName2.PaddingTop = 40;
        cellName2.PaddingBottom = 40;
        cellName2.BorderWidthLeft = 0.5f;
        cellName2.BorderWidthRight = 0.2f;
        cellName2.BorderWidthTop = 0.5f;
        cellName2.BorderWidthBottom = 0.5f;
        cellName2.PaddingLeft = 10;
        table2.AddCell(cellName2);


        PdfPCell cellName3 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName3.HorizontalAlignment = 0;
        cellName3.Colspan = 0;
        cellName3.Border = 0;
        cellName3.PaddingTop = 40;
        cellName3.PaddingBottom = 40;
        cellName3.BorderWidthLeft = 0;
        cellName3.BorderWidthRight = 0.9f;
        cellName3.BorderWidthTop = 0.5f;
        cellName3.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName3);

        PdfPCell cellName11 = new PdfPCell(new Phrase("Name and address of principal Employer", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName11.HorizontalAlignment = 0;
        cellName11.Colspan = 0;
        cellName11.Border = 0;
        cellName11.PaddingTop = 30;
        cellName11.PaddingBottom = 30;
        cellName11.BorderWidthLeft = 0.5f;
        cellName11.BorderWidthRight = 0.2f;
        cellName11.BorderWidthTop = 0;
        cellName11.BorderWidthBottom = 0.5f;
        cellName11.PaddingLeft = 10;
        table2.AddCell(cellName11);


        PdfPCell cellName10 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName10.HorizontalAlignment = 0;
        cellName10.Colspan = 0;
        cellName10.Border = 0;
        cellName10.PaddingTop = 30;
        cellName10.PaddingBottom = 30;
        cellName10.BorderWidthLeft = 0;
        cellName10.BorderWidthRight = 0.9f;
        cellName10.BorderWidthTop = 0;
        cellName10.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName10);


        PdfPCell cellName13 = new PdfPCell(new Phrase("Name and address of Establishment    where work carried on", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName13.HorizontalAlignment = 0;
        cellName13.Colspan = 0;
        cellName13.Border = 0;
        cellName13.PaddingTop = 30;
        cellName13.PaddingBottom = 30;
        cellName13.BorderWidthLeft = 0.5f;
        cellName13.BorderWidthRight = 0.2f;
        cellName13.BorderWidthTop = 0;
        cellName13.BorderWidthBottom = 0.5f;
        cellName13.PaddingLeft = 10;
        table2.AddCell(cellName13);


        PdfPCell cellName12 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName12.HorizontalAlignment = 0;
        cellName12.Colspan = 0;
        cellName12.Border = 0;
        cellName12.PaddingTop = 30;
        cellName12.PaddingBottom = 30;
        cellName12.BorderWidthLeft = 0;
        cellName12.BorderWidthRight = 0.9f;
        cellName12.BorderWidthTop = 0;
        cellName12.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName12);


        PdfPCell cellName14 = new PdfPCell(new Phrase("Nature of work and location of work/Address", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName14.HorizontalAlignment = 0;
        cellName14.Colspan = 0;
        cellName14.Border = 0;
        cellName14.PaddingTop = 30;
        cellName14.PaddingBottom = 30;
        cellName14.BorderWidthLeft = 0.5f;
        cellName14.BorderWidthRight = 0.2f;
        cellName14.BorderWidthTop = 0;
        cellName14.BorderWidthBottom = 0.5f;
        cellName14.PaddingLeft = 10;
        table2.AddCell(cellName14);


        PdfPCell cellName15 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName15.HorizontalAlignment = 0;
        cellName15.Colspan = 0;
        cellName15.Border = 0;
        cellName15.PaddingTop = 30;
        cellName15.PaddingBottom = 30;
        cellName15.BorderWidthLeft = 0;
        cellName15.BorderWidthRight = 0.9f;
        cellName15.BorderWidthTop = 0;
        cellName15.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName15);


        PdfPCell cellName16 = new PdfPCell(new Phrase("1.   Name of the Workman", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName16.HorizontalAlignment = 0;
        cellName16.Colspan = 0;
        cellName16.Border = 0;
        cellName16.PaddingTop = 20;
        cellName16.PaddingBottom = 20;
        cellName16.BorderWidthLeft = 0.5f;
        cellName16.BorderWidthRight = 0.2f;
        cellName16.BorderWidthTop = 0;
        cellName16.BorderWidthBottom = 0.5f;
        cellName16.PaddingLeft = 10;
        table2.AddCell(cellName16);

        PdfPCell cellName17 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName17.HorizontalAlignment = 0;
        cellName17.Colspan = 0;
        cellName17.Border = 0;
        cellName17.PaddingTop = 20;
        cellName17.PaddingBottom = 20;
        cellName17.BorderWidthLeft = 0;
        cellName17.BorderWidthRight = 0.9f;
        cellName17.BorderWidthTop = 0;
        cellName17.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName17);


        PdfPCell cellName19 = new PdfPCell(new Phrase("2.   SL.No in the register of Workmen employed", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName19.HorizontalAlignment = 0;
        cellName19.Colspan = 0;
        cellName19.Border = 0;
        cellName19.PaddingTop = 20;
        cellName19.PaddingBottom = 20;
        cellName19.BorderWidthLeft = 0.5f;
        cellName19.BorderWidthRight = 0.2f;
        cellName19.BorderWidthTop = 0;
        cellName19.BorderWidthBottom = 0.5f;
        cellName19.PaddingLeft = 10;
        table2.AddCell(cellName19);


        PdfPCell cellName18 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName18.HorizontalAlignment = 0;
        cellName18.Colspan = 0;
        cellName18.Border = 0;
        cellName18.PaddingTop = 20;
        cellName18.PaddingBottom = 20;
        cellName18.BorderWidthLeft = 0;
        cellName18.BorderWidthRight = 0.9f;
        cellName18.BorderWidthTop = 0;
        cellName18.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName18);


        PdfPCell cellName21 = new PdfPCell(new Phrase("3.   Nature of Employment/Designation", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName21.HorizontalAlignment = 0;
        cellName21.Colspan = 0;
        cellName21.Border = 0;
        cellName21.PaddingTop = 20;
        cellName21.PaddingBottom = 20;
        cellName21.BorderWidthLeft = 0.5f;
        cellName21.BorderWidthRight = 0.2f;
        cellName21.BorderWidthTop = 0;
        cellName21.BorderWidthBottom = 0.5f;
        cellName21.PaddingLeft = 10;
        table2.AddCell(cellName21);


        PdfPCell cellName20 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName20.HorizontalAlignment = 0;
        cellName20.Colspan = 0;
        cellName20.Border = 0;
        cellName20.PaddingTop = 20;
        cellName20.PaddingBottom = 20;
        cellName20.BorderWidthLeft = 0;
        cellName20.BorderWidthRight = 0.9f;
        cellName20.BorderWidthTop = 0;
        cellName20.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName20);


        PdfPCell cellName22 = new PdfPCell(new Phrase("4.  Wage Rate (With Particulars of unit in case of piece work)   ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName22.HorizontalAlignment = 0;
        cellName22.Colspan = 0;
        cellName22.Border = 0;
        cellName22.PaddingTop = 20;
        cellName22.PaddingBottom = 20;
        cellName22.BorderWidthLeft = 0.5f;
        cellName22.BorderWidthRight = 0.2f;
        cellName22.BorderWidthTop = 0;
        cellName22.BorderWidthBottom = 0.5f;
        cellName22.PaddingLeft = 10;
        table2.AddCell(cellName22);


        PdfPCell cellName29 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName29.HorizontalAlignment = 0;
        cellName29.Colspan = 0;
        cellName29.Border = 0;
        cellName29.PaddingTop = 20;
        cellName29.PaddingBottom = 20;
        cellName29.BorderWidthLeft = 0;
        cellName29.BorderWidthRight = 0.9f;
        cellName29.BorderWidthTop = 0;
        cellName29.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName29);


        PdfPCell cellName24 = new PdfPCell(new Phrase("5.  Wage period   ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName24.HorizontalAlignment = 0;
        cellName24.Colspan = 0;
        cellName24.Border = 0;
        cellName24.PaddingTop = 20;
        cellName24.PaddingBottom = 20;
        cellName24.BorderWidthLeft = 0.5f;
        cellName24.BorderWidthRight = 0.2f;
        cellName24.BorderWidthTop = 0;
        cellName24.BorderWidthBottom = 0.5f;
        cellName24.PaddingLeft = 10;
        table2.AddCell(cellName24);


        PdfPCell cellName25 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName25.HorizontalAlignment = 0;
        cellName25.Colspan = 0;
        cellName25.Border = 0;
        cellName25.PaddingTop = 20;
        cellName25.PaddingBottom = 20;
        cellName25.BorderWidthLeft = 0;
        cellName25.BorderWidthRight = 0.9f;
        cellName25.BorderWidthTop = 0f;
        cellName25.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName25);


        PdfPCell cellName26 = new PdfPCell(new Phrase("6.  Tenure of Employment (DOJ)   ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName26.HorizontalAlignment = 0;
        cellName26.Colspan = 0;
        cellName26.Border = 0;
        cellName26.PaddingTop = 20;
        cellName26.PaddingBottom = 20;
        cellName26.BorderWidthLeft = 0.5f;
        cellName26.BorderWidthRight = 0.2f;
        cellName26.BorderWidthTop = 0;
        cellName26.BorderWidthBottom = 0.5f;
        cellName26.PaddingLeft = 10;
        table2.AddCell(cellName26);


        PdfPCell cellName27 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName27.HorizontalAlignment = 0;
        cellName27.Colspan = 0;
        cellName27.Border = 0;
        cellName27.PaddingTop = 20;
        cellName27.PaddingBottom = 20;
        cellName27.BorderWidthLeft = 0;
        cellName27.BorderWidthRight = 0.9f;
        cellName27.BorderWidthTop = 0;
        cellName27.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName27);


        PdfPCell cellName28 = new PdfPCell(new Phrase("7.  Remarks   ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName28.HorizontalAlignment = 0;
        cellName28.Colspan = 0;
        cellName28.Border = 0;
        cellName28.PaddingTop = 20;
        cellName28.PaddingBottom = 20;
        cellName28.BorderWidthRight = 0.2f;
        cellName28.BorderWidthLeft = 0.5f;
        cellName28.BorderWidthTop = 0;
        cellName28.BorderWidthBottom = 0.5f;
        cellName28.PaddingLeft = 10;
        table2.AddCell(cellName28);


        PdfPCell cellName291 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName291.HorizontalAlignment = 0;
        cellName291.Colspan = 0;
        cellName291.Border = 0;
        cellName291.PaddingTop = 20;
        cellName291.PaddingBottom = 20;
        cellName291.BorderWidthRight = 0.9f;
        cellName291.BorderWidthTop = 0;
        cellName291.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName291);


        PdfPCell cellNames28 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames28.HorizontalAlignment = 0;
        cellNames28.Colspan = 0;
        cellNames28.Border = 0;
        cellNames28.PaddingTop = 40;
        cellNames28.PaddingBottom = 40;
        cellNames28.BorderWidthRight = 0.2f;
        cellNames28.BorderWidthLeft = 0.5f;
        cellNames28.BorderWidthTop = 0;
        cellNames28.BorderWidthBottom = 0.5f;
        cellNames28.PaddingLeft = 10;
        table2.AddCell(cellNames28);


        PdfPCell cellNames291 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNames291.HorizontalAlignment = 0;
        cellNames291.Colspan = 0;
        cellNames291.Border = 0;
        cellNames291.PaddingTop = 40;
        cellNames291.PaddingBottom = 40;
        cellNames291.BorderWidthRight = 0.9f;
        cellNames291.BorderWidthTop = 0;
        cellNames291.BorderWidthBottom = 0.5f;
        table2.AddCell(cellNames291);


        document.Add(table2);


        // #endregion Basic Information of the Employee





        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);





        string filename = "FormXIV.pdf";


        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void Btnform14_Click(object sender, EventArgs e)
    {


        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";


        string address = "";
        string typeofwork = "";
        string quantity = "";
        string startdate = "";
        string enddate = "";

        #endregion


        if (ddlclientid.SelectedIndex == 0)
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
            return;
        }

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        #region Begin Variable Declaration

        string SPName = "";
        Hashtable HTForms = new Hashtable();
        string ClientID = "";
        DataTable dtContractExpiry = null;

        #endregion end Variable Declaration


        #region Begin Assign Values to The Variables
        SPName = "FormsPDF";
        ClientID = ddlclientid.SelectedValue;
        #endregion End Assign values To the Variables

        #region Begin Pass values to the Hash table
        HTForms.Add("@ClientID", ClientID);
        #endregion  end Pass values to the Hash table

        #region Begin  Call Stored Procedure
        dtContractExpiry = config.ExecuteAdaptorAsyncWithParams(SPName, HTForms).Result;
        #endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        if (dtContractExpiry.Rows.Count > 0)
        {


            //contactno = dtContractExpiry.Rows[0]["EmpPhone"].ToString();
            Idno = dtContractExpiry.Rows[0]["ClientId"].ToString();
            address = dtContractExpiry.Rows[0]["Address"].ToString();
            typeofwork = dtContractExpiry.Rows[0]["TypeofWork"].ToString();
            quantity = dtContractExpiry.Rows[0]["Quantity"].ToString();

            startdate = dtContractExpiry.Rows[0]["ContractStartDate"].ToString();
            if (startdate == "01/01/1900")
            {
                startdate = string.Empty;
            }

            enddate = dtContractExpiry.Rows[0]["ContractEndDate"].ToString();
            if (enddate == "01/01/1900")
            {
                enddate = string.Empty;
            }
        }



        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();
        //string fileheader2 = Idno + "" + name + "" + "BIO DATA" + " .Pdf";
        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tblnew = new PdfPTable(6);
        tblnew.TotalWidth = 500f;
        tblnew.LockedWidth = true;
        float[] width = new float[] { 1.5f, 2f, 2f, 2f, 1.5f, 2f };
        tblnew.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 6;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell celllogoHead = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        celllogoHead.HorizontalAlignment = 2;
        celllogoHead.Colspan = 3;
        celllogoHead.Border = 0;
        tblnew.AddCell(celllogoHead);

        PdfPCell cellHead = new PdfPCell(new Phrase("Form-XXIV ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 0;
        cellHead.Colspan = 3;
        cellHead.Border = 0;
        cellHead.PaddingLeft = -50;
        tblnew.AddCell(cellHead);

        PdfPCell cellreturn12 = new PdfPCell(new Phrase("RETURN TO BE SENT BY THE CONTRACTOR TO THE LICENSING OFFICER", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD, BaseColor.BLACK)));
        cellreturn12.HorizontalAlignment = 0;
        cellreturn12.Colspan = 6;
        cellreturn12.Border = 0;
        cellreturn12.PaddingLeft = 30;
        tblnew.AddCell(cellreturn12);

        PdfPCell cellreturn123 = new PdfPCell(new Phrase(" Rule 82(1)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 3, Font.BOLD, BaseColor.BLACK)));
        cellreturn123.HorizontalAlignment = 1;
        cellreturn123.Colspan = 6;
        cellreturn123.Border = 0;
        tblnew.AddCell(cellreturn123);
        cellreturn12.PaddingLeft = -10;
        tblnew.AddCell(cellspace);

        document.Add(tblnew);

        #endregion

        #region Basic Information of the Employee

        PdfPTable tblform12 = new PdfPTable(2);
        tblform12.TotalWidth = 500f;
        tblform12.LockedWidth = true;
        float[] width1 = new float[] { 2f, 2f };
        tblform12.SetWidths(width1);

        PdfPCell cellspace3 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellspace3.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace3.Colspan = 2;
        cellspace3.Border = 0;


        PdfPCell cellName40 = new PdfPCell(new Phrase("1.   Name and address of constractor", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName40.HorizontalAlignment = 0;
        cellName40.Colspan = 0;
        cellName40.Border = 0;
        cellName40.PaddingTop = 20;
        cellName40.PaddingBottom = 20;
        cellName40.BorderWidthLeft = 0.5f;
        cellName40.BorderWidthRight = 0.2f;
        cellName40.BorderWidthTop = 0.5f;
        cellName40.BorderWidthBottom = 0.5f;
        cellName40.PaddingLeft = 10;
        tblform12.AddCell(cellName40);

        PdfPCell cellName41 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName41.HorizontalAlignment = 0;
        cellName41.Colspan = 0;
        cellName41.Border = 0;
        cellName41.PaddingTop = 20;
        cellName41.PaddingBottom = 20;
        cellName41.BorderWidthLeft = 0;
        cellName41.BorderWidthRight = 0.9f;
        cellName41.BorderWidthTop = 0.5f;
        cellName41.BorderWidthBottom = 0.5f;
        tblform12.AddCell(cellName41);

        PdfPCell cellName42 = new PdfPCell(new Phrase("2.   Name and address of Establishment", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName42.HorizontalAlignment = 0;
        cellName42.Colspan = 0;
        cellName42.Border = 0;
        cellName42.PaddingTop = 20;
        cellName42.PaddingBottom = 20;
        cellName42.BorderWidthLeft = 0.5f;
        cellName42.BorderWidthRight = 0.2f;
        cellName42.BorderWidthTop = 0;
        cellName42.BorderWidthBottom = 0.5f;
        cellName42.PaddingLeft = 10;
        tblform12.AddCell(cellName42);

        PdfPCell cellName43 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName43.HorizontalAlignment = 0;
        cellName43.Colspan = 0;
        cellName43.Border = 0;
        cellName43.PaddingTop = 20;
        cellName43.PaddingBottom = 20;
        cellName43.BorderWidthLeft = 0;
        cellName43.BorderWidthRight = 0.9f;
        cellName43.BorderWidthTop = 0;
        cellName43.BorderWidthBottom = 0.5f;
        tblform12.AddCell(cellName43);

        PdfPCell cellName44 = new PdfPCell(new Phrase("3.   Name and address of the principal Employer", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName44.HorizontalAlignment = 0;
        cellName44.Colspan = 0;
        cellName44.Border = 0;
        cellName44.PaddingTop = 20;
        cellName44.PaddingBottom = 20;
        cellName44.BorderWidthLeft = 0.5f;
        cellName44.BorderWidthRight = 0.2f;
        cellName44.BorderWidthTop = 0;
        cellName44.BorderWidthBottom = 0.5f;
        cellName44.PaddingLeft = 10;
        tblform12.AddCell(cellName44);

        PdfPCell cellName45 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName45.HorizontalAlignment = 0;
        cellName45.Colspan = 0;
        cellName45.Border = 0;
        cellName45.PaddingTop = 20;
        cellName45.PaddingBottom = 20;
        cellName45.BorderWidthLeft = 0;
        cellName45.BorderWidthRight = 0.9f;
        cellName45.BorderWidthTop = 0;
        cellName45.BorderWidthBottom = 0.5f;
        tblform12.AddCell(cellName45);

        PdfPCell cellName46 = new PdfPCell(new Phrase("4.   Duration of contract: From ………… to", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName46.HorizontalAlignment = 0;
        cellName46.Colspan = 0;
        cellName46.Border = 0;
        cellName46.PaddingTop = 20;
        cellName46.PaddingBottom = 20;
        cellName46.BorderWidthLeft = 0.5f;
        cellName46.BorderWidthRight = 0.2f;
        cellName46.BorderWidthTop = 0;
        cellName46.BorderWidthBottom = 0.5f;
        cellName46.PaddingLeft = 10;
        tblform12.AddCell(cellName46);

        PdfPCell cellName47 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName47.HorizontalAlignment = 0;
        cellName47.Colspan = 0;
        cellName47.Border = 0;
        cellName47.PaddingTop = 20;
        cellName47.PaddingBottom = 20;
        cellName47.BorderWidthLeft = 0;
        cellName47.BorderWidthRight = 0.9f;
        cellName47.BorderWidthTop = 0;
        cellName47.BorderWidthBottom = 0.5f;
        tblform12.AddCell(cellName47);

        PdfPCell cellName48 = new PdfPCell(new Phrase("5.   No. of days during the half-year on	which-(a) the establishment of the principal employer  had worked;(b) the contractors establishment had worked;", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName48.HorizontalAlignment = 0;
        cellName48.Colspan = 0;
        cellName48.Border = 0;
        cellName48.PaddingTop = 25;
        cellName48.PaddingBottom = 25;
        cellName48.BorderWidthLeft = 0.5f;
        cellName48.BorderWidthRight = 0.2f;
        cellName48.BorderWidthTop = 0;
        cellName48.BorderWidthBottom = 0.5f;
        cellName48.PaddingLeft = 10;
        tblform12.AddCell(cellName48);

        PdfPCell cellName49 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName49.HorizontalAlignment = 0;
        cellName49.Colspan = 0;
        cellName49.Border = 0;
        cellName49.PaddingTop = 25;
        cellName49.PaddingBottom = 25;
        cellName49.BorderWidthLeft = 0;
        cellName49.BorderWidthRight = 0.9f;
        cellName49.BorderWidthTop = 0;
        cellName49.BorderWidthBottom = 0.5f;
        tblform12.AddCell(cellName49);

        PdfPCell cellName50 = new PdfPCell(new Phrase("6.   Maximum  number  of  contract  labour employed on any day during the half year:	Men	Women Children Total", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName50.HorizontalAlignment = 0;
        cellName50.Colspan = 0;
        cellName50.Border = 0;
        cellName50.PaddingTop = 20;
        cellName50.PaddingBottom = 20;
        cellName50.BorderWidthLeft = 0.5f;
        cellName50.BorderWidthRight = 0.2f;
        cellName50.BorderWidthTop = 0;
        cellName50.BorderWidthBottom = 0.5f;
        cellName50.PaddingLeft = 10;
        tblform12.AddCell(cellName50);

        PdfPCell cellName51 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName51.HorizontalAlignment = 0;
        cellName51.Colspan = 0;
        cellName51.Border = 0;
        cellName51.PaddingTop = 20;
        cellName51.PaddingBottom = 20;
        cellName51.BorderWidthLeft = 0;
        cellName51.BorderWidthRight = 0.9f;
        cellName51.BorderWidthTop = 0;
        cellName51.BorderWidthBottom = 0.5f;
        tblform12.AddCell(cellName51);

        PdfPCell cellName52 = new PdfPCell(new Phrase("7.  (i) Daily hours of work and spreadover-(ii) (a) Whether weekly holiday observed and on what day-(b) if so, whether it was paid for-(iii) No. of man-hours of overtime worked-", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName52.HorizontalAlignment = 0;
        cellName52.Colspan = 0;
        cellName52.Border = 0;
        cellName52.PaddingTop = 20;
        cellName52.PaddingBottom = 20;
        cellName52.BorderWidthLeft = 0.5f;
        cellName52.BorderWidthRight = 0.2f;
        cellName52.BorderWidthTop = 0;
        cellName52.BorderWidthBottom = 0.5f;
        cellName52.PaddingLeft = 10;
        tblform12.AddCell(cellName52);

        PdfPCell cellName53 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName53.HorizontalAlignment = 0;
        cellName53.Colspan = 0;
        cellName53.Border = 0;
        cellName53.PaddingTop = 20;
        cellName53.PaddingBottom = 20;
        cellName53.BorderWidthLeft = 0;
        cellName53.BorderWidthRight = 0.9f;
        cellName53.BorderWidthTop = 0;
        cellName53.BorderWidthBottom = 0.5f;
        tblform12.AddCell(cellName53);

        PdfPCell cellName54 = new PdfPCell(new Phrase("8.  Number of man-days worked by-Men	Women Children Total", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName54.HorizontalAlignment = 0;
        cellName54.Colspan = 0;
        cellName54.Border = 0;
        cellName54.PaddingTop = 15;
        cellName54.PaddingBottom = 15;
        cellName54.BorderWidthLeft = 0.5f;
        cellName54.BorderWidthRight = 0.2f;
        cellName54.BorderWidthTop = 0;
        cellName54.BorderWidthBottom = 0.5f;
        cellName54.PaddingLeft = 10;
        tblform12.AddCell(cellName54);

        PdfPCell cellName55 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName55.HorizontalAlignment = 0;
        cellName55.Colspan = 0;
        cellName55.Border = 0;
        cellName55.PaddingTop = 15;
        cellName55.PaddingBottom = 15;
        cellName55.BorderWidthLeft = 0;
        cellName55.BorderWidthRight = 0.9f;
        cellName55.BorderWidthTop = 0;
        cellName55.BorderWidthBottom = 0.5f;
        tblform12.AddCell(cellName55);

        PdfPCell cellName56 = new PdfPCell(new Phrase("9.  Amount of  wages paid Men Women Children	Total", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName56.HorizontalAlignment = 0;
        cellName56.Colspan = 0;
        cellName56.Border = 0;
        cellName56.PaddingTop = 15;
        cellName56.PaddingBottom = 15;
        cellName56.BorderWidthLeft = 0.5f;
        cellName56.BorderWidthRight = 0.2f;
        cellName56.BorderWidthTop = 0;
        cellName56.BorderWidthBottom = 0.5f;
        cellName56.PaddingLeft = 10;
        tblform12.AddCell(cellName56);




        PdfPCell cellName57 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName57.HorizontalAlignment = 0;
        cellName57.Colspan = 0;
        cellName57.Border = 0;
        cellName57.PaddingTop = 15;
        cellName57.PaddingBottom = 15;
        cellName57.BorderWidthLeft = 0;
        cellName57.BorderWidthRight = 0.9f;
        cellName57.BorderWidthTop = 0f;
        cellName57.BorderWidthBottom = 0.5f;
        tblform12.AddCell(cellName57);



        PdfPCell cellName58 = new PdfPCell(new Phrase("10. Amount of deductions from wages Men Women Children Total", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName58.HorizontalAlignment = 0;
        cellName58.Colspan = 0;
        cellName58.Border = 0;
        cellName58.PaddingTop = 15;
        cellName58.PaddingBottom = 15;
        cellName58.BorderWidthLeft = 0.5f;
        cellName58.BorderWidthRight = 0.2f;
        cellName58.BorderWidthTop = 0;
        cellName58.BorderWidthBottom = 0.5f;
        cellName58.PaddingLeft = 10;
        tblform12.AddCell(cellName58);




        PdfPCell cellName59 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName59.HorizontalAlignment = 0;
        cellName59.Colspan = 0;
        cellName59.Border = 0;
        cellName59.PaddingTop = 15;
        cellName59.PaddingBottom = 15;
        cellName59.BorderWidthLeft = 0;
        cellName59.BorderWidthRight = 0.9f;
        cellName59.BorderWidthTop = 0;
        cellName59.BorderWidthBottom = 0.5f;
        tblform12.AddCell(cellName59);



        PdfPCell cellName60 = new PdfPCell(new Phrase("11. whether the following have been provided-(i) Canteen	(ii) Rest-rooms	(iii) Drinking -water(iv) Creches(v) First-aid", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName60.HorizontalAlignment = 0;
        cellName60.Colspan = 0;
        cellName60.Border = 0;
        cellName60.PaddingTop = 20;
        cellName60.PaddingBottom = 20;
        cellName60.BorderWidthRight = 0.2f;
        cellName60.BorderWidthLeft = 0.5f;
        cellName60.BorderWidthTop = 0;
        cellName60.BorderWidthBottom = 0.5f;
        cellName60.PaddingLeft = 10;
        tblform12.AddCell(cellName60);




        PdfPCell cellName61 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName61.HorizontalAlignment = 0;
        cellName61.Colspan = 0;
        cellName61.Border = 0;
        cellName61.PaddingTop = 20;
        cellName61.PaddingBottom = 20;
        cellName61.BorderWidthRight = 0.9f;
        cellName61.BorderWidthTop = 0;
        cellName61.BorderWidthBottom = 0.5f;
        tblform12.AddCell(cellName61);




        PdfPCell cellNames62 = new PdfPCell(new Phrase(" (if the Answer 'yes state briefly standards provided) ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNames62.HorizontalAlignment = 0;
        cellNames62.Colspan = 2;
        cellNames62.Border = 0;

        tblform12.AddCell(cellNames62);

        tblform12.AddCell(cellspace3);

        PdfPCell cellNames63 = new PdfPCell(new Phrase(" place................... ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNames63.HorizontalAlignment = 0;
        cellNames63.Colspan = 1;
        cellNames63.Border = 0;

        tblform12.AddCell(cellNames63);




        PdfPCell cellNames64 = new PdfPCell(new Phrase("signature of constactor.................  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNames64.HorizontalAlignment = 0;
        cellNames64.Colspan = 1;
        cellNames64.Border = 0;

        tblform12.AddCell(cellNames64);




        PdfPCell cellNames65 = new PdfPCell(new Phrase(" date.................. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNames65.HorizontalAlignment = 0;
        cellNames65.Colspan = 0;
        cellNames65.Border = 0;

        tblform12.AddCell(cellNames65);







        document.Add(tblform12);




        #endregion Basic Information of the Employee


        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "FormXXIV.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void Btnform014_Click(object sender, EventArgs e)
    {




        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablenew = new PdfPTable(12);
        tablenew.TotalWidth = 900f;
        tablenew.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tablenew.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 12;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;




        PdfPCell cellHead = new PdfPCell(new Phrase("Form-XXIII ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 12;
        cellHead.Border = 0;

        tablenew.AddCell(cellHead);






        PdfPCell cellreturn12 = new PdfPCell(new Phrase("REGISTER OF OVERTIME", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.BLACK)));
        cellreturn12.HorizontalAlignment = 1;
        cellreturn12.Colspan = 12;
        cellreturn12.Border = 0;

        tablenew.AddCell(cellreturn12);



        PdfPCell cellreturns123 = new PdfPCell(new Phrase("[Rule 78(1)(a)(iii)]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 3, Font.BOLD, BaseColor.BLACK)));
        cellreturns123.HorizontalAlignment = 1;
        cellreturns123.Colspan = 12;
        cellreturns123.Border = 0;
        tablenew.AddCell(cellreturns123);

        tablenew.AddCell(cellspace);
        tablenew.AddCell(cellspace);


        PdfPCell cellNames40 = new PdfPCell(new Phrase("1.Name and address of contractor...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames40.HorizontalAlignment = 0;
        cellNames40.Colspan = 5;
        cellNames40.Border = 0;
        cellNames40.PaddingLeft = 0;
        tablenew.AddCell(cellNames40);



        PdfPCell cellNames43 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames43.HorizontalAlignment = 0;
        cellNames43.Colspan = 2;
        cellNames43.Border = 0;
        cellNames43.PaddingLeft = 0;
        tablenew.AddCell(cellNames43);




        PdfPCell cellNames41 = new PdfPCell(new Phrase("2.Name and address of establishment in/under	which contract is carried on...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames41.HorizontalAlignment = 0;
        cellNames41.Colspan = 5;
        cellNames41.Border = 0;
        cellNames41.PaddingLeft = 0;
        tablenew.AddCell(cellNames41);

        tablenew.AddCell(cellspace);



        PdfPCell cellNames42 = new PdfPCell(new Phrase("3.   Nature and location of work...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames42.HorizontalAlignment = 0;
        cellNames42.Colspan = 5;
        cellNames42.Border = 0;
        cellNames42.PaddingLeft = 0;
        tablenew.AddCell(cellNames42);



        PdfPCell cellNames44 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames44.HorizontalAlignment = 0;
        cellNames44.Colspan = 2;
        cellNames44.Border = 0;
        cellNames44.PaddingLeft = 0;
        tablenew.AddCell(cellNames44);

        PdfPCell cellNames45 = new PdfPCell(new Phrase("4.   Name and address of principal employer...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames45.HorizontalAlignment = 0;
        cellNames45.Colspan = 5;
        cellNames45.Border = 0;
        cellNames45.PaddingLeft = 0;
        tablenew.AddCell(cellNames45);

        tablenew.AddCell(cellspace);
        tablenew.AddCell(cellspace);
        tablenew.AddCell(cellspace);

        PdfPCell cellNames46 = new PdfPCell(new Phrase("Sl.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames46.HorizontalAlignment = 1;
        cellNames46.Colspan = 0;
        cellNames46.Border = 0;
        cellNames46.PaddingLeft = 0;
        cellNames46.PaddingTop = 20;
        cellNames46.PaddingBottom = 20;
        cellNames46.BorderWidthLeft = 0.5f;
        cellNames46.BorderWidthRight = 0.9f;
        cellNames46.BorderWidthTop = 0.5f;
        cellNames46.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNames46);

        PdfPCell cellNames47 = new PdfPCell(new Phrase("Name of work man", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames47.HorizontalAlignment = 1;
        cellNames47.Colspan = 0;
        cellNames47.Border = 0;
        cellNames47.PaddingLeft = 0;
        cellNames47.PaddingLeft = 0;
        cellNames47.PaddingTop = 20;
        cellNames47.PaddingBottom = 20;
        cellNames47.BorderWidthLeft = 0;
        cellNames47.BorderWidthRight = 0.9f;
        cellNames47.BorderWidthTop = 0.5f;
        cellNames47.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNames47);


        PdfPCell cellNames48 = new PdfPCell(new Phrase("Father/husband name ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames48.HorizontalAlignment = 1;
        cellNames48.Colspan = 0;
        cellNames48.Border = 0;
        cellNames48.PaddingLeft = 0;
        cellNames48.PaddingLeft = 0;
        cellNames48.PaddingLeft = 0;
        cellNames48.PaddingTop = 20;
        cellNames48.PaddingBottom = 20;
        cellNames48.BorderWidthLeft = 0;
        cellNames48.BorderWidthRight = 0.9f;
        cellNames48.BorderWidthTop = 0.5f;
        cellNames48.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNames48);

        PdfPCell cellNames49 = new PdfPCell(new Phrase("Sex", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames49.HorizontalAlignment = 1;
        cellNames49.Colspan = 0;
        cellNames49.Border = 0;
        cellNames49.PaddingLeft = 0;
        cellNames49.PaddingLeft = 0;
        cellNames49.PaddingLeft = 0;
        cellNames49.PaddingTop = 20;
        cellNames49.PaddingBottom = 20;
        cellNames49.BorderWidthLeft = 0;
        cellNames49.BorderWidthRight = 0.9f;
        cellNames49.BorderWidthTop = 0.5f;
        cellNames49.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNames49);

        PdfPCell cellNames50 = new PdfPCell(new Phrase("Designation of nature of employment ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames50.HorizontalAlignment = 1;
        cellNames50.Colspan = 0;
        cellNames50.Border = 0;
        cellNames50.PaddingLeft = 0;
        cellNames50.PaddingLeft = 0;
        cellNames50.PaddingLeft = 0;
        cellNames50.PaddingTop = 20;
        cellNames50.PaddingBottom = 20;
        cellNames50.BorderWidthLeft = 0;
        cellNames50.BorderWidthRight = 0.9f;
        cellNames50.BorderWidthTop = 0.5f;
        cellNames50.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNames50);

        PdfPCell cellNames51 = new PdfPCell(new Phrase("Date on which overtime worked", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames51.HorizontalAlignment = 1;
        cellNames51.Colspan = 0;
        cellNames51.Border = 0;
        cellNames51.PaddingLeft = 0;
        cellNames51.PaddingLeft = 0;
        cellNames51.PaddingLeft = 0;
        cellNames51.PaddingTop = 20;
        cellNames51.PaddingBottom = 20;
        cellNames51.BorderWidthLeft = 0;
        cellNames51.BorderWidthRight = 0.9f;
        cellNames51.BorderWidthTop = 0.5f;
        cellNames51.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNames51);

        PdfPCell cellNames52 = new PdfPCell(new Phrase("Total over time worked or production in case of piece of rated ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames52.HorizontalAlignment = 1;
        cellNames52.Colspan = 0;
        cellNames52.Border = 0;
        cellNames52.PaddingLeft = 0;
        cellNames52.PaddingLeft = 0;
        cellNames52.PaddingLeft = 0;
        cellNames52.PaddingTop = 20;
        cellNames52.PaddingBottom = 20;
        cellNames52.BorderWidthLeft = 0;
        cellNames52.BorderWidthRight = 0.9f;
        cellNames52.BorderWidthTop = 0.5f;
        cellNames52.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNames52);

        PdfPCell cellNames53 = new PdfPCell(new Phrase("Normal rate of wages", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames53.HorizontalAlignment = 1;
        cellNames53.Colspan = 0;
        cellNames53.Border = 0;
        cellNames53.PaddingLeft = 0;
        cellNames53.PaddingLeft = 0;
        cellNames53.PaddingLeft = 0;
        cellNames53.PaddingTop = 20;
        cellNames53.PaddingBottom = 20;
        cellNames53.BorderWidthLeft = 0;
        cellNames53.BorderWidthRight = 0.9f;
        cellNames53.BorderWidthTop = 0.5f;
        cellNames53.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNames53);

        PdfPCell cellNames54 = new PdfPCell(new Phrase("Over time rate of wages", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames54.HorizontalAlignment = 1;
        cellNames54.Colspan = 0;
        cellNames54.Border = 0;
        cellNames54.PaddingLeft = 0;
        cellNames54.PaddingLeft = 0;
        cellNames54.PaddingLeft = 0;
        cellNames54.PaddingTop = 20;
        cellNames54.PaddingBottom = 20;
        cellNames54.BorderWidthLeft = 0;
        cellNames54.BorderWidthRight = 0.9f;
        cellNames54.BorderWidthTop = 0.5f;
        cellNames54.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNames54);

        PdfPCell cellNames55 = new PdfPCell(new Phrase("Over time earnings ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames55.HorizontalAlignment = 1;
        cellNames55.Colspan = 0;
        cellNames55.Border = 0;
        cellNames55.PaddingLeft = 0;
        cellNames55.PaddingTop = 20;
        cellNames55.PaddingBottom = 20;
        cellNames55.BorderWidthLeft = 0;
        cellNames55.BorderWidthRight = 0.9f;
        cellNames55.BorderWidthTop = 0.5f;
        cellNames55.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNames55);

        PdfPCell cellNames56 = new PdfPCell(new Phrase("Date on which overtime wagespaid", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames56.HorizontalAlignment = 1;
        cellNames56.Colspan = 0;
        cellNames56.Border = 0;
        cellNames56.PaddingLeft = 0;
        cellNames56.PaddingTop = 20;
        cellNames56.PaddingBottom = 20;
        cellNames56.BorderWidthLeft = 0;
        cellNames56.BorderWidthRight = 0.9f;
        cellNames56.BorderWidthTop = 0.5f;
        cellNames56.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNames56);


        PdfPCell cellNames57 = new PdfPCell(new Phrase("Remarks", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames57.HorizontalAlignment = 1;
        cellNames57.Colspan = 0;
        cellNames57.Border = 0;
        cellNames57.PaddingLeft = 0;
        cellNames57.PaddingLeft = 0;
        cellNames57.PaddingLeft = 0;
        cellNames57.PaddingTop = 20;
        cellNames57.PaddingBottom = 20;
        cellNames57.BorderWidthLeft = 0;
        cellNames57.BorderWidthRight = 0.9f;
        cellNames57.BorderWidthTop = 0.5f;
        cellNames57.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNames57);

        PdfPCell cellsNames47 = new PdfPCell(new Phrase("  1 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames47.HorizontalAlignment = 1;
        cellsNames47.Colspan = 0;
        cellsNames47.Border = 0;
        cellsNames47.PaddingLeft = 0;
        cellsNames47.PaddingLeft = 0;
        cellsNames47.PaddingLeft = 0;
        cellsNames47.PaddingTop = 10;
        cellsNames47.PaddingBottom = 10;
        cellsNames47.BorderWidthLeft = 0.9f;
        cellsNames47.BorderWidthRight = 0.9f;
        cellsNames47.BorderWidthTop = 0;
        cellsNames47.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNames47);

        PdfPCell cellsNamess47 = new PdfPCell(new Phrase("  2", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess47.HorizontalAlignment = 1;
        cellsNamess47.Colspan = 0;
        cellsNamess47.Border = 0;
        cellsNamess47.PaddingLeft = 0;
        cellsNamess47.PaddingTop = 10;
        cellsNamess47.PaddingBottom = 10;
        cellsNamess47.BorderWidthLeft = 0;
        cellsNamess47.BorderWidthRight = 0.9f;
        cellsNamess47.BorderWidthTop = 0;
        cellsNamess47.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNamess47);

        PdfPCell cellsNames48 = new PdfPCell(new Phrase("  3 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames48.HorizontalAlignment = 1;
        cellsNames48.Colspan = 0;
        cellsNames48.Border = 0;
        cellsNames48.PaddingLeft = 0;
        cellsNames48.PaddingTop = 10;
        cellsNames48.PaddingBottom = 10;
        cellsNames48.BorderWidthLeft = 0;
        cellsNames48.BorderWidthRight = 0.9f;
        cellsNames48.BorderWidthTop = 0;
        cellsNames48.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNames48);

        PdfPCell cellsNames49 = new PdfPCell(new Phrase("  4", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames49.HorizontalAlignment = 1;
        cellsNames49.Colspan = 0;
        cellsNames49.Border = 0;
        cellsNames49.PaddingLeft = 0;
        cellsNames49.PaddingTop = 10;
        cellsNames49.PaddingBottom = 10;
        cellsNames49.BorderWidthLeft = 0;
        cellsNames49.BorderWidthRight = 0.9f;
        cellsNames49.BorderWidthTop = 0;
        cellsNames49.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNames49);


        PdfPCell cellsNames50 = new PdfPCell(new Phrase("  5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames50.HorizontalAlignment = 1;
        cellsNames50.Colspan = 0;
        cellsNames50.Border = 0;
        cellsNames50.PaddingLeft = 0;
        cellsNames50.PaddingTop = 10;
        cellsNames50.PaddingBottom = 10;
        cellsNames50.BorderWidthLeft = 0;
        cellsNames50.BorderWidthRight = 0.9f;
        cellsNames50.BorderWidthTop = 0;
        cellsNames50.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNames50);

        PdfPCell cellsNames51 = new PdfPCell(new Phrase("  6", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames51.HorizontalAlignment = 1;
        cellsNames51.Colspan = 0;
        cellsNames51.Border = 0;
        cellsNames51.PaddingLeft = 0;
        cellsNames51.PaddingTop = 10;
        cellsNames51.PaddingBottom = 10;
        cellsNames51.BorderWidthLeft = 0;
        cellsNames51.BorderWidthRight = 0.9f;
        cellsNames51.BorderWidthTop = 0;
        cellsNames51.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNames51);



        PdfPCell cellsNames52 = new PdfPCell(new Phrase("  7 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames52.HorizontalAlignment = 1;
        cellsNames52.Colspan = 0;
        cellsNames52.Border = 0;
        cellsNames52.PaddingLeft = 0;
        cellsNames52.PaddingTop = 10;
        cellsNames52.PaddingBottom = 10;
        cellsNames52.BorderWidthLeft = 0;
        cellsNames52.BorderWidthRight = 0.9f;
        cellsNames52.BorderWidthTop = 0;
        cellsNames52.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNames52);

        PdfPCell cellsNames53 = new PdfPCell(new Phrase("  8", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames53.HorizontalAlignment = 1;
        cellsNames53.Colspan = 0;
        cellsNames53.Border = 0;
        cellsNames53.PaddingLeft = 0;
        cellsNames53.PaddingTop = 10;
        cellsNames53.PaddingBottom = 10;
        cellsNames53.BorderWidthLeft = 0;
        cellsNames53.BorderWidthRight = 0.9f;
        cellsNames53.BorderWidthTop = 0;
        cellsNames53.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNames53);



        PdfPCell cellsNames54 = new PdfPCell(new Phrase("  9", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames54.HorizontalAlignment = 1;
        cellsNames54.Colspan = 0;
        cellsNames54.Border = 0;
        cellsNames54.PaddingLeft = 0;
        cellsNames54.PaddingTop = 10;
        cellsNames54.PaddingBottom = 10;
        cellsNames54.BorderWidthLeft = 0;
        cellsNames54.BorderWidthRight = 0.9f;
        cellsNames54.BorderWidthTop = 0;
        cellsNames54.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNames54);



        PdfPCell cellsNames55 = new PdfPCell(new Phrase("  10", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames55.HorizontalAlignment = 1;
        cellsNames55.Colspan = 0;
        cellsNames55.Border = 0;
        cellsNames55.PaddingLeft = 0;
        cellsNames55.PaddingTop = 10;
        cellsNames55.PaddingBottom = 10;
        cellsNames55.BorderWidthLeft = 0;
        cellsNames55.BorderWidthRight = 0.9f;
        cellsNames55.BorderWidthTop = 0;
        cellsNames55.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNames55);

        PdfPCell cellsNames56 = new PdfPCell(new Phrase("  11", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames56.HorizontalAlignment = 1;
        cellsNames56.Colspan = 0;
        cellsNames56.Border = 0;
        cellsNames56.PaddingLeft = 0;
        cellsNames56.PaddingTop = 10;
        cellsNames56.PaddingBottom = 10;
        cellsNames56.BorderWidthLeft = 0;
        cellsNames56.BorderWidthRight = 0.9f;
        cellsNames56.BorderWidthTop = 0;
        cellsNames56.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNames56);



        PdfPCell cellsNames57 = new PdfPCell(new Phrase("  12", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames57.HorizontalAlignment = 1;
        cellsNames57.Colspan = 0;
        cellsNames57.Border = 0;
        cellsNames57.PaddingLeft = 0;
        cellsNames57.PaddingTop = 10;
        cellsNames57.PaddingBottom = 10;
        cellsNames57.BorderWidthLeft = 0;
        cellsNames57.BorderWidthRight = 0.9f;
        cellsNames57.BorderWidthTop = 0;
        cellsNames57.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNames57);


        document.Add(tablenew);



        #endregion Basic Information of the Employee


        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "FormXXIII.pdf";


        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;

        //}
    }

    protected void BtnformXVIII_Click(object sender, EventArgs e)
    {




        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tableregister = new PdfPTable(16);
        tableregister.TotalWidth = 950f;
        tableregister.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tableregister.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 16;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell cellHead = new PdfPCell(new Phrase("Form-XVIII ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 16;
        cellHead.Border = 0;

        tableregister.AddCell(cellHead);

        PdfPCell cellMUSTER = new PdfPCell(new Phrase("FORM OF REGISTER OF WAGES-CUM-MUSTER ROLL", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 13, Font.BOLD, BaseColor.BLACK)));
        cellMUSTER.HorizontalAlignment = 1;
        cellMUSTER.Colspan = 16;
        cellMUSTER.Border = 0;
        tableregister.AddCell(cellMUSTER);

        PdfPCell cellreturns1234 = new PdfPCell(new Phrase("[Rule 78(1)(a)(i)]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellreturns1234.HorizontalAlignment = 1;
        cellreturns1234.Colspan = 16;
        cellreturns1234.Border = 0;
        tableregister.AddCell(cellreturns1234);

        tableregister.AddCell(cellspace);
        tableregister.AddCell(cellspace);
        tableregister.AddCell(cellspace);






        PdfPCell celladdressofc = new PdfPCell(new Phrase("Name and address of contractor..................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celladdressofc.HorizontalAlignment = 0;
        celladdressofc.Colspan = 7;
        celladdressofc.Border = 0;
        celladdressofc.PaddingLeft = 0;
        tableregister.AddCell(celladdressofc);

        PdfPCell cellNames043 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNames043.HorizontalAlignment = 0;
        cellNames043.Colspan = 2;
        cellNames043.Border = 0;
        cellNames043.PaddingLeft = 0;
        tableregister.AddCell(cellNames043);

        PdfPCell celladdressofhus = new PdfPCell(new Phrase("Name and address of establishment in/under which contract is carried on...........................................................................................................................Name and address of principal employer...................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celladdressofhus.HorizontalAlignment = 0;
        celladdressofhus.Colspan = 7;
        celladdressofhus.Border = 0;
        celladdressofhus.PaddingLeft = 0;
        tableregister.AddCell(celladdressofhus);

        tableregister.AddCell(cellspace);

        PdfPCell cellNatures = new PdfPCell(new Phrase("Nature and location of work................................................................................................................... ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNatures.HorizontalAlignment = 0;
        cellNatures.Colspan = 7;
        cellNatures.Border = 0;
        cellNatures.PaddingLeft = 0;
        tableregister.AddCell(cellNatures);

        PdfPCell cellPeriodtable = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellPeriodtable.HorizontalAlignment = 0;
        cellPeriodtable.Colspan = 2;
        cellPeriodtable.Border = 0;
        cellPeriodtable.PaddingLeft = 0;
        tableregister.AddCell(cellPeriodtable);


        PdfPCell cellMonthlywage = new PdfPCell(new Phrase("Wage Period: Monthly................................................................................................................From...................................TO.................................. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellMonthlywage.HorizontalAlignment = 0;
        cellMonthlywage.Colspan = 7;
        cellMonthlywage.Border = 0;
        cellMonthlywage.PaddingLeft = 0;
        tableregister.AddCell(cellMonthlywage);

        tableregister.AddCell(cellspace);
        tableregister.AddCell(cellspace);
        tableregister.AddCell(cellspace);







        PdfPCell cellemptys1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellemptys1.HorizontalAlignment = 0;
        cellemptys1.Colspan = 7;

        tableregister.AddCell(cellemptys1);



        PdfPCell cellemptys2 = new PdfPCell(new Phrase("Amount of wages earned", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellemptys2.HorizontalAlignment = 1;
        cellemptys2.Colspan = 4;

        tableregister.AddCell(cellemptys2);

        PdfPCell cellemptys3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellemptys3.HorizontalAlignment = 0;
        cellemptys3.Colspan = 5;

        tableregister.AddCell(cellemptys3);

        PdfPCell cellSlNo42 = new PdfPCell(new Phrase("Sl.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSlNo42.HorizontalAlignment = 1;
        cellSlNo42.Colspan = 0;
        tableregister.AddCell(cellSlNo42);

        PdfPCell cellworkmans = new PdfPCell(new Phrase("SI. No in the Name of workman", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellworkmans.HorizontalAlignment = 1;
        cellworkmans.Colspan = 0;

        tableregister.AddCell(cellworkmans);

        PdfPCell cellSerialthe = new PdfPCell(new Phrase("Name of the employee ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSerialthe.HorizontalAlignment = 1;
        cellSerialthe.Colspan = 0;
        tableregister.AddCell(cellSerialthe);

        PdfPCell cellworkdone = new PdfPCell(new Phrase("Designation/of nature of work done", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellworkdone.HorizontalAlignment = 1;
        cellworkdone.Colspan = 0;
        tableregister.AddCell(cellworkdone);

        PdfPCell celldaysworked = new PdfPCell(new Phrase("Daily attenda units worked ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldaysworked.HorizontalAlignment = 1;
        celldaysworked.Colspan = 0;

        tableregister.AddCell(celldaysworked);

        PdfPCell cellunitwork = new PdfPCell(new Phrase("Total attendance unit of work done", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellunitwork.HorizontalAlignment = 1;
        cellunitwork.Colspan = 0;

        tableregister.AddCell(cellunitwork);

        PdfPCell cellratedaily = new PdfPCell(new Phrase("daily rate of wages/piece rate ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellratedaily.HorizontalAlignment = 1;
        cellratedaily.Colspan = 0;

        tableregister.AddCell(cellratedaily);

        PdfPCell cellBasicwages = new PdfPCell(new Phrase(" Basic wages", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellBasicwages.HorizontalAlignment = 1;
        cellBasicwages.Colspan = 0;

        tableregister.AddCell(cellBasicwages);

        PdfPCell cellDearnessallo = new PdfPCell(new Phrase("Dearness allowancess", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDearnessallo.HorizontalAlignment = 1;
        cellDearnessallo.Colspan = 0;
        tableregister.AddCell(cellDearnessallo);

        PdfPCell cellOvetimework = new PdfPCell(new Phrase("Overtime ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellOvetimework.HorizontalAlignment = 1;
        cellOvetimework.Colspan = 0;
        tableregister.AddCell(cellOvetimework);

        PdfPCell cellOthercash = new PdfPCell(new Phrase("Other cash payment (Narture of payment to be indicated)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellOthercash.HorizontalAlignment = 1;
        cellOthercash.Colspan = 0;

        tableregister.AddCell(cellOthercash);

        PdfPCell cellTotalpayment = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellTotalpayment.HorizontalAlignment = 1;
        cellTotalpayment.Colspan = 0;

        tableregister.AddCell(cellTotalpayment);


        PdfPCell cellDeactionsindicate = new PdfPCell(new Phrase("Deactions if any(indicate nature)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDeactionsindicate.HorizontalAlignment = 1;
        cellDeactionsindicate.Colspan = 0;

        //cellDeactions.BorderWidthBottom = 0.5f;
        tableregister.AddCell(cellDeactionsindicate);

        PdfPCell cellNetpaid = new PdfPCell(new Phrase("Net amount paid ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNetpaid.HorizontalAlignment = 1;
        cellNetpaid.Colspan = 0;

        tableregister.AddCell(cellNetpaid);

        PdfPCell cellthumbimp = new PdfPCell(new Phrase("Signature/thumb impression of workman", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellthumbimp.HorizontalAlignment = 1;
        cellthumbimp.Colspan = 0;

        tableregister.AddCell(cellthumbimp);

        PdfPCell cellinitialof = new PdfPCell(new Phrase("initial of contractors or his representative", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellinitialof.HorizontalAlignment = 1;
        cellinitialof.Colspan = 0;

        tableregister.AddCell(cellinitialof);





        PdfPCell cellemp3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellemp3.HorizontalAlignment = 0;
        cellemp3.Colspan = 4;

        tableregister.AddCell(cellemp3);



        PdfPCell cellemp2 = new PdfPCell(new Phrase("12.35 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellemp2.HorizontalAlignment = 1;
        cellemp2.Colspan = 1;

        tableregister.AddCell(cellemp2);




        PdfPCell cellemp1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellemp1.HorizontalAlignment = 0;
        cellemp1.Colspan = 11;

        tableregister.AddCell(cellemp1);




        PdfPCell cellsNames1 = new PdfPCell(new Phrase("  1 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames1.HorizontalAlignment = 1;
        cellsNames1.Colspan = 0;
        cellsNames1.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames1);

        PdfPCell cellsNames2 = new PdfPCell(new Phrase("  2", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames2.HorizontalAlignment = 1;
        cellsNames2.Colspan = 0;
        cellsNames2.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames2);

        PdfPCell cellsNames3 = new PdfPCell(new Phrase("  3 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames3.HorizontalAlignment = 1;
        cellsNames3.Colspan = 0;
        cellsNames3.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames3);

        PdfPCell cellsNames4 = new PdfPCell(new Phrase("  4", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames4.HorizontalAlignment = 1;
        cellsNames4.Colspan = 0;
        cellsNames4.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames4);

        PdfPCell cellsNames5 = new PdfPCell(new Phrase("  5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames5.HorizontalAlignment = 1;
        cellsNames5.Colspan = 0;
        cellsNames5.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames5);

        PdfPCell cellsNames6 = new PdfPCell(new Phrase("  6", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames6.HorizontalAlignment = 1;
        cellsNames6.Colspan = 0;
        cellsNames6.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames6);

        PdfPCell cellsNames7 = new PdfPCell(new Phrase("  7 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames7.HorizontalAlignment = 1;
        cellsNames7.Colspan = 0;
        cellsNames7.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames7);

        PdfPCell cellsNames8 = new PdfPCell(new Phrase("  8", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames8.HorizontalAlignment = 1;
        cellsNames8.Colspan = 0;
        cellsNames8.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames8);

        PdfPCell cellsNames9 = new PdfPCell(new Phrase("  9", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames9.HorizontalAlignment = 1;
        cellsNames9.Colspan = 0;
        cellsNames9.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames9);

        PdfPCell cellsNames10 = new PdfPCell(new Phrase("  10", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames10.HorizontalAlignment = 1;
        cellsNames10.Colspan = 0;
        cellsNames10.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames10);

        PdfPCell cellsNames11 = new PdfPCell(new Phrase("  11", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames11.HorizontalAlignment = 1;
        cellsNames11.Colspan = 0;
        cellsNames11.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames11);

        PdfPCell cellsNames12 = new PdfPCell(new Phrase("  12", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames12.HorizontalAlignment = 1;
        cellsNames12.Colspan = 0;
        cellsNames12.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames12);


        PdfPCell cellsNames13 = new PdfPCell(new Phrase("  13", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames13.HorizontalAlignment = 1;
        cellsNames13.Colspan = 0;
        cellsNames13.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames13);

        PdfPCell cellsNames14 = new PdfPCell(new Phrase("  14", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames14.HorizontalAlignment = 1;
        cellsNames14.Colspan = 0;
        cellsNames14.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames14);

        PdfPCell cellsNames15 = new PdfPCell(new Phrase("  15", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames15.HorizontalAlignment = 1;
        cellsNames15.Colspan = 0;
        cellsNames15.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames15);

        PdfPCell cellsNames16 = new PdfPCell(new Phrase("  16", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNames16.HorizontalAlignment = 1;
        cellsNames16.Colspan = 0;
        cellsNames16.PaddingBottom = 5f;
        tableregister.AddCell(cellsNames16);

        document.Add(tableregister);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "FormXVIII.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;

        //}
    }

    protected void BtnformVII_Click(object sender, EventArgs e)
    {


        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablenewa1 = new PdfPTable(12);
        tablenewa1.TotalWidth = 500f;
        tablenewa1.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tablenewa1.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 12;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell cellHead = new PdfPCell(new Phrase(" [FORM VII] ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 12;
        cellHead.Border = 0;

        tablenewa1.AddCell(cellHead);

        PdfPCell cellNOTICEs = new PdfPCell(new Phrase(" APPLICATIONS FOR RENEWAL OF LICENCE", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 13, Font.BOLD, BaseColor.BLACK)));
        cellNOTICEs.HorizontalAlignment = 1;
        cellNOTICEs.Colspan = 12;
        cellNOTICEs.Border = 0;

        tablenewa1.AddCell(cellNOTICEs);

        PdfPCell cellRule29 = new PdfPCell(new Phrase(" [Rule 29(2)]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellRule29.HorizontalAlignment = 1;
        cellRule29.Colspan = 12;
        cellRule29.Border = 0;
        tablenewa1.AddCell(cellRule29);

        tablenewa1.AddCell(cellspace);
        tablenewa1.AddCell(cellspace);

        PdfPCell cellShris = new PdfPCell(new Phrase("1.  Name and address of the contractor", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellShris.HorizontalAlignment = 0;
        cellShris.Colspan = 12;
        cellShris.Border = 0;
        cellShris.PaddingLeft = 0;
        tablenewa1.AddCell(cellShris);

        tablenewa1.AddCell(cellspace);


        PdfPCell cellTOli = new PdfPCell(new Phrase("2.  Number and date of the license. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellTOli.HorizontalAlignment = 0;
        cellTOli.Colspan = 12;
        cellTOli.Border = 0;
        cellTOli.PaddingLeft = 0;
        tablenewa1.AddCell(cellTOli);

        tablenewa1.AddCell(cellspace);

        PdfPCell cellSignaturdate = new PdfPCell(new Phrase("3.  Date of expiry of the previous license", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSignaturdate.HorizontalAlignment = 0;
        cellSignaturdate.Colspan = 12;
        cellSignaturdate.Border = 0;
        cellSignaturdate.PaddingLeft = 0;
        tablenewa1.AddCell(cellSignaturdate);

        tablenewa1.AddCell(cellspace);

        PdfPCell cellWhetherthe = new PdfPCell(new Phrase("4.  Whether the license of the contractor was suspended or revoked.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellWhetherthe.HorizontalAlignment = 0;
        cellWhetherthe.Colspan = 12;
        cellWhetherthe.Border = 0;
        cellWhetherthe.PaddingLeft = 0;
        tablenewa1.AddCell(cellWhetherthe);

        tablenewa1.AddCell(cellspace);

        PdfPCell cellBank = new PdfPCell(new Phrase("1[5. Name of the Bank, number and date of the demand draft enclosed.Date of receipt of the application with demand draft number and date.]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellBank.HorizontalAlignment = 0;
        cellBank.Colspan = 12;
        cellBank.Border = 0;
        cellBank.PaddingLeft = 0;
        tablenewa1.AddCell(cellBank);

        tablenewa1.AddCell(cellspace);
        tablenewa1.AddCell(cellspace);

        PdfPCell cellPlace = new PdfPCell(new Phrase("Place:…………………….. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellPlace.HorizontalAlignment = 0;
        cellPlace.Colspan = 12;
        cellPlace.Border = 0;
        cellPlace.PaddingLeft = 0;
        tablenewa1.AddCell(cellPlace);

        PdfPCell cellPlaces = new PdfPCell(new Phrase("Date:…………………….. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellPlaces.HorizontalAlignment = 0;
        cellPlaces.Colspan = 6;
        cellPlaces.Border = 0;
        cellPlaces.PaddingLeft = 0;
        tablenewa1.AddCell(cellPlaces);

        PdfPCell celldatess = new PdfPCell(new Phrase("Signature of the Applicant ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldatess.HorizontalAlignment = 0;
        celldatess.Colspan = 6;
        celldatess.Border = 0;
        celldatess.PaddingLeft = 0;
        tablenewa1.AddCell(celldatess);

        tablenewa1.AddCell(cellspace);
        tablenewa1.AddCell(cellspace);

        PdfPCell cellfilled = new PdfPCell(new Phrase("(To be filled in the Office of the Licensing Officer) ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfilled.HorizontalAlignment = 0;
        cellfilled.Colspan = 12;
        cellfilled.Border = 0;
        cellfilled.PaddingLeft = 50;
        tablenewa1.AddCell(cellfilled);


        tablenewa1.AddCell(cellspace);
        tablenewa1.AddCell(cellspace);
        tablenewa1.AddCell(cellspace);
        tablenewa1.AddCell(cellspace);

        PdfPCell cellapplication = new PdfPCell(new Phrase("Date of receipt of the application with Treasury Receipt No. and date. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellapplication.HorizontalAlignment = 0;
        cellapplication.Colspan = 6;
        cellapplication.Border = 0;

        tablenewa1.AddCell(cellapplication);

        PdfPCell cellreceipt = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellreceipt.HorizontalAlignment = 0;
        cellreceipt.Colspan = 6;
        cellreceipt.Border = 0;
        cellreceipt.PaddingLeft = 50;
        tablenewa1.AddCell(cellreceipt);

        tablenewa1.AddCell(cellspace);
        tablenewa1.AddCell(cellspace);
        tablenewa1.AddCell(cellspace);
        tablenewa1.AddCell(cellspace);


        PdfPCell cellreceipts = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellreceipts.HorizontalAlignment = 0;
        cellreceipts.Colspan = 6;
        cellreceipts.Border = 0;
        cellreceipts.PaddingLeft = 50;
        tablenewa1.AddCell(cellreceipts);

        PdfPCell cellLicensing = new PdfPCell(new Phrase(" Signature of the Licensing officer ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellLicensing.HorizontalAlignment = 0;
        cellLicensing.Colspan = 6;
        cellLicensing.Border = 0;

        tablenewa1.AddCell(cellLicensing);

        tablenewa1.AddCell(cellspace);
        tablenewa1.AddCell(cellspace);

        document.Add(tablenewa1);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "FormVII.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;

        //}
    }

    protected void BtnformXXI_Click1(object sender, EventArgs e)
    {



        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablenew7 = new PdfPTable(12);
        tablenew7.TotalWidth = 900f;
        tablenew7.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tablenew7.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 12;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell cellHead = new PdfPCell(new Phrase("FORM-XXI ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 12;
        cellHead.Border = 0;

        tablenew7.AddCell(cellHead);

        PdfPCell cellreturn123 = new PdfPCell(new Phrase("REGISTER OF FINES", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.BLACK)));
        cellreturn123.HorizontalAlignment = 1;
        cellreturn123.Colspan = 12;
        cellreturn123.Border = 0;

        tablenew7.AddCell(cellreturn123);

        PdfPCell cellreturns1234 = new PdfPCell(new Phrase("[Rule 78(1)(a)(ii)]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 3, Font.BOLD, BaseColor.BLACK)));
        cellreturns1234.HorizontalAlignment = 1;
        cellreturns1234.Colspan = 12;
        cellreturns1234.Border = 0;
        tablenew7.AddCell(cellreturns1234);

        tablenew7.AddCell(cellspace);
        tablenew7.AddCell(cellspace);

        PdfPCell cellNames40s = new PdfPCell(new Phrase("1.Name and address of contractor...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames40s.HorizontalAlignment = 0;
        cellNames40s.Colspan = 5;
        cellNames40s.Border = 0;
        cellNames40s.PaddingLeft = 0;
        tablenew7.AddCell(cellNames40s);

        PdfPCell cellNames43s = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames43s.HorizontalAlignment = 0;
        cellNames43s.Colspan = 2;
        cellNames43s.Border = 0;
        cellNames43s.PaddingLeft = 0;
        tablenew7.AddCell(cellNames43s);

        PdfPCell cellNames41s = new PdfPCell(new Phrase("2.Name and address of establishment in/under	which contract is carried on...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames41s.HorizontalAlignment = 0;
        cellNames41s.Colspan = 5;
        cellNames41s.Border = 0;
        cellNames41s.PaddingLeft = 0;
        tablenew7.AddCell(cellNames41s);

        tablenew7.AddCell(cellspace);

        PdfPCell cellNames42s = new PdfPCell(new Phrase("3.   Nature and location of work...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames42s.HorizontalAlignment = 0;
        cellNames42s.Colspan = 5;
        cellNames42s.Border = 0;
        cellNames42s.PaddingLeft = 0;
        tablenew7.AddCell(cellNames42s);

        PdfPCell cellNames44s = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames44s.HorizontalAlignment = 0;
        cellNames44s.Colspan = 2;
        cellNames44s.Border = 0;
        cellNames44s.PaddingLeft = 0;
        tablenew7.AddCell(cellNames44s);

        PdfPCell cellNames45s = new PdfPCell(new Phrase("4.   Name and address of principal employer...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames45s.HorizontalAlignment = 0;
        cellNames45s.Colspan = 5;
        cellNames45s.Border = 0;
        cellNames45s.PaddingLeft = 0;
        tablenew7.AddCell(cellNames45s);

        tablenew7.AddCell(cellspace);
        tablenew7.AddCell(cellspace);
        tablenew7.AddCell(cellspace);

        PdfPCell cellNames46s = new PdfPCell(new Phrase("Sl.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames46s.HorizontalAlignment = 1;
        cellNames46s.Colspan = 0;
        tablenew7.AddCell(cellNames46s);

        PdfPCell cellNames47s = new PdfPCell(new Phrase("Name of workman", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames47s.HorizontalAlignment = 1;
        cellNames47s.Colspan = 0;
        tablenew7.AddCell(cellNames47s);

        PdfPCell cellNames48s = new PdfPCell(new Phrase("Father's/husband's name ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames48s.HorizontalAlignment = 1;
        cellNames48s.Colspan = 0;
        tablenew7.AddCell(cellNames48s);

        PdfPCell cellNames49s = new PdfPCell(new Phrase("Designation of nature of employment", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames49s.HorizontalAlignment = 1;
        cellNames49s.Colspan = 0;
        tablenew7.AddCell(cellNames49s);

        PdfPCell cellNames50s = new PdfPCell(new Phrase("Act/Omission for which line imposed ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames50s.HorizontalAlignment = 1;
        cellNames50s.Colspan = 0;
        tablenew7.AddCell(cellNames50s);

        PdfPCell cellNames51s = new PdfPCell(new Phrase("Date of offence", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames51s.HorizontalAlignment = 1;
        cellNames51s.Colspan = 0;
        tablenew7.AddCell(cellNames51s);

        PdfPCell cellNames52s = new PdfPCell(new Phrase("Whether workman showned cause against fine ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames52s.HorizontalAlignment = 1;
        cellNames52s.Colspan = 0;
        tablenew7.AddCell(cellNames52s);

        PdfPCell cellNames53 = new PdfPCell(new Phrase("Name of person in whose presence employee's explaination has heard", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames53.HorizontalAlignment = 1;
        cellNames53.Colspan = 0;
        tablenew7.AddCell(cellNames53);

        PdfPCell cellNames54s = new PdfPCell(new Phrase("Wage periods and wages payable", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames54s.HorizontalAlignment = 1;
        cellNames54s.Colspan = 0;
        tablenew7.AddCell(cellNames54s);

        PdfPCell cellNames55s = new PdfPCell(new Phrase("Amount of fine imposed ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames55s.HorizontalAlignment = 1;
        cellNames55s.Colspan = 0;
        tablenew7.AddCell(cellNames55s);

        PdfPCell cellNames56s = new PdfPCell(new Phrase("Date on which fine realised", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames56s.HorizontalAlignment = 1;
        cellNames56s.Colspan = 0;
        tablenew7.AddCell(cellNames56s);

        PdfPCell cellNames57s = new PdfPCell(new Phrase("Remarks", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames57s.HorizontalAlignment = 1;
        cellNames57s.Colspan = 0;
        tablenew7.AddCell(cellNames57s);

        PdfPCell cellsNames47s = new PdfPCell(new Phrase("  1 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames47s.HorizontalAlignment = 1;
        cellsNames47s.Colspan = 0;
        tablenew7.AddCell(cellsNames47s);

        PdfPCell cellsNamess47s = new PdfPCell(new Phrase("  2", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess47s.HorizontalAlignment = 1;
        cellsNamess47s.Colspan = 0;
        tablenew7.AddCell(cellsNamess47s);

        PdfPCell cellsNames48s = new PdfPCell(new Phrase("  3 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames48s.HorizontalAlignment = 1;
        cellsNames48s.Colspan = 0;
        cellsNames48s.Border = 0;
        cellsNames48s.PaddingLeft = 0;
        cellsNames48s.PaddingTop = 10;
        cellsNames48s.PaddingBottom = 10;
        cellsNames48s.BorderWidthLeft = 0;
        cellsNames48s.BorderWidthRight = 0.9f;
        cellsNames48s.BorderWidthTop = 0;
        cellsNames48s.BorderWidthBottom = 0.5f;
        tablenew7.AddCell(cellsNames48s);

        PdfPCell cellsNames49s = new PdfPCell(new Phrase("  4", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames49s.HorizontalAlignment = 1;
        cellsNames49s.Colspan = 0;
        tablenew7.AddCell(cellsNames49s);

        PdfPCell cellsNames50s = new PdfPCell(new Phrase("  5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames50s.HorizontalAlignment = 1;
        cellsNames50s.Colspan = 0;
        tablenew7.AddCell(cellsNames50s);

        PdfPCell cellsNames51s = new PdfPCell(new Phrase("  6", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames51s.HorizontalAlignment = 1;
        cellsNames51s.Colspan = 0;
        tablenew7.AddCell(cellsNames51s);

        PdfPCell cellsNames52s = new PdfPCell(new Phrase("  7 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames52s.HorizontalAlignment = 1;
        cellsNames52s.Colspan = 0;
        tablenew7.AddCell(cellsNames52s);

        PdfPCell cellsNames53s = new PdfPCell(new Phrase("  8", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames53s.HorizontalAlignment = 1;
        cellsNames53s.Colspan = 0;
        tablenew7.AddCell(cellsNames53s);

        PdfPCell cellsNames54s = new PdfPCell(new Phrase("  9", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames54s.HorizontalAlignment = 1;
        cellsNames54s.Colspan = 0;
        tablenew7.AddCell(cellsNames54s);

        PdfPCell cellsNames55s = new PdfPCell(new Phrase("  10", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames55s.HorizontalAlignment = 1;
        cellsNames55s.Colspan = 0;
        tablenew7.AddCell(cellsNames55s);

        PdfPCell cellsNames56s = new PdfPCell(new Phrase("  11", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames56s.HorizontalAlignment = 1;
        cellsNames56s.Colspan = 0;
        tablenew7.AddCell(cellsNames56s);

        PdfPCell cellsNames57s = new PdfPCell(new Phrase("  12", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames57s.HorizontalAlignment = 1;
        cellsNames57s.Colspan = 0;
        tablenew7.AddCell(cellsNames57s);

        document.Add(tablenew7);

        #endregion Basic Information of the Employee


        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);





        string filename = "FormXXI.pdf";


        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //    }
    }

    protected void BtnformXXII_Click(object sender, EventArgs e)
    {

        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablenew8 = new PdfPTable(11);
        tablenew8.TotalWidth = 900f;
        tablenew8.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, };
        tablenew8.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 12;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;




        PdfPCell cellHead = new PdfPCell(new Phrase("FORM-XXII ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 12;
        cellHead.Border = 0;

        tablenew8.AddCell(cellHead);






        PdfPCell cellreturn123s = new PdfPCell(new Phrase("REGISTER OF ADVANCES", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.BLACK)));
        cellreturn123s.HorizontalAlignment = 1;
        cellreturn123s.Colspan = 12;
        cellreturn123s.Border = 0;

        tablenew8.AddCell(cellreturn123s);



        PdfPCell cellreturnrule = new PdfPCell(new Phrase("[Rule 78(1)(a)(iii)]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 3, Font.BOLD, BaseColor.BLACK)));
        cellreturnrule.HorizontalAlignment = 1;
        cellreturnrule.Colspan = 12;
        cellreturnrule.Border = 0;
        tablenew8.AddCell(cellreturnrule);

        tablenew8.AddCell(cellspace);
        tablenew8.AddCell(cellspace);


        PdfPCell cellNames4s2 = new PdfPCell(new Phrase("1.Name and address of contractor...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames4s2.HorizontalAlignment = 0;
        cellNames4s2.Colspan = 5;
        cellNames4s2.Border = 0;
        cellNames4s2.PaddingLeft = 0;
        tablenew8.AddCell(cellNames4s2);



        PdfPCell cellNames4s1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames4s1.HorizontalAlignment = 0;
        cellNames4s1.Colspan = 2;
        cellNames4s1.Border = 0;
        cellNames4s1.PaddingLeft = 0;
        tablenew8.AddCell(cellNames4s1);




        PdfPCell cellNames4s3 = new PdfPCell(new Phrase("2.Name and address of establishment in/under	which contract is carried on...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames4s3.HorizontalAlignment = 0;
        cellNames4s3.Colspan = 5;
        cellNames4s3.Border = 0;
        cellNames4s3.PaddingLeft = 0;
        tablenew8.AddCell(cellNames4s3);

        tablenew8.AddCell(cellspace);



        PdfPCell cellNames4s4 = new PdfPCell(new Phrase("3.   Nature and location of work...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames4s4.HorizontalAlignment = 0;
        cellNames4s4.Colspan = 5;
        cellNames4s4.Border = 0;
        cellNames4s4.PaddingLeft = 0;
        tablenew8.AddCell(cellNames4s4);



        PdfPCell cellNames4s5 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames4s5.HorizontalAlignment = 0;
        cellNames4s5.Colspan = 2;
        cellNames4s5.Border = 0;
        cellNames4s5.PaddingLeft = 0;
        tablenew8.AddCell(cellNames4s5);

        PdfPCell cellNames4s6 = new PdfPCell(new Phrase("4.   Name and address of principal employer...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames4s6.HorizontalAlignment = 0;
        cellNames4s6.Colspan = 5;
        cellNames4s6.Border = 0;
        cellNames4s6.PaddingLeft = 0;
        tablenew8.AddCell(cellNames4s6);


        tablenew8.AddCell(cellspace);
        tablenew8.AddCell(cellspace);
        tablenew8.AddCell(cellspace);

        PdfPCell cellNames4s7 = new PdfPCell(new Phrase("Sl.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames4s7.HorizontalAlignment = 1;
        cellNames4s7.Colspan = 0;
        tablenew8.AddCell(cellNames4s7);

        PdfPCell cellNames4s8 = new PdfPCell(new Phrase("Name of workman", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames4s8.HorizontalAlignment = 1;
        cellNames4s8.Colspan = 0;
        tablenew8.AddCell(cellNames4s8);

        PdfPCell cellNames4s9 = new PdfPCell(new Phrase("Father's/husband's name ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames4s9.HorizontalAlignment = 1;
        cellNames4s9.Colspan = 0;
        tablenew8.AddCell(cellNames4s9);

        PdfPCell cellNames4s0 = new PdfPCell(new Phrase("nature of employment/Designation", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames4s0.HorizontalAlignment = 1;
        cellNames4s0.Colspan = 0;
        tablenew8.AddCell(cellNames4s0);

        PdfPCell cellNames5s0 = new PdfPCell(new Phrase("Wage periods and wages payable ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames5s0.HorizontalAlignment = 1;
        cellNames5s0.Colspan = 0;
        tablenew8.AddCell(cellNames5s0);

        PdfPCell cellNames5s1 = new PdfPCell(new Phrase("Date and amount of advance given", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames5s1.HorizontalAlignment = 1;
        cellNames5s1.Colspan = 0;
        tablenew8.AddCell(cellNames5s1);

        PdfPCell cellNames5s2 = new PdfPCell(new Phrase("Purpose (S) for which advance made ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames5s2.HorizontalAlignment = 1;
        cellNames5s2.Colspan = 0;
        tablenew8.AddCell(cellNames5s2);

        PdfPCell cellNames5s3 = new PdfPCell(new Phrase("No.of instalments by which advance to be repaid", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames5s3.HorizontalAlignment = 1;
        cellNames5s3.Colspan = 0;
        tablenew8.AddCell(cellNames5s3);

        PdfPCell cellNames5s4 = new PdfPCell(new Phrase("Date and amount of each instalment repaid ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames5s4.HorizontalAlignment = 1;
        cellNames5s4.Colspan = 0;
        tablenew8.AddCell(cellNames5s4);

        PdfPCell cellNames5s5 = new PdfPCell(new Phrase("Date on which last instalment was repaid", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames5s5.HorizontalAlignment = 1;
        cellNames5s5.Colspan = 0;
        tablenew8.AddCell(cellNames5s5);

        PdfPCell cellNames5s6 = new PdfPCell(new Phrase("Remarks", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNames5s6.HorizontalAlignment = 1;
        cellNames5s6.Colspan = 0;
        tablenew8.AddCell(cellNames5s6);

        PdfPCell cellsNames4sa = new PdfPCell(new Phrase("  1 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames4sa.HorizontalAlignment = 1;
        cellsNames4sa.Colspan = 0;
        tablenew8.AddCell(cellsNames4sa);

        PdfPCell cellsNamess4sb = new PdfPCell(new Phrase("  2", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess4sb.HorizontalAlignment = 1;
        cellsNamess4sb.Colspan = 0;
        tablenew8.AddCell(cellsNamess4sb);

        PdfPCell cellsNames4sc = new PdfPCell(new Phrase("  3 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames4sc.HorizontalAlignment = 1;
        cellsNames4sc.Colspan = 0;
        tablenew8.AddCell(cellsNames4sc);

        PdfPCell cellsNames4sd = new PdfPCell(new Phrase("  4", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames4sd.HorizontalAlignment = 1;
        cellsNames4sd.Colspan = 0;
        tablenew8.AddCell(cellsNames4sd);

        PdfPCell cellsNames5se = new PdfPCell(new Phrase("  5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames5se.HorizontalAlignment = 1;
        cellsNames5se.Colspan = 0;
        tablenew8.AddCell(cellsNames5se);

        PdfPCell cellsNames5sf = new PdfPCell(new Phrase("  6", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames5sf.HorizontalAlignment = 1;
        cellsNames5sf.Colspan = 0;
        tablenew8.AddCell(cellsNames5sf);

        PdfPCell cellsNames5sg = new PdfPCell(new Phrase("  7 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames5sg.HorizontalAlignment = 1;
        cellsNames5sg.Colspan = 0;
        tablenew8.AddCell(cellsNames5sg);

        PdfPCell cellsNames5sh = new PdfPCell(new Phrase("  8", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames5sh.HorizontalAlignment = 1;
        cellsNames5sh.Colspan = 0;
        tablenew8.AddCell(cellsNames5sh);

        PdfPCell cellsNames5si = new PdfPCell(new Phrase("  9", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames5si.HorizontalAlignment = 1;
        cellsNames5si.Colspan = 0;
        tablenew8.AddCell(cellsNames5si);

        PdfPCell cellsNames5sj = new PdfPCell(new Phrase("  10", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames5sj.HorizontalAlignment = 1;
        cellsNames5sj.Colspan = 0;
        tablenew8.AddCell(cellsNames5sj);

        PdfPCell cellsNames5sk = new PdfPCell(new Phrase("  11", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNames5sk.HorizontalAlignment = 1;
        cellsNames5sk.Colspan = 0;
        tablenew8.AddCell(cellsNames5sk);


        document.Add(tablenew8);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "FormXXII.pdf";


        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;

        //}
    }

    protected void BtnformIV_Click(object sender, EventArgs e)
    {


        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablenewone = new PdfPTable(12);
        tablenewone.TotalWidth = 500f;
        tablenewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tablenewone.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 12;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell cellHead = new PdfPCell(new Phrase("FORM-IV  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 12;
        cellHead.Border = 0;

        tablenewone.AddCell(cellHead);

        PdfPCell cellAPPLICATIONSFOR = new PdfPCell(new Phrase("APPLICATIONS FOR LICENCE", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 13, Font.BOLD, BaseColor.BLACK)));
        cellAPPLICATIONSFOR.HorizontalAlignment = 1;
        cellAPPLICATIONSFOR.Colspan = 12;
        cellAPPLICATIONSFOR.Border = 0;

        tablenewone.AddCell(cellAPPLICATIONSFOR);

        PdfPCell cellRule21 = new PdfPCell(new Phrase("[Rule 21(1)]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellRule21.HorizontalAlignment = 1;
        cellRule21.Colspan = 12;
        cellRule21.Border = 0;
        tablenewone.AddCell(cellRule21);

        tablenewone.AddCell(cellspace);
        tablenewone.AddCell(cellspace);

        PdfPCell cellShris7 = new PdfPCell(new Phrase("1.  Name and address of the contractor (including his father's name in case of individuals).", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellShris7.HorizontalAlignment = 0;
        cellShris7.Colspan = 12;
        cellShris7.Border = 0;
        tablenewone.AddCell(cellShris7);

        tablenewone.AddCell(cellspace);

        PdfPCell cellTOli5 = new PdfPCell(new Phrase("2.  Date of birth and age (in case of individuals). ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellTOli5.HorizontalAlignment = 0;
        cellTOli5.Colspan = 12;
        cellTOli5.Border = 0;
        tablenewone.AddCell(cellTOli5);

        tablenewone.AddCell(cellspace);

        PdfPCell cellSignaturdate6 = new PdfPCell(new Phrase("3.  Particulars of Establishment where contract labour is to be employed-", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSignaturdate6.HorizontalAlignment = 0;
        cellSignaturdate6.Colspan = 12;
        cellSignaturdate6.Border = 0;
        tablenewone.AddCell(cellSignaturdate6);

        tablenewone.AddCell(cellspace);

        PdfPCell cellShris5 = new PdfPCell(new Phrase("   (a) Name and address of the establishment..", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellShris5.HorizontalAlignment = 0;
        cellShris5.Colspan = 12;
        cellShris5.Border = 0;
        tablenewone.AddCell(cellShris5);

        PdfPCell cellTOli2 = new PdfPCell(new Phrase("   (b) Type of business, trade, industry, manufacture or occupation, which is   carried on in the                   establishment.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellTOli2.HorizontalAlignment = 0;
        cellTOli2.Colspan = 12;
        cellTOli2.Border = 0;
        tablenewone.AddCell(cellTOli2);

        PdfPCell cellSignaturdate4 = new PdfPCell(new Phrase("   (c ) Number and date of certificate of registration of the establishment under the Act.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSignaturdate4.HorizontalAlignment = 0;
        cellSignaturdate4.Colspan = 12;
        cellSignaturdate4.Border = 0;
        tablenewone.AddCell(cellSignaturdate4);

        PdfPCell cellShris4 = new PdfPCell(new Phrase("   (d) Name and address of the Principal Employer.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellShris4.HorizontalAlignment = 0;
        cellShris4.Colspan = 12;
        cellShris4.Border = 0;
        cellShris4.PaddingLeft = 0;
        tablenewone.AddCell(cellShris4);
        tablenewone.AddCell(cellspace);

        PdfPCell cellWhetherthe3 = new PdfPCell(new Phrase("4.  Whether the license of the contractor was suspended or revoked.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellWhetherthe3.HorizontalAlignment = 0;
        cellWhetherthe3.Colspan = 12;
        cellWhetherthe3.Border = 0;
        cellWhetherthe3.PaddingLeft = 0;
        tablenewone.AddCell(cellWhetherthe3);

        tablenewone.AddCell(cellspace);

        PdfPCell cellBank3 = new PdfPCell(new Phrase("   (a) Name and address of the establishment.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellBank3.HorizontalAlignment = 0;
        cellBank3.Colspan = 12;
        cellBank3.Border = 0;
        cellBank3.PaddingLeft = 0;
        tablenewone.AddCell(cellBank3);

        PdfPCell cellShris2 = new PdfPCell(new Phrase("   (b) Duration of the proposed contract work (give particulars of proposed date  of    commencing and ending)..", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellShris2.HorizontalAlignment = 0;
        cellShris2.Colspan = 12;
        cellShris2.Border = 0;
        cellShris2.PaddingLeft = 0;
        tablenewone.AddCell(cellShris2);

        PdfPCell cellTOli = new PdfPCell(new Phrase("   (c) Name and address of the Agent or Manager of Contractor at the work site. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellTOli.HorizontalAlignment = 0;
        cellTOli.Colspan = 12;
        cellTOli.Border = 0;
        cellTOli.PaddingLeft = 0;
        tablenewone.AddCell(cellTOli);

        tablenewone.AddCell(cellspace);

        PdfPCell cellSignaturdate2 = new PdfPCell(new Phrase("   (d) Maximum number of contract labour proposed to be employed in the establishment on   any date.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSignaturdate2.HorizontalAlignment = 0;
        cellSignaturdate2.Colspan = 12;
        cellSignaturdate2.Border = 0;
        cellSignaturdate2.PaddingLeft = 0;
        tablenewone.AddCell(cellSignaturdate2);

        tablenewone.AddCell(cellspace);

        PdfPCell cellWhetherthe11 = new PdfPCell(new Phrase("5.  Whether the contractor was convicted of any offence within the preceding five years.  If so, give details.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellWhetherthe11.HorizontalAlignment = 0;
        cellWhetherthe11.Colspan = 12;
        cellWhetherthe11.Border = 0;
        cellWhetherthe11.PaddingLeft = 0;
        tablenewone.AddCell(cellWhetherthe11);

        tablenewone.AddCell(cellspace);

        PdfPCell cellBank2 = new PdfPCell(new Phrase("6.  Whether there was any order against the contractor revoking or suspending license or forfeiting security deposits in respect of an earlier contract.  If so, the date of such order.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellBank2.HorizontalAlignment = 0;
        cellBank2.Colspan = 12;
        cellBank2.Border = 0;
        cellBank2.PaddingLeft = 0;
        tablenewone.AddCell(cellBank2);

        tablenewone.AddCell(cellspace);
        PdfPCell cellShris1 = new PdfPCell(new Phrase("7.  Whether contractor has worked in any other establishment within the past five years. If so, give details of the Principal Employer, establishments, and nature of work.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellShris1.HorizontalAlignment = 0;
        cellShris1.Colspan = 12;
        cellShris1.Border = 0;
        cellShris1.PaddingLeft = 0;
        tablenewone.AddCell(cellShris1);

        tablenewone.AddCell(cellspace);

        PdfPCell cellTOli1 = new PdfPCell(new Phrase("8.  Whether a certificate by the Principal Employer in Form V is enclosed. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellTOli1.HorizontalAlignment = 0;
        cellTOli1.Colspan = 12;
        cellTOli1.Border = 0;
        cellTOli1.PaddingLeft = 0;
        tablenewone.AddCell(cellTOli1);

        tablenewone.AddCell(cellspace);

        PdfPCell cellSignaturdate1 = new PdfPCell(new Phrase("1[9.  Amount of license fee-name of the Union Bank draft No. and date].", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSignaturdate1.HorizontalAlignment = 0;
        cellSignaturdate1.Colspan = 12;
        cellSignaturdate1.Border = 0;
        cellSignaturdate1.PaddingLeft = 0;
        tablenewone.AddCell(cellSignaturdate1);

        tablenewone.AddCell(cellspace);

        PdfPCell cellWhetherthe1 = new PdfPCell(new Phrase("10.  Amount of security deposit-name of the Union Bank, demand draft No. and date.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellWhetherthe1.HorizontalAlignment = 0;
        cellWhetherthe1.Colspan = 12;
        cellWhetherthe1.Border = 0;
        cellWhetherthe1.PaddingLeft = 0;
        tablenewone.AddCell(cellWhetherthe1);

        tablenewone.AddCell(cellspace);

        PdfPCell cellBank1 = new PdfPCell(new Phrase("Note: The application shall be accompanied by demand draft and challan for the appropriate amount and a certificate in Form V from the principal employer……. …………………date of the receipt of the application with 'demand draft' and the  challan for fees/security deposit. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellBank1.HorizontalAlignment = 0;
        cellBank1.Colspan = 12;
        cellBank1.Border = 0;
        cellBank1.PaddingLeft = 0;
        tablenewone.AddCell(cellBank1);

        tablenewone.AddCell(cellspace);
        tablenewone.AddCell(cellspace);

        PdfPCell cellPlace7 = new PdfPCell(new Phrase(" DECLARATION ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellPlace7.HorizontalAlignment = 1;
        cellPlace7.Colspan = 12;
        cellPlace7.Border = 0;
        cellPlace7.PaddingLeft = 0;
        tablenewone.AddCell(cellPlace7);

        PdfPCell cellPlace6 = new PdfPCell(new Phrase("  I hereby declare that the details given above are correct to the best of my knowledge and belief. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellPlace6.HorizontalAlignment = 0;
        cellPlace6.Colspan = 12;
        cellPlace6.Border = 0;
        cellPlace6.PaddingLeft = 0;
        tablenewone.AddCell(cellPlace6);

        tablenewone.AddCell(cellspace);
        tablenewone.AddCell(cellspace);

        PdfPCell cellPlace5 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellPlace5.HorizontalAlignment = 0;
        cellPlace5.Colspan = 6;
        cellPlace5.Border = 0;
        cellPlace5.PaddingLeft = 0;
        tablenewone.AddCell(cellPlace5);

        PdfPCell celldatess1 = new PdfPCell(new Phrase("Signature of the Applicant(contractor) ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldatess1.HorizontalAlignment = 0;
        celldatess1.Colspan = 6;
        celldatess1.Border = 0;
        celldatess1.PaddingLeft = 0;
        tablenewone.AddCell(celldatess1);

        tablenewone.AddCell(cellspace);

        PdfPCell cellPlace3 = new PdfPCell(new Phrase("Place:…………………….. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellPlace3.HorizontalAlignment = 0;
        cellPlace3.Colspan = 12;
        cellPlace3.Border = 0;
        cellPlace3.PaddingLeft = 0;
        tablenewone.AddCell(cellPlace3);

        PdfPCell cellPlaces1 = new PdfPCell(new Phrase("Date:…………………….. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellPlaces1.HorizontalAlignment = 0;
        cellPlaces1.Colspan = 12;
        cellPlaces1.Border = 0;
        cellPlaces1.PaddingLeft = 0;
        tablenewone.AddCell(cellPlaces1);

        tablenewone.AddCell(cellspace);
        tablenewone.AddCell(cellspace);

        PdfPCell cellfilled1 = new PdfPCell(new Phrase("Note: The application should be accompanied by a Treasury Receipt for the   appopriate amount and a certificate in Form V from the Principal Employer. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfilled1.HorizontalAlignment = 0;
        cellfilled1.Colspan = 12;
        cellfilled1.Border = 0;
        cellfilled1.PaddingLeft = 50;
        tablenewone.AddCell(cellfilled1);

        tablenewone.AddCell(cellspace);
        tablenewone.AddCell(cellspace);
        tablenewone.AddCell(cellspace);
        tablenewone.AddCell(cellspace);

        PdfPCell cellapplication1 = new PdfPCell(new Phrase("  (To be filled in the office of the Licensing Officer) Date of receipt of the application with challan for fees/security deposit. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellapplication1.HorizontalAlignment = 0;
        cellapplication1.Colspan = 12;
        cellapplication1.Border = 0;
        tablenewone.AddCell(cellapplication1);

        tablenewone.AddCell(cellspace);
        tablenewone.AddCell(cellspace);

        PdfPCell cellPlace1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellPlace1.HorizontalAlignment = 0;
        cellPlace1.Colspan = 6;
        cellPlace1.Border = 0;
        cellPlace1.PaddingLeft = 0;
        tablenewone.AddCell(cellPlace1);

        PdfPCell celltheLicensing = new PdfPCell(new Phrase("   Signature of the Licensing officer", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltheLicensing.HorizontalAlignment = 0;
        celltheLicensing.Colspan = 6;
        celltheLicensing.Border = 0;
        celltheLicensing.PaddingLeft = 50;
        tablenewone.AddCell(celltheLicensing);

        tablenewone.AddCell(cellspace);
        tablenewone.AddCell(cellspace);
        tablenewone.AddCell(cellspace);
        tablenewone.AddCell(cellspace);

        document.Add(tablenewone);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "FormIV.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void BtnformXIII_Click(object sender, EventArgs e)
    {




        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablenew = new PdfPTable(12);
        tablenew.TotalWidth = 900f;
        tablenew.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tablenew.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 12;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell cellHead = new PdfPCell(new Phrase("Form-XXIII ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 12;
        cellHead.Border = 0;

        tablenew.AddCell(cellHead);

        PdfPCell cellreturn12a = new PdfPCell(new Phrase("  REGISTER OF WORKMEN EMPLOYED BY CONTRACTOR", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD, BaseColor.BLACK)));
        cellreturn12a.HorizontalAlignment = 1;
        cellreturn12a.Colspan = 12;
        cellreturn12a.Border = 0;

        tablenew.AddCell(cellreturn12a);

        PdfPCell cellRule75 = new PdfPCell(new Phrase(" [Rule 75]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 3, Font.BOLD, BaseColor.BLACK)));
        cellRule75.HorizontalAlignment = 1;
        cellRule75.Colspan = 12;
        cellRule75.Border = 0;
        tablenew.AddCell(cellRule75);

        tablenew.AddCell(cellspace);
        tablenew.AddCell(cellspace);

        PdfPCell cellNamess40 = new PdfPCell(new Phrase("1.Name and address of contractor...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess40.HorizontalAlignment = 0;
        cellNamess40.Colspan = 5;
        cellNamess40.Border = 0;
        cellNamess40.PaddingLeft = 0;
        tablenew.AddCell(cellNamess40);

        PdfPCell cellNamess43 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess43.HorizontalAlignment = 0;
        cellNamess43.Colspan = 2;
        cellNamess43.Border = 0;
        cellNamess43.PaddingLeft = 0;
        tablenew.AddCell(cellNamess43);

        PdfPCell cellNamess41 = new PdfPCell(new Phrase("2.Name and address of establishment in/under	which contract is carried on...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess41.HorizontalAlignment = 0;
        cellNamess41.Colspan = 5;
        cellNamess41.Border = 0;
        cellNamess41.PaddingLeft = 0;
        tablenew.AddCell(cellNamess41);

        tablenew.AddCell(cellspace);

        PdfPCell cellNamess42 = new PdfPCell(new Phrase("3.   Nature and location of work...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess42.HorizontalAlignment = 0;
        cellNamess42.Colspan = 5;
        cellNamess42.Border = 0;
        cellNamess42.PaddingLeft = 0;
        tablenew.AddCell(cellNamess42);

        PdfPCell cellNamess44 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess44.HorizontalAlignment = 0;
        cellNamess44.Colspan = 2;
        cellNamess44.Border = 0;
        cellNamess44.PaddingLeft = 0;
        tablenew.AddCell(cellNamess44);

        PdfPCell cellNamess45 = new PdfPCell(new Phrase("4.   Name and address of principal employer...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess45.HorizontalAlignment = 0;
        cellNamess45.Colspan = 5;
        cellNamess45.Border = 0;
        cellNamess45.PaddingLeft = 0;
        tablenew.AddCell(cellNamess45);

        tablenew.AddCell(cellspace);
        tablenew.AddCell(cellspace);
        tablenew.AddCell(cellspace);

        PdfPCell cellNamess46 = new PdfPCell(new Phrase("Sl.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess46.HorizontalAlignment = 1;
        cellNamess46.Colspan = 0;
        cellNamess46.Border = 0;
        cellNamess46.PaddingLeft = 0;
        cellNamess46.PaddingTop = 20;
        cellNamess46.PaddingBottom = 20;
        cellNamess46.BorderWidthLeft = 0.5f;
        cellNamess46.BorderWidthRight = 0.9f;
        cellNamess46.BorderWidthTop = 0.5f;
        cellNamess46.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNamess46);

        PdfPCell cellNamess47 = new PdfPCell(new Phrase("Name and surname of workman", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess47.HorizontalAlignment = 1;
        cellNamess47.Colspan = 0;
        cellNamess47.Border = 0;
        cellNamess47.PaddingLeft = 0;
        cellNamess47.PaddingLeft = 0;
        cellNamess47.PaddingTop = 20;
        cellNamess47.PaddingBottom = 20;
        cellNamess47.BorderWidthLeft = 0;
        cellNamess47.BorderWidthRight = 0.9f;
        cellNamess47.BorderWidthTop = 0.5f;
        cellNamess47.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNamess47);

        PdfPCell cellNamess48 = new PdfPCell(new Phrase("Age and Sex ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess48.HorizontalAlignment = 1;
        cellNamess48.Colspan = 0;
        cellNamess48.Border = 0;
        cellNamess48.PaddingLeft = 0;
        cellNamess48.PaddingLeft = 0;
        cellNamess48.PaddingLeft = 0;
        cellNamess48.PaddingTop = 20;
        cellNamess48.PaddingBottom = 20;
        cellNamess48.BorderWidthLeft = 0;
        cellNamess48.BorderWidthRight = 0.9f;
        cellNamess48.BorderWidthTop = 0.5f;
        cellNamess48.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNamess48);

        PdfPCell cellNamess49 = new PdfPCell(new Phrase("Father's/husband's name", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess49.HorizontalAlignment = 1;
        cellNamess49.Colspan = 0;
        cellNamess49.Border = 0;
        cellNamess49.PaddingLeft = 0;
        cellNamess49.PaddingLeft = 0;
        cellNamess49.PaddingLeft = 0;
        cellNamess49.PaddingTop = 20;
        cellNamess49.PaddingBottom = 20;
        cellNamess49.BorderWidthLeft = 0;
        cellNamess49.BorderWidthRight = 0.9f;
        cellNamess49.BorderWidthTop = 0.5f;
        cellNamess49.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNamess49);

        PdfPCell cellNamess50 = new PdfPCell(new Phrase("Nature of employment/ Designation ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess50.HorizontalAlignment = 1;
        cellNamess50.Colspan = 0;
        cellNamess50.Border = 0;
        cellNamess50.PaddingLeft = 0;
        cellNamess50.PaddingLeft = 0;
        cellNamess50.PaddingLeft = 0;
        cellNamess50.PaddingTop = 20;
        cellNamess50.PaddingBottom = 20;
        cellNamess50.BorderWidthLeft = 0;
        cellNamess50.BorderWidthRight = 0.9f;
        cellNamess50.BorderWidthTop = 0.5f;
        cellNamess50.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNamess50);

        PdfPCell cellNamess51 = new PdfPCell(new Phrase("Permanent Home Address of workman (Village and Tahsil/Taluk and District", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess51.HorizontalAlignment = 1;
        cellNamess51.Colspan = 0;
        cellNamess51.Border = 0;
        cellNamess51.PaddingLeft = 0;
        cellNamess51.PaddingLeft = 0;
        cellNamess51.PaddingLeft = 0;
        cellNamess51.PaddingTop = 20;
        cellNamess51.PaddingBottom = 20;
        cellNamess51.BorderWidthLeft = 0;
        cellNamess51.BorderWidthRight = 0.9f;
        cellNamess51.BorderWidthTop = 0.5f;
        cellNamess51.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNamess51);

        PdfPCell cellNamess52 = new PdfPCell(new Phrase("Local Address", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess52.HorizontalAlignment = 1;
        cellNamess52.Colspan = 0;
        cellNamess52.Border = 0;
        cellNamess52.PaddingLeft = 0;
        cellNamess52.PaddingLeft = 0;
        cellNamess52.PaddingLeft = 0;
        cellNamess52.PaddingTop = 20;
        cellNamess52.PaddingBottom = 20;
        cellNamess52.BorderWidthLeft = 0;
        cellNamess52.BorderWidthRight = 0.9f;
        cellNamess52.BorderWidthTop = 0.5f;
        cellNamess52.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNamess52);

        PdfPCell cellNamess53 = new PdfPCell(new Phrase("Date of commencement of employment", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess53.HorizontalAlignment = 1;
        cellNamess53.Colspan = 0;
        cellNamess53.Border = 0;
        cellNamess53.PaddingLeft = 0;
        cellNamess53.PaddingLeft = 0;
        cellNamess53.PaddingLeft = 0;
        cellNamess53.PaddingTop = 20;
        cellNamess53.PaddingBottom = 20;
        cellNamess53.BorderWidthLeft = 0;
        cellNamess53.BorderWidthRight = 0.9f;
        cellNamess53.BorderWidthTop = 0.5f;
        cellNamess53.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNamess53);

        PdfPCell cellNamess54 = new PdfPCell(new Phrase("Signature or thumb impression of workman", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess54.HorizontalAlignment = 1;
        cellNamess54.Colspan = 0;
        cellNamess54.Border = 0;
        cellNamess54.PaddingLeft = 0;
        cellNamess54.PaddingLeft = 0;
        cellNamess54.PaddingLeft = 0;
        cellNamess54.PaddingTop = 20;
        cellNamess54.PaddingBottom = 20;
        cellNamess54.BorderWidthLeft = 0;
        cellNamess54.BorderWidthRight = 0.9f;
        cellNamess54.BorderWidthTop = 0.5f;
        cellNamess54.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNamess54);

        PdfPCell cellNamess55 = new PdfPCell(new Phrase("Date of termination of employment", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess55.HorizontalAlignment = 1;
        cellNamess55.Colspan = 0;
        cellNamess55.Border = 0;
        cellNamess55.PaddingLeft = 0;
        cellNamess55.PaddingTop = 20;
        cellNamess55.PaddingBottom = 20;
        cellNamess55.BorderWidthLeft = 0;
        cellNamess55.BorderWidthRight = 0.9f;
        cellNamess55.BorderWidthTop = 0.5f;
        cellNamess55.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNamess55);

        PdfPCell cellNamess56 = new PdfPCell(new Phrase("Reasons for termination", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess56.HorizontalAlignment = 1;
        cellNamess56.Colspan = 0;
        cellNamess56.Border = 0;
        cellNamess56.PaddingLeft = 0;
        cellNamess56.PaddingTop = 20;
        cellNamess56.PaddingBottom = 20;
        cellNamess56.BorderWidthLeft = 0;
        cellNamess56.BorderWidthRight = 0.9f;
        cellNamess56.BorderWidthTop = 0.5f;
        cellNamess56.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNamess56);

        PdfPCell cellNamess57 = new PdfPCell(new Phrase("Remarks", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess57.HorizontalAlignment = 1;
        cellNamess57.Colspan = 0;
        cellNamess57.Border = 0;
        cellNamess57.PaddingLeft = 0;
        cellNamess57.PaddingLeft = 0;
        cellNamess57.PaddingLeft = 0;
        cellNamess57.PaddingTop = 20;
        cellNamess57.PaddingBottom = 20;
        cellNamess57.BorderWidthLeft = 0;
        cellNamess57.BorderWidthRight = 0.9f;
        cellNamess57.BorderWidthTop = 0.5f;
        cellNamess57.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellNamess57);

        PdfPCell cellssNames47 = new PdfPCell(new Phrase("  1 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellssNames47.HorizontalAlignment = 1;
        cellssNames47.Colspan = 0;
        cellssNames47.Border = 0;
        cellssNames47.PaddingLeft = 0;
        cellssNames47.PaddingLeft = 0;
        cellssNames47.PaddingTop = 10;
        cellssNames47.PaddingBottom = 10;
        cellssNames47.BorderWidthLeft = 0.9f;
        cellssNames47.BorderWidthRight = 0.9f;
        cellssNames47.BorderWidthTop = 0;
        cellssNames47.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellssNames47);

        PdfPCell cellsNamesss47 = new PdfPCell(new Phrase("  2", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNamesss47.HorizontalAlignment = 1;
        cellsNamesss47.Colspan = 0;
        cellsNamesss47.Border = 0;
        cellsNamesss47.PaddingLeft = 0;
        cellsNamesss47.PaddingTop = 10;
        cellsNamesss47.PaddingBottom = 10;
        cellsNamesss47.BorderWidthLeft = 0;
        cellsNamesss47.BorderWidthRight = 0.9f;
        cellsNamesss47.BorderWidthTop = 0;
        cellsNamesss47.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNamesss47);

        PdfPCell cellsNamess48 = new PdfPCell(new Phrase("  3 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNamess48.HorizontalAlignment = 1;
        cellsNamess48.Colspan = 0;
        cellsNamess48.Border = 0;
        cellsNamess48.PaddingLeft = 0;
        cellsNamess48.PaddingTop = 10;
        cellsNamess48.PaddingBottom = 10;
        cellsNamess48.BorderWidthLeft = 0;
        cellsNamess48.BorderWidthRight = 0.9f;
        cellsNamess48.BorderWidthTop = 0;
        cellsNamess48.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNamess48);

        PdfPCell cellsNamess49 = new PdfPCell(new Phrase("  4", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNamess49.HorizontalAlignment = 1;
        cellsNamess49.Colspan = 0;
        cellsNamess49.Border = 0;
        cellsNamess49.PaddingLeft = 0;
        cellsNamess49.PaddingTop = 10;
        cellsNamess49.PaddingBottom = 10;
        cellsNamess49.BorderWidthLeft = 0;
        cellsNamess49.BorderWidthRight = 0.9f;
        cellsNamess49.BorderWidthTop = 0;
        cellsNamess49.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNamess49);

        PdfPCell cellsNamess50 = new PdfPCell(new Phrase("  5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNamess50.HorizontalAlignment = 1;
        cellsNamess50.Colspan = 0;
        cellsNamess50.Border = 0;
        cellsNamess50.PaddingLeft = 0;
        cellsNamess50.PaddingTop = 10;
        cellsNamess50.PaddingBottom = 10;
        cellsNamess50.BorderWidthLeft = 0;
        cellsNamess50.BorderWidthRight = 0.9f;
        cellsNamess50.BorderWidthTop = 0;
        cellsNamess50.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNamess50);

        PdfPCell cellsNamess51 = new PdfPCell(new Phrase("  6", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNamess51.HorizontalAlignment = 1;
        cellsNamess51.Colspan = 0;
        cellsNamess51.Border = 0;
        cellsNamess51.PaddingLeft = 0;
        cellsNamess51.PaddingTop = 10;
        cellsNamess51.PaddingBottom = 10;
        cellsNamess51.BorderWidthLeft = 0;
        cellsNamess51.BorderWidthRight = 0.9f;
        cellsNamess51.BorderWidthTop = 0;
        cellsNamess51.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNamess51);

        PdfPCell cellsNamess52 = new PdfPCell(new Phrase("  7 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNamess52.HorizontalAlignment = 1;
        cellsNamess52.Colspan = 0;
        cellsNamess52.Border = 0;
        cellsNamess52.PaddingLeft = 0;
        cellsNamess52.PaddingTop = 10;
        cellsNamess52.PaddingBottom = 10;
        cellsNamess52.BorderWidthLeft = 0;
        cellsNamess52.BorderWidthRight = 0.9f;
        cellsNamess52.BorderWidthTop = 0;
        cellsNamess52.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNamess52);

        PdfPCell cellsNamess53 = new PdfPCell(new Phrase("  8", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNamess53.HorizontalAlignment = 1;
        cellsNamess53.Colspan = 0;
        cellsNamess53.PaddingLeft = 0;
        cellsNamess53.PaddingTop = 10;
        cellsNamess53.BorderWidthLeft = 0;
        cellsNamess53.BorderWidthRight = 0.9f;
        cellsNamess53.BorderWidthTop = 0;
        cellsNamess53.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNamess53);

        PdfPCell cellsNamess54 = new PdfPCell(new Phrase("  9", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNamess54.HorizontalAlignment = 1;
        cellsNamess54.Colspan = 0;
        cellsNamess54.Border = 0;
        cellsNamess54.PaddingLeft = 0;
        cellsNamess54.PaddingTop = 10;
        cellsNamess54.PaddingBottom = 10;
        cellsNamess54.BorderWidthLeft = 0;
        cellsNamess54.BorderWidthRight = 0.9f;
        cellsNamess54.BorderWidthTop = 0;
        cellsNamess54.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNamess54);

        PdfPCell cellsNamess55 = new PdfPCell(new Phrase("  10", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNamess55.HorizontalAlignment = 1;
        cellsNamess55.Colspan = 0;
        cellsNamess55.Border = 0;
        cellsNamess55.PaddingLeft = 0;
        cellsNamess55.PaddingTop = 10;
        cellsNamess55.PaddingBottom = 10;
        cellsNamess55.BorderWidthLeft = 0;
        cellsNamess55.BorderWidthRight = 0.9f;
        cellsNamess55.BorderWidthTop = 0;
        cellsNamess55.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNamess55);

        PdfPCell cellsNamess56 = new PdfPCell(new Phrase("  11", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNamess56.HorizontalAlignment = 1;
        cellsNamess56.Colspan = 0;
        cellsNamess56.Border = 0;
        cellsNamess56.PaddingLeft = 0;
        cellsNamess56.PaddingTop = 10;
        cellsNamess56.PaddingBottom = 10;
        cellsNamess56.BorderWidthLeft = 0;
        cellsNamess56.BorderWidthRight = 0.9f;
        cellsNamess56.BorderWidthTop = 0;
        cellsNamess56.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNamess56);

        PdfPCell cellsNamess57 = new PdfPCell(new Phrase("  12", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsNamess57.HorizontalAlignment = 1;
        cellsNamess57.Colspan = 0;
        cellsNamess57.Border = 0;
        cellsNamess57.PaddingLeft = 0;
        cellsNamess57.PaddingTop = 10;
        cellsNamess57.PaddingBottom = 10;
        cellsNamess57.BorderWidthLeft = 0;
        cellsNamess57.BorderWidthRight = 0.9f;
        cellsNamess57.BorderWidthTop = 0;
        cellsNamess57.BorderWidthBottom = 0.5f;
        tablenew.AddCell(cellsNamess57);

        document.Add(tablenew);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);


        string filename = "FormXIII.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;

        //}
    }

    protected void BtnformXX_Click(object sender, EventArgs e)
    {




        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tblenew = new PdfPTable(13);
        tblenew.TotalWidth = 900f;
        tblenew.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tblenew.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 13;
        cellspace.Border = 0;
        cellspace.PaddingTop = 0;

        PdfPCell cellHead = new PdfPCell(new Phrase("Form-XX ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 13;
        cellHead.Border = 0;
        tblenew.AddCell(cellHead);

        PdfPCell cellreturn12a1 = new PdfPCell(new Phrase("  REGISTER OF DEDUCTIONS FOR DAMAGE OR LOSS", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.BLACK)));
        cellreturn12a1.HorizontalAlignment = 1;
        cellreturn12a1.Colspan = 13;
        cellreturn12a1.Border = 0;
        tblenew.AddCell(cellreturn12a1);

        PdfPCell cellRule751 = new PdfPCell(new Phrase("  [Rule 78(1)(a)(ii)]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 3, Font.BOLD, BaseColor.BLACK)));
        cellRule751.HorizontalAlignment = 1;
        cellRule751.Colspan = 13;
        cellRule751.Border = 0;
        tblenew.AddCell(cellRule751);

        tblenew.AddCell(cellspace);
        tblenew.AddCell(cellspace);

        PdfPCell cellNamess401 = new PdfPCell(new Phrase("1.Name and address of contractor...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess401.HorizontalAlignment = 0;
        cellNamess401.Colspan = 5;
        cellNamess401.Border = 0;
        cellNamess401.PaddingLeft = 0;
        tblenew.AddCell(cellNamess401);

        PdfPCell cellNamess431 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess431.HorizontalAlignment = 0;
        cellNamess431.Colspan = 3;
        cellNamess431.Border = 0;
        cellNamess431.PaddingLeft = 0;
        tblenew.AddCell(cellNamess431);

        PdfPCell cellNamess411 = new PdfPCell(new Phrase("2.Name and address of establishment in/under	which contract is carried on...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess411.HorizontalAlignment = 0;
        cellNamess411.Colspan = 5;
        cellNamess411.Border = 0;
        cellNamess411.PaddingLeft = 0;
        tblenew.AddCell(cellNamess411);

        tblenew.AddCell(cellspace);

        PdfPCell cellNamess421 = new PdfPCell(new Phrase("3.Nature and location of work...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess421.HorizontalAlignment = 0;
        cellNamess421.Colspan = 5;
        cellNamess421.Border = 0;
        cellNamess421.PaddingLeft = 0;
        tblenew.AddCell(cellNamess421);

        PdfPCell cellNamess441 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess441.HorizontalAlignment = 0;
        cellNamess441.Colspan = 3;
        cellNamess441.Border = 0;
        cellNamess441.PaddingLeft = 0;
        tblenew.AddCell(cellNamess441);

        PdfPCell cellNamess451 = new PdfPCell(new Phrase("4.Name and address of principal employer...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess451.HorizontalAlignment = 0;
        cellNamess451.Colspan = 5;
        cellNamess451.Border = 0;
        cellNamess451.PaddingLeft = 0;
        tblenew.AddCell(cellNamess451);

        tblenew.AddCell(cellspace);
        tblenew.AddCell(cellspace);
        tblenew.AddCell(cellspace);










        PdfPCell cellssNames471 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellssNames471.HorizontalAlignment = 0;
        cellssNames471.Colspan = 10;
        tblenew.AddCell(cellssNames471);

        PdfPCell cellsNamesss471 = new PdfPCell(new Phrase(" Date of recovery ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamesss471.HorizontalAlignment = 1;
        cellsNamesss471.Colspan = 2;
        tblenew.AddCell(cellsNamesss471);



        PdfPCell cellsssNames471 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsssNames471.HorizontalAlignment = 0;
        cellsssNames471.Colspan = 1;
        tblenew.AddCell(cellsssNames471);






        PdfPCell cellNamess461 = new PdfPCell(new Phrase("Sl.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess461.HorizontalAlignment = 1;
        cellNamess461.Colspan = 0;
        tblenew.AddCell(cellNamess461);

        PdfPCell cellNamess471 = new PdfPCell(new Phrase("Name of workman", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess471.HorizontalAlignment = 1;
        cellNamess471.Colspan = 0;
        tblenew.AddCell(cellNamess471);

        PdfPCell cellNamess481 = new PdfPCell(new Phrase("Father's/husband's name ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess481.HorizontalAlignment = 1;
        cellNamess481.Colspan = 0;
        tblenew.AddCell(cellNamess481);


        PdfPCell cellNamess501 = new PdfPCell(new Phrase("Designation/Nature of employment  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess501.HorizontalAlignment = 1;
        cellNamess501.Colspan = 0;
        tblenew.AddCell(cellNamess501);

        PdfPCell cellNamess51 = new PdfPCell(new Phrase("Particulars of damage or loss", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess51.HorizontalAlignment = 1;
        cellNamess51.Colspan = 0;
        tblenew.AddCell(cellNamess51);

        PdfPCell cellNamess521 = new PdfPCell(new Phrase("Date of damage or loss", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess521.HorizontalAlignment = 1;
        cellNamess521.Colspan = 0;
        tblenew.AddCell(cellNamess521);

        PdfPCell cellNamess531 = new PdfPCell(new Phrase("Date of damage  showned  cause  against deduction", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess531.HorizontalAlignment = 1;
        cellNamess531.Colspan = 0;
        tblenew.AddCell(cellNamess531);

        PdfPCell cellNamess541 = new PdfPCell(new Phrase("Name of person in whose presence employee's explaination was heard", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess541.HorizontalAlignment = 1;
        cellNamess541.Colspan = 0;
        tblenew.AddCell(cellNamess541);

        PdfPCell cellNamess551 = new PdfPCell(new Phrase("Amount of  deduction imposed", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess551.HorizontalAlignment = 1;
        cellNamess551.Colspan = 0;
        tblenew.AddCell(cellNamess551);

        PdfPCell cellNamess561 = new PdfPCell(new Phrase("No. of instalments", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess561.HorizontalAlignment = 1;
        cellNamess561.Colspan = 0;
        tblenew.AddCell(cellNamess561);


        PdfPCell cellNamess5510 = new PdfPCell(new Phrase("First instalments", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess5510.HorizontalAlignment = 1;
        cellNamess5510.Colspan = 0;
        tblenew.AddCell(cellNamess5510);

        PdfPCell cellNamess5610 = new PdfPCell(new Phrase("Second instalments", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess5610.HorizontalAlignment = 1;
        cellNamess5610.Colspan = 0;
        tblenew.AddCell(cellNamess5610);

        PdfPCell cellNamess571 = new PdfPCell(new Phrase("Remarks", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNamess571.HorizontalAlignment = 1;
        cellNamess571.Colspan = 0;
        tblenew.AddCell(cellNamess571);







        PdfPCell cellssNames4710 = new PdfPCell(new Phrase("  1 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellssNames4710.HorizontalAlignment = 1;
        cellssNames4710.Colspan = 0;
        cellssNames4710.PaddingBottom = 10f;
        tblenew.AddCell(cellssNames4710);

        PdfPCell cellsNamesss4710 = new PdfPCell(new Phrase("  2", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamesss4710.HorizontalAlignment = 1;
        cellsNamesss4710.Colspan = 0;
        cellsNamesss4710.PaddingBottom = 10f;
        tblenew.AddCell(cellsNamesss4710);

        PdfPCell cellsNamess4810 = new PdfPCell(new Phrase("  3 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess4810.HorizontalAlignment = 1;
        cellsNamess4810.Colspan = 0;
        cellsNamess4810.PaddingBottom = 10f;
        tblenew.AddCell(cellsNamess4810);

        PdfPCell cellsNamess491 = new PdfPCell(new Phrase("  4", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess491.HorizontalAlignment = 1;
        cellsNamess491.Colspan = 0;
        cellsNamess491.PaddingBottom = 10f;
        tblenew.AddCell(cellsNamess491);

        PdfPCell cellsNamess501 = new PdfPCell(new Phrase("  5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess501.HorizontalAlignment = 1;
        cellsNamess501.Colspan = 0;
        cellsNamess501.PaddingBottom = 10f;
        tblenew.AddCell(cellsNamess501);

        PdfPCell cellsNamess511 = new PdfPCell(new Phrase("  6", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess511.HorizontalAlignment = 1;
        cellsNamess511.Colspan = 0;
        cellsNamess511.PaddingBottom = 10f;
        tblenew.AddCell(cellsNamess511);

        PdfPCell cellsNamess521 = new PdfPCell(new Phrase("  7 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess521.HorizontalAlignment = 1;
        cellsNamess521.Colspan = 0;
        cellsNamess521.PaddingBottom = 10f;
        tblenew.AddCell(cellsNamess521);

        PdfPCell cellsNamess531 = new PdfPCell(new Phrase("  8", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess531.HorizontalAlignment = 1;
        cellsNamess531.Colspan = 0;
        cellsNamess531.PaddingBottom = 10f;
        tblenew.AddCell(cellsNamess531);

        PdfPCell cellsNamess541 = new PdfPCell(new Phrase("  9", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess541.HorizontalAlignment = 1;
        cellsNamess541.Colspan = 0;
        cellsNamess541.PaddingBottom = 10f;
        tblenew.AddCell(cellsNamess541);

        PdfPCell cellsNamess551 = new PdfPCell(new Phrase("  10", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess551.HorizontalAlignment = 1;
        cellsNamess551.Colspan = 0;
        cellsNamess551.PaddingBottom = 10f;
        tblenew.AddCell(cellsNamess551);

        PdfPCell cellsNamess561 = new PdfPCell(new Phrase("  11", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess561.HorizontalAlignment = 1;
        cellsNamess561.Colspan = 0;
        cellsNamess561.PaddingBottom = 10f;
        tblenew.AddCell(cellsNamess561);

        PdfPCell cellsNamess571 = new PdfPCell(new Phrase("  12", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess571.HorizontalAlignment = 1;
        cellsNamess571.Colspan = 0;
        cellsNamess571.PaddingBottom = 10f;
        tblenew.AddCell(cellsNamess571);


        PdfPCell cellsNamess5711 = new PdfPCell(new Phrase("  13", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsNamess5711.HorizontalAlignment = 1;
        cellsNamess5711.Colspan = 0;
        cellsNamess5711.PaddingBottom = 10f;
        tblenew.AddCell(cellsNamess5711);

        document.Add(tblenew);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);


        string filename = "formXX.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;

        //}
    }

    protected void BtnnformXXII_Click(object sender, EventArgs e)
    {


        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablenewc = new PdfPTable(11);
        tablenewc.TotalWidth = 900f;
        tablenewc.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, };
        tablenewc.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 11;
        cellspace.Border = 0;
        cellspace.PaddingTop = 0;

        PdfPCell cellHead = new PdfPCell(new Phrase("Form-XX ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 11;
        cellHead.Border = 0;
        tablenewc.AddCell(cellHead);

        PdfPCell cellreturn12a1 = new PdfPCell(new Phrase("  REGISTER OF DEDUCTIONS FOR DAMAGE OR LOSS", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD, BaseColor.BLACK)));
        cellreturn12a1.HorizontalAlignment = 1;
        cellreturn12a1.Colspan = 11;
        cellreturn12a1.Border = 0;
        tablenewc.AddCell(cellreturn12a1);

        PdfPCell cellRule751 = new PdfPCell(new Phrase("  [Rule 78(1)(a)(ii)]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 3, Font.BOLD, BaseColor.BLACK)));
        cellRule751.HorizontalAlignment = 1;
        cellRule751.Colspan = 11;
        cellRule751.Border = 0;
        tablenewc.AddCell(cellRule751);

        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);

        PdfPCell cellNamess401 = new PdfPCell(new Phrase("1.Name and address of contractor...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess401.HorizontalAlignment = 0;
        cellNamess401.Colspan = 4;
        cellNamess401.Border = 0;
        cellNamess401.PaddingLeft = 0;
        tablenewc.AddCell(cellNamess401);

        PdfPCell cellNamess431 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess431.HorizontalAlignment = 0;
        cellNamess431.Colspan = 2;
        cellNamess431.Border = 0;
        cellNamess431.PaddingLeft = 0;
        tablenewc.AddCell(cellNamess431);

        PdfPCell cellNamess411 = new PdfPCell(new Phrase("2.Name and address of establishment in/under	which contract is carried on...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess411.HorizontalAlignment = 0;
        cellNamess411.Colspan = 5;
        cellNamess411.Border = 0;
        cellNamess411.PaddingLeft = 0;
        tablenewc.AddCell(cellNamess411);

        tablenewc.AddCell(cellspace);

        PdfPCell cellNamess421 = new PdfPCell(new Phrase("3.Nature and location of work...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess421.HorizontalAlignment = 0;
        cellNamess421.Colspan = 4;
        cellNamess421.Border = 0;
        cellNamess421.PaddingLeft = 0;
        tablenewc.AddCell(cellNamess421);

        PdfPCell cellNamess441 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess441.HorizontalAlignment = 0;
        cellNamess441.Colspan = 2;
        cellNamess441.Border = 0;
        cellNamess441.PaddingLeft = 0;
        tablenewc.AddCell(cellNamess441);

        PdfPCell cellNamess451 = new PdfPCell(new Phrase("4.Name and address of principal employer...................................................................................................................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNamess451.HorizontalAlignment = 0;
        cellNamess451.Colspan = 5;
        cellNamess451.Border = 0;
        cellNamess451.PaddingLeft = 0;
        tablenewc.AddCell(cellNamess451);

        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);

        PdfPCell celltable10 = new PdfPCell(new Phrase("Sl.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable10.HorizontalAlignment = 1;
        celltable10.Colspan = 0;
        tablenewc.AddCell(celltable10);

        PdfPCell celltable09 = new PdfPCell(new Phrase("Name of workman", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable09.HorizontalAlignment = 1;
        celltable09.Colspan = 0;
        tablenewc.AddCell(celltable09);

        PdfPCell celltable08 = new PdfPCell(new Phrase("Father's/husband's name ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable08.HorizontalAlignment = 1;
        celltable08.Colspan = 0;
        tablenewc.AddCell(celltable08);


        PdfPCell celltable07 = new PdfPCell(new Phrase("Nature of employment/ Designation  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable07.HorizontalAlignment = 1;
        celltable07.Colspan = 0;
        tablenewc.AddCell(celltable07);

        PdfPCell celltable06 = new PdfPCell(new Phrase("Wage period and wages payable", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable06.HorizontalAlignment = 1;
        celltable06.Colspan = 0;
        tablenewc.AddCell(celltable06);

        PdfPCell celltable05 = new PdfPCell(new Phrase("Date and amount of advance given", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable05.HorizontalAlignment = 1;
        celltable05.Colspan = 0;
        tablenewc.AddCell(celltable05);


        PdfPCell celltable11 = new PdfPCell(new Phrase("purpose (s)  for which advance made", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable11.HorizontalAlignment = 1;
        celltable11.Colspan = 0;
        tablenewc.AddCell(celltable11);


        PdfPCell celltable04 = new PdfPCell(new Phrase("Paid by by which advance to be repaid", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable04.HorizontalAlignment = 1;
        celltable04.Colspan = 0;
        tablenewc.AddCell(celltable04);

        PdfPCell celltable03 = new PdfPCell(new Phrase("Date and amount of each instalment repaid", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable03.HorizontalAlignment = 1;
        celltable03.Colspan = 0;
        tablenewc.AddCell(celltable03);

        PdfPCell celltable02 = new PdfPCell(new Phrase("Date on which last  instalment was repaid", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable02.HorizontalAlignment = 1;
        celltable02.Colspan = 0;
        tablenewc.AddCell(celltable02);

        PdfPCell celltable01 = new PdfPCell(new Phrase("Remarks", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable01.HorizontalAlignment = 1;
        celltable01.Colspan = 0;
        tablenewc.AddCell(celltable01);

        PdfPCell celltabl11 = new PdfPCell(new Phrase("  1 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabl11.HorizontalAlignment = 1;
        celltabl11.Colspan = 0;
        celltabl11.PaddingBottom = 10f;
        tablenewc.AddCell(celltabl11);

        PdfPCell celltabl10 = new PdfPCell(new Phrase("  2", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabl10.HorizontalAlignment = 1;
        celltabl10.Colspan = 0;
        celltabl10.PaddingBottom = 10f;
        tablenewc.AddCell(celltabl10);

        PdfPCell celltabl9 = new PdfPCell(new Phrase("  3 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabl9.HorizontalAlignment = 1;
        celltabl9.Colspan = 0;
        celltabl9.PaddingBottom = 10f;
        tablenewc.AddCell(celltabl9);

        PdfPCell celltabl8 = new PdfPCell(new Phrase("  4", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabl8.HorizontalAlignment = 1;
        celltabl8.Colspan = 0;
        celltabl8.PaddingBottom = 10f;
        tablenewc.AddCell(celltabl8);

        PdfPCell celltabl7 = new PdfPCell(new Phrase("  5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabl7.HorizontalAlignment = 1;
        celltabl7.Colspan = 0;
        celltabl7.PaddingBottom = 10f;
        tablenewc.AddCell(celltabl7);

        PdfPCell celltabl6 = new PdfPCell(new Phrase("  6", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabl6.HorizontalAlignment = 1;
        celltabl6.Colspan = 0;
        celltabl6.PaddingBottom = 10f;
        tablenewc.AddCell(celltabl6);

        PdfPCell celltabl5 = new PdfPCell(new Phrase("  7 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabl5.HorizontalAlignment = 1;
        celltabl5.Colspan = 0;
        celltabl5.PaddingBottom = 10f;
        tablenewc.AddCell(celltabl5);

        PdfPCell celltabl4 = new PdfPCell(new Phrase("  8", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabl4.HorizontalAlignment = 1;
        celltabl4.Colspan = 0;
        celltabl4.PaddingBottom = 10f;
        tablenewc.AddCell(celltabl4);

        PdfPCell celltabl3 = new PdfPCell(new Phrase("  9", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabl3.HorizontalAlignment = 1;
        celltabl3.Colspan = 0;
        celltabl3.PaddingBottom = 10f;
        tablenewc.AddCell(celltabl3);

        PdfPCell celltabl2 = new PdfPCell(new Phrase("  10", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabl2.HorizontalAlignment = 1;
        celltabl2.Colspan = 0;
        celltabl2.PaddingBottom = 10f;
        tablenewc.AddCell(celltabl2);

        PdfPCell celltabl1 = new PdfPCell(new Phrase("  11", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabl1.HorizontalAlignment = 1;
        celltabl1.Colspan = 0;
        celltabl1.PaddingBottom = 10f;
        tablenewc.AddCell(celltabl1);


        document.Add(tablenewc);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);


        string filename = "FormXXII.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void BtnformVA_Click(object sender, EventArgs e)
    {





        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablenewc = new PdfPTable(11);
        tablenewc.TotalWidth = 900f;
        tablenewc.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, };
        tablenewc.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 11;
        cellspace.Border = 0;
        cellspace.PaddingTop = 0;

        PdfPCell cellHead = new PdfPCell(new Phrase("Form V-A", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 11;
        cellHead.Border = 0;
        tablenewc.AddCell(cellHead);

        PdfPCell cellreturn12a1 = new PdfPCell(new Phrase("    APPLICATION FOR ADJUSTMENT OF SECURITY DEPOSIT", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD, BaseColor.BLACK)));
        cellreturn12a1.HorizontalAlignment = 1;
        cellreturn12a1.Colspan = 11;
        cellreturn12a1.Border = 0;
        tablenewc.AddCell(cellreturn12a1);

        PdfPCell cellRule751 = new PdfPCell(new Phrase("   [Rule 24 (1A)]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 3, Font.BOLD, BaseColor.BLACK)));
        cellRule751.HorizontalAlignment = 1;
        cellRule751.Colspan = 11;
        cellRule751.Border = 0;
        tablenewc.AddCell(cellRule751);

        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);


        PdfPCell celltables09 = new PdfPCell(new Phrase("Name and address of the contractor", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltables09.HorizontalAlignment = 1;
        celltables09.Colspan = 0;
        tablenewc.AddCell(celltables09);

        PdfPCell celltables08 = new PdfPCell(new Phrase("No. and date of license ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltables08.HorizontalAlignment = 1;
        celltables08.Colspan = 0;
        tablenewc.AddCell(celltables08);


        PdfPCell celltables07 = new PdfPCell(new Phrase("Date of expiry of previous license  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltables07.HorizontalAlignment = 1;
        celltables07.Colspan = 0;
        tablenewc.AddCell(celltables07);

        PdfPCell celltables06 = new PdfPCell(new Phrase("Whether the license of the contractor was suspended or revoked", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltables06.HorizontalAlignment = 1;
        celltables06.Colspan = 0;
        tablenewc.AddCell(celltables06);

        PdfPCell celltables05 = new PdfPCell(new Phrase("1[No. and date of the demand draft of the security deposit in resoect of the previous license]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltables05.HorizontalAlignment = 1;
        celltables05.Colspan = 0;
        tablenewc.AddCell(celltables05);


        PdfPCell celltables11 = new PdfPCell(new Phrase("Amount of previous security deposit", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltables11.HorizontalAlignment = 1;
        celltables11.Colspan = 0;
        tablenewc.AddCell(celltables11);


        PdfPCell celltables04 = new PdfPCell(new Phrase("No. and date of the demand draft of the balance of security deposit, if any, required on the fresh contract]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltables04.HorizontalAlignment = 1;
        celltables04.Colspan = 0;
        tablenewc.AddCell(celltables04);

        PdfPCell celltables03 = new PdfPCell(new Phrase("No. and date of certificate of registration of the establishment in relation to which the new license is applied for", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltables03.HorizontalAlignment = 1;
        celltables03.Colspan = 0;
        tablenewc.AddCell(celltables03);

        PdfPCell celltables02 = new PdfPCell(new Phrase("Name and address of the principal employer", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltables02.HorizontalAlignment = 1;
        celltables02.Colspan = 0;
        tablenewc.AddCell(celltables02);



        PdfPCell celltables10 = new PdfPCell(new Phrase("Particulars of fresh contract ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltables10.HorizontalAlignment = 1;
        celltables10.Colspan = 0;
        tablenewc.AddCell(celltables10);

        PdfPCell celltables01 = new PdfPCell(new Phrase("Remarks", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltables01.HorizontalAlignment = 1;
        celltables01.Colspan = 0;
        tablenewc.AddCell(celltables01);

        PdfPCell celltabls11 = new PdfPCell(new Phrase("  1 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls11.HorizontalAlignment = 1;
        celltabls11.Colspan = 0;
        celltabls11.PaddingBottom = 10f;
        tablenewc.AddCell(celltabls11);

        PdfPCell celltabls10 = new PdfPCell(new Phrase("  2", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls10.HorizontalAlignment = 1;
        celltabls10.Colspan = 0;
        celltabls10.PaddingBottom = 10f;
        tablenewc.AddCell(celltabls10);

        PdfPCell celltabls9 = new PdfPCell(new Phrase("  3 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls9.HorizontalAlignment = 1;
        celltabls9.Colspan = 0;
        celltabls9.PaddingBottom = 10f;
        tablenewc.AddCell(celltabls9);

        PdfPCell celltabls8 = new PdfPCell(new Phrase("  4", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls8.HorizontalAlignment = 1;
        celltabls8.Colspan = 0;
        celltabls8.PaddingBottom = 10f;
        tablenewc.AddCell(celltabls8);

        PdfPCell celltabls7 = new PdfPCell(new Phrase("  5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls7.HorizontalAlignment = 1;
        celltabls7.Colspan = 0;
        celltabls7.PaddingBottom = 10f;
        tablenewc.AddCell(celltabls7);

        PdfPCell celltabls6 = new PdfPCell(new Phrase("  6", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls6.HorizontalAlignment = 1;
        celltabls6.Colspan = 0;
        celltabls6.PaddingBottom = 10f;
        tablenewc.AddCell(celltabls6);

        PdfPCell celltabls5 = new PdfPCell(new Phrase("  7 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls5.HorizontalAlignment = 1;
        celltabls5.Colspan = 0;
        celltabls5.PaddingBottom = 10f;
        tablenewc.AddCell(celltabls5);

        PdfPCell celltabls4 = new PdfPCell(new Phrase("  8", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls4.HorizontalAlignment = 1;
        celltabls4.Colspan = 0;
        celltabls4.PaddingBottom = 10f;
        tablenewc.AddCell(celltabls4);

        PdfPCell celltabls3 = new PdfPCell(new Phrase("  9", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls3.HorizontalAlignment = 1;
        celltabls3.Colspan = 0;
        celltabls3.PaddingBottom = 10f;
        tablenewc.AddCell(celltabls3);

        PdfPCell celltabls2 = new PdfPCell(new Phrase("  10", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls2.HorizontalAlignment = 1;
        celltabls2.Colspan = 0;
        celltabls2.PaddingBottom = 10f;
        tablenewc.AddCell(celltabls2);

        PdfPCell celltabls1 = new PdfPCell(new Phrase("  11", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls1.HorizontalAlignment = 1;
        celltabls1.Colspan = 0;
        celltabls1.PaddingBottom = 10f;
        tablenewc.AddCell(celltabls1);

        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);

        PdfPCell celltabls3s = new PdfPCell(new Phrase("Place:......................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls3s.HorizontalAlignment = 0;
        celltabls3s.Colspan = 11;
        celltabls3s.Border = 0;
        tablenewc.AddCell(celltabls3s);

        PdfPCell celltabls2s = new PdfPCell(new Phrase("Date:........................", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls2s.HorizontalAlignment = 0;
        celltabls2s.Colspan = 5;
        celltabls2s.Border = 0;
        tablenewc.AddCell(celltabls2s);

        PdfPCell celltabls1s = new PdfPCell(new Phrase(" Signature of the Applicant", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltabls1s.HorizontalAlignment = 1;
        celltabls1s.Colspan = 6;
        celltabls1s.Border = 0;
        tablenewc.AddCell(celltabls1s);



        document.Add(tablenewc);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);


        string filename = "FormVA.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;

        //}
    }

    protected void BtnformX_Click(object sender, EventArgs e)
    {



        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(12);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 12;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell cellHead = new PdfPCell(new Phrase("FORM-X  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 12;
        cellHead.Border = 0;

        tablesnewone.AddCell(cellHead);

        PdfPCell cellTEMPORARY = new PdfPCell(new Phrase("APPLICATION FOR TEMPORARY LICENSE", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 13, Font.BOLD, BaseColor.BLACK)));
        cellTEMPORARY.HorizontalAlignment = 1;
        cellTEMPORARY.Colspan = 12;
        cellTEMPORARY.Border = 0;

        tablesnewone.AddCell(cellTEMPORARY);

        PdfPCell cellRule32 = new PdfPCell(new Phrase("[Rule 32 (2)]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellRule32.HorizontalAlignment = 1;
        cellRule32.Colspan = 12;
        cellRule32.Border = 0;
        tablesnewone.AddCell(cellRule32);

        tablesnewone.AddCell(cellspace);
        tablesnewone.AddCell(cellspace);

        PdfPCell celldocument16 = new PdfPCell(new Phrase("1.  Name and address of the contractor (including his father's name in case of individuals).", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument16.HorizontalAlignment = 0;
        celldocument16.Colspan = 12;
        celldocument16.Border = 0;
        tablesnewone.AddCell(celldocument16);

        tablesnewone.AddCell(cellspace);

        PdfPCell celldocument15 = new PdfPCell(new Phrase("2.  Date of birth and age (in case of individuals). ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument15.HorizontalAlignment = 0;
        celldocument15.Colspan = 12;
        celldocument15.Border = 0;
        tablesnewone.AddCell(celldocument15);

        tablesnewone.AddCell(cellspace);

        PdfPCell celldocument14 = new PdfPCell(new Phrase("3.  Particulars of Establishment where contract labour is to be employed-", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument14.HorizontalAlignment = 0;
        celldocument14.Colspan = 12;
        celldocument14.Border = 0;
        tablesnewone.AddCell(celldocument14);

        tablesnewone.AddCell(cellspace);

        PdfPCell celldocument13 = new PdfPCell(new Phrase("    (a) Name and address of the establishment..", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument13.HorizontalAlignment = 0;
        celldocument13.Colspan = 12;
        celldocument13.Border = 0;
        tablesnewone.AddCell(celldocument13);

        PdfPCell celldocument12 = new PdfPCell(new Phrase("    (b) Type of business, trade, industry, manufacture or occupation, which is   carried on in the establishment.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument12.HorizontalAlignment = 0;
        celldocument12.Colspan = 12;
        celldocument12.Border = 0;
        tablesnewone.AddCell(celldocument12);



        PdfPCell celldocument11 = new PdfPCell(new Phrase("     (c) Name and address of the Principal Employer.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument11.HorizontalAlignment = 0;
        celldocument11.Colspan = 12;
        celldocument11.Border = 0;
        celldocument11.PaddingLeft = 0;
        tablesnewone.AddCell(celldocument11);
        tablesnewone.AddCell(cellspace);

        PdfPCell celldocument10 = new PdfPCell(new Phrase("4.  Particulars of contract labour-", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument10.HorizontalAlignment = 0;
        celldocument10.Colspan = 12;
        celldocument10.Border = 0;
        celldocument10.PaddingLeft = 0;
        tablesnewone.AddCell(celldocument10);

        tablesnewone.AddCell(cellspace);

        PdfPCell celldocument9 = new PdfPCell(new Phrase("     (a) Nature of work in which contract labour is employed or is to be employed in the establishment.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument9.HorizontalAlignment = 0;
        celldocument9.Colspan = 12;
        celldocument9.Border = 0;
        celldocument9.PaddingLeft = 0;
        tablesnewone.AddCell(celldocument9);

        PdfPCell celldocument8 = new PdfPCell(new Phrase("     (b) Duration of the proposed contract work (give particulars of proposed date  of commencing and ending).", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument8.HorizontalAlignment = 0;
        celldocument8.Colspan = 12;
        celldocument8.Border = 0;
        celldocument8.PaddingLeft = 0;
        tablesnewone.AddCell(celldocument8);

        PdfPCell celldocument7 = new PdfPCell(new Phrase("     (c) Name and address of the Agent or Manager of Contractor at the work site.  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument7.HorizontalAlignment = 0;
        celldocument7.Colspan = 12;
        celldocument7.Border = 0;
        celldocument7.PaddingLeft = 0;
        tablesnewone.AddCell(celldocument7);

        tablesnewone.AddCell(cellspace);

        PdfPCell celldocument6 = new PdfPCell(new Phrase("     (d) Maximum number of contract labour proposed to be employed in the establishment on any date.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument6.HorizontalAlignment = 0;
        celldocument6.Colspan = 12;
        celldocument6.Border = 0;
        celldocument6.PaddingLeft = 0;
        tablesnewone.AddCell(celldocument6);

        tablesnewone.AddCell(cellspace);

        PdfPCell celldocument5 = new PdfPCell(new Phrase("5.  Whether the contractor was convicted of any offence within the preceding five years.  If so, give details.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument5.HorizontalAlignment = 0;
        celldocument5.Colspan = 12;
        celldocument5.Border = 0;
        celldocument5.PaddingLeft = 0;
        tablesnewone.AddCell(celldocument5);

        tablesnewone.AddCell(cellspace);

        PdfPCell celldocument4 = new PdfPCell(new Phrase("6.  Whether there was any order against the contractor revoking or suspending license or forfeiting security deposits in respect of an earlier contract.  If so, the date of such order.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument4.HorizontalAlignment = 0;
        celldocument4.Colspan = 12;
        celldocument4.Border = 0;
        celldocument4.PaddingLeft = 0;
        tablesnewone.AddCell(celldocument4);

        tablesnewone.AddCell(cellspace);
        PdfPCell celldocument3 = new PdfPCell(new Phrase("7.  Whether contractor has worked in any other establishment within the past five years. If so, give details of the Principal Employer, establishments, and nature of work.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument3.HorizontalAlignment = 0;
        celldocument3.Colspan = 12;
        celldocument3.Border = 0;
        celldocument3.PaddingLeft = 0;
        tablesnewone.AddCell(celldocument3);

        tablesnewone.AddCell(cellspace);

        PdfPCell celldocument2 = new PdfPCell(new Phrase("8.  1[Amount of license fee paid-name of the Union Bank demand draft No. and date].", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument2.HorizontalAlignment = 0;
        celldocument2.Colspan = 12;
        celldocument2.Border = 0;
        celldocument2.PaddingLeft = 0;
        tablesnewone.AddCell(celldocument2);

        tablesnewone.AddCell(cellspace);

        PdfPCell celldocument1 = new PdfPCell(new Phrase("9.  2[Amount of security deposit-name of the Union Bank demand draft No. and date.  Date of the receipt of the application with demand draft for fees/security deposits.]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldocument1.HorizontalAlignment = 0;
        celldocument1.Colspan = 12;
        celldocument1.Border = 0;
        celldocument1.PaddingLeft = 0;
        tablesnewone.AddCell(celldocument1);

        tablesnewone.AddCell(cellspace);
        tablesnewone.AddCell(cellspace);
        tablesnewone.AddCell(cellspace);
        tablesnewone.AddCell(cellspace);
        tablesnewone.AddCell(cellspace);
        tablesnewone.AddCell(cellspace);

        PdfPCell cellPl = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellPl.HorizontalAlignment = 0;
        cellPl.Colspan = 6;
        cellPl.Border = 0;
        cellPl.PaddingLeft = 0;
        tablesnewone.AddCell(cellPl);

        PdfPCell cellapp = new PdfPCell(new Phrase("Signature of the Applicant(contractor) ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellapp.HorizontalAlignment = 0;
        cellapp.Colspan = 6;
        cellapp.Border = 0;
        cellapp.PaddingLeft = 0;
        tablesnewone.AddCell(cellapp);

        tablesnewone.AddCell(cellspace);

        PdfPCell cellnewPlace = new PdfPCell(new Phrase("Place:…………………….. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellnewPlace.HorizontalAlignment = 0;
        cellnewPlace.Colspan = 12;
        cellnewPlace.Border = 0;
        cellnewPlace.PaddingLeft = 0;
        tablesnewone.AddCell(cellnewPlace);

        PdfPCell cellnewdate = new PdfPCell(new Phrase("Date:…………………….. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellnewdate.HorizontalAlignment = 0;
        cellnewdate.Colspan = 12;
        cellnewdate.Border = 0;
        cellnewdate.PaddingLeft = 0;
        tablesnewone.AddCell(cellnewdate);

        tablesnewone.AddCell(cellspace);
        tablesnewone.AddCell(cellspace);

        PdfPCell cellapplications1 = new PdfPCell(new Phrase("  (To be filled in the office of the Licensing Officer) Date of receipt of the application with challan for fees....................security deposit.................... ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellapplications1.HorizontalAlignment = 0;
        cellapplications1.Colspan = 12;
        cellapplications1.Border = 0;
        tablesnewone.AddCell(cellapplications1);

        tablesnewone.AddCell(cellspace);
        tablesnewone.AddCell(cellspace);
        tablesnewone.AddCell(cellspace);
        tablesnewone.AddCell(cellspace);
        tablesnewone.AddCell(cellspace);
        tablesnewone.AddCell(cellspace);

        PdfPCell cellPl1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellPl1.HorizontalAlignment = 0;
        cellPl1.Colspan = 6;
        cellPl1.Border = 0;
        cellPl1.PaddingLeft = 0;
        tablesnewone.AddCell(cellPl1);

        PdfPCell celltheLicensing1 = new PdfPCell(new Phrase("   Signature of the Licensing officer", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltheLicensing1.HorizontalAlignment = 0;
        celltheLicensing1.Colspan = 6;
        celltheLicensing1.Border = 0;
        celltheLicensing1.PaddingLeft = 0;
        tablesnewone.AddCell(celltheLicensing1);

        tablesnewone.AddCell(cellspace);
        tablesnewone.AddCell(cellspace);

        document.Add(tablesnewone);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "formX.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void Btnform9_Click(object sender, EventArgs e)
    {



        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tblenewapp1 = new PdfPTable(13);
        tblenewapp1.TotalWidth = 800f;
        tblenewapp1.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tblenewapp1.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 13;
        cellspace.Border = 0;
        cellspace.PaddingTop = 0;

        PdfPCell cellHead = new PdfPCell(new Phrase("[FORM  No. 9] ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 4, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 13;
        cellHead.Border = 0;
        tblenewapp1.AddCell(cellHead);

        PdfPCell cellhelp12 = new PdfPCell(new Phrase("[See Rule 107]", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.BLACK)));
        cellhelp12.HorizontalAlignment = 1;
        cellhelp12.Colspan = 13;
        cellhelp12.Border = 0;
        tblenewapp1.AddCell(cellhelp12);

        PdfPCell cellRule107 = new PdfPCell(new Phrase("REGISTER OF OVERTIME AND PAYMENT", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize + 3, Font.BOLD, BaseColor.BLACK)));
        cellRule107.HorizontalAlignment = 1;
        cellRule107.Colspan = 13;
        cellRule107.Border = 0;
        tblenewapp1.AddCell(cellRule107);

        tblenewapp1.AddCell(cellspace);
        tblenewapp1.AddCell(cellspace);

        PdfPCell cellhelp11 = new PdfPCell(new Phrase("Form No. 9 under Rule 107 of Karnataka Factories Rules, 1969..", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellhelp11.HorizontalAlignment = 0;
        cellhelp11.Colspan = 13;
        cellhelp11.Border = 0;
        cellhelp11.PaddingLeft = 0;
        tblenewapp1.AddCell(cellhelp11);

        PdfPCell cellhelp10 = new PdfPCell(new Phrase("Form No. XIII under Rule 78(1) (a)(iii) of Contract Labour (Regulation and Abolition) Karnataka Rules, 1974.  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellhelp10.HorizontalAlignment = 0;
        cellhelp10.Colspan = 13;
        cellhelp10.Border = 0;
        cellhelp10.PaddingLeft = 0;
        tblenewapp1.AddCell(cellhelp10);

        PdfPCell cellhelp9 = new PdfPCell(new Phrase("Form No. IV under Rule 28(2) of Karnataka Minimum Wages Rules, 1958.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellhelp9.HorizontalAlignment = 0;
        cellhelp9.Colspan = 13;
        cellhelp9.Border = 0;
        cellhelp9.PaddingLeft = 0;
        tblenewapp1.AddCell(cellhelp9);

        tblenewapp1.AddCell(cellspace);
        tblenewapp1.AddCell(cellspace);
        tblenewapp1.AddCell(cellspace);

        PdfPCell cellhep8 = new PdfPCell(new Phrase("Name and Address of the Factory/Establishment :   ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellhep8.HorizontalAlignment = 0;
        cellhep8.Colspan = 2;
        cellhep8.Border = 0;
        cellhep8.PaddingLeft = 0;
        tblenewapp1.AddCell(cellhep8);


        PdfPCell cellhelp8 = new PdfPCell(new Phrase("   ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellhelp8.HorizontalAlignment = 0;
        cellhelp8.Colspan = 2;
        cellhelp8.Border = 0;
        cellhelp8.PaddingLeft = 0;
        tblenewapp1.AddCell(cellhelp8);



        PdfPCell cellhlp8 = new PdfPCell(new Phrase("Name and Address of the Principal Employer :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellhlp8.HorizontalAlignment = 0;
        cellhlp8.Colspan = 2;
        cellhlp8.Border = 0;
        cellhlp8.PaddingLeft = 0;
        tblenewapp1.AddCell(cellhlp8);



        PdfPCell cellhlp9 = new PdfPCell(new Phrase("   ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellhlp9.HorizontalAlignment = 0;
        cellhlp9.Colspan = 2;
        cellhlp9.Border = 0;
        cellhlp9.PaddingLeft = 0;
        tblenewapp1.AddCell(cellhlp9);



        PdfPCell cellhelp6 = new PdfPCell(new Phrase("Name and Address of the Contractor (if any) :  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellhelp6.HorizontalAlignment = 0;
        cellhelp6.Colspan = 2;
        cellhelp6.Border = 0;
        cellhelp6.PaddingLeft = 0;
        tblenewapp1.AddCell(cellhelp6);


        PdfPCell cellhelp7 = new PdfPCell(new Phrase("   ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellhelp7.HorizontalAlignment = 0;
        cellhelp7.Colspan = 1;
        cellhelp7.Border = 0;
        cellhelp7.PaddingLeft = 0;
        tblenewapp1.AddCell(cellhelp7);

        PdfPCell cellhelp5 = new PdfPCell(new Phrase("Month/Year", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellhelp5.HorizontalAlignment = 0;
        cellhelp5.Colspan = 2;
        cellhelp5.Border = 0;
        tblenewapp1.AddCell(cellhelp5);

        tblenewapp1.AddCell(cellspace);
        tblenewapp1.AddCell(cellspace);
        tblenewapp1.AddCell(cellspace);


        PdfPCell cellhelp4 = new PdfPCell(new Phrase("Place of Work :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellhelp4.HorizontalAlignment = 0;
        cellhelp4.Colspan = 13;
        cellhelp4.Border = 0;
        cellhelp5.PaddingLeft = 150;
        tblenewapp1.AddCell(cellhelp4);

        tblenewapp1.AddCell(cellspace);

        PdfPCell cellhelp3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellhelp3.HorizontalAlignment = 0;
        cellhelp3.Colspan = 4;
        tblenewapp1.AddCell(cellhelp3);



        PdfPCell cellhelp2 = new PdfPCell(new Phrase(" Particulars of OT Work ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellhelp2.HorizontalAlignment = 1;
        cellhelp2.Colspan = 2;
        tblenewapp1.AddCell(cellhelp2);



        PdfPCell cellhelp1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellhelp1.HorizontalAlignment = 0;
        cellhelp1.Colspan = 7;
        tblenewapp1.AddCell(cellhelp1);






        PdfPCell cellfile13 = new PdfPCell(new Phrase("Sl.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfile13.HorizontalAlignment = 1;
        cellfile13.Colspan = 0;
        tblenewapp1.AddCell(cellfile13);

        PdfPCell cellfile12 = new PdfPCell(new Phrase("Employee Name Father/Husband Name", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfile12.HorizontalAlignment = 1;
        cellfile12.Colspan = 0;
        tblenewapp1.AddCell(cellfile12);

        PdfPCell cellfile11 = new PdfPCell(new Phrase("Sex ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfile11.HorizontalAlignment = 1;
        cellfile11.Colspan = 0;
        tblenewapp1.AddCell(cellfile11);


        PdfPCell cellfile10 = new PdfPCell(new Phrase("Designation/Employment No.  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfile10.HorizontalAlignment = 1;
        cellfile10.Colspan = 0;
        tblenewapp1.AddCell(cellfile10);

        PdfPCell cellfile9 = new PdfPCell(new Phrase("Date", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfile9.HorizontalAlignment = 1;
        cellfile9.Colspan = 0;
        tblenewapp1.AddCell(cellfile9);

        PdfPCell cellfile8 = new PdfPCell(new Phrase("Hours", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfile8.HorizontalAlignment = 1;
        cellfile8.Colspan = 0;
        tblenewapp1.AddCell(cellfile8);

        PdfPCell cellfile7 = new PdfPCell(new Phrase("Normal rate of wages per hour", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfile7.HorizontalAlignment = 1;
        cellfile7.Colspan = 0;
        tblenewapp1.AddCell(cellfile7);

        PdfPCell cellfile6 = new PdfPCell(new Phrase("Overtime wages per hour", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfile6.HorizontalAlignment = 1;
        cellfile6.Colspan = 0;
        tblenewapp1.AddCell(cellfile6);

        PdfPCell cellfile5 = new PdfPCell(new Phrase("Normal piece rate of wages", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfile5.HorizontalAlignment = 1;
        cellfile5.Colspan = 0;
        tblenewapp1.AddCell(cellfile5);

        PdfPCell cellfile4 = new PdfPCell(new Phrase("OT piece rate of wages", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfile4.HorizontalAlignment = 1;
        cellfile4.Colspan = 0;
        tblenewapp1.AddCell(cellfile4);


        PdfPCell cellfile3 = new PdfPCell(new Phrase("Total OT earnings", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfile3.HorizontalAlignment = 1;
        cellfile3.Colspan = 0;
        tblenewapp1.AddCell(cellfile3);

        PdfPCell cellfile2 = new PdfPCell(new Phrase("Date of payment", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfile2.HorizontalAlignment = 1;
        cellfile2.Colspan = 0;
        tblenewapp1.AddCell(cellfile2);

        PdfPCell cellfile1 = new PdfPCell(new Phrase("Signature/Thumb impression of the Employee", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfile1.HorizontalAlignment = 1;
        cellfile1.Colspan = 0;
        tblenewapp1.AddCell(cellfile1);







        PdfPCell cellview13 = new PdfPCell(new Phrase("  1 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellview13.HorizontalAlignment = 1;
        cellview13.Colspan = 0;
        cellview13.PaddingBottom = 10f;
        tblenewapp1.AddCell(cellview13);

        PdfPCell cellview12 = new PdfPCell(new Phrase("  2", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellview12.HorizontalAlignment = 1;
        cellview12.Colspan = 0;
        cellview12.PaddingBottom = 10f;
        tblenewapp1.AddCell(cellview12);

        PdfPCell cellview11 = new PdfPCell(new Phrase("  3 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellview11.HorizontalAlignment = 1;
        cellview11.Colspan = 0;
        cellview11.PaddingBottom = 10f;
        tblenewapp1.AddCell(cellview11);

        PdfPCell cellview10 = new PdfPCell(new Phrase("  4", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellview10.HorizontalAlignment = 1;
        cellview10.Colspan = 0;
        cellview10.PaddingBottom = 10f;
        tblenewapp1.AddCell(cellview10);

        PdfPCell cellview9 = new PdfPCell(new Phrase("  5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellview9.HorizontalAlignment = 1;
        cellview9.Colspan = 0;
        cellview9.PaddingBottom = 10f;
        tblenewapp1.AddCell(cellview9);

        PdfPCell cellview8 = new PdfPCell(new Phrase("  6", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellview8.HorizontalAlignment = 1;
        cellview8.Colspan = 0;
        cellview8.PaddingBottom = 10f;
        tblenewapp1.AddCell(cellview8);

        PdfPCell cellview7 = new PdfPCell(new Phrase("  7 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellview7.HorizontalAlignment = 1;
        cellview7.Colspan = 0;
        cellview7.PaddingBottom = 10f;
        tblenewapp1.AddCell(cellview7);

        PdfPCell cellview6 = new PdfPCell(new Phrase("  8", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellview6.HorizontalAlignment = 1;
        cellview6.Colspan = 0;
        cellview6.PaddingBottom = 10f;
        tblenewapp1.AddCell(cellview6);

        PdfPCell cellview5 = new PdfPCell(new Phrase("  9", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellview5.HorizontalAlignment = 1;
        cellview5.Colspan = 0;
        cellview5.PaddingBottom = 10f;
        tblenewapp1.AddCell(cellview5);

        PdfPCell cellview4 = new PdfPCell(new Phrase("  10", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellview4.HorizontalAlignment = 1;
        cellview4.Colspan = 0;
        cellview4.PaddingBottom = 10f;
        tblenewapp1.AddCell(cellview4);

        PdfPCell cellview3 = new PdfPCell(new Phrase("  11", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellview3.HorizontalAlignment = 1;
        cellview3.Colspan = 0;
        cellview3.PaddingBottom = 10f;
        tblenewapp1.AddCell(cellview3);

        PdfPCell cellview2 = new PdfPCell(new Phrase("  12", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellview2.HorizontalAlignment = 1;
        cellview2.Colspan = 0;
        cellview2.PaddingBottom = 10f;
        tblenewapp1.AddCell(cellview2);


        PdfPCell cellview1 = new PdfPCell(new Phrase("  13", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellview1.HorizontalAlignment = 1;
        cellview1.Colspan = 0;
        cellview1.PaddingBottom = 10f;
        tblenewapp1.AddCell(cellview1);




        PdfPCell cellsreplace13 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsreplace13.HorizontalAlignment = 1;
        cellsreplace13.Colspan = 0;
        cellsreplace13.PaddingBottom = 40f;
        tblenewapp1.AddCell(cellsreplace13);

        PdfPCell cellsreplace12 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsreplace12.HorizontalAlignment = 1;
        cellsreplace12.Colspan = 0;
        cellsreplace12.PaddingBottom = 40f;
        tblenewapp1.AddCell(cellsreplace12);

        PdfPCell cellsreplace11 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsreplace11.HorizontalAlignment = 1;
        cellsreplace11.Colspan = 0;
        cellsreplace11.PaddingBottom = 40f;
        tblenewapp1.AddCell(cellsreplace11);

        PdfPCell cellsreplace10 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsreplace10.HorizontalAlignment = 1;
        cellsreplace10.Colspan = 0;
        cellsreplace10.PaddingBottom = 40f;
        tblenewapp1.AddCell(cellsreplace10);

        PdfPCell cellsreplace9 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsreplace9.HorizontalAlignment = 1;
        cellsreplace9.Colspan = 0;
        cellsreplace9.PaddingBottom = 40f;
        tblenewapp1.AddCell(cellsreplace9);

        PdfPCell cellsreplace8 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsreplace8.HorizontalAlignment = 1;
        cellsreplace8.Colspan = 0;
        cellsreplace8.PaddingBottom = 40f;
        tblenewapp1.AddCell(cellsreplace8);

        PdfPCell cellsreplace7 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsreplace7.HorizontalAlignment = 1;
        cellsreplace7.Colspan = 0;
        cellsreplace7.PaddingBottom = 40f;
        tblenewapp1.AddCell(cellsreplace7);

        PdfPCell cellsreplace6 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsreplace6.HorizontalAlignment = 1;
        cellsreplace6.Colspan = 0;
        cellsreplace6.PaddingBottom = 40f;
        tblenewapp1.AddCell(cellsreplace6);

        PdfPCell cellsreplace5 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsreplace5.HorizontalAlignment = 1;
        cellsreplace5.Colspan = 0;
        cellsreplace5.PaddingBottom = 40f;
        tblenewapp1.AddCell(cellsreplace5);

        PdfPCell cellsreplace4 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsreplace4.HorizontalAlignment = 1;
        cellsreplace4.Colspan = 0;
        cellsreplace4.PaddingBottom = 40f;
        tblenewapp1.AddCell(cellsreplace4);

        PdfPCell cellsreplace3 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsreplace3.HorizontalAlignment = 1;
        cellsreplace3.Colspan = 0;
        cellsreplace3.PaddingBottom = 40f;
        tblenewapp1.AddCell(cellsreplace3);

        PdfPCell cellsreplace2 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsreplace2.HorizontalAlignment = 1;
        cellsreplace2.Colspan = 0;
        cellsreplace2.PaddingBottom = 40f;
        tblenewapp1.AddCell(cellsreplace2);


        PdfPCell cellsreplace1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsreplace1.HorizontalAlignment = 1;
        cellsreplace1.Colspan = 0;
        cellsreplace1.PaddingBottom = 40f;
        tblenewapp1.AddCell(cellsreplace1);






        document.Add(tblenewapp1);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);


        string filename = "form9.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;

        //}
    }

    protected void btnmusterroll_Click(object sender, EventArgs e)
    {

        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(5);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell cellHead1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead1.HorizontalAlignment = 1;
        cellHead1.Colspan = 5;
        cellHead1.Border = 0;
        cellHead1.PaddingBottom = 15;
        tablesnewone.AddCell(cellHead1);

        PdfPCell cellHead = new PdfPCell(new Phrase("FORM-A  ", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 5;
        cellHead.Border = 0;
        tablesnewone.AddCell(cellHead);

        PdfPCell cellmuster = new PdfPCell(new Phrase("MUSTER-ROLL", FontFactory.GetFont(FontStyle, 13, Font.BOLD, BaseColor.BLACK)));
        cellmuster.HorizontalAlignment = 1;
        cellmuster.Colspan = 5;
        cellmuster.Border = 0;
        tablesnewone.AddCell(cellmuster);

        PdfPCell cellRule32 = new PdfPCell(new Phrase("[Rule 3]", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellRule32.HorizontalAlignment = 1;
        cellRule32.Colspan = 5;
        cellRule32.Border = 0;
        tablesnewone.AddCell(cellRule32);


        PdfPCell cellHead2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead2.HorizontalAlignment = 1;
        cellHead2.Colspan = 5;
        cellHead2.Border = 0;
        cellHead2.PaddingBottom = 15;
        tablesnewone.AddCell(cellHead2);


        PdfPCell nameofmine = new PdfPCell(new Phrase("Name of mine or circus- Uma", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameofmine.HorizontalAlignment = 0;
        nameofmine.Colspan = 5;
        nameofmine.Border = 0;
        tablesnewone.AddCell(nameofmine);

        PdfPCell cell1 = new PdfPCell(new Phrase("1. Serial number-2514 ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell1.HorizontalAlignment = 0;
        cell1.Colspan = 5;
        cell1.Border = 0;
        tablesnewone.AddCell(cell1);

        PdfPCell cell2 = new PdfPCell(new Phrase("2. Name of Women and her father's(or ,if married, husband's)name-Chandrappa", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell2.HorizontalAlignment = 0;
        cell2.Colspan = 5;
        cell2.Border = 0;
        tablesnewone.AddCell(cell2);

        PdfPCell cell3 = new PdfPCell(new Phrase("3. Date of appointment-", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell3.HorizontalAlignment = 0;
        cell3.Colspan = 5;
        cell3.Border = 0;
        tablesnewone.AddCell(cell3);

        PdfPCell cell4 = new PdfPCell(new Phrase("4. Nature of Work-", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell4.HorizontalAlignment = 0;
        cell4.Colspan = 5;
        cell4.Border = 0;
        tablesnewone.AddCell(cell4);

        PdfPCell cell5 = new PdfPCell(new Phrase("5. Dates with month and year in which she is employed, laid off and employed", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell5.HorizontalAlignment = 0;
        cell5.Colspan = 5;
        cell5.Border = 0;
        tablesnewone.AddCell(cell5);

        PdfPCell cellmt = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellmt.HorizontalAlignment = 0;
        cellmt.Colspan = 5;
        cellmt.Border = 0;
        tablesnewone.AddCell(cellmt);

        PdfPCell cellmonth = new PdfPCell(new Phrase("Month", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellmonth.HorizontalAlignment = 1;
        cellmonth.Colspan = 1;
        tablesnewone.AddCell(cellmonth);

        PdfPCell cellnoofdaysemployed = new PdfPCell(new Phrase("No. of days employed", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellnoofdaysemployed.HorizontalAlignment = 1;
        cellnoofdaysemployed.Colspan = 1;
        tablesnewone.AddCell(cellnoofdaysemployed);

        PdfPCell cellnoodayslaid = new PdfPCell(new Phrase("No. of days laid off", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellnoodayslaid.HorizontalAlignment = 1;
        cellnoodayslaid.Colspan = 1;
        tablesnewone.AddCell(cellnoodayslaid);

        PdfPCell cellnoofdaysnotemployed = new PdfPCell(new Phrase("No. of days not employed", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellnoofdaysnotemployed.HorizontalAlignment = 1;
        cellnoofdaysnotemployed.Colspan = 1;
        tablesnewone.AddCell(cellnoofdaysnotemployed);

        PdfPCell cellremarks = new PdfPCell(new Phrase("Remarks", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellremarks.HorizontalAlignment = 0;
        cellremarks.Colspan = 1;
        tablesnewone.AddCell(cellremarks);

        PdfPCell month = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        month.HorizontalAlignment = 0;
        month.Colspan = 1;
        tablesnewone.AddCell(month);

        PdfPCell noofdays = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofdays.HorizontalAlignment = 0;
        noofdays.Colspan = 1;
        noofdays.FixedHeight = 20;
        tablesnewone.AddCell(noofdays);

        PdfPCell noofdayslaidof = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofdayslaidof.HorizontalAlignment = 0;
        noofdayslaidof.Colspan = 1;
        tablesnewone.AddCell(noofdayslaidof);

        PdfPCell noofdaysemployed = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofdaysemployed.HorizontalAlignment = 0;
        noofdaysemployed.Colspan = 1;
        tablesnewone.AddCell(noofdaysemployed);

        PdfPCell remarks = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        remarks.HorizontalAlignment = 0;
        remarks.Colspan = 1;
        tablesnewone.AddCell(remarks);

        PdfPCell cell6 = new PdfPCell(new Phrase("6. Date on Which the Women gives gives notice under section 6=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell6.HorizontalAlignment = 0;
        cell6.Colspan = 5;
        cell6.Border = 0;
        tablesnewone.AddCell(cell6);

        PdfPCell cell7 = new PdfPCell(new Phrase("7. Date of discharge/dismissal,if any=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell7.HorizontalAlignment = 0;
        cell7.Colspan = 5;
        cell7.Border = 0;
        tablesnewone.AddCell(cell7);

        PdfPCell cell8 = new PdfPCell(new Phrase("8. Date of Production of proof of pregnancy under section 6=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell8.HorizontalAlignment = 0;
        cell8.Colspan = 5;
        cell8.Border = 0;
        tablesnewone.AddCell(cell8);

        PdfPCell cell9 = new PdfPCell(new Phrase("9. Date of birth of child=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell9.HorizontalAlignment = 0;
        cell9.Colspan = 5;
        cell9.Border = 0;
        tablesnewone.AddCell(cell9);

        PdfPCell cell10 = new PdfPCell(new Phrase("10. Date of production of proof of delivery/miscarriage/medical termination of pregnancy/tubectomy operation/deth=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell10.HorizontalAlignment = 0;
        cell10.Colspan = 5;
        cell10.Border = 0;
        tablesnewone.AddCell(cell10);

        PdfPCell cellPl1 = new PdfPCell(new Phrase("11. Date of production of proof of illness referred to in section 10=Na  ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellPl1.HorizontalAlignment = 0;
        cellPl1.Colspan = 5;
        cellPl1.Border = 0;
        tablesnewone.AddCell(cellPl1);

        PdfPCell cel1l2 = new PdfPCell(new Phrase("12. Date with the amount of maternity benefit paid in advance of ecpected salary=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cel1l2.HorizontalAlignment = 0;
        cel1l2.Colspan = 5;
        cel1l2.Border = 0;
        tablesnewone.AddCell(cel1l2);

        PdfPCell cell13 = new PdfPCell(new Phrase("13. Date with the amount of subsequent payment of maternity benefit=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell13.HorizontalAlignment = 0;
        cell13.Colspan = 5;
        cell13.Border = 0;
        tablesnewone.AddCell(cell13);

        PdfPCell cell14 = new PdfPCell(new Phrase("14. Date with the amount of bonus,if paid,under section 8=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell14.HorizontalAlignment = 0;
        cell14.Colspan = 5;
        cell14.Border = 0;
        tablesnewone.AddCell(cell14);

        PdfPCell cell15 = new PdfPCell(new Phrase("15. Date with the amount of wages paid on account of leave under section 9=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell15.HorizontalAlignment = 0;
        cell15.Colspan = 5;
        cell15.Border = 0;
        tablesnewone.AddCell(cell15);



        PdfPCell cell15a = new PdfPCell(new Phrase("15 A Date with the amount of wages paid on account of leave under section 9A=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell15a.HorizontalAlignment = 0;
        cell15a.Colspan = 5;
        cell15a.Border = 0;
        tablesnewone.AddCell(cell15a);

        PdfPCell cell16 = new PdfPCell(new Phrase("16. Date with the amount of wages paid on account of leave under section 10 and period of leave granted =Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell16.HorizontalAlignment = 0;
        cell16.Colspan = 5;
        cell16.Border = 0;
        tablesnewone.AddCell(cell16);

        PdfPCell cell17 = new PdfPCell(new Phrase("17. Name of the person nominated by the women under section 6=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell17.HorizontalAlignment = 0;
        cell17.Colspan = 5;
        cell17.Border = 0;
        tablesnewone.AddCell(cell17);

        PdfPCell cell18 = new PdfPCell(new Phrase("18. If the women dies,the date of her death, the name of the person to whom maternity benifit and/or other amount was paid the amount thereof, and the date of payment=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell18.HorizontalAlignment = 0;
        cell18.Colspan = 5;
        cell18.Border = 0;
        tablesnewone.AddCell(cell18);

        PdfPCell cell19 = new PdfPCell(new Phrase("19. if the women dies and the child survives,the name of the person to whom the amount of maternity bnfit was paid on behalf of the period for which it was paid=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell19.HorizontalAlignment = 0;
        cell19.Colspan = 5;
        cell19.Border = 0;
        tablesnewone.AddCell(cell19);

        PdfPCell cell20 = new PdfPCell(new Phrase("20. Signature of the employer of the mine or circus authenticating the entries in the muster roll=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell20.HorizontalAlignment = 0;
        cell20.Colspan = 5;
        cell20.Border = 0;
        tablesnewone.AddCell(cell20);

        PdfPCell cell21 = new PdfPCell(new Phrase("21. Remarks coloum for the use of the inspector=Na", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell21.HorizontalAlignment = 0;
        cell21.Colspan = 5;
        cell21.Border = 0;
        tablesnewone.AddCell(cell21);





        document.Add(tablesnewone);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "formX.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnleavewages_Click(object sender, EventArgs e)
    {

        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion


        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL.Rotate());
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(19);
        tablesnewone.TotalWidth = 900f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 4f, 4f, 4f, 4f, 4f, 2f, 3f, 3f, 3f, 3f, 2.5f, 3f, 3f, 3f, 2.5f, 2.5f, 2.5f, 3.5f };
        tablesnewone.SetWidths(width);

        PdfPCell heading = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        heading.HorizontalAlignment = 1;
        heading.Colspan = 1;
        heading.BorderWidthBottom = 0;
        heading.BorderWidthLeft = .5f;
        heading.BorderWidthRight = 0;
        heading.BorderWidthTop = .5f;
        tablesnewone.AddCell(heading);


        PdfPCell headingd = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        headingd.HorizontalAlignment = 1;
        headingd.Colspan = 1;
        headingd.BorderWidthBottom = 0;
        headingd.BorderWidthLeft = .5f;
        headingd.BorderWidthRight = 0;
        headingd.BorderWidthTop = .5f;
        tablesnewone.AddCell(headingd);

        PdfPCell headingb = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        headingb.HorizontalAlignment = 1;
        headingb.Colspan = 1;
        headingb.BorderWidthBottom = 0;
        headingb.BorderWidthLeft = .5f;
        headingb.BorderWidthRight = 0;
        headingb.BorderWidthTop = .5f;
        tablesnewone.AddCell(headingb);

        PdfPCell headinga = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        headinga.HorizontalAlignment = 1;
        headinga.Colspan = 1;
        headinga.BorderWidthBottom = 0;
        headinga.BorderWidthLeft = .5f;
        headinga.BorderWidthRight = 0;
        headinga.BorderWidthTop = .5f;
        tablesnewone.AddCell(headinga);



        PdfPCell heading1 = new PdfPCell(new Phrase("Part - I                                                              Earned Leave", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        heading1.HorizontalAlignment = 0;
        heading1.Colspan = 11;
        tablesnewone.AddCell(heading1);


        PdfPCell heading2 = new PdfPCell(new Phrase("Part - II       Sick / Acc ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        heading2.HorizontalAlignment = 1;
        heading2.Colspan = 4;
        tablesnewone.AddCell(heading2);



        PdfPCell heading3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        heading3.HorizontalAlignment = 1;
        heading3.Colspan = 1;
        heading3.BorderWidthBottom = 0;
        heading3.BorderWidthLeft = .5f;
        heading3.BorderWidthRight = .5f;
        heading3.BorderWidthTop = 0;
        tablesnewone.AddCell(heading3);

        PdfPCell heading3a = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        heading3a.HorizontalAlignment = 1;
        heading3a.Colspan = 1;
        heading3a.BorderWidthBottom = 0;
        heading3a.BorderWidthLeft = .5f;
        heading3a.BorderWidthRight = .5f;
        heading3a.BorderWidthTop = 0;
        tablesnewone.AddCell(heading3a);

        PdfPCell heading3b = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        heading3b.HorizontalAlignment = 1;
        heading3b.Colspan = 1;
        heading3b.BorderWidthBottom = 0;
        heading3b.BorderWidthLeft = .5f;
        heading3b.BorderWidthRight = .5f;
        heading3b.BorderWidthTop = 0;
        tablesnewone.AddCell(heading3b);

        PdfPCell heading3c = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        heading3c.HorizontalAlignment = 1;
        heading3c.Colspan = 1;
        heading3c.BorderWidthBottom = 0;
        heading3c.BorderWidthLeft = .5f;
        heading3c.BorderWidthRight = .5f;
        heading3c.BorderWidthTop = 0;
        tablesnewone.AddCell(heading3c);



        PdfPCell heading4 = new PdfPCell(new Phrase("No Of days worked", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        heading4.HorizontalAlignment = 1;
        heading4.Colspan = 3;
        tablesnewone.AddCell(heading4);


        PdfPCell heading5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        heading5.HorizontalAlignment = 1;
        heading5.Colspan = 1;
        heading5.BorderWidthBottom = 0;
        heading5.BorderWidthLeft = .5f;
        heading5.BorderWidthRight = .5f;
        heading5.BorderWidthTop = .5f;
        tablesnewone.AddCell(heading5);


        PdfPCell heading5a = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        heading5a.HorizontalAlignment = 1;
        heading5a.Colspan = 1;
        heading5a.BorderWidthBottom = 0;
        heading5a.BorderWidthLeft = .5f;
        heading5a.BorderWidthRight = .5f;
        heading5a.BorderWidthTop = .5f;
        tablesnewone.AddCell(heading5a);


        PdfPCell heading6 = new PdfPCell(new Phrase("Leave Availed", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        heading6.HorizontalAlignment = 1;
        heading6.Colspan = 3;
        tablesnewone.AddCell(heading6);


        PdfPCell heading7 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        heading7.HorizontalAlignment = 1;
        heading7.Colspan = 1;
        heading7.BorderWidthBottom = 0;
        heading7.BorderWidthLeft = .5f;
        heading7.BorderWidthRight = .5f;
        heading7.BorderWidthTop = .5f;
        tablesnewone.AddCell(heading7);


        PdfPCell heading7a = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        heading7a.HorizontalAlignment = 1;
        heading7a.Colspan = 1;
        heading7a.BorderWidthBottom = 0;
        heading7a.BorderWidthLeft = .5f;
        heading7a.BorderWidthRight = .5f;
        heading7a.BorderWidthTop = .5f;
        tablesnewone.AddCell(heading7a);


        PdfPCell heading7b = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        heading7b.HorizontalAlignment = 1;
        heading7b.Colspan = 1;
        heading7b.BorderWidthBottom = 0;
        heading7b.BorderWidthLeft = .5f;
        heading7b.BorderWidthRight = .5f;
        heading7b.BorderWidthTop = .5f;
        tablesnewone.AddCell(heading7b);

        PdfPCell heading8 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        heading8.HorizontalAlignment = 1;
        heading8.Colspan = 1;
        heading8.BorderWidthBottom = 0;
        heading8.BorderWidthLeft = .5f;
        heading8.BorderWidthRight = .5f;
        heading8.BorderWidthTop = .5f;
        tablesnewone.AddCell(heading8);

        PdfPCell heading9 = new PdfPCell(new Phrase("Accident", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        heading9.HorizontalAlignment = 1;
        heading9.Colspan = 2;
        tablesnewone.AddCell(heading9);

        PdfPCell heading10 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        heading10.HorizontalAlignment = 1;
        heading10.Colspan = 1;
        heading10.BorderWidthBottom = 0;
        heading10.BorderWidthLeft = .5f;
        heading10.BorderWidthRight = .5f;
        heading10.BorderWidthTop = .5f;
        tablesnewone.AddCell(heading10);


        PdfPCell register = new PdfPCell(new Phrase("Register Of", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        register.HorizontalAlignment = 1;
        register.Rowspan = 1;
        register.Rotation = 90;
        register.BorderWidthBottom = .5f;
        register.BorderWidthLeft = .5f;
        register.BorderWidthRight = .5f;
        register.BorderWidthTop = 0;
        tablesnewone.AddCell(register);

        PdfPCell dateofentry = new PdfPCell(new Phrase("Date of entry into service  ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dateofentry.HorizontalAlignment = 1;
        dateofentry.Colspan = 1;
        dateofentry.BorderWidthBottom = .5f;
        dateofentry.BorderWidthLeft = .5f;
        dateofentry.BorderWidthRight = .5f;
        dateofentry.BorderWidthTop = 0;
        tablesnewone.AddCell(dateofentry);

        PdfPCell nameofemp = new PdfPCell(new Phrase("Name of the Employee", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        nameofemp.HorizontalAlignment = 1;
        nameofemp.Colspan = 1;
        nameofemp.BorderWidthBottom = .5f;
        nameofemp.BorderWidthLeft = .5f;
        nameofemp.BorderWidthRight = .5f;
        nameofemp.BorderWidthTop = 0;
        tablesnewone.AddCell(nameofemp);

        PdfPCell fathername1 = new PdfPCell(new Phrase("Father/Husband Name", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        fathername1.HorizontalAlignment = 1;
        fathername1.Colspan = 1;
        fathername1.BorderWidthBottom = .5f;
        fathername1.BorderWidthLeft = .5f;
        fathername1.BorderWidthRight = .5f;
        fathername1.BorderWidthTop = 0;
        tablesnewone.AddCell(fathername1);

        PdfPCell from = new PdfPCell(new Phrase("From", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        from.HorizontalAlignment = 1;
        from.Colspan = 1;
        tablesnewone.AddCell(from);


        PdfPCell to = new PdfPCell(new Phrase("TO", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        to.HorizontalAlignment = 1;
        to.Colspan = 1;
        to.Border = 0;
        tablesnewone.AddCell(to);


        PdfPCell wo = new PdfPCell(new Phrase("al Days Wo", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        wo.HorizontalAlignment = 0;
        wo.Colspan = 1;
        tablesnewone.AddCell(wo);

        PdfPCell leavearned = new PdfPCell(new Phrase("Leave Earned", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        leavearned.HorizontalAlignment = 0;
        leavearned.Colspan = 1;
        leavearned.BorderWidthBottom = .5f;
        leavearned.BorderWidthLeft = .5f;
        leavearned.BorderWidthRight = .5f;
        leavearned.BorderWidthTop = 0;
        tablesnewone.AddCell(leavearned);

        PdfPCell leavecredit = new PdfPCell(new Phrase("Leave at Credit", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        leavecredit.HorizontalAlignment = 0;
        leavecredit.Colspan = 1;
        leavecredit.BorderWidthBottom = .5f;
        leavecredit.BorderWidthLeft = .5f;
        leavecredit.BorderWidthRight = .5f;
        leavecredit.BorderWidthTop = 0;
        tablesnewone.AddCell(leavecredit);

        PdfPCell froml = new PdfPCell(new Phrase("From", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        froml.HorizontalAlignment = 0;
        froml.Colspan = 1;
        tablesnewone.AddCell(froml);

        PdfPCell tol = new PdfPCell(new Phrase("To", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        tol.HorizontalAlignment = 0;
        tol.Colspan = 1;
        tablesnewone.AddCell(tol);

        PdfPCell noofdays = new PdfPCell(new Phrase("No. of Days", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofdays.HorizontalAlignment = 0;
        noofdays.Colspan = 1;
        tablesnewone.AddCell(noofdays);

        PdfPCell balance = new PdfPCell(new Phrase("Balance on return", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        balance.HorizontalAlignment = 0;
        balance.Colspan = 1;
        balance.BorderWidthBottom = .5f;
        balance.BorderWidthLeft = .5f;
        balance.BorderWidthRight = .5f;
        balance.BorderWidthTop = 0;
        tablesnewone.AddCell(balance);

        PdfPCell wages = new PdfPCell(new Phrase("Date on which wages for", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        wages.HorizontalAlignment = 1;
        wages.Colspan = 1;
        wages.BorderWidthBottom = .5f;
        wages.BorderWidthLeft = .5f;
        wages.BorderWidthRight = .5f;
        wages.BorderWidthTop = 0;
        tablesnewone.AddCell(wages);

        PdfPCell Remarks = new PdfPCell(new Phrase("Remarks", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Remarks.HorizontalAlignment = 1;
        Remarks.Colspan = 1;
        Remarks.BorderWidthBottom = .5f;
        Remarks.BorderWidthLeft = .5f;
        Remarks.BorderWidthRight = .5f;
        Remarks.BorderWidthTop = 0;
        tablesnewone.AddCell(Remarks);

        PdfPCell Year = new PdfPCell(new Phrase("Year", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Year.HorizontalAlignment = 1;
        Year.Colspan = 1;
        Year.BorderWidthBottom = .5f;
        Year.BorderWidthLeft = .5f;
        Year.BorderWidthRight = .5f;
        Year.BorderWidthTop = 0;
        tablesnewone.AddCell(Year);

        PdfPCell cred = new PdfPCell(new Phrase("cred", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cred.HorizontalAlignment = 1;
        cred.Colspan = 1;
        tablesnewone.AddCell(cred);

        PdfPCell Avile = new PdfPCell(new Phrase("Avile", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Avile.HorizontalAlignment = 0;
        Avile.Colspan = 1;
        tablesnewone.AddCell(Avile);

        PdfPCell balanceat = new PdfPCell(new Phrase("Balance at the end of the", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        balanceat.HorizontalAlignment = 0;
        balanceat.Colspan = 1;
        balanceat.BorderWidthBottom = .5f;
        balanceat.BorderWidthLeft = .5f;
        balanceat.BorderWidthRight = .5f;
        balanceat.BorderWidthTop = 0;
        tablesnewone.AddCell(balanceat);




        PdfPCell register1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        register1.HorizontalAlignment = 1;
        register1.Rowspan = 1;
        register1.Rotation = 90;
        tablesnewone.AddCell(register1);

        PdfPCell dateofentry1 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        dateofentry1.HorizontalAlignment = 1;
        dateofentry1.Colspan = 1;
        tablesnewone.AddCell(dateofentry1);

        PdfPCell nameofemp1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.BOLD, BaseColor.BLACK)));
        nameofemp1.HorizontalAlignment = 1;
        nameofemp1.Colspan = 1;
        tablesnewone.AddCell(nameofemp1);

        PdfPCell fathername11 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.BOLD, BaseColor.BLACK)));
        fathername11.HorizontalAlignment = 1;
        fathername11.Colspan = 1;
        tablesnewone.AddCell(fathername11);

        PdfPCell from1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        from1.HorizontalAlignment = 1;
        from1.Colspan = 1;
        tablesnewone.AddCell(from1);


        PdfPCell to1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        to1.HorizontalAlignment = 1;
        to1.Colspan = 1;
        tablesnewone.AddCell(to1);


        PdfPCell wo1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        wo1.HorizontalAlignment = 0;
        wo1.Colspan = 1;
        tablesnewone.AddCell(wo1);

        PdfPCell leavearned1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        leavearned1.HorizontalAlignment = 0;
        leavearned1.Colspan = 1;
        tablesnewone.AddCell(leavearned1);

        PdfPCell leavecredit1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        leavecredit1.HorizontalAlignment = 0;
        leavecredit1.Colspan = 1;
        tablesnewone.AddCell(leavecredit1);

        PdfPCell froml1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        froml1.HorizontalAlignment = 0;
        froml1.Colspan = 1;
        tablesnewone.AddCell(froml1);

        PdfPCell tol1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        tol1.HorizontalAlignment = 0;
        tol1.Colspan = 1;
        tablesnewone.AddCell(tol1);

        PdfPCell noofdays1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofdays1.HorizontalAlignment = 0;
        noofdays1.Colspan = 1;
        tablesnewone.AddCell(noofdays1);

        PdfPCell balance1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        balance1.HorizontalAlignment = 0;
        balance1.Colspan = 1;
        tablesnewone.AddCell(balance1);

        PdfPCell wages1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        wages1.HorizontalAlignment = 1;
        wages1.Colspan = 1;
        tablesnewone.AddCell(wages1);

        PdfPCell Remarks1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Remarks1.HorizontalAlignment = 1;
        Remarks1.Colspan = 1;
        tablesnewone.AddCell(Remarks1);

        PdfPCell Year1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Year1.HorizontalAlignment = 1;
        Year1.Colspan = 1;
        tablesnewone.AddCell(Year1);

        PdfPCell cred1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cred1.HorizontalAlignment = 1;
        cred1.Colspan = 1;
        tablesnewone.AddCell(cred1);

        PdfPCell Avile1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Avile1.HorizontalAlignment = 0;
        Avile1.Colspan = 1;
        tablesnewone.AddCell(Avile1);

        PdfPCell balanceat1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        balanceat1.HorizontalAlignment = 0;
        balanceat1.Colspan = 1;
        tablesnewone.AddCell(balanceat1);



        document.Add(tablesnewone);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "formX.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btngratuity_Click(object sender, EventArgs e)
    {

        int Fontsize = 10;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion


        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion





        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(4);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell cellHead1 = new PdfPCell(new Phrase("The Karnataka payment of Gratuity Rules, 1972", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead1.HorizontalAlignment = 1;
        cellHead1.Colspan = 4;
        cellHead1.Border = 0;
        cellHead1.PaddingBottom = 15;
        tablesnewone.AddCell(cellHead1);

        PdfPCell cellHead = new PdfPCell(new Phrase("FORM-'F'  ", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 4;
        cellHead.Border = 0;
        tablesnewone.AddCell(cellHead);

        PdfPCell cellmuster = new PdfPCell(new Phrase("MUSTER-ROLL", FontFactory.GetFont(fontsyle, 13, Font.BOLD, BaseColor.BLACK)));
        cellmuster.HorizontalAlignment = 1;
        cellmuster.Colspan = 4;
        cellmuster.Border = 0;
        tablesnewone.AddCell(cellmuster);

        PdfPCell cellRule32 = new PdfPCell(new Phrase("[See sub-rule(1) of Rule 6]", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellRule32.HorizontalAlignment = 1;
        cellRule32.Colspan = 4;
        cellRule32.Border = 0;
        tablesnewone.AddCell(cellRule32);


        PdfPCell Nomination = new PdfPCell(new Phrase("Nomination", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        Nomination.HorizontalAlignment = 1;
        Nomination.Colspan = 4;
        Nomination.Border = 0;
        tablesnewone.AddCell(Nomination);


        PdfPCell to = new PdfPCell(new Phrase("To", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        to.HorizontalAlignment = 0;
        to.Colspan = 4;
        to.Border = 0;
        tablesnewone.AddCell(to);

        PdfPCell cmpnyname = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cmpnyname.HorizontalAlignment = 0;
        cmpnyname.Colspan = 4;
        cmpnyname.Border = 0;
        tablesnewone.AddCell(cmpnyname);

        PdfPCell address1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        address1.HorizontalAlignment = 0;
        address1.Colspan = 4;
        address1.Border = 0;
        tablesnewone.AddCell(address1);

        PdfPCell addline1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        addline1.HorizontalAlignment = 0;
        addline1.Colspan = 4;
        addline1.Border = 0;
        tablesnewone.AddCell(addline1);

        PdfPCell addpincode = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        addpincode.HorizontalAlignment = 0;
        addpincode.Colspan = 4;
        addpincode.Border = 0;
        tablesnewone.AddCell(addpincode);

        PdfPCell nameshri = new PdfPCell(new Phrase("1. Shri / Shrimathi / Kumari ...................................................................................................................(name in full here) whose particulars are given the statement  below, hereby nominate the person(s) mentioned below to recive the gratuity payable after my death as also the gratuity standing to my credit in the event of my death before that amount has become payable,or having become payable has not been paid and direct that the said amount of gratuity shall be paidin proporation indicated against the name(s) of the nominee(s).", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameshri.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        nameshri.Colspan = 4;
        nameshri.Border = 0;
        tablesnewone.AddCell(nameshri);

        PdfPCell space = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        space.HorizontalAlignment = 0;
        space.Colspan = 4;
        space.Border = 0;
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell cell2 = new PdfPCell(new Phrase("2. I here by certify that the person(s) mentioned is a /are member(s) of my family within the meaning of clause (h) of section 2 of the payment of Gratuity Act,1972 ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell2.HorizontalAlignment = 0;
        cell2.Colspan = 4;
        cell2.Border = 0;
        tablesnewone.AddCell(cell2);

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell cell3 = new PdfPCell(new Phrase("3. I hereby declare that i have no family within the meaning of clause (h) of section2 of the said Act.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell3.HorizontalAlignment = 0;
        cell3.Colspan = 4;
        cell3.Border = 0;
        tablesnewone.AddCell(cell3);

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell cell4 = new PdfPCell(new Phrase("4. (a) My father/mother/parents is /are not dependent on me", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell4.HorizontalAlignment = 0;
        cell4.Colspan = 4;
        cell4.Border = 0;
        tablesnewone.AddCell(cell4);
        PdfPCell cell4b = new PdfPCell(new Phrase("   (b) My husband's father/mother/parents is/are not dependent on my husband.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell4b.HorizontalAlignment = 0;
        cell4b.Colspan = 4;
        cell4b.Border = 0;
        tablesnewone.AddCell(cell4b);

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell cell5 = new PdfPCell(new Phrase("5. I have excluded my husband from my family by a notice dated the................................. to the Controlling Authority in terms of the proviso to clause (h) of section 2 of the said Act.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell5.HorizontalAlignment = 0;
        cell5.Colspan = 4;
        cell5.Border = 0;
        tablesnewone.AddCell(cell5);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell cellmt = new PdfPCell(new Phrase("6. Nomination made  herein invalidates my previous nomination.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellmt.HorizontalAlignment = 0;
        cellmt.Colspan = 4;
        cellmt.Border = 0;
        tablesnewone.AddCell(cellmt);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);



        PdfPCell nomindees = new PdfPCell(new Phrase("NOMINEE(S)", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nomindees.HorizontalAlignment = 1;
        nomindees.Colspan = 4;
        nomindees.Border = 0;
        tablesnewone.AddCell(nomindees);

        PdfPCell cellmonth = new PdfPCell(new Phrase("Name in full with address of nominee(s):", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellmonth.HorizontalAlignment = 1;
        cellmonth.Colspan = 1;
        tablesnewone.AddCell(cellmonth);

        PdfPCell cellnoofdaysemployed = new PdfPCell(new Phrase("Relationship with the employee:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellnoofdaysemployed.HorizontalAlignment = 1;
        cellnoofdaysemployed.Colspan = 1;
        tablesnewone.AddCell(cellnoofdaysemployed);

        PdfPCell cellnoodayslaid = new PdfPCell(new Phrase("Age of nominee:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellnoodayslaid.HorizontalAlignment = 1;
        cellnoodayslaid.Colspan = 1;
        tablesnewone.AddCell(cellnoodayslaid);

        PdfPCell cellnoofdaysnotemployed = new PdfPCell(new Phrase("Proportion by Which the gratuity will be shared:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellnoofdaysnotemployed.HorizontalAlignment = 1;
        cellnoofdaysnotemployed.Colspan = 1;
        tablesnewone.AddCell(cellnoofdaysnotemployed);


        PdfPCell month = new PdfPCell(new Phrase("1", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        month.HorizontalAlignment = 1;
        month.Colspan = 1;
        tablesnewone.AddCell(month);

        PdfPCell noofdays = new PdfPCell(new Phrase("2", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofdays.HorizontalAlignment = 1;
        noofdays.Colspan = 1;
        noofdays.FixedHeight = 20;
        tablesnewone.AddCell(noofdays);

        PdfPCell noofdayslaidof = new PdfPCell(new Phrase("3", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofdayslaidof.HorizontalAlignment = 1;
        noofdayslaidof.Colspan = 1;
        tablesnewone.AddCell(noofdayslaidof);

        PdfPCell noofdaysemployed = new PdfPCell(new Phrase("4", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofdaysemployed.HorizontalAlignment = 1;
        noofdaysemployed.Colspan = 1;
        tablesnewone.AddCell(noofdaysemployed);


        PdfPCell addressnominee2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        addressnominee2.HorizontalAlignment = 0;
        addressnominee2.Colspan = 1;
        addressnominee2.FixedHeight = 20;
        tablesnewone.AddCell(addressnominee2);

        PdfPCell reltionnominee2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        reltionnominee2.HorizontalAlignment = 0;
        reltionnominee2.Colspan = 1;
        reltionnominee2.FixedHeight = 20;
        tablesnewone.AddCell(reltionnominee2);


        PdfPCell agenominee2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        agenominee2.HorizontalAlignment = 0;
        agenominee2.Colspan = 1;
        tablesnewone.AddCell(agenominee2);

        PdfPCell gratuity2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        gratuity2.HorizontalAlignment = 0;
        gratuity2.Colspan = 1;
        tablesnewone.AddCell(gratuity2);

        document.Add(tablesnewone);
        document.NewPage();

        PdfPTable tablesnewone1 = new PdfPTable(4);
        tablesnewone1.TotalWidth = 500f;
        tablesnewone1.LockedWidth = true;
        float[] width1 = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone1.SetWidths(width1);

        PdfPCell space1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        space1.HorizontalAlignment = 0;
        space1.Colspan = 4;
        space1.Border = 0;
        tablesnewone1.AddCell(space1);



        PdfPCell Statement12 = new PdfPCell(new Phrase("Statement", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        Statement12.HorizontalAlignment = 1;
        Statement12.Colspan = 4;
        Statement12.Border = 0;
        tablesnewone1.AddCell(Statement12);




        PdfPCell nameofemp = new PdfPCell(new Phrase("Name of employee in full:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameofemp.HorizontalAlignment = 0;
        nameofemp.Colspan = 2;
        tablesnewone1.AddCell(nameofemp);

        PdfPCell nameofemp1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameofemp1.HorizontalAlignment = 0;
        nameofemp1.Colspan = 2;
        tablesnewone1.AddCell(nameofemp1);

        PdfPCell sex = new PdfPCell(new Phrase("Sex", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        sex.HorizontalAlignment = 0;
        sex.Colspan = 2;
        tablesnewone1.AddCell(sex);

        PdfPCell sex1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        sex1.HorizontalAlignment = 0;
        sex1.Colspan = 2;
        tablesnewone1.AddCell(sex1);


        PdfPCell Religion = new PdfPCell(new Phrase("Religion", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Religion.HorizontalAlignment = 0;
        Religion.Colspan = 2;
        tablesnewone1.AddCell(Religion);

        PdfPCell Religion1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Religion1.HorizontalAlignment = 0;
        Religion1.Colspan = 2;
        tablesnewone1.AddCell(Religion1);


        PdfPCell married = new PdfPCell(new Phrase("Whether unmarried/married/window/widower:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        married.HorizontalAlignment = 0;
        married.Colspan = 2;
        tablesnewone1.AddCell(married);

        PdfPCell married1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        married1.HorizontalAlignment = 0;
        married1.Colspan = 2;
        tablesnewone1.AddCell(married1);





        PdfPCell branch = new PdfPCell(new Phrase("Department/Branch/Section where employed:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        branch.HorizontalAlignment = 0;
        branch.Colspan = 2;
        tablesnewone1.AddCell(branch);

        PdfPCell branch1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        branch1.HorizontalAlignment = 0;
        branch1.Colspan = 2;
        tablesnewone1.AddCell(branch1);

        PdfPCell postal = new PdfPCell(new Phrase("Post held with ticket No. or Serial No. if any:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        postal.HorizontalAlignment = 0;
        postal.Colspan = 2;
        tablesnewone1.AddCell(postal);

        PdfPCell posta = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        posta.HorizontalAlignment = 0;
        posta.Colspan = 2;
        tablesnewone1.AddCell(posta);


        PdfPCell appointment = new PdfPCell(new Phrase("Date of appointment:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        appointment.HorizontalAlignment = 0;
        appointment.Colspan = 2;
        tablesnewone1.AddCell(appointment);

        PdfPCell appointment1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        appointment1.HorizontalAlignment = 0;
        appointment1.Colspan = 2;
        tablesnewone1.AddCell(appointment1);


        PdfPCell Permanentadd = new PdfPCell(new Phrase("Permanent address", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Permanentadd.HorizontalAlignment = 0;
        Permanentadd.Colspan = 2;
        Permanentadd.FixedHeight = 40;
        tablesnewone1.AddCell(Permanentadd);

        PdfPCell Permanentadd1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Permanentadd1.HorizontalAlignment = 0;
        Permanentadd1.Colspan = 2;
        tablesnewone1.AddCell(Permanentadd1);

        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);



        PdfPCell place = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        place.HorizontalAlignment = 0;
        place.Colspan = 4;
        place.Border = 0;
        tablesnewone1.AddCell(place);

        PdfPCell date1 = new PdfPCell(new Phrase("Date:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        date1.HorizontalAlignment = 0;
        date1.Colspan = 2;
        date1.Border = 0;
        tablesnewone1.AddCell(date1);



        PdfPCell thumb = new PdfPCell(new Phrase("Signature/Thumb impression of the employee", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        thumb.HorizontalAlignment = 0;
        thumb.Colspan = 2;
        thumb.Border = 0;
        tablesnewone1.AddCell(thumb);

        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);

        PdfPCell Delaration = new PdfPCell(new Phrase("Delaration by witnesses", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        Delaration.HorizontalAlignment = 1;
        Delaration.Colspan = 4;
        Delaration.Border = 0;
        tablesnewone1.AddCell(Delaration);

        PdfPCell signed = new PdfPCell(new Phrase("Nomination signed/thumb impresses before me:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        signed.HorizontalAlignment = 0;
        signed.Colspan = 4;
        signed.Border = 0;
        tablesnewone1.AddCell(signed);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);

        PdfPCell nameaddress = new PdfPCell(new Phrase("Name in full and full address", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameaddress.HorizontalAlignment = 0;
        nameaddress.Colspan = 2;
        nameaddress.Border = 0;
        tablesnewone1.AddCell(nameaddress);

        PdfPCell signwitness = new PdfPCell(new Phrase("Signature of witnesses:Of witnesses:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        signwitness.HorizontalAlignment = 0;
        signwitness.Colspan = 2;
        signwitness.Border = 0;
        tablesnewone1.AddCell(signwitness);


        PdfPCell celladd1 = new PdfPCell(new Phrase("1", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celladd1.HorizontalAlignment = 0;
        celladd1.Colspan = 2;
        celladd1.Border = 0;
        tablesnewone1.AddCell(celladd1);

        PdfPCell cellsign1 = new PdfPCell(new Phrase("1", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsign1.HorizontalAlignment = 0;
        cellsign1.Colspan = 2;
        cellsign1.Border = 0;
        tablesnewone1.AddCell(cellsign1);

        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);

        PdfPCell celladd2 = new PdfPCell(new Phrase("2", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celladd2.HorizontalAlignment = 0;
        celladd2.Colspan = 2;
        celladd2.Border = 0;
        tablesnewone1.AddCell(celladd2);

        PdfPCell cellsign2 = new PdfPCell(new Phrase("2", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsign2.HorizontalAlignment = 0;
        cellsign2.Colspan = 2;
        cellsign2.Border = 0;
        tablesnewone1.AddCell(cellsign2);

        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);

        PdfPCell place12 = new PdfPCell(new Phrase("Place", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        place12.HorizontalAlignment = 0;
        place12.Colspan = 4;
        place12.Border = 0;
        tablesnewone1.AddCell(place12);


        PdfPCell date12 = new PdfPCell(new Phrase("Date", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        date12.HorizontalAlignment = 0;
        date12.Colspan = 4;
        date12.Border = 0;
        tablesnewone1.AddCell(date12);

        PdfPCell cetificate = new PdfPCell(new Phrase("Certificate by the Employer", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cetificate.HorizontalAlignment = 1;
        cetificate.Colspan = 4;
        cetificate.BorderWidthBottom = .5f;
        cetificate.BorderWidthLeft = 0;
        cetificate.BorderWidthRight = 0;
        cetificate.BorderWidthTop = .5f;
        tablesnewone1.AddCell(cetificate);


        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);

        PdfPCell certified = new PdfPCell(new Phrase("Certified that the particulers of the above nomination have been verified and recorded in this establishment.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        certified.HorizontalAlignment = 0;
        certified.Colspan = 4;
        certified.Border = 0;
        tablesnewone1.AddCell(certified);

        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);

        PdfPCell reference = new PdfPCell(new Phrase("Employer's Reference No., if any", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        reference.HorizontalAlignment = 0;
        reference.Colspan = 2;
        reference.Border = 0;
        tablesnewone1.AddCell(reference);


        PdfPCell authorized = new PdfPCell(new Phrase("Signature of the employer / officer Authorized", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        authorized.HorizontalAlignment = 0;
        authorized.Colspan = 2;
        authorized.Border = 0;
        tablesnewone1.AddCell(authorized);

        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);

        PdfPCell date123 = new PdfPCell(new Phrase("Date", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        date123.HorizontalAlignment = 0;
        date123.Colspan = 4;
        date123.Border = 0;
        tablesnewone1.AddCell(date123);

        PdfPCell acknowledgement = new PdfPCell(new Phrase("Acknowledgement by the Employee", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        acknowledgement.HorizontalAlignment = 1;
        acknowledgement.Colspan = 4;
        acknowledgement.BorderWidthBottom = .5f;
        acknowledgement.BorderWidthLeft = 0;
        acknowledgement.BorderWidthRight = 0;
        acknowledgement.BorderWidthTop = .5f;
        tablesnewone1.AddCell(acknowledgement);

        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);

        PdfPCell recived = new PdfPCell(new Phrase("Recived the duplicate copy of nomination in Form 'F' filed by me and duly certified by the employer", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        recived.HorizontalAlignment = 0;
        recived.Colspan = 4;
        recived.Border = 0;
        tablesnewone1.AddCell(recived);

        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);
        tablesnewone1.AddCell(space1);


        PdfPCell datea = new PdfPCell(new Phrase("Date:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        datea.HorizontalAlignment = 0;
        datea.Colspan = 2;
        datea.Border = 0;
        tablesnewone1.AddCell(datea);


        PdfPCell signa = new PdfPCell(new Phrase("Signature of the employee", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        signa.HorizontalAlignment = 0;
        signa.Colspan = 2;
        signa.Border = 0;
        tablesnewone1.AddCell(signa);

        document.Add(tablesnewone1);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "formX.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnform3a_Click(object sender, EventArgs e)
    {

        int Fontsize = 11;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region for comment 
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion

        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable table = new PdfPTable(8);
        table.TotalWidth = 500f;
        table.LockedWidth = true;
        float[] width11 = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        table.SetWidths(width11);

        PdfPCell heading1 = new PdfPCell(new Phrase("Form-3A (Revised)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        heading1.HorizontalAlignment = 1;
        heading1.Colspan = 8;
        heading1.Border = 0;
        table.AddCell(heading1);


        PdfPCell heading2 = new PdfPCell(new Phrase("Employees provident fund scheme 1952 (Para 35&42) & the employees pension scheme 1995 (Para 19) ", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        heading2.HorizontalAlignment = 1;
        heading2.Colspan = 8;
        heading2.Border = 0;
        table.AddCell(heading2);

        PdfPCell heading3 = new PdfPCell(new Phrase("CONTRIBUTION CARD FOR CURRENCY PERIOD FROM", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        heading3.HorizontalAlignment = 1;
        heading3.Colspan = 8;
        heading3.Border = 0;
        table.AddCell(heading3);


        PdfPCell space1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        space1.HorizontalAlignment = 1;
        space1.Colspan = 8;
        space1.Border = 0;
        table.AddCell(space1);

        document.Add(table);


        PdfPTable tablesnewone1 = new PdfPTable(10);
        tablesnewone1.TotalWidth = 500f;
        tablesnewone1.LockedWidth = true;
        float[] width1 = new float[] { 2f, 2f, 2f, 2f,  2f, 2f, 2f, 2f, 2f, 2f };
        tablesnewone1.SetWidths(width1);


        PdfPTable childtable1 = new PdfPTable(5);
        childtable1.TotalWidth = 250f;
        childtable1.LockedWidth = true;
        float[] childwidth1 = new float[] {0.7f,  3f, 3f, 3f, 3f };
        childtable1.SetWidths(childwidth1);

        PdfPCell slno1 = new PdfPCell(new Phrase("1.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        slno1.HorizontalAlignment = 0;
        slno1.Colspan = 1;
        slno1.Border = 0;
        childtable1.AddCell(slno1);

        PdfPCell accountno = new PdfPCell(new Phrase("Account No.:", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        accountno.HorizontalAlignment = 0;
        accountno.Colspan = 2;
        accountno.Border = 0;
        childtable1.AddCell(accountno);

        PdfPCell accountnovalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL - 1, BaseColor.BLACK)));
        accountnovalue.HorizontalAlignment = 0;
        accountnovalue.Colspan = 2;
        accountnovalue.Border = 0;
        childtable1.AddCell(accountnovalue);

        PdfPCell slno2 = new PdfPCell(new Phrase("2.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        slno2.HorizontalAlignment = 0;
        slno2.Colspan = 1;
        slno2.Border = 0;
        childtable1.AddCell(slno2);

        PdfPCell employeename = new PdfPCell(new Phrase("Employee Name :", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        employeename.HorizontalAlignment = 0;
        employeename.Colspan = 2;
        employeename.Border = 0;
        childtable1.AddCell(employeename);

        PdfPCell employeename1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL - 1, BaseColor.BLACK)));
        employeename1.HorizontalAlignment = 0;
        employeename1.Colspan = 2;
        employeename1.Border = 0;
        childtable1.AddCell(employeename1);

        PdfPCell slno3 = new PdfPCell(new Phrase("3.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        slno3.HorizontalAlignment = 0;
        slno3.Colspan = 1;
        slno3.Border = 0;
        childtable1.AddCell(slno3);


        PdfPCell husbandname = new PdfPCell(new Phrase("Husband/Father Name :", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        husbandname.HorizontalAlignment = 0;
        husbandname.Colspan = 2;
        husbandname.Border = 0;
        childtable1.AddCell(husbandname);

        PdfPCell husbandname1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        husbandname1.HorizontalAlignment = 0;
        husbandname1.Colspan = 2;
        husbandname1.Border = 0;
        childtable1.AddCell(husbandname1);

        PdfPCell slno4 = new PdfPCell(new Phrase("4.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        slno4.HorizontalAlignment = 0;
        slno4.Colspan = 1;
        slno4.Border = 0;
        childtable1.AddCell(slno4);


        PdfPCell Address = new PdfPCell(new Phrase("Name & Address of the Factory /Establishment :", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        Address.HorizontalAlignment = 0;
        Address.Colspan = 2;
        Address.Border = 0;
        childtable1.AddCell(Address);

        PdfPCell Address1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL - 1, BaseColor.BLACK)));
        Address1.HorizontalAlignment = 0;
        Address1.Colspan = 2;
        Address1.Border = 0;
        childtable1.AddCell(Address1);


        PdfPCell slno5 = new PdfPCell(new Phrase("5.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        slno5.HorizontalAlignment = 0;
        slno5.Colspan = 1;
        slno5.Border = 0;
        childtable1.AddCell(slno5);


        PdfPCell Statutory = new PdfPCell(new Phrase("Statutory Rate of  Contribution :", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        Statutory.HorizontalAlignment = 0;
        Statutory.Colspan = 2;
        Statutory.Border = 0;
        childtable1.AddCell(Statutory);

        PdfPCell Statutory1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL - 1, BaseColor.BLACK)));
        Statutory1.HorizontalAlignment = 0;
        Statutory1.Colspan = 2;
        Statutory1.Border = 0;
        childtable1.AddCell(Statutory1);

        PdfPCell endchildTable1 = new PdfPCell(childtable1);
        endchildTable1.Border = 0;
        endchildTable1.Colspan = 5;
        endchildTable1.HorizontalAlignment = 0;
        tablesnewone1.AddCell(endchildTable1);


        PdfPTable childtable2 = new PdfPTable(5);
        childtable2.TotalWidth = 250f;
        childtable2.LockedWidth = true;
        float[] childwidth2 = new float[] { 0.7f, 3f, 3f, 3f, 3f };
        childtable2.SetWidths(childwidth2);

        PdfPCell slno6 = new PdfPCell(new Phrase("6.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        slno6.HorizontalAlignment = 0;
        slno6.Colspan = 1;
        slno6.Border = 0;
        childtable2.AddCell(slno6);

        PdfPCell Voluntary = new PdfPCell(new Phrase("Voluntary Higher Rate of Employee's Contribution if any", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        Voluntary.HorizontalAlignment = 0;
        Voluntary.Colspan = 2;
        Voluntary.Border = 0;
        childtable2.AddCell(Voluntary);

        PdfPCell Voluntary1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        Voluntary1.HorizontalAlignment = 0;
        Voluntary1.Colspan = 2;
        Voluntary1.Border = 0;
        childtable2.AddCell(Voluntary1);

        PdfPCell slno7 = new PdfPCell(new Phrase("7.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        slno7.HorizontalAlignment = 0;
        slno7.Colspan = 1;
        slno7.Border = 0;
        childtable2.AddCell(slno7);


        PdfPCell employee = new PdfPCell(new Phrase("Employee Contribution of higher wages to EPF Yes/No", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        employee.HorizontalAlignment = 0;
        employee.Colspan = 2;
        employee.Border = 0;
        childtable2.AddCell(employee);

        PdfPCell employee1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        employee1.HorizontalAlignment = 0;
        employee1.Colspan = 2;
        employee1.Border = 0;
        childtable2.AddCell(employee1);

        PdfPCell slno8 = new PdfPCell(new Phrase("8.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        slno8.HorizontalAlignment = 0;
        slno8.Colspan = 1;
        slno8.Border = 0;
        childtable2.AddCell(slno8);

        PdfPCell employeec = new PdfPCell(new Phrase("Employee Contribution to pension fund on heigher wages EPF Yes/No", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        employeec.HorizontalAlignment = 0;
        employeec.Colspan = 2;
        employeec.Border = 0;
        childtable2.AddCell(employeec);

        PdfPCell employeec1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        employeec1.HorizontalAlignment = 0;
        employeec1.Colspan = 2;
        employeec1.Border = 0;
        childtable2.AddCell(employeec1);


        PdfPCell slno9 = new PdfPCell(new Phrase("9.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        slno9.HorizontalAlignment = 0;
        slno9.Colspan = 1;
        slno9.Border = 0;
        childtable2.AddCell(slno9);

        PdfPCell dareodf = new PdfPCell(new Phrase("Date on which 6500  wages started", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        dareodf.HorizontalAlignment = 0;
        dareodf.Colspan = 2;
        dareodf.Border = 0;
        childtable2.AddCell(dareodf);

        PdfPCell dareodf1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        dareodf1.HorizontalAlignment = 0;
        dareodf1.Colspan = 2;
        dareodf1.Border = 0;
        childtable2.AddCell(dareodf1);


        PdfPCell endchildTable2 = new PdfPCell(childtable2);
        endchildTable2.Border = 0;
        endchildTable2.HorizontalAlignment = 0;
        endchildTable2.Colspan = 5;
        tablesnewone1.AddCell(endchildTable2);

        document.Add(tablesnewone1);


        #endregion

        #region

        PdfPTable tablesnewone = new PdfPTable(8);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 4.8f, 4f, 4f, 4f, 4f, 4f, 3f, 5.1f };
        tablesnewone.SetWidths(width);


        PdfPCell space = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        space.HorizontalAlignment = 1;
        space.Colspan = 8;
        space.Border = 0;
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell mt1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        mt1.HorizontalAlignment = 1;
        mt1.Colspan = 1;
        mt1.BorderWidthBottom = 0;
        mt1.BorderWidthLeft = .5f;
        mt1.BorderWidthRight = 0;
        mt1.BorderWidthTop = .5f;
        tablesnewone.AddCell(mt1);


        PdfPCell workershare = new PdfPCell(new Phrase("Worker Share", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        workershare.HorizontalAlignment = 1;
        workershare.Colspan = 2;
        tablesnewone.AddCell(workershare);

        PdfPCell employerrshare = new PdfPCell(new Phrase("Employerr Share", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        employerrshare.HorizontalAlignment = 1;
        employerrshare.Colspan = 2;
        tablesnewone.AddCell(employerrshare);

        PdfPCell mt2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        mt2.HorizontalAlignment = 1;
        mt2.Colspan = 1;
        mt2.BorderWidthBottom = 0;
        mt2.BorderWidthLeft = 0;
        mt2.BorderWidthRight = 0;
        mt2.BorderWidthTop = .5f;
        tablesnewone.AddCell(mt2);

        PdfPCell mt3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        mt3.HorizontalAlignment = 1;
        mt3.Colspan = 1;
        mt3.BorderWidthBottom = 0;
        mt3.BorderWidthLeft = .5f;
        mt3.BorderWidthRight = .5f;
        mt3.BorderWidthTop = .5f;
        tablesnewone.AddCell(mt3);

        PdfPCell mt4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        mt4.HorizontalAlignment = 1;
        mt4.Colspan = 1;
        mt4.BorderWidthBottom = 0;
        mt4.BorderWidthLeft = .5f;
        mt4.BorderWidthRight = .5f;
        mt4.BorderWidthTop = .5f;
        tablesnewone.AddCell(mt4);


        PdfPCell month = new PdfPCell(new Phrase("Month", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        month.VerticalAlignment = 2;
        month.Rowspan = 1;
        month.Rotation = 90;
        month.BorderWidthBottom = .5f;
        month.BorderWidthLeft = .5f;
        month.BorderWidthRight = 0;
        month.BorderWidthTop = 0;
        tablesnewone.AddCell(month);

        PdfPCell amount = new PdfPCell(new Phrase("Amount of wage", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        amount.VerticalAlignment = 1;
        amount.Rowspan = 1;
        amount.Rotation = 90;
        tablesnewone.AddCell(amount);

        PdfPCell epf = new PdfPCell(new Phrase("EPF", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        epf.VerticalAlignment = 1;
        epf.Rowspan = 1;
        epf.Rotation = 90;
        tablesnewone.AddCell(epf);

        PdfPCell epfcontribution = new PdfPCell(new Phrase("EPF contribution", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        epfcontribution.VerticalAlignment = 1;
        epfcontribution.Rowspan = 1;
        epfcontribution.Rotation = 90;
        tablesnewone.AddCell(epfcontribution);

        PdfPCell Pension = new PdfPCell(new Phrase("Pension fund \n contribution", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Pension.VerticalAlignment = 1;
        Pension.Rowspan = 1;
        Pension.Rotation = 90;
        tablesnewone.AddCell(Pension);

        PdfPCell Refund = new PdfPCell(new Phrase("Refund of advance", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Refund.VerticalAlignment = 1;
        Refund.Rowspan = 1;
        Refund.Rotation = 90;
        Refund.BorderWidthBottom = .5f;
        Refund.BorderWidthLeft = .5f;
        Refund.BorderWidthRight = .5f;
        Refund.BorderWidthTop = 0;
        tablesnewone.AddCell(Refund);

        PdfPCell noofdays = new PdfPCell(new Phrase("No of days/ period", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofdays.VerticalAlignment = 1;
        noofdays.Rowspan = 1;
        noofdays.Rotation = 90;
        noofdays.BorderWidthBottom = .5f;
        noofdays.BorderWidthLeft = .5f;
        noofdays.BorderWidthRight = .5f;
        noofdays.BorderWidthTop = 0;
        tablesnewone.AddCell(noofdays);

        PdfPCell remarks = new PdfPCell(new Phrase("Remarks", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        remarks.VerticalAlignment = 1;
        remarks.Rowspan = 1;
        remarks.Rotation = 90;
        remarks.BorderWidthBottom = .5f;
        remarks.BorderWidthLeft = .5f;
        remarks.BorderWidthRight = .5f;
        remarks.BorderWidthTop = 0;
        tablesnewone.AddCell(remarks);

        PdfPCell April1 = new PdfPCell(new Phrase("March paid in April", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        April1.HorizontalAlignment = 0;
        April1.Colspan = 1;
        tablesnewone.AddCell(April1);

        PdfPCell Aprilamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Aprilamount.HorizontalAlignment = 1;
        Aprilamount.Colspan = 1;
        tablesnewone.AddCell(Aprilamount);

        PdfPCell Aprilepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Aprilepf.HorizontalAlignment = 1;
        Aprilepf.Colspan = 1;
        tablesnewone.AddCell(Aprilepf);

        PdfPCell Aprilepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Aprilepfcontributionvalue.HorizontalAlignment = 1;
        Aprilepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(Aprilepfcontributionvalue);

        PdfPCell Aprilpensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Aprilpensionvalue.HorizontalAlignment = 1;
        Aprilpensionvalue.Colspan = 1;
        tablesnewone.AddCell(Aprilpensionvalue);

        PdfPCell AprilRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        AprilRefundvalue.HorizontalAlignment = 1;
        AprilRefundvalue.Colspan = 1;
        tablesnewone.AddCell(AprilRefundvalue);

        PdfPCell Aprilnoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Aprilnoofdaysvalue.HorizontalAlignment = 0;
        Aprilnoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(Aprilnoofdaysvalue);

        PdfPCell Aprilremarkstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Aprilremarkstext.HorizontalAlignment = 0;
        Aprilremarkstext.Colspan = 1;
        tablesnewone.AddCell(Aprilremarkstext);

        //may
        PdfPCell May1 = new PdfPCell(new Phrase("April paid in May", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        May1.HorizontalAlignment = 0;
        May1.Colspan = 1;
        tablesnewone.AddCell(May1);

        PdfPCell Mayamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Mayamount.HorizontalAlignment = 1;
        Mayamount.Colspan = 1;
        tablesnewone.AddCell(Mayamount);

        PdfPCell Mayepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Mayepf.HorizontalAlignment = 1;
        Mayepf.Colspan = 1;
        tablesnewone.AddCell(Mayepf);

        PdfPCell Mayepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Mayepfcontributionvalue.HorizontalAlignment = 1;
        Mayepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(Mayepfcontributionvalue);

        PdfPCell Maypensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Maypensionvalue.HorizontalAlignment = 1;
        Maypensionvalue.Colspan = 1;
        tablesnewone.AddCell(Maypensionvalue);

        PdfPCell MayRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        MayRefundvalue.HorizontalAlignment = 1;
        MayRefundvalue.Colspan = 1;
        tablesnewone.AddCell(MayRefundvalue);

        PdfPCell Maynoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Maynoofdaysvalue.HorizontalAlignment = 0;
        Maynoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(Maynoofdaysvalue);

        PdfPCell Mayremarkstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Mayremarkstext.HorizontalAlignment = 0;
        Mayremarkstext.Colspan = 1;
        tablesnewone.AddCell(Mayremarkstext);


        //end may

        //june
        PdfPCell june1 = new PdfPCell(new Phrase("May paid in June", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        june1.HorizontalAlignment = 0;
        june1.Colspan = 1;
        tablesnewone.AddCell(june1);

        PdfPCell juneamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        juneamount.HorizontalAlignment = 1;
        juneamount.Colspan = 1;
        tablesnewone.AddCell(juneamount);

        PdfPCell juneepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        juneepf.HorizontalAlignment = 1;
        juneepf.Colspan = 1;
        tablesnewone.AddCell(juneepf);

        PdfPCell juneepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        juneepfcontributionvalue.HorizontalAlignment = 1;
        juneepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(juneepfcontributionvalue);

        PdfPCell junepensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        junepensionvalue.HorizontalAlignment = 1;
        junepensionvalue.Colspan = 1;
        tablesnewone.AddCell(junepensionvalue);

        PdfPCell juneRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        juneRefundvalue.HorizontalAlignment = 1;
        juneRefundvalue.Colspan = 1;
        tablesnewone.AddCell(juneRefundvalue);

        PdfPCell junenoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        junenoofdaysvalue.HorizontalAlignment = 0;
        junenoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(junenoofdaysvalue);

        PdfPCell juneremarkstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        juneremarkstext.HorizontalAlignment = 0;
        juneremarkstext.Colspan = 1;
        tablesnewone.AddCell(juneremarkstext);


        // endjune

        //july
        PdfPCell july1 = new PdfPCell(new Phrase("June paid in July", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        july1.HorizontalAlignment = 0;
        july1.Colspan = 1;
        tablesnewone.AddCell(july1);

        PdfPCell julyamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        julyamount.HorizontalAlignment = 1;
        julyamount.Colspan = 1;
        tablesnewone.AddCell(julyamount);

        PdfPCell julyepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        julyepf.HorizontalAlignment = 1;
        julyepf.Colspan = 1;
        tablesnewone.AddCell(julyepf);

        PdfPCell julyepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        julyepfcontributionvalue.HorizontalAlignment = 1;
        julyepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(julyepfcontributionvalue);

        PdfPCell julypensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        julypensionvalue.HorizontalAlignment = 1;
        julypensionvalue.Colspan = 1;
        tablesnewone.AddCell(julypensionvalue);

        PdfPCell julyRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        julyRefundvalue.HorizontalAlignment = 1;
        julyRefundvalue.Colspan = 1;
        tablesnewone.AddCell(julyRefundvalue);

        PdfPCell julynoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        julynoofdaysvalue.HorizontalAlignment = 0;
        julynoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(julynoofdaysvalue);

        PdfPCell julyremarkstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        julyremarkstext.HorizontalAlignment = 0;
        julyremarkstext.Colspan = 1;
        tablesnewone.AddCell(julyremarkstext);

        // end july
        //aug
        PdfPCell Aug1 = new PdfPCell(new Phrase("Juy paid in Aug", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Aug1.HorizontalAlignment = 0;
        Aug1.Colspan = 1;
        tablesnewone.AddCell(Aug1);

        PdfPCell Augamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Augamount.HorizontalAlignment = 1;
        Augamount.Colspan = 1;
        tablesnewone.AddCell(Augamount);

        PdfPCell Augepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Augepf.HorizontalAlignment = 1;
        Augepf.Colspan = 1;
        tablesnewone.AddCell(Augepf);

        PdfPCell Augepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Augepfcontributionvalue.HorizontalAlignment = 1;
        Augepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(Augepfcontributionvalue);

        PdfPCell Augpensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Augpensionvalue.HorizontalAlignment = 1;
        Augpensionvalue.Colspan = 1;
        tablesnewone.AddCell(Augpensionvalue);

        PdfPCell AugRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        AugRefundvalue.HorizontalAlignment = 1;
        AugRefundvalue.Colspan = 1;
        tablesnewone.AddCell(AugRefundvalue);

        PdfPCell Augnoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Augnoofdaysvalue.HorizontalAlignment = 0;
        Augnoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(Augnoofdaysvalue);

        PdfPCell Augremarkstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Augremarkstext.HorizontalAlignment = 0;
        Augremarkstext.Colspan = 1;
        tablesnewone.AddCell(Augremarkstext);

        // end aug
        // sep
        PdfPCell Sep1 = new PdfPCell(new Phrase("Aug paid in Sep", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Sep1.HorizontalAlignment = 0;
        Sep1.Colspan = 1;
        tablesnewone.AddCell(Sep1);

        PdfPCell Sepamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Sepamount.HorizontalAlignment = 1;
        Sepamount.Colspan = 1;
        tablesnewone.AddCell(Sepamount);

        PdfPCell Sepepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Sepepf.HorizontalAlignment = 1;
        Sepepf.Colspan = 1;
        tablesnewone.AddCell(Sepepf);

        PdfPCell Sepepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Sepepfcontributionvalue.HorizontalAlignment = 1;
        Sepepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(Sepepfcontributionvalue);

        PdfPCell Seppensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Seppensionvalue.HorizontalAlignment = 1;
        Seppensionvalue.Colspan = 1;
        tablesnewone.AddCell(Seppensionvalue);

        PdfPCell SepRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        SepRefundvalue.HorizontalAlignment = 1;
        SepRefundvalue.Colspan = 1;
        tablesnewone.AddCell(SepRefundvalue);

        PdfPCell Sepnoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Sepnoofdaysvalue.HorizontalAlignment = 0;
        Sepnoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(Sepnoofdaysvalue);

        PdfPCell Sepremarkstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Sepremarkstext.HorizontalAlignment = 0;
        Sepremarkstext.Colspan = 1;
        tablesnewone.AddCell(Sepremarkstext);

        // end sep
        // oct
        PdfPCell Oct1 = new PdfPCell(new Phrase("Sep paid in Oct", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Oct1.HorizontalAlignment = 0;
        Oct1.Colspan = 1;
        tablesnewone.AddCell(Oct1);

        PdfPCell Octamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Octamount.HorizontalAlignment = 1;
        Octamount.Colspan = 1;
        tablesnewone.AddCell(Octamount);

        PdfPCell Octepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Octepf.HorizontalAlignment = 1;
        Octepf.Colspan = 1;
        tablesnewone.AddCell(Octepf);

        PdfPCell Octepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Octepfcontributionvalue.HorizontalAlignment = 1;
        Octepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(Octepfcontributionvalue);

        PdfPCell Octpensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Octpensionvalue.HorizontalAlignment = 1;
        Octpensionvalue.Colspan = 1;
        tablesnewone.AddCell(Octpensionvalue);

        PdfPCell OctRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        OctRefundvalue.HorizontalAlignment = 1;
        OctRefundvalue.Colspan = 1;
        tablesnewone.AddCell(OctRefundvalue);

        PdfPCell Octnoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Octnoofdaysvalue.HorizontalAlignment = 0;
        Octnoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(Octnoofdaysvalue);

        PdfPCell Octremarkstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Octremarkstext.HorizontalAlignment = 0;
        Octremarkstext.Colspan = 1;
        Octremarkstext.BorderWidthBottom = 0;
        Octremarkstext.BorderWidthLeft = .5f;
        Octremarkstext.BorderWidthRight = .5f;
        Octremarkstext.BorderWidthTop = .5f;
        tablesnewone.AddCell(Octremarkstext);


        //end oct

        // nov

        PdfPCell Nov1 = new PdfPCell(new Phrase("Oct paid in Nov", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Nov1.HorizontalAlignment = 0;
        Nov1.Colspan = 1;
        tablesnewone.AddCell(Nov1);

        PdfPCell Novamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Novamount.HorizontalAlignment = 1;
        Novamount.Colspan = 1;
        tablesnewone.AddCell(Novamount);

        PdfPCell Novepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Novepf.HorizontalAlignment = 1;
        Novepf.Colspan = 1;
        tablesnewone.AddCell(Novepf);

        PdfPCell Novepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Novepfcontributionvalue.HorizontalAlignment = 1;
        Novepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(Novepfcontributionvalue);

        PdfPCell Novpensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Novpensionvalue.HorizontalAlignment = 1;
        Novpensionvalue.Colspan = 1;
        tablesnewone.AddCell(Novpensionvalue);

        PdfPCell NovRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        NovRefundvalue.HorizontalAlignment = 1;
        NovRefundvalue.Colspan = 1;
        tablesnewone.AddCell(NovRefundvalue);

        PdfPCell Novnoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Novnoofdaysvalue.HorizontalAlignment = 0;
        Novnoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(Novnoofdaysvalue);

        PdfPCell Novremarkstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Novremarkstext.HorizontalAlignment = 0;
        Novremarkstext.Colspan = 1;
        Novremarkstext.BorderWidthBottom = 0;
        Novremarkstext.BorderWidthLeft = .5f;
        Novremarkstext.BorderWidthRight = .5f;
        Novremarkstext.BorderWidthTop = 0;
        tablesnewone.AddCell(Novremarkstext);

        // end nov
        //dec
        PdfPCell Des1 = new PdfPCell(new Phrase("Nov paid in Dec", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Des1.HorizontalAlignment = 0;
        Des1.Colspan = 1;
        tablesnewone.AddCell(Des1);

        PdfPCell Desamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Desamount.HorizontalAlignment = 1;
        Desamount.Colspan = 1;
        tablesnewone.AddCell(Desamount);

        PdfPCell Desepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Desepf.HorizontalAlignment = 1;
        Desepf.Colspan = 1;
        tablesnewone.AddCell(Desepf);

        PdfPCell Desepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Desepfcontributionvalue.HorizontalAlignment = 1;
        Desepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(Desepfcontributionvalue);

        PdfPCell Despensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Despensionvalue.HorizontalAlignment = 1;
        Despensionvalue.Colspan = 1;
        tablesnewone.AddCell(Despensionvalue);

        PdfPCell DesRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        DesRefundvalue.HorizontalAlignment = 1;
        DesRefundvalue.Colspan = 1;
        tablesnewone.AddCell(DesRefundvalue);

        PdfPCell Desnoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Desnoofdaysvalue.HorizontalAlignment = 0;
        Desnoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(Desnoofdaysvalue);

        PdfPCell Desremarkstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Desremarkstext.HorizontalAlignment = 0;
        Desremarkstext.Colspan = 1;
        Desremarkstext.BorderWidthBottom = 0;
        Desremarkstext.BorderWidthLeft = .5f;
        Desremarkstext.BorderWidthRight = .5f;
        Desremarkstext.BorderWidthTop = 0;
        tablesnewone.AddCell(Desremarkstext);

        //end des
        //jan
        PdfPCell Jan1 = new PdfPCell(new Phrase("Dec paid in Jan", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Jan1.HorizontalAlignment = 0;
        Jan1.Colspan = 1;
        tablesnewone.AddCell(Jan1);

        PdfPCell Janamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Janamount.HorizontalAlignment = 1;
        Janamount.Colspan = 1;
        tablesnewone.AddCell(Janamount);

        PdfPCell Janepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Janepf.HorizontalAlignment = 1;
        Janepf.Colspan = 1;
        tablesnewone.AddCell(Janepf);

        PdfPCell Janepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Janepfcontributionvalue.HorizontalAlignment = 1;
        Janepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(Janepfcontributionvalue);

        PdfPCell Janpensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Janpensionvalue.HorizontalAlignment = 1;
        Janpensionvalue.Colspan = 1;
        tablesnewone.AddCell(Janpensionvalue);

        PdfPCell JanRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        JanRefundvalue.HorizontalAlignment = 1;
        JanRefundvalue.Colspan = 1;
        tablesnewone.AddCell(JanRefundvalue);

        PdfPCell Jannoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Jannoofdaysvalue.HorizontalAlignment = 0;
        Jannoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(Jannoofdaysvalue);

        PdfPCell Janremarkstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Janremarkstext.HorizontalAlignment = 0;
        Janremarkstext.Colspan = 1;
        Janremarkstext.BorderWidthBottom = .5f;
        Janremarkstext.BorderWidthLeft = .5f;
        Janremarkstext.BorderWidthRight = .5f;
        Janremarkstext.BorderWidthTop = 0;
        tablesnewone.AddCell(Janremarkstext);

        //end jan

        //feb

        PdfPCell Feb1 = new PdfPCell(new Phrase("Jan paid in Feb", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Feb1.HorizontalAlignment = 0;
        Feb1.Colspan = 1;
        tablesnewone.AddCell(Feb1);

        PdfPCell Febamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Febamount.HorizontalAlignment = 1;
        Febamount.Colspan = 1;
        tablesnewone.AddCell(Febamount);

        PdfPCell Febepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Febepf.HorizontalAlignment = 1;
        Febepf.Colspan = 1;
        tablesnewone.AddCell(Febepf);

        PdfPCell Febepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Febepfcontributionvalue.HorizontalAlignment = 1;
        Febepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(Febepfcontributionvalue);

        PdfPCell Febpensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Febpensionvalue.HorizontalAlignment = 1;
        Febpensionvalue.Colspan = 1;
        tablesnewone.AddCell(Febpensionvalue);

        PdfPCell FebRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        FebRefundvalue.HorizontalAlignment = 1;
        FebRefundvalue.Colspan = 1;
        tablesnewone.AddCell(FebRefundvalue);

        PdfPCell Febnoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Febnoofdaysvalue.HorizontalAlignment = 0;
        Febnoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(Febnoofdaysvalue);

        PdfPCell Febremarkstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Febremarkstext.HorizontalAlignment = 0;
        Febremarkstext.Colspan = 1;
        tablesnewone.AddCell(Febremarkstext);

        //end feb

        //mar

        PdfPCell March1 = new PdfPCell(new Phrase("Fed paid in March", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        March1.HorizontalAlignment = 0;
        March1.Colspan = 1;
        tablesnewone.AddCell(March1);

        PdfPCell Marchamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Marchamount.HorizontalAlignment = 1;
        Marchamount.Colspan = 1;
        tablesnewone.AddCell(Marchamount);

        PdfPCell Marchepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Marchepf.HorizontalAlignment = 1;
        Marchepf.Colspan = 1;
        tablesnewone.AddCell(Marchepf);

        PdfPCell Marchepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Marchepfcontributionvalue.HorizontalAlignment = 1;
        Marchepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(Marchepfcontributionvalue);

        PdfPCell Marchpensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Marchpensionvalue.HorizontalAlignment = 1;
        Marchpensionvalue.Colspan = 1;
        tablesnewone.AddCell(Marchpensionvalue);

        PdfPCell MarchRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        MarchRefundvalue.HorizontalAlignment = 1;
        MarchRefundvalue.Colspan = 1;
        tablesnewone.AddCell(MarchRefundvalue);

        PdfPCell Marchnoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Marchnoofdaysvalue.HorizontalAlignment = 0;
        Marchnoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(Marchnoofdaysvalue);

        PdfPCell MarchreMarchkstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        MarchreMarchkstext.HorizontalAlignment = 0;
        MarchreMarchkstext.Colspan = 1;
        tablesnewone.AddCell(MarchreMarchkstext);

        //end mar

        //any

        PdfPCell any1 = new PdfPCell(new Phrase("Supplementary if any", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        any1.HorizontalAlignment = 0;
        any1.Colspan = 1;
        tablesnewone.AddCell(any1);

        PdfPCell anyamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        anyamount.HorizontalAlignment = 1;
        anyamount.Colspan = 1;
        tablesnewone.AddCell(anyamount);

        PdfPCell anyepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        anyepf.HorizontalAlignment = 1;
        anyepf.Colspan = 1;
        tablesnewone.AddCell(anyepf);

        PdfPCell anyepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        anyepfcontributionvalue.HorizontalAlignment = 1;
        anyepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(anyepfcontributionvalue);

        PdfPCell anypensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        anypensionvalue.HorizontalAlignment = 1;
        anypensionvalue.Colspan = 1;
        tablesnewone.AddCell(anypensionvalue);

        PdfPCell anyRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        anyRefundvalue.HorizontalAlignment = 1;
        anyRefundvalue.Colspan = 1;
        tablesnewone.AddCell(anyRefundvalue);

        PdfPCell anynoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        anynoofdaysvalue.HorizontalAlignment = 0;
        anynoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(anynoofdaysvalue);

        PdfPCell anyreanykstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        anyreanykstext.HorizontalAlignment = 0;
        anyreanykstext.Colspan = 1;
        tablesnewone.AddCell(anyreanykstext);

        // end any

        //total
        PdfPCell Total1 = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Total1.HorizontalAlignment = 0;
        Total1.Colspan = 1;
        tablesnewone.AddCell(Total1);

        PdfPCell Totalamount = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Totalamount.HorizontalAlignment = 1;
        Totalamount.Colspan = 1;
        tablesnewone.AddCell(Totalamount);

        PdfPCell Totalepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Totalepf.HorizontalAlignment = 1;
        Totalepf.Colspan = 1;
        tablesnewone.AddCell(Totalepf);

        PdfPCell Totalepfcontributionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        Totalepfcontributionvalue.HorizontalAlignment = 1;
        Totalepfcontributionvalue.Colspan = 1;
        tablesnewone.AddCell(Totalepfcontributionvalue);

        PdfPCell Totalpensionvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Totalpensionvalue.HorizontalAlignment = 1;
        Totalpensionvalue.Colspan = 1;
        tablesnewone.AddCell(Totalpensionvalue);

        PdfPCell TotalRefundvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        TotalRefundvalue.HorizontalAlignment = 1;
        TotalRefundvalue.Colspan = 1;
        tablesnewone.AddCell(TotalRefundvalue);

        PdfPCell Totalnoofdaysvalue = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Totalnoofdaysvalue.HorizontalAlignment = 0;
        Totalnoofdaysvalue.Colspan = 1;
        tablesnewone.AddCell(Totalnoofdaysvalue);

        PdfPCell TotalreTotalkstext = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        TotalreTotalkstext.HorizontalAlignment = 0;
        TotalreTotalkstext.Colspan = 1;
        tablesnewone.AddCell(TotalreTotalkstext);

        //end total


        PdfPCell emp = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        emp.HorizontalAlignment = 0;
        emp.Colspan = 8;
        emp.Border = 0;
        tablesnewone.AddCell(emp);
        tablesnewone.AddCell(emp);



        PdfPCell fottertext1 = new PdfPCell(new Phrase("Certified that the total amount of contribution (both shares) indicated in this card i.e.             has  already been remitted  it full in E.P.F. A/c No. 1 and PensionFund A/c No. 10 Rs", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        fottertext1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        fottertext1.Colspan = 8;
        fottertext1.Border = 0;
        tablesnewone.AddCell(fottertext1);

        PdfPCell emp1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        emp1.HorizontalAlignment = 0;
        emp1.Colspan = 8;
        emp1.Border = 0;
        tablesnewone.AddCell(emp1);
        tablesnewone.AddCell(emp1);

        PdfPCell fottertext = new PdfPCell(new Phrase("Certified that the difference between the total of the contribution shown under Cols. 3 & 4a & 4b of the above table and that arrived at on the total wages shown in column 2 at the prescribed rate is solely due to rounding off the contributions to the nearest rupee under the rules", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        fottertext.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        fottertext.Colspan = 8;
        fottertext.Border = 0;
        tablesnewone.AddCell(fottertext);

        PdfPCell emp11 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        emp11.HorizontalAlignment = 0;
        emp11.Colspan = 8;
        emp11.Border = 0;
        tablesnewone.AddCell(emp11);
        tablesnewone.AddCell(emp11);
        tablesnewone.AddCell(emp11);
        tablesnewone.AddCell(emp11);


        PdfPCell celldate = new PdfPCell(new Phrase("Date: ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldate.HorizontalAlignment = 0;
        celldate.Colspan = 4;
        // celldate.PaddingBottom = -20;
        celldate.Border = 0;
        tablesnewone.AddCell(celldate);

        PdfPCell signature = new PdfPCell(new Phrase("Signature of the Employer(with office seal)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        signature.HorizontalAlignment = 2;
        signature.Colspan = 4;
        signature.Border = 0;
        // signature.PaddingBottom = -20;
        tablesnewone.AddCell(signature);

        document.Add(tablesnewone);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "formX.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnform5_Click(object sender, EventArgs e)
    {


        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

       
       
        if (ddlempid.SelectedIndex == 0)
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
            return;
        }

        //#region  Begin  New Code

        #region  Begin  New Code

        #region Begin Variable Declaration

        string SPName = "";
        Hashtable HTEmpBiodata = new Hashtable();
        string Empid = "";
        DataTable dtEmpdetails = null;

        #endregion end Variable Declaration


        #region Begin Assign Values to The Variables
        SPName = "EmployeeFormsPDF";
        Empid = ddlempid.SelectedValue;
        #endregion End Assign values To the Variables

        #region Begin Pass values to the Hash table
        HTEmpBiodata.Add("@empid", Empid);
        #endregion  end Pass values to the Hash table

        #region Begin  Call Stored Procedure
        dtEmpdetails =config.ExecuteAdaptorAsyncWithParams(SPName, HTEmpBiodata).Result;
        #endregion  End  Call Stored Procedure

        #endregion End New Code As on [31-05-2014]

        #region
        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion
        #endregion

        string Gender = "";
        string Companyname = "";
        string CompanyAddress = "";
        string remarks = "";
        string accno = "";

        int j = 1;
        if (dtEmpdetails.Rows.Count > 0)
        {

            name = dtEmpdetails.Rows[0]["EmployeeName"].ToString();
            fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
            date = dtEmpdetails.Rows[0]["DtOfJoining"].ToString();
            Gender = dtEmpdetails.Rows[0]["gender"].ToString();
            Companyname = dtEmpdetails.Rows[0]["CompanyName"].ToString();
            CompanyAddress = dtEmpdetails.Rows[0]["CompanyAddress"].ToString();
            remarks = dtEmpdetails.Rows[0]["EmpRemarks"].ToString();
            accno = dtEmpdetails.Rows[0]["EmpBankAcNo"].ToString();
        }



        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablenewc = new PdfPTable(9);
        tablenewc.TotalWidth = 900f;
        tablenewc.LockedWidth = true;
        float[] width = new float[] { 1.5f, 4f, 5f, 5f, 3f, 2f, 3f, 7f, 3.5f };
        tablenewc.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 11;
        cellspace.Border = 0;
        cellspace.PaddingTop = 0;

        PdfPCell cellHead = new PdfPCell(new Phrase("Form-5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 11;
        cellHead.Border = 0;
        tablenewc.AddCell(cellHead);

        PdfPCell provident = new PdfPCell(new Phrase("Employees' Provident Fund Organisation", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.BLACK)));
        provident.HorizontalAlignment = 1;
        provident.Colspan = 11;
        provident.Border = 0;
        tablenewc.AddCell(provident);

        PdfPCell cellemp = new PdfPCell(new Phrase("THE EMPLOYEES' PROVIDENT FUND SCHEME,1952[Para 36 (2) (a) ] AND THE EMPLOYEES' PENSION SCHEME,1995 [Para 20 (4) ] ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellemp.HorizontalAlignment = 1;
        cellemp.Colspan = 11;
        cellemp.Border = 0;
        tablenewc.AddCell(cellemp);



        PdfPCell cellreturn = new PdfPCell(new Phrase("Return of Employees' qualifying for membership of the Employees' Provident Fund , Employees' Pension Fund & Employees' Deposit Linked Insurance Fund for the first time ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));
        cellreturn.HorizontalAlignment = 0;
        cellreturn.Colspan = 11;
        cellreturn.Border = 0;
        tablenewc.AddCell(cellreturn);

        PdfPCell cellmonth = new PdfPCell(new Phrase("during the month of  :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));
        cellmonth.HorizontalAlignment = 0;
        cellmonth.Colspan = 11;
        cellmonth.Border = 0;
        tablenewc.AddCell(cellmonth);

        PdfPCell nameaddress = new PdfPCell(new Phrase("Name and address of the Factory / Estt.:"+CompanyAddress +CompanyAddress , FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));
        nameaddress.HorizontalAlignment = 0;
        nameaddress.Colspan = 11;
        nameaddress.Border = 0;
        tablenewc.AddCell(nameaddress);


        PdfPCell cellcode = new PdfPCell(new Phrase("Code No. of the Factory / Estt.:", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));
        cellcode.HorizontalAlignment = 0;
        cellcode.Colspan = 11;
        cellcode.Border = 0;
        tablenewc.AddCell(cellcode);

        tablenewc.AddCell(cellspace);


        PdfPCell celltable10 = new PdfPCell(new Phrase("SL.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable10.HorizontalAlignment = 1;
        celltable10.Colspan = 0;
        tablenewc.AddCell(celltable10);

        PdfPCell Account = new PdfPCell(new Phrase("Account No.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Account.HorizontalAlignment = 1;
        Account.Colspan = 0;
        tablenewc.AddCell(Account);

        PdfPCell Name = new PdfPCell(new Phrase("Name Of the Member (In the  block capitals) ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Name.HorizontalAlignment = 1;
        Name.Colspan = 0;
        tablenewc.AddCell(Name);


        PdfPCell Father = new PdfPCell(new Phrase("Father Name (or husband's name in case of married women)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Father.HorizontalAlignment = 1;
        Father.Colspan = 0;
        tablenewc.AddCell(Father);

        PdfPCell birth = new PdfPCell(new Phrase("Date of birth ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        birth.HorizontalAlignment = 1;
        birth.Colspan = 0;
        tablenewc.AddCell(birth);

        PdfPCell Sex = new PdfPCell(new Phrase("Sex", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Sex.HorizontalAlignment = 1;
        Sex.Colspan = 0;
        tablenewc.AddCell(Sex);


        PdfPCell Date = new PdfPCell(new Phrase("Date of Joining the Fund", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Date.HorizontalAlignment = 1;
        Date.Colspan = 0;
        tablenewc.AddCell(Date);


        PdfPCell Total = new PdfPCell(new Phrase("Total period of previous service as on the date of joining the Fund (Enclose scheme Certificate if applicable)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Total.HorizontalAlignment = 1;
        Total.Colspan = 0;
        tablenewc.AddCell(Total);

        PdfPCell Remarks = new PdfPCell(new Phrase("Remarks", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Remarks.HorizontalAlignment = 1;
        Remarks.Colspan = 0;
        tablenewc.AddCell(Remarks);

        PdfPCell cell1 = new PdfPCell(new Phrase("1 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell1.HorizontalAlignment = 1;
        cell1.Colspan = 0;
        tablenewc.AddCell(cell1);

        PdfPCell cell2 = new PdfPCell(new Phrase("2", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell2.HorizontalAlignment = 1;
        cell2.Colspan = 0;
        tablenewc.AddCell(cell2);

        PdfPCell cell3 = new PdfPCell(new Phrase("3 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell3.HorizontalAlignment = 1;
        cell3.Colspan = 0;
        tablenewc.AddCell(cell3);

        PdfPCell cell4 = new PdfPCell(new Phrase("4", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell4.HorizontalAlignment = 1;
        cell4.Colspan = 0;
        tablenewc.AddCell(cell4);

        PdfPCell cell5 = new PdfPCell(new Phrase("5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell5.HorizontalAlignment = 1;
        cell5.Colspan = 0;
        tablenewc.AddCell(cell5);

        PdfPCell cell6 = new PdfPCell(new Phrase("6", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell6.HorizontalAlignment = 1;
        cell6.Colspan = 0;
        tablenewc.AddCell(cell6);

        PdfPCell cell7 = new PdfPCell(new Phrase("7", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell7.HorizontalAlignment = 1;
        cell7.Colspan = 0;
        tablenewc.AddCell(cell7);

        PdfPCell cell8 = new PdfPCell(new Phrase("8", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell8.HorizontalAlignment = 1;
        cell8.Colspan = 0;
        tablenewc.AddCell(cell8);

        PdfPCell cell9 = new PdfPCell(new Phrase("9", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell9.HorizontalAlignment = 1;
        cell9.Colspan = 0;
        tablenewc.AddCell(cell9);
       

        PdfPCell cellsno1 = new PdfPCell(new Phrase(j.ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsno1.HorizontalAlignment = 1;
        cellsno1.Colspan = 0;
        tablenewc.AddCell(cellsno1);

        PdfPCell cellacc2 = new PdfPCell(new Phrase(accno, FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellacc2.HorizontalAlignment = 1;
        cellacc2.Colspan = 0;
        tablenewc.AddCell(cellacc2);

        PdfPCell cellname3 = new PdfPCell(new Phrase(name, FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname3.HorizontalAlignment = 1;
        cellname3.Colspan = 0;
        tablenewc.AddCell(cellname3);

        PdfPCell cellfather4 = new PdfPCell(new Phrase(fathername, FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfather4.HorizontalAlignment = 1;
        cellfather4.Colspan = 0;
        tablenewc.AddCell(cellfather4);

        PdfPCell cellbirh5 = new PdfPCell(new Phrase(date, FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellbirh5.HorizontalAlignment = 1;
        cellbirh5.Colspan = 0;
        tablenewc.AddCell(cellbirh5);

        PdfPCell cellsex6 = new PdfPCell(new Phrase(Gender, FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsex6.HorizontalAlignment = 1;
        cellsex6.Colspan = 0;
        tablenewc.AddCell(cellsex6);

        PdfPCell celldatejoin7 = new PdfPCell(new Phrase(date, FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldatejoin7.HorizontalAlignment = 1;
        celldatejoin7.Colspan = 0;
        tablenewc.AddCell(celldatejoin7);

        PdfPCell celltotal8 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltotal8.HorizontalAlignment = 1;
        celltotal8.Colspan = 0;
        tablenewc.AddCell(celltotal8);

        PdfPCell cellremarks9 = new PdfPCell(new Phrase(remarks, FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellremarks9.HorizontalAlignment = 1;
        cellremarks9.Colspan = 0;
        cellremarks9.FixedHeight = 25f;
        tablenewc.AddCell(cellremarks9);

        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);

        PdfPCell empty = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        empty.HorizontalAlignment = 0;
        empty.Colspan = 11;
        empty.Border = 0;
        tablenewc.AddCell(empty);



        PdfPCell footerdate = new PdfPCell(new Phrase("Date :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        footerdate.HorizontalAlignment = 0;
        footerdate.Colspan = 2;
        footerdate.BorderWidthTop = .5f;
        footerdate.BorderWidthRight = 0;
        footerdate.BorderWidthLeft = 0;
        footerdate.BorderWidthBottom = 0;
        tablenewc.AddCell(footerdate);

        PdfPCell stamp = new PdfPCell(new Phrase("Stamp of the Factory / Est.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        stamp.HorizontalAlignment = 0;
        stamp.Colspan = 2;
        stamp.BorderWidthTop = .5f;
        stamp.BorderWidthRight = 0;
        stamp.BorderWidthLeft = 0;
        stamp.BorderWidthBottom = 0;
        tablenewc.AddCell(stamp);

        PdfPCell sig = new PdfPCell(new Phrase("Signature of the employer or other authorised officer of the Factory / Establishment", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        sig.HorizontalAlignment = 2;
        sig.Colspan = 7;
        sig.BorderWidthTop = .5f;
        sig.BorderWidthRight = 0;
        sig.BorderWidthLeft = 0;
        sig.BorderWidthBottom = 0;
        tablenewc.AddCell(sig);



        document.Add(tablenewc);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);


        string filename = "FormXXII.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnform10_Click(object sender, EventArgs e)
    {


        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion
        #endregion

        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablenewc = new PdfPTable(7);
        tablenewc.TotalWidth = 900f;
        tablenewc.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tablenewc.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 7;
        cellspace.Border = 0;
        cellspace.PaddingTop = 0;

        PdfPCell cellHead = new PdfPCell(new Phrase("Form-10 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 7;
        cellHead.Border = 0;
        tablenewc.AddCell(cellHead);

        PdfPCell provident = new PdfPCell(new Phrase("Employees' Provident Fund Organisation ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.BLACK)));
        provident.HorizontalAlignment = 1;
        provident.Colspan = 7;
        provident.Border = 0;
        tablenewc.AddCell(provident);

        PdfPCell cellemp = new PdfPCell(new Phrase("THE EMPLOYEES' PROVIDENT FUND SCHEME,1952[Para 36 (2) (a) & (b) ] THE EMPLOYEES' PENSION SCHEME,1995 [Para 20 (2) ] ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellemp.HorizontalAlignment = 1;
        cellemp.Colspan = 7;
        cellemp.Border = 0;
        tablenewc.AddCell(cellemp);


        PdfPCell cellmonth = new PdfPCell(new Phrase("Return of members leaving service during the month   :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellmonth.HorizontalAlignment = 0;
        cellmonth.Colspan = 7;
        cellmonth.Border = 0;
        tablenewc.AddCell(cellmonth);

        PdfPCell nameaddress = new PdfPCell(new Phrase("Name and address of the Factory / Establishment.:", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        nameaddress.HorizontalAlignment = 0;
        nameaddress.Colspan = 7;
        nameaddress.Border = 0;
        tablenewc.AddCell(nameaddress);


        PdfPCell cellcode = new PdfPCell(new Phrase("Code No.:", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellcode.HorizontalAlignment = 0;
        cellcode.Colspan = 7;
        cellcode.Border = 0;
        tablenewc.AddCell(cellcode);

        tablenewc.AddCell(cellspace);


        PdfPCell celltable10 = new PdfPCell(new Phrase("SL.No. ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable10.HorizontalAlignment = 1;
        celltable10.Colspan = 0;
        tablenewc.AddCell(celltable10);

        PdfPCell Account = new PdfPCell(new Phrase("Account No.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Account.HorizontalAlignment = 1;
        Account.Colspan = 0;
        tablenewc.AddCell(Account);

        PdfPCell Name = new PdfPCell(new Phrase("Name Of the Mumber (In the  block letters) ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Name.HorizontalAlignment = 1;
        Name.Colspan = 0;
        tablenewc.AddCell(Name);


        PdfPCell Father = new PdfPCell(new Phrase("Father Name (or husband's name in case of married women)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Father.HorizontalAlignment = 1;
        Father.Colspan = 0;
        tablenewc.AddCell(Father);


        PdfPCell Date = new PdfPCell(new Phrase("Date of Leaving Service", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Date.HorizontalAlignment = 1;
        Date.Colspan = 0;
        tablenewc.AddCell(Date);


        PdfPCell reson = new PdfPCell(new Phrase("Reason for leaving Service*", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        reson.HorizontalAlignment = 1;
        reson.Colspan = 0;
        tablenewc.AddCell(reson);

        PdfPCell Remarks = new PdfPCell(new Phrase("Remarks", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Remarks.HorizontalAlignment = 1;
        Remarks.Colspan = 0;
        tablenewc.AddCell(Remarks);

        PdfPCell cell1 = new PdfPCell(new Phrase("1 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell1.HorizontalAlignment = 1;
        cell1.Colspan = 0;
        tablenewc.AddCell(cell1);

        PdfPCell cell2 = new PdfPCell(new Phrase("2", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell2.HorizontalAlignment = 1;
        cell2.Colspan = 0;
        tablenewc.AddCell(cell2);

        PdfPCell cell3 = new PdfPCell(new Phrase("3 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell3.HorizontalAlignment = 1;
        cell3.Colspan = 0;
        tablenewc.AddCell(cell3);

        PdfPCell cell4 = new PdfPCell(new Phrase("4", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell4.HorizontalAlignment = 1;
        cell4.Colspan = 0;
        tablenewc.AddCell(cell4);

        PdfPCell cell5 = new PdfPCell(new Phrase("5 ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell5.HorizontalAlignment = 1;
        cell5.Colspan = 0;
        tablenewc.AddCell(cell5);

        PdfPCell cell6 = new PdfPCell(new Phrase("6", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell6.HorizontalAlignment = 1;
        cell6.Colspan = 0;
        tablenewc.AddCell(cell6);

        PdfPCell cell7 = new PdfPCell(new Phrase("7", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell7.HorizontalAlignment = 1;
        cell7.Colspan = 0;
        tablenewc.AddCell(cell7);




        PdfPCell cellsno1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsno1.HorizontalAlignment = 1;
        cellsno1.Colspan = 0;
        tablenewc.AddCell(cellsno1);

        PdfPCell cellacc2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellacc2.HorizontalAlignment = 1;
        cellacc2.Colspan = 0;
        tablenewc.AddCell(cellacc2);

        PdfPCell cellname3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname3.HorizontalAlignment = 1;
        cellname3.Colspan = 0;
        tablenewc.AddCell(cellname3);

        PdfPCell cellfather4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfather4.HorizontalAlignment = 1;
        cellfather4.Colspan = 0;
        tablenewc.AddCell(cellfather4);

        PdfPCell cellbirh5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellbirh5.HorizontalAlignment = 1;
        cellbirh5.Colspan = 0;
        tablenewc.AddCell(cellbirh5);

        PdfPCell cellsex6 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsex6.HorizontalAlignment = 1;
        cellsex6.Colspan = 0;
        tablenewc.AddCell(cellsex6);

        PdfPCell celldatejoin7 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldatejoin7.HorizontalAlignment = 1;
        celldatejoin7.Colspan = 0;
        celldatejoin7.FixedHeight = 25f;
        tablenewc.AddCell(celldatejoin7);



        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);




        PdfPCell footerdate = new PdfPCell(new Phrase("Date :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        footerdate.HorizontalAlignment = 0;
        footerdate.Colspan = 2;
        footerdate.Border = 0;
        tablenewc.AddCell(footerdate);

        PdfPCell stamp = new PdfPCell(new Phrase("Signature of the employer or other authorised officer of the Factory / Establishment", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        stamp.HorizontalAlignment = 2;
        stamp.Colspan = 5;
        stamp.Border = 0;
        tablenewc.AddCell(stamp);

        tablenewc.AddCell(cellspace);
        tablenewc.AddCell(cellspace);

        PdfPCell declaration = new PdfPCell(new Phrase("* Please state whether the member is (a) retiring according to para (69) (1) (a) or (b) of the scheme (b) of the scheme (b) leaving india for permanent settlement abroad (c) retrenchment (d) Pt. & total disablement due to employment injury (e) discharged (f) resigning from or leaving service (g) taking up employement elsewhere (The name & address of the Employees should be stated (h) death (i) attained the age of 58 years.", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        declaration.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        declaration.Colspan = 7;
        declaration.Border = 0;
        tablenewc.AddCell(declaration);



        document.Add(tablenewc);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);


        string filename = "FormXXII.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnform12_Click(object sender, EventArgs e)
    {


        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion
        #endregion

        MemoryStream ms = new MemoryStream();

        Document document = new Document(PageSize.LEGAL.Rotate());

        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablenewc = new PdfPTable(9);
        tablenewc.TotalWidth = 900f;
        tablenewc.LockedWidth = true;
        float[] width = new float[] { 4f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tablenewc.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 9;
        cellspace.Border = 0;
        cellspace.PaddingTop = 0;

        PdfPCell cellonlyun = new PdfPCell(new Phrase("(ONLY FOR UN-EXEMPTED ESTABLISHMENTS ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 2, Font.BOLD, BaseColor.BLACK)));
        cellonlyun.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        cellonlyun.Colspan = 9;
        cellonlyun.Border = 0;
        tablenewc.AddCell(cellonlyun);

        PdfPCell provident = new PdfPCell(new Phrase("Employees' Provident Fund Organisation ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.BLACK)));
        provident.HorizontalAlignment = 1;
        provident.Colspan = 9;
        provident.Border = 0;
        tablenewc.AddCell(provident);

        PdfPCell cellemp = new PdfPCell(new Phrase("THE EMPLOYEES' PROVIDENT FUND  AND  MISC.PROVISIONS ACT,1952- EMPLOYEES' PENSION SCHEME [PARA 20 (4) ]  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellemp.HorizontalAlignment = 1;
        cellemp.Colspan = 9;
        cellemp.Border = 0;
        tablenewc.AddCell(cellemp);

        PdfPCell cellHead = new PdfPCell(new Phrase("Form 12-A ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 9;
        cellHead.Border = 0;
        tablenewc.AddCell(cellHead);

        PdfPCell cellmonth = new PdfPCell(new Phrase("Name and address of  the Factory / Establishment :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellmonth.HorizontalAlignment = 0;
        cellmonth.Colspan = 3;
        cellmonth.Border = 0;
        tablenewc.AddCell(cellmonth);

        PdfPCell nameaddress = new PdfPCell(new Phrase("Currency period from", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        nameaddress.HorizontalAlignment = 0;
        nameaddress.Colspan = 4;
        nameaddress.Border = 0;
        tablenewc.AddCell(nameaddress);

        PdfPCell cellcode = new PdfPCell(new Phrase(" ( To be filled by the EPFO)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellcode.HorizontalAlignment = 2;
        cellcode.Colspan = 2;
        cellcode.Border = 0;
        tablenewc.AddCell(cellcode);

        PdfPCell epty = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        epty.HorizontalAlignment = 0;
        epty.Colspan = 3;
        epty.Border = 0;
        tablenewc.AddCell(epty);

        PdfPCell Statement = new PdfPCell(new Phrase("Statement of contribution for the month of", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        Statement.HorizontalAlignment = 0;
        Statement.Colspan = 4;
        Statement.Border = 0;
        tablenewc.AddCell(Statement);

        PdfPCell Group = new PdfPCell(new Phrase("Group code :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        Group.HorizontalAlignment = 2;
        Group.Colspan = 2;
        Group.Border = 0;
        tablenewc.AddCell(Group);

        PdfPCell Establishment = new PdfPCell(new Phrase("Establishment Status :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        Establishment.HorizontalAlignment = 2;
        Establishment.Colspan = 9;
        Establishment.Border = 0;
        tablenewc.AddCell(Establishment);

        PdfPCell code1 = new PdfPCell(new Phrase("Group code :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        code1.HorizontalAlignment = 0;
        code1.Colspan = 4;
        code1.Border = 0;
        tablenewc.AddCell(code1);

        PdfPCell Statutory = new PdfPCell(new Phrase("Statutory rate of contribution 12.00 % ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        Statutory.HorizontalAlignment = 0;
        Statutory.Colspan = 5;
        Statutory.Border = 0;
        tablenewc.AddCell(Statutory);



        #region
        PdfPCell empty6 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty6.HorizontalAlignment = 1;
        empty6.BorderWidthBottom = 0;
        empty6.BorderWidthLeft = .5f;
        empty6.BorderWidthRight = .5f;
        empty6.BorderWidthTop = .5f;
        tablenewc.AddCell(empty6);

        PdfPCell empty5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty5.HorizontalAlignment = 1;
        empty5.BorderWidthBottom = 0;
        empty5.BorderWidthLeft = .5f;
        empty5.BorderWidthRight = .5f;
        empty5.BorderWidthTop = .5f;
        tablenewc.AddCell(empty5);

        PdfPCell empty4 = new PdfPCell(new Phrase("Amount of Contribution \n (3) ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty4.HorizontalAlignment = 1;
        empty4.Colspan = 2;
        tablenewc.AddCell(empty4);

        PdfPCell empty3 = new PdfPCell(new Phrase("Amount of Contribution remitted \n (4)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty3.HorizontalAlignment = 1;
        empty3.Colspan = 2;
        tablenewc.AddCell(empty3);

        PdfPCell empty2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty2.HorizontalAlignment = 1;
        empty2.BorderWidthBottom = 0;
        empty2.BorderWidthLeft = .5f;
        empty2.BorderWidthRight = 0;
        empty2.BorderWidthTop = .5f;
        tablenewc.AddCell(empty2);

        PdfPCell empty1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty1.HorizontalAlignment = 1;
        empty1.BorderWidthBottom = 0;
        empty1.BorderWidthLeft = .5f;
        empty1.BorderWidthRight = .5f;
        empty1.BorderWidthTop = .5f;
        tablenewc.AddCell(empty1);

        PdfPCell empty = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty.HorizontalAlignment = 1;
        empty.BorderWidthBottom = 0;
        empty.BorderWidthLeft = .5f;
        empty.BorderWidthRight = .5f;
        empty.BorderWidthTop = .5f;
        tablenewc.AddCell(empty);



        #endregion

        PdfPCell celltable10 = new PdfPCell(new Phrase("Particulars \n (1)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celltable10.HorizontalAlignment = 1;
        celltable10.Colspan = 0;
        celltable10.BorderWidthBottom = .5f;
        celltable10.BorderWidthLeft = .5f;
        celltable10.BorderWidthRight = .5f;
        celltable10.BorderWidthTop = 0;
        tablenewc.AddCell(celltable10);

        PdfPCell Account = new PdfPCell(new Phrase("Wages on  which contributions are payable \n (2)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Account.HorizontalAlignment = 1;
        Account.Colspan = 0;
        Account.BorderWidthBottom = .5f;
        Account.BorderWidthLeft = .5f;
        Account.BorderWidthRight = .5f;
        Account.BorderWidthTop = 0;
        tablenewc.AddCell(Account);

        PdfPCell Name = new PdfPCell(new Phrase("Recovered from the Employees  ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Name.HorizontalAlignment = 1;
        Name.Colspan = 0;
        tablenewc.AddCell(Name);

        PdfPCell Father = new PdfPCell(new Phrase("Payable from the Employeer", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Father.HorizontalAlignment = 1;
        Father.Colspan = 0;
        tablenewc.AddCell(Father);

        PdfPCell Date = new PdfPCell(new Phrase("Employee'Share", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Date.HorizontalAlignment = 1;
        Date.Colspan = 0;
        tablenewc.AddCell(Date);

        PdfPCell reson = new PdfPCell(new Phrase("Employer's Share", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        reson.HorizontalAlignment = 1;
        reson.Colspan = 0;
        tablenewc.AddCell(reson);

        PdfPCell Amount = new PdfPCell(new Phrase("Amount ofadministrative charges due \n (5)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Amount.HorizontalAlignment = 1;
        Amount.Colspan = 0;
        Amount.BorderWidthBottom = .5f;
        Amount.BorderWidthLeft = .5f;
        Amount.BorderWidthRight = .5f;
        Amount.BorderWidthTop = 0;
        tablenewc.AddCell(Amount);

        PdfPCell Amount1 = new PdfPCell(new Phrase("Amount ofadministrative charges due remitted \n (6)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Amount1.HorizontalAlignment = 1;
        Amount1.Colspan = 0;
        Amount1.BorderWidthBottom = .5f;
        Amount1.BorderWidthLeft = .5f;
        Amount1.BorderWidthRight = .5f;
        Amount1.BorderWidthTop = 0;
        tablenewc.AddCell(Amount1);

        PdfPCell Date1 = new PdfPCell(new Phrase("Date of remittance (enclose triplicate copy of challan/s) \n (7)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Date1.HorizontalAlignment = 1;
        Date1.Colspan = 0;
        Date1.BorderWidthBottom = .5f;
        Date1.BorderWidthLeft = .5f;
        Date1.BorderWidthRight = .5f;
        Date1.BorderWidthTop = 0;
        tablenewc.AddCell(Date1);

        PdfPCell cellepf1 = new PdfPCell(new Phrase("E.P.F. A/c No.01", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellepf1.HorizontalAlignment = 0;
        cellepf1.Colspan = 0;
        tablenewc.AddCell(cellepf1);

        PdfPCell cellepf2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellepf2.HorizontalAlignment = 1;
        cellepf2.Colspan = 0;
        tablenewc.AddCell(cellepf2);

        PdfPCell cellepf3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellepf3.HorizontalAlignment = 1;
        cellepf3.Colspan = 0;
        tablenewc.AddCell(cellepf3);

        PdfPCell cellepf4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellepf4.HorizontalAlignment = 1;
        cellepf4.Colspan = 0;
        tablenewc.AddCell(cellepf4);

        PdfPCell cellepf5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellepf5.HorizontalAlignment = 1;
        cellepf5.Colspan = 0;
        tablenewc.AddCell(cellepf5);

        PdfPCell cellepf6 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellepf6.HorizontalAlignment = 1;
        cellepf6.Colspan = 0;
        tablenewc.AddCell(cellepf6);

        PdfPCell cellepf7 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellepf7.HorizontalAlignment = 1;
        cellepf7.Colspan = 0;
        tablenewc.AddCell(cellepf7);

        PdfPCell cellepf8 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellepf8.HorizontalAlignment = 1;
        cellepf8.Colspan = 0;
        tablenewc.AddCell(cellepf8);

        PdfPCell cellepf9 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellepf9.HorizontalAlignment = 1;
        cellepf9.Colspan = 0;
        tablenewc.AddCell(cellepf9);

        PdfPCell cell2 = new PdfPCell(new Phrase("Pension Fund A/c.No.10", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cell2.HorizontalAlignment = 0;
        cell2.Colspan = 0;
        tablenewc.AddCell(cell2);

        PdfPCell pensionfund1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        pensionfund1.HorizontalAlignment = 1;
        pensionfund1.Colspan = 0;
        tablenewc.AddCell(pensionfund1);

        PdfPCell pensionfund2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        pensionfund2.HorizontalAlignment = 1;
        pensionfund2.Colspan = 0;
        tablenewc.AddCell(pensionfund2);

        PdfPCell pensionfund3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        pensionfund3.HorizontalAlignment = 1;
        pensionfund3.Colspan = 0;
        tablenewc.AddCell(pensionfund3);

        PdfPCell pensionfund4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        pensionfund4.HorizontalAlignment = 1;
        pensionfund4.Colspan = 0;
        tablenewc.AddCell(pensionfund4);

        PdfPCell pensionfund5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        pensionfund5.HorizontalAlignment = 1;
        pensionfund5.Colspan = 0;
        tablenewc.AddCell(pensionfund5);

        PdfPCell pensionfund6 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        pensionfund6.HorizontalAlignment = 1;
        pensionfund6.Colspan = 0;
        tablenewc.AddCell(pensionfund6);

        PdfPCell pensionfund7 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        pensionfund7.HorizontalAlignment = 1;
        pensionfund7.Colspan = 0;
        tablenewc.AddCell(pensionfund7);

        PdfPCell pensionfund8 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        pensionfund8.HorizontalAlignment = 1;
        pensionfund8.Colspan = 0;
        tablenewc.AddCell(pensionfund8);

        PdfPCell edlac1 = new PdfPCell(new Phrase("E.D.L.I.A/c.No.21", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        edlac1.HorizontalAlignment = 0;
        edlac1.Colspan = 0;
        tablenewc.AddCell(edlac1);

        PdfPCell edlac2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        edlac2.HorizontalAlignment = 1;
        edlac2.Colspan = 0;
        tablenewc.AddCell(edlac2);

        PdfPCell edlac3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        edlac3.HorizontalAlignment = 1;
        edlac3.Colspan = 0;
        tablenewc.AddCell(edlac3);

        PdfPCell edlac4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        edlac4.HorizontalAlignment = 1;
        edlac4.Colspan = 0;
        tablenewc.AddCell(edlac4);

        PdfPCell edlac5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        edlac5.HorizontalAlignment = 1;
        edlac5.Colspan = 0;
        tablenewc.AddCell(edlac5);

        PdfPCell edlac6 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        edlac6.HorizontalAlignment = 1;
        edlac6.Colspan = 0;
        tablenewc.AddCell(edlac6);

        PdfPCell edlac7 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        edlac7.HorizontalAlignment = 1;
        edlac7.Colspan = 0;
        tablenewc.AddCell(edlac7);

        PdfPCell edlac8 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        edlac8.HorizontalAlignment = 1;
        edlac8.Colspan = 0;
        tablenewc.AddCell(edlac8);

        PdfPCell edlac9 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        edlac9.HorizontalAlignment = 1;
        edlac9.Colspan = 0;
        tablenewc.AddCell(edlac9);
        tablenewc.AddCell(cellspace);

        PdfPCell cellsno1 = new PdfPCell(new Phrase("Total No. of Employees :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsno1.HorizontalAlignment = 0;
        cellsno1.Colspan = 4;
        cellsno1.Border = 0;
        tablenewc.AddCell(cellsno1);

        PdfPCell cellacc2 = new PdfPCell(new Phrase("Name and address of the bank in which the amount is remitted :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellacc2.HorizontalAlignment = 0;
        cellacc2.Colspan = 5;
        cellacc2.Border = 0;
        tablenewc.AddCell(cellacc2);

        PdfPCell cellname3 = new PdfPCell(new Phrase("(a) Contract :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname3.HorizontalAlignment = 0;
        cellname3.Colspan = 9;
        cellname3.Border = 0;
        tablenewc.AddCell(cellname3);

        PdfPCell cellfather4 = new PdfPCell(new Phrase("(b) Rest :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfather4.HorizontalAlignment = 0;
        cellfather4.Colspan = 9;
        cellfather4.Border = 0;
        tablenewc.AddCell(cellfather4);

        PdfPCell cellbirh5 = new PdfPCell(new Phrase("(c) Total :", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellbirh5.HorizontalAlignment = 0;
        cellbirh5.Colspan = 9;
        cellbirh5.Border = 0;
        tablenewc.AddCell(cellbirh5);
        tablenewc.AddCell(cellspace);

        document.Add(tablenewc);


        PdfPTable tempTable2 = new PdfPTable(8);
        tempTable2.TotalWidth = 900f;
        tempTable2.LockedWidth = true;
        float[] tempWidth2 = new float[] { 7f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tempTable2.SetWidths(tempWidth2);

        PdfPTable childtable1 = new PdfPTable(4);
        childtable1.TotalWidth = 560f;
        childtable1.LockedWidth = true;
        float[] childtblewidth = new float[] { 8f, 1.5f, 2f, 2f };
        childtable1.SetWidths(childtblewidth);

        #region


        PdfPCell Details = new PdfPCell(new Phrase("Details of Subscriberss", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Details.HorizontalAlignment = 0;
        Details.Colspan = 1;
        Details.BorderWidthBottom = .5f;
        Details.BorderWidthLeft = 0;
        Details.BorderWidthRight = .5f;
        Details.BorderWidthTop = .5f;
        childtable1.AddCell(Details);

        PdfPCell EPF = new PdfPCell(new Phrase("EPF", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        EPF.HorizontalAlignment = 0;
        EPF.Colspan = 1;
        childtable1.AddCell(EPF);

        PdfPCell EPS = new PdfPCell(new Phrase("EPS", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        EPS.HorizontalAlignment = 0;
        EPS.Colspan = 1;
        childtable1.AddCell(EPS);

        PdfPCell EDLI = new PdfPCell(new Phrase("EDLI", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        EDLI.HorizontalAlignment = 0;
        EDLI.Colspan = 1;
        childtable1.AddCell(EDLI);



        PdfPCell last = new PdfPCell(new Phrase(" No.of subscribers as per last month(vide Form 12 A)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        last.HorizontalAlignment = 0;
        last.Colspan = 1;
        last.BorderWidthBottom = 0;
        last.BorderWidthLeft = 0;
        last.BorderWidthRight = .5f;
        last.BorderWidthTop = .5f;
        childtable1.AddCell(last);

        PdfPCell noofEPF = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofEPF.HorizontalAlignment = 0;
        noofEPF.Colspan = 1;
        noofEPF.BorderWidthBottom = 0;
        noofEPF.BorderWidthLeft = .5f;
        noofEPF.BorderWidthRight = .5f;
        noofEPF.BorderWidthTop = .5f;
        childtable1.AddCell(noofEPF);

        PdfPCell noofEPS = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofEPS.HorizontalAlignment = 0;
        noofEPS.Colspan = 1;
        noofEPS.BorderWidthBottom = 0;
        noofEPS.BorderWidthLeft = 0;
        noofEPS.BorderWidthRight = .5f;
        noofEPS.BorderWidthTop = .5f;
        childtable1.AddCell(noofEPS);

        PdfPCell noofEDLI = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofEDLI.HorizontalAlignment = 0;
        noofEDLI.Colspan = 1;
        noofEDLI.BorderWidthBottom = 0;
        noofEDLI.BorderWidthLeft = 0;
        noofEDLI.BorderWidthRight = .5f;
        noofEDLI.BorderWidthTop = .5f;
        childtable1.AddCell(noofEDLI);


        PdfPCell newsub = new PdfPCell(new Phrase(" No. of New subscribers (Vide Form 5)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        newsub.HorizontalAlignment = 0;
        newsub.Colspan = 1;
        newsub.BorderWidthBottom = 0;
        newsub.BorderWidthLeft = 0;
        newsub.BorderWidthRight = .5f;
        newsub.BorderWidthTop = 0;
        childtable1.AddCell(newsub);

        PdfPCell newsubepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        newsubepf.HorizontalAlignment = 0;
        newsubepf.Colspan = 1;
        newsubepf.BorderWidthBottom = 0;
        newsubepf.BorderWidthLeft = .5f;
        newsubepf.BorderWidthRight = .5f;
        newsubepf.BorderWidthTop = 0;
        childtable1.AddCell(newsubepf);

        PdfPCell newsubEPS = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        newsubEPS.HorizontalAlignment = 0;
        newsubEPS.Colspan = 1;
        newsubEPS.BorderWidthBottom = 0;
        newsubEPS.BorderWidthLeft = .5f;
        newsubEPS.BorderWidthRight = .5f;
        newsubEPS.BorderWidthTop = 0;
        childtable1.AddCell(newsubEPS);

        PdfPCell newsubEDLI = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        newsubEDLI.HorizontalAlignment = 0;
        newsubEDLI.Colspan = 1;
        newsubEDLI.BorderWidthBottom = 0;
        newsubEDLI.BorderWidthLeft = .5f;
        newsubEDLI.BorderWidthRight = .5f;
        newsubEDLI.BorderWidthTop = 0;
        childtable1.AddCell(newsubEDLI);


        PdfPCell nofsubsub = new PdfPCell(new Phrase(" No.of subscribers left service (vide Form 10) ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nofsubsub.HorizontalAlignment = 0;
        nofsubsub.Colspan = 1;
        nofsubsub.BorderWidthBottom = 0;
        nofsubsub.BorderWidthLeft = 0;
        nofsubsub.BorderWidthRight = .5f;
        nofsubsub.BorderWidthTop = 0;
        childtable1.AddCell(nofsubsub);

        PdfPCell nosubepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nosubepf.HorizontalAlignment = 0;
        nosubepf.Colspan = 1;
        nosubepf.BorderWidthBottom = 0;
        nosubepf.BorderWidthLeft = .5f;
        nosubepf.BorderWidthRight = .5f;
        nosubepf.BorderWidthTop = 0;
        childtable1.AddCell(nosubepf);

        PdfPCell nosubEPS = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nosubEPS.HorizontalAlignment = 0;
        nosubEPS.Colspan = 1;
        nosubEPS.BorderWidthBottom = 0;
        nosubEPS.BorderWidthLeft = .5f;
        nosubEPS.BorderWidthRight = .5f;
        nosubEPS.BorderWidthTop = 0;
        childtable1.AddCell(nosubEPS);

        PdfPCell nosubEDLI = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nosubEDLI.HorizontalAlignment = 0;
        nosubEDLI.Colspan = 1;
        nosubEDLI.BorderWidthBottom = 0;
        nosubEDLI.BorderWidthLeft = .5f;
        nosubEDLI.BorderWidthRight = .5f;
        nosubEDLI.BorderWidthTop = 0;
        childtable1.AddCell(nosubEDLI);



        PdfPCell netsubsub = new PdfPCell(new Phrase(" Net. No. of subscribers ", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        netsubsub.HorizontalAlignment = 0;
        netsubsub.Colspan = 1;
        netsubsub.BorderWidthBottom = .5f;
        netsubsub.BorderWidthLeft = 0;
        netsubsub.BorderWidthRight = .5f;
        netsubsub.BorderWidthTop = 0;
        childtable1.AddCell(netsubsub);

        PdfPCell netsubepf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        netsubepf.HorizontalAlignment = 0;
        netsubepf.Colspan = 1;
        netsubepf.BorderWidthBottom = .5f;
        netsubepf.BorderWidthLeft = .5f;
        netsubepf.BorderWidthRight = .5f;
        netsubepf.BorderWidthTop = 0;
        childtable1.AddCell(netsubepf);

        PdfPCell netsubEPS = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        netsubEPS.HorizontalAlignment = 0;
        netsubEPS.Colspan = 1;
        netsubEPS.BorderWidthBottom = .5f;
        netsubEPS.BorderWidthLeft = .5f;
        netsubEPS.BorderWidthRight = .5f;
        netsubEPS.BorderWidthTop = 0;
        childtable1.AddCell(netsubEPS);

        PdfPCell netsubEDLI = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        netsubEDLI.HorizontalAlignment = 0;
        netsubEDLI.Colspan = 1;
        netsubEDLI.BorderWidthBottom = .5f;
        netsubEDLI.BorderWidthLeft = .5f;
        netsubEDLI.BorderWidthRight = .5f;
        netsubEDLI.BorderWidthTop = 0;
        childtable1.AddCell(netsubEDLI);
        #endregion

        PdfPCell endchildTable1 = new PdfPCell(childtable1);
        endchildTable1.HorizontalAlignment = 0;
        endchildTable1.Colspan = 4;
        tempTable2.AddCell(endchildTable1);

        PdfPTable childtable2 = new PdfPTable(4);
        childtable2.TotalWidth = 350f;
        childtable2.LockedWidth = true;
        float[] childtblewidth1 = new float[] { 2f, 2f, 2f, 2f };
        childtable2.SetWidths(childtblewidth1);


        PdfPCell sign = new PdfPCell(new Phrase(" Signature of the Employer(with office seal)", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        sign.HorizontalAlignment = 2;
        sign.Colspan = 4;
        sign.Border = 0;
        sign.PaddingTop = 70;
        childtable2.AddCell(sign);


        PdfPCell endchildTable2 = new PdfPCell(childtable2);
        endchildTable2.Border = 0;
        endchildTable2.Colspan = 4;
        endchildTable2.HorizontalAlignment = 0;
        tempTable2.AddCell(endchildTable2);

        document.Add(tempTable2);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);


        string filename = "FormXXII.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();

        //}



        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnclearence_Click(object sender, EventArgs e)
    {

        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(4);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell space = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        space.HorizontalAlignment = 1;
        space.Colspan = 4;
        space.Border = 0;

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell clerance = new PdfPCell(new Phrase("CLEARANCE CERTIFICATE", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        clerance.HorizontalAlignment = 1;
        clerance.Colspan = 4;
        clerance.Border = 0;
        tablesnewone.AddCell(clerance);

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell unit = new PdfPCell(new Phrase("UNIT :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        unit.HorizontalAlignment = 0;
        unit.Colspan = 4;
        unit.Border = 0;
        tablesnewone.AddCell(unit);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell dates = new PdfPCell(new Phrase("Date :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dates.HorizontalAlignment = 2;
        dates.Colspan = 4;
        dates.Border = 0;
        tablesnewone.AddCell(dates);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);



        PdfPCell names = new PdfPCell(new Phrase("       1. Name :", FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
        names.HorizontalAlignment = 0;
        names.Colspan = 4;
        names.Border = 0;
        tablesnewone.AddCell(names);
        tablesnewone.AddCell(space);


        PdfPCell Rank = new PdfPCell(new Phrase("           Rank :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Rank.HorizontalAlignment = 0;
        Rank.Colspan = 4;
        Rank.Border = 0;
        tablesnewone.AddCell(Rank);
        tablesnewone.AddCell(space);



        PdfPCell Staff = new PdfPCell(new Phrase("           Staff No :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Staff.HorizontalAlignment = 0;
        Staff.Colspan = 4;
        Staff.Border = 0;
        tablesnewone.AddCell(Staff);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);





        PdfPCell totalnum = new PdfPCell(new Phrase("       2. Total Number of duties performed including O.T. \n           during the previous month.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        totalnum.HorizontalAlignment = 0;
        totalnum.Colspan = 4;
        totalnum.Border = 0;
        tablesnewone.AddCell(totalnum);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell cell3 = new PdfPCell(new Phrase("       3. Total Number of duties performed including O.T.\n           during the Current month.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell3.HorizontalAlignment = 0;
        cell3.Colspan = 4;
        cell3.Border = 0;
        tablesnewone.AddCell(cell3);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell cell4 = new PdfPCell(new Phrase("       4. Number of days worked after submitting resignation", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell4.HorizontalAlignment = 0;
        cell4.Colspan = 4;
        cell4.Border = 0;
        tablesnewone.AddCell(cell4);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell cell5 = new PdfPCell(new Phrase("       5. RECOVERABLE DUES :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell5.HorizontalAlignment = 0;
        cell5.Colspan = 4;
        cell5.Border = 0;
        tablesnewone.AddCell(cell5);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell cellmt = new PdfPCell(new Phrase("           a)  Canteen", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellmt.HorizontalAlignment = 0;
        cellmt.Colspan = 1;
        cellmt.Border = 0;
        tablesnewone.AddCell(cellmt);


        PdfPCell cellmonth = new PdfPCell(new Phrase("Rs.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellmonth.HorizontalAlignment = 0;
        cellmonth.Colspan = 1;
        cellmonth.Border = 0;
        tablesnewone.AddCell(cellmonth);

        PdfPCell Uniform = new PdfPCell(new Phrase("Uniform", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Uniform.HorizontalAlignment = 0;
        Uniform.Colspan = 1;
        Uniform.Border = 0;
        tablesnewone.AddCell(Uniform);

        PdfPCell Uniform1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Uniform1.HorizontalAlignment = 0;
        Uniform1.Colspan = 1;
        Uniform1.Border = 0;
        tablesnewone.AddCell(Uniform1);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);



        PdfPCell Loan = new PdfPCell(new Phrase("           b) Loan if any", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Loan.HorizontalAlignment = 0;
        Loan.Colspan = 1;
        Loan.Border = 0;
        tablesnewone.AddCell(Loan);

        PdfPCell Loan1 = new PdfPCell(new Phrase("Rs.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Loan1.HorizontalAlignment = 0;
        Loan1.Colspan = 1;
        Loan1.Border = 0;
        tablesnewone.AddCell(Loan1);

        PdfPCell idcards = new PdfPCell(new Phrase("I.D Cards", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idcards.HorizontalAlignment = 0;
        idcards.Colspan = 1;
        idcards.Border = 0;
        tablesnewone.AddCell(idcards);


        PdfPCell noofdays = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofdays.HorizontalAlignment = 0;
        noofdays.Colspan = 1;
        noofdays.Border = 0;
        tablesnewone.AddCell(noofdays);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell othrdues = new PdfPCell(new Phrase("           c) Any other dues  Rs.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        othrdues.HorizontalAlignment = 0;
        othrdues.Colspan = 2;
        othrdues.Border = 0;
        tablesnewone.AddCell(othrdues);



        PdfPCell NoticePeriod = new PdfPCell(new Phrase("Notice Period", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        NoticePeriod.HorizontalAlignment = 0;
        NoticePeriod.Colspan = 1;
        NoticePeriod.Border = 0;
        tablesnewone.AddCell(NoticePeriod);

        PdfPCell NoticePeriod1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        NoticePeriod1.HorizontalAlignment = 0;
        NoticePeriod1.Colspan = 1;
        NoticePeriod1.Border = 0;
        tablesnewone.AddCell(NoticePeriod1);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell TOTAL = new PdfPCell(new Phrase("                             TOTAL Rs.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        TOTAL.HorizontalAlignment = 0;
        TOTAL.Colspan = 4;
        TOTAL.Border = 0;
        tablesnewone.AddCell(TOTAL);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);



        PdfPCell Confirmed = new PdfPCell(new Phrase("Signature of Unit - in- Charge ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Confirmed.HorizontalAlignment = 2;
        Confirmed.Colspan = 4;
        Confirmed.Border = 0;
        tablesnewone.AddCell(Confirmed);
        tablesnewone.AddCell(space);


        PdfPCell Nameen = new PdfPCell(new Phrase("Name:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Nameen.HorizontalAlignment = 2;
        Nameen.Colspan = 4;
        Nameen.Border = 0;
        tablesnewone.AddCell(Nameen);
        tablesnewone.AddCell(space);



        PdfPCell cel1l2 = new PdfPCell(new Phrase("Rank:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cel1l2.HorizontalAlignment = 2;
        cel1l2.Colspan = 4;
        cel1l2.Border = 0;
        tablesnewone.AddCell(cel1l2);
        tablesnewone.AddCell(space);


        PdfPCell cell14 = new PdfPCell(new Phrase("Staff No:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell14.HorizontalAlignment = 2;
        cell14.Colspan = 4;
        cell14.Border = 0;
        tablesnewone.AddCell(cell14);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);






        PdfPCell cell15a = new PdfPCell(new Phrase("Field Officer's Remarks", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell15a.HorizontalAlignment = 0;
        cell15a.Colspan = 4;
        cell15a.Border = 0;
        tablesnewone.AddCell(cell15a);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);



        PdfPCell cell16 = new PdfPCell(new Phrase("Signature of Field Officer", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell16.HorizontalAlignment = 2;
        cell16.Colspan = 4;
        cell16.Border = 0;
        tablesnewone.AddCell(cell16);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell cell17 = new PdfPCell(new Phrase("Name:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell17.HorizontalAlignment = 2;
        cell17.Colspan = 4;
        cell17.Border = 0;
        tablesnewone.AddCell(cell17);


        document.Add(tablesnewone);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "formX.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btndeclaration_Click(object sender, EventArgs e)
    {

        int Fontsize = 10;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(4);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell space = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        space.HorizontalAlignment = 1;
        space.Colspan = 4;
        space.Border = 0;

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);




        PdfPCell paragraph34 = new PdfPCell();
        Paragraph Pparagraph34 = new Paragraph();
        Pparagraph34.Add(new Chunk("                     THE EMPLOYEES’ PROVIDENT FUNDS SCHEME, 1952 ", FontFactory.GetFont(FontStyle, Fontsize + 2, Font.BOLD, BaseColor.BLACK)));
        Pparagraph34.Add(new Chunk("(Paragraph 34)", FontFactory.GetFont(FontStyle, Fontsize - 2, Font.NORMAL, BaseColor.BLACK)));
        paragraph34.AddElement(Pparagraph34);
        paragraph34.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        paragraph34.Colspan = 4;
        paragraph34.Border = 0;// 15;
        tablesnewone.AddCell(paragraph34);
        tablesnewone.AddCell(space);

        PdfPCell unit = new PdfPCell(new Phrase("AND", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        unit.HorizontalAlignment = 1;
        unit.Colspan = 4;
        unit.Border = 0;
        tablesnewone.AddCell(unit);


        PdfPCell paragraph19 = new PdfPCell();
        Paragraph Pparagraph19 = new Paragraph();
        Pparagraph19.Add(new Chunk("                           THE EMPLOYEES’ FAMILY PENSION SCHEME, 1971 ", FontFactory.GetFont(FontStyle, Fontsize + 2, Font.BOLD, BaseColor.BLACK)));
        Pparagraph19.Add(new Chunk("(Paragraph 19)", FontFactory.GetFont(FontStyle, Fontsize - 2, Font.NORMAL, BaseColor.BLACK)));
        paragraph19.AddElement(Pparagraph19);
        paragraph19.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        paragraph19.Colspan = 4;
        paragraph19.Border = 0;// 15;
        tablesnewone.AddCell(paragraph19);
        tablesnewone.AddCell(space);






        PdfPCell Declaration = new PdfPCell(new Phrase("Declaration by a person taking up employment in an establishment in which the Employees’Provident Funds & Family Pension Fund Scheme enforce :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Declaration.HorizontalAlignment = 1;
        Declaration.Colspan = 4;
        Declaration.SetLeading(0.0f, 1.5f);
        Declaration.Border = 0;
        tablesnewone.AddCell(Declaration);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);



        PdfPCell names = new PdfPCell(new Phrase("I ..................................................................S/o. / W/o. / Daughter of........................................................do hereby solemnly declare that: -", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        names.HorizontalAlignment = 0;
        names.SetLeading(0.0f, 1.5f);
        names.Colspan = 4;
        names.Border = 0;
        tablesnewone.AddCell(names);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);



        PdfPCell Rank = new PdfPCell(new Phrase("    (a) I was employed in M/s. ..............................................(Name and full address of the establishment) And left service on ………………..   prior to that, I was employed in .............................................…...from..............................................to............................................", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Rank.HorizontalAlignment = 0;
        Rank.Colspan = 4;
        Rank.SetLeading(0.0f, 1.5f);
        Rank.Border = 0;
        tablesnewone.AddCell(Rank);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell Staff = new PdfPCell(new Phrase("    (b) I was member of ..................................…… Provident Fund and also / but not of the Pension Fund from.........………………… to................................and my account number(s) was / were....................................", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Staff.HorizontalAlignment = 0;
        Staff.Colspan = 4;
        Staff.SetLeading(0.0f, 1.5f);
        Staff.Border = 0;
        tablesnewone.AddCell(Staff);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);



        PdfPCell totalnum = new PdfPCell(new Phrase("    (c) I have/have not withdrawn the amount of my Provident Fund / Pension Fund.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        totalnum.HorizontalAlignment = 0;
        totalnum.Colspan = 4;
        totalnum.Border = 0;
        tablesnewone.AddCell(totalnum);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell cell3 = new PdfPCell(new Phrase("    (d) I have/have not drawn any superannuation benefits in respect of my past service from any employer.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell3.HorizontalAlignment = 0;
        cell3.Colspan = 4;
        cell3.Border = 0;
        tablesnewone.AddCell(cell3);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell cell4 = new PdfPCell(new Phrase("    (e) I have/have not never been a member of any Provident Fund and / or  Pension Fund.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell4.HorizontalAlignment = 0;
        cell4.Colspan = 4;
        cell4.Border = 0;
        tablesnewone.AddCell(cell4);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell cell5 = new PdfPCell(new Phrase("    (f) I am drawing/not drawing Pension under EPS '95.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell5.HorizontalAlignment = 0;
        cell5.Colspan = 4;
        cell5.Border = 0;
        tablesnewone.AddCell(cell5);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell cellmt = new PdfPCell(new Phrase("    (g) I am a holder / not holder of  Scheme Certificate.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellmt.HorizontalAlignment = 0;
        cellmt.Colspan = 4;
        cellmt.Border = 0;
        tablesnewone.AddCell(cellmt);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);



        PdfPCell cellmonth = new PdfPCell(new Phrase("    (h) Scheme certificate surrendered / not surrendered..", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellmonth.HorizontalAlignment = 0;
        cellmonth.Colspan = 4;
        cellmonth.Border = 0;
        tablesnewone.AddCell(cellmonth);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell Uniform = new PdfPCell(new Phrase("Dated : ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Uniform.HorizontalAlignment = 0;
        Uniform.Colspan = 2;
        Uniform.Border = 0;
        tablesnewone.AddCell(Uniform);

        PdfPCell Uniform1 = new PdfPCell(new Phrase("Signature or left hand thumb \n impression of the employee.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Uniform1.HorizontalAlignment = 2;
        Uniform1.Colspan = 2;
        Uniform1.Border = 0;
        tablesnewone.AddCell(Uniform1);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);



        PdfPCell Loan = new PdfPCell(new Phrase("(To be filled by the employer only when the person employed had not already been a member of the Employees’ Provident Fund)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Loan.HorizontalAlignment = 0;
        Loan.Colspan = 4;
        Loan.SetLeading(0.0f, 1.5f);
        Loan.Border = 0;
        tablesnewone.AddCell(Loan);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell Loan1 = new PdfPCell(new Phrase("Shri/Smt. ................................................................(Name of Employee) is appointed as.......................................................................(Designation)In M / s ..........................................(Name of the Factory / Establishment) with effect from 18 / 10 / 2003(Date of appointment)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Loan1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        Loan1.Colspan = 4;
        Loan1.SetLeading(0.0f, 1.5f);
        Loan1.Border = 0;
        tablesnewone.AddCell(Loan1);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell idcards = new PdfPCell(new Phrase("Dated : ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idcards.HorizontalAlignment = 0;
        idcards.Colspan = 2;
        idcards.Border = 0;
        tablesnewone.AddCell(idcards);


        PdfPCell noofdays = new PdfPCell(new Phrase("Signature of the Employer/Manager \n  or otherAuthorised Officer", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noofdays.HorizontalAlignment = 0;
        noofdays.Colspan = 2;
        noofdays.Border = 0;
        tablesnewone.AddCell(noofdays);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);




        document.Add(tablesnewone);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "formX.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnesicform_Click(object sender, EventArgs e)
    {

        int Fontsize = 11;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(4);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell space = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        space.HorizontalAlignment = 1;
        space.Colspan = 4;
        space.Border = 0;

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell clerance = new PdfPCell(new Phrase("ESIC – Med – 7A", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        clerance.HorizontalAlignment = 2;
        clerance.Colspan = 4;
        clerance.Border = 0;
        tablesnewone.AddCell(clerance);
        tablesnewone.AddCell(space);

        PdfPCell unit = new PdfPCell(new Phrase("Application for Acceptance for Medical Treatment :", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        unit.HorizontalAlignment = 1;
        unit.Colspan = 4;
        unit.Border = 0;
        tablesnewone.AddCell(unit);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell dates = new PdfPCell(new Phrase("              With reference to certificate of employment on reversel I apply for acceptance by Dr.………………………………………………………………….………. With whom I was already registered.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dates.HorizontalAlignment = 0;
        dates.Colspan = 4;
        dates.SetLeading(0.0f, 1.5f);
        dates.Border = 0;
        tablesnewone.AddCell(dates);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);



        PdfPCell names = new PdfPCell(new Phrase("Dated ...............................................Signature or Thumb Impression of the insured person.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        names.HorizontalAlignment = 0;
        names.Colspan = 4;
        names.SetLeading(0.0f, 1.5f);
        names.Border = 0;
        tablesnewone.AddCell(names);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell Rank = new PdfPCell(new Phrase("I accept the person whose particulars are given on reverse on my list.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Rank.HorizontalAlignment = 1;
        Rank.Colspan = 4;
        Rank.Border = 0;
        tablesnewone.AddCell(Rank);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell Staff = new PdfPCell(new Phrase("Date :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Staff.HorizontalAlignment = 0;
        Staff.Colspan = 2;
        Staff.Border = 0;
        tablesnewone.AddCell(Staff);



        PdfPCell totalnum = new PdfPCell(new Phrase("Signature and   Code No. of Doctor", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        totalnum.HorizontalAlignment = 0;
        totalnum.Colspan = 2;
        totalnum.Border = 0;
        tablesnewone.AddCell(totalnum);

        document.Add(tablesnewone);

        document.NewPage();


        PdfPTable tablesnewone1 = new PdfPTable(4);
        tablesnewone1.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width1 = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone1.SetWidths(width1);

        PdfPCell cellspace = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 0;
        cellspace.Colspan = 4;
        cellspace.Border = 0;
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);




        PdfPCell cell3 = new PdfPCell(new Phrase(" ESIC MED– 37", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell3.HorizontalAlignment = 2;
        cell3.Colspan = 4;
        cell3.Border = 0;
        tablesnewone1.AddCell(cell3);
        tablesnewone1.AddCell(cellspace);



        PdfPCell cell4 = new PdfPCell(new Phrase("Employees’ State Insurance Corporation", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cell4.HorizontalAlignment = 1;
        cell4.Colspan = 4;
        cell4.Border = 0;
        tablesnewone1.AddCell(cell4);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);



        PdfPCell cell5 = new PdfPCell(new Phrase("Certificate of Re-employment / continuing Employment \n (To be issued only if condition(i) or(ii) below are satisfied.)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell5.HorizontalAlignment = 1;
        cell5.Colspan = 4;
        cell5.SetLeading(0.0f, 1.5f);
        cell5.Border = 0;
        tablesnewone1.AddCell(cell5);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);

        PdfPCell nameaddres = new PdfPCell(new Phrase("Name and Address of the employer :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameaddres.HorizontalAlignment = 0;
        nameaddres.Colspan = 4;
        nameaddres.Border = 0;
        tablesnewone1.AddCell(nameaddres);


        PdfPCell nameaddres1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        nameaddres1.HorizontalAlignment = 0;
        nameaddres1.Colspan = 4;
        nameaddres1.Border = 0;
        tablesnewone1.AddCell(nameaddres1);

        PdfPCell nameaddres2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        nameaddres2.HorizontalAlignment = 0;
        nameaddres2.Colspan = 4;
        nameaddres2.Border = 0;
        tablesnewone1.AddCell(nameaddres2);

        PdfPCell nameaddres3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        nameaddres3.HorizontalAlignment = 0;
        nameaddres3.Colspan = 4;
        nameaddres3.Border = 0;
        tablesnewone1.AddCell(nameaddres3);

        PdfPCell nameaddres4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        nameaddres4.HorizontalAlignment = 0;
        nameaddres4.Colspan = 4;
        nameaddres4.Border = 0;
        tablesnewone1.AddCell(nameaddres4);


        PdfPCell nameaddres5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        nameaddres5.HorizontalAlignment = 0;
        nameaddres5.Colspan = 4;
        nameaddres5.Border = 0;
        tablesnewone1.AddCell(nameaddres5);

        PdfPCell codeno = new PdfPCell(new Phrase("Code No.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        codeno.HorizontalAlignment = 2;
        codeno.Colspan = 2;
        codeno.Border = 0;
        tablesnewone1.AddCell(codeno);


        PdfPCell codeno1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        codeno1.HorizontalAlignment = 2;
        codeno1.Colspan = 2;
        tablesnewone1.AddCell(codeno1);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);


        PdfPCell lono = new PdfPCell(new Phrase("L.O.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        lono.HorizontalAlignment = 2;
        lono.Colspan = 2;
        lono.Border = 0;
        tablesnewone1.AddCell(lono);


        PdfPCell lono1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        lono1.HorizontalAlignment = 2;
        lono1.Colspan = 2;
        tablesnewone1.AddCell(lono1);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);


        PdfPCell othrdues = new PdfPCell(new Phrase("Certified that Shri                       s / o                            ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        othrdues.HorizontalAlignment = 0;
        othrdues.Colspan = 4;
        othrdues.Border = 0;
        tablesnewone1.AddCell(othrdues);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);





        PdfPCell insno = new PdfPCell(new Phrase("Ins. No.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        insno.HorizontalAlignment = 2;
        insno.Colspan = 2;
        insno.Border = 0;
        tablesnewone1.AddCell(insno);

        PdfPCell insno1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        insno1.HorizontalAlignment = 2;
        insno1.Colspan = 2;
        tablesnewone1.AddCell(insno1);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);


        PdfPCell noi = new PdfPCell(new Phrase("i.	Has continued to be in employment/re-entered insurable employment on 18/10/2003 and contributions have been payable/paid in respect of him/her during the contribution period which began on 2012-13 or", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noi.HorizontalAlignment = 0;
        noi.Colspan = 4;
        noi.SetLeading(0.0f, 1.5f);
        noi.Border = 0;
        tablesnewone1.AddCell(noi);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(space);


        PdfPCell noii = new PdfPCell(new Phrase("ii.	Has paid contribution for seventy eight  days in the preceding contribution period which ended on ..........", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noii.HorizontalAlignment = 0;
        noii.Colspan = 4;
        noii.SetLeading(0.0f, 1.5f);
        noii.Border = 0;
        tablesnewone1.AddCell(noii);
        tablesnewone1.AddCell(space);
        tablesnewone1.AddCell(space);
        tablesnewone1.AddCell(space);
        tablesnewone1.AddCell(space);
        tablesnewone1.AddCell(space);
        tablesnewone1.AddCell(space);
        tablesnewone1.AddCell(space);
        tablesnewone1.AddCell(space);
        tablesnewone1.AddCell(space);
        tablesnewone1.AddCell(space);
        tablesnewone1.AddCell(space);
        tablesnewone1.AddCell(space);


        PdfPCell datefooter = new PdfPCell(new Phrase("Date :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        datefooter.HorizontalAlignment = 0;
        datefooter.Colspan = 2;
        datefooter.Border = 0;
        tablesnewone1.AddCell(datefooter);


        PdfPCell signature = new PdfPCell(new Phrase("Signature and Designaion", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        signature.HorizontalAlignment = 2;
        signature.Colspan = 2;
        signature.Border = 0;
        tablesnewone1.AddCell(signature);

        document.Add(tablesnewone1);



        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "formX.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnesicform72_Click(object sender, EventArgs e)
    {

        int Fontsize = 11;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(5);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 1f, 3f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell space = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        space.HorizontalAlignment = 1;
        space.Colspan = 5;
        space.Border = 0;

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell clerance = new PdfPCell(new Phrase("ESIC–72", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        clerance.HorizontalAlignment = 2;
        clerance.Colspan = 5;
        clerance.Border = 0;
        tablesnewone.AddCell(clerance);
        tablesnewone.AddCell(space);

        PdfPCell unit = new PdfPCell(new Phrase("Employees’ State Insurance Corporation", FontFactory.GetFont(FontStyle, Fontsize + 2, Font.BOLD, BaseColor.BLACK)));
        unit.HorizontalAlignment = 1;
        unit.Colspan = 5;
        unit.Border = 0;
        tablesnewone.AddCell(unit);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell dates = new PdfPCell(new Phrase("To,", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dates.HorizontalAlignment = 0;
        dates.Colspan = 5;
        dates.Border = 0;
        tablesnewone.AddCell(dates);



        PdfPCell branchmang = new PdfPCell(new Phrase("The Branch Manger,", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        branchmang.HorizontalAlignment = 0;
        branchmang.Colspan = 5;
        branchmang.Border = 0;
        tablesnewone.AddCell(branchmang);


        PdfPCell branchoffi = new PdfPCell(new Phrase("Branch Office :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        branchoffi.HorizontalAlignment = 0;
        branchoffi.Colspan = 5;
        branchoffi.Border = 0;
        tablesnewone.AddCell(branchoffi);


        PdfPCell dearsir = new PdfPCell(new Phrase("Dear Sir,", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dearsir.HorizontalAlignment = 0;
        dearsir.Colspan = 5;
        dearsir.Border = 0;
        tablesnewone.AddCell(dearsir);



        PdfPCell declare = new PdfPCell(new Phrase("                     My identity Card has been lost/defaced. I have, therefore to request for a Duplicate Identity Card. I herewith deposit a sum of Re. 1/- only being the fee for the Duplicate Identity Card./ I return herewith the Identity Card Issued to me earlier. As the Card was issued more than 3 years ago the Duplicate Identity Card may be issued to me free of charge.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        declare.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        declare.Colspan = 5;
        declare.SetLeading(0.0f, 1.5f);
        declare.Border = 0;
        tablesnewone.AddCell(declare);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell present = new PdfPCell(new Phrase("The particulars of the Present members of my family are furnished below:-", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        present.HorizontalAlignment = 0;
        present.Colspan = 5;
        present.Border = 0;
        tablesnewone.AddCell(present);


        PdfPCell cellslno = new PdfPCell(new Phrase("Sl. No", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellslno.HorizontalAlignment = 1;
        cellslno.Colspan = 1;
        tablesnewone.AddCell(cellslno);

        PdfPCell cellname = new PdfPCell(new Phrase("Name", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname.HorizontalAlignment = 1;
        cellname.Colspan = 1;
        tablesnewone.AddCell(cellname);

        PdfPCell dateofbirths = new PdfPCell(new Phrase("Date of Birth", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dateofbirths.HorizontalAlignment = 1;
        dateofbirths.Colspan = 1;
        tablesnewone.AddCell(dateofbirths);

        PdfPCell relationship = new PdfPCell(new Phrase("Relationship with insured person", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        relationship.HorizontalAlignment = 1;
        relationship.Colspan = 1;
        tablesnewone.AddCell(relationship);

        PdfPCell cellwhether = new PdfPCell(new Phrase("Whether residing with himself or not", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellwhether.HorizontalAlignment = 0;
        cellwhether.Colspan = 1;
        tablesnewone.AddCell(cellwhether);

        PdfPCell cellsino1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsino1.HorizontalAlignment = 0;
        cellsino1.Colspan = 1;
        tablesnewone.AddCell(cellsino1);

        PdfPCell cellname1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname1.HorizontalAlignment = 0;
        cellname1.Colspan = 1;
        cellname1.FixedHeight = 160;
        tablesnewone.AddCell(cellname1);

        PdfPCell celldob = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldob.HorizontalAlignment = 0;
        celldob.Colspan = 1;
        tablesnewone.AddCell(celldob);

        PdfPCell cellrelationship = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellrelationship.HorizontalAlignment = 0;
        cellrelationship.Colspan = 1;
        tablesnewone.AddCell(cellrelationship);

        PdfPCell cellwhether1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellwhether1.HorizontalAlignment = 0;
        cellwhether1.Colspan = 1;
        tablesnewone.AddCell(cellwhether1);

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell celldeclare1 = new PdfPCell(new Phrase("I hereby declare that the particulars above have been given by me and are true to the best of my knowledge and belief and tally with those which I have furnished earlier from time to time. I also understand that in case of any of the particulars in my declaration is found to be wrong I shall be liable to prosecution under section 84 of E.S.I Act 1948.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celldeclare1.HorizontalAlignment = 0;
        celldeclare1.Colspan = 5;
        celldeclare1.SetLeading(0.0f, 1.5f);
        celldeclare1.Border = 0;
        tablesnewone.AddCell(celldeclare1);


        document.Add(tablesnewone);

        document.NewPage();


        PdfPTable tablesnewone1 = new PdfPTable(4);
        tablesnewone1.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width1 = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone1.SetWidths(width1);

        PdfPCell cellspace = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 0;
        cellspace.Colspan = 4;
        cellspace.Border = 0;
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);




        PdfPCell faithfully = new PdfPCell(new Phrase("Yours faithfully", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        faithfully.HorizontalAlignment = 2;
        faithfully.Colspan = 4;
        faithfully.Border = 0;
        tablesnewone1.AddCell(faithfully);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);

        PdfPCell Attested = new PdfPCell(new Phrase("•	Attested", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Attested.HorizontalAlignment = 0;
        Attested.Colspan = 2;
        Attested.Border = 0;
        tablesnewone1.AddCell(Attested);




        PdfPCell cell5 = new PdfPCell(new Phrase("Signature or thumb impression", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell5.HorizontalAlignment = 2;
        cell5.Colspan = 2;
        cell5.Border = 0;
        tablesnewone1.AddCell(cell5);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);

        PdfPCell fellname = new PdfPCell(new Phrase("Full Name", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        fellname.HorizontalAlignment = 2;
        fellname.Colspan = 3;
        fellname.Border = 0;
        tablesnewone1.AddCell(fellname);


        PdfPCell fellname1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        fellname1.HorizontalAlignment = 2;
        fellname1.Colspan = 1;
        fellname1.Border = 0;
        tablesnewone1.AddCell(fellname1);

        PdfPCell insno = new PdfPCell(new Phrase("Ins. No", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        insno.HorizontalAlignment = 2;
        insno.Colspan = 3;
        insno.Border = 0;
        tablesnewone1.AddCell(insno);

        PdfPCell insno1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        insno1.HorizontalAlignment = 2;
        insno1.Colspan = 1;
        insno1.Border = 0;
        tablesnewone1.AddCell(insno1);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);

        PdfPCell namedesignation = new PdfPCell(new Phrase("•	Name & Designation of the attesting authority", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        namedesignation.HorizontalAlignment = 0;
        namedesignation.Colspan = 4;
        namedesignation.Border = 0;
        tablesnewone1.AddCell(namedesignation);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);



        PdfPCell application = new PdfPCell(new Phrase("This application should be attested by the present employer or past employer or the President or Secretary to a Trade Union or a person known to the Branch Office Note: -According to section 2 Clause(ii) of the Employees' State Insurance Act 1948 family means the spouse and minor legitimate and adopted children dependent upon the insured person and his dependant parents.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        application.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        application.Colspan = 4;
        application.SetLeading(0.0f, 1.5f);
        application.Border = 0;
        tablesnewone1.AddCell(application);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);

        PdfPCell codeno = new PdfPCell(new Phrase(" (To be completed by Local Office)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        codeno.HorizontalAlignment = 0;
        codeno.Colspan = 4;
        codeno.Border = 0;
        tablesnewone1.AddCell(codeno);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);


        PdfPCell codeno1 = new PdfPCell(new Phrase("  Identification marks, if not given on the benefit file", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        codeno1.HorizontalAlignment = 2;
        codeno1.Colspan = 4;
        codeno1.Border = 0;
        tablesnewone1.AddCell(codeno1);



        PdfPCell lono = new PdfPCell(new Phrase("   I received Identity Card/Family Identity", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        lono.HorizontalAlignment = 2;
        lono.Colspan = 4;
        lono.Border = 0;
        tablesnewone1.AddCell(lono);


        PdfPCell lono1 = new PdfPCell(new Phrase("    Card issued earlier.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        lono1.HorizontalAlignment = 2;
        lono1.Colspan = 4;
        lono1.Border = 0;
        tablesnewone1.AddCell(lono1);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);


        PdfPCell no1 = new PdfPCell(new Phrase("1.	_________________________________________________", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        no1.HorizontalAlignment = 0;
        no1.Colspan = 4;
        no1.Border = 0;
        tablesnewone1.AddCell(no1);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);





        PdfPCell no2 = new PdfPCell(new Phrase("2.	_________________________________________________", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        no2.HorizontalAlignment = 0;
        no2.Colspan = 4;
        no2.Border = 0;
        tablesnewone1.AddCell(no2);

        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);



        PdfPCell received = new PdfPCell(new Phrase("Received Re. 1/- (One Rupee only) vide Cash Receipt No ……………………… Book No. …………………………..  Dated …………………………. Stamp of Branch Office.Fee of the Re. 1 / -has not been received from the insured person as replacement is to be done free of cost.Duplicate", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        received.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        received.Colspan = 4;
        received.SetLeading(0.0f, 1.5f);
        received.Border = 0;
        tablesnewone1.AddCell(received);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);



        PdfPCell noii = new PdfPCell(new Phrase("Combined Identity Card received ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noii.HorizontalAlignment = 0;
        noii.Colspan = 2;
        noii.Border = 0;
        tablesnewone1.AddCell(noii);



        PdfPCell noi = new PdfPCell(new Phrase("Signature of the branch manager ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        noi.HorizontalAlignment = 2;
        noi.Colspan = 2;
        noi.Border = 0;
        tablesnewone1.AddCell(noi);

        PdfPCell datefooter = new PdfPCell(new Phrase("Branch Office :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        datefooter.HorizontalAlignment = 2;
        datefooter.Colspan = 4;
        datefooter.Border = 0;
        tablesnewone1.AddCell(datefooter);

        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);


        PdfPCell signature = new PdfPCell(new Phrase("Signature and thump impression of injured person", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        signature.HorizontalAlignment = 2;
        signature.Colspan = 4;
        signature.Border = 0;
        tablesnewone1.AddCell(signature);


        PdfPCell delete = new PdfPCell(new Phrase(" •	Delete which ever is not applicable", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        delete.HorizontalAlignment = 0;
        delete.Colspan = 2;
        delete.Border = 0;
        tablesnewone1.AddCell(delete);


        PdfPCell insno2 = new PdfPCell(new Phrase("Ins No:-", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        insno2.HorizontalAlignment = 1;
        insno2.Colspan = 2;
        insno2.Border = 0;
        tablesnewone1.AddCell(insno2);

        document.Add(tablesnewone1);



        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "ESIForm.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnform13_Click(object sender, EventArgs e)
    {

        int Fontsize = 11;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(4);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell space = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        space.HorizontalAlignment = 1;
        space.Colspan = 5;
        space.Border = 0;

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);




        PdfPCell TRANSFER = new PdfPCell(new Phrase("TRANSFER CLAIM FORM ", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        TRANSFER.HorizontalAlignment = 0;
        TRANSFER.Colspan = 2;
        TRANSFER.Border = 0;
        tablesnewone.AddCell(TRANSFER);

        PdfPCell CLAIM = new PdfPCell(new Phrase("CLAIM ID", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        CLAIM.HorizontalAlignment = 2;
        CLAIM.Colspan = 2;
        CLAIM.Border = 0;
        tablesnewone.AddCell(CLAIM);

        PdfPCell FORM = new PdfPCell(new Phrase("FORM 13 (REVISED) ", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        FORM.HorizontalAlignment = 0;
        FORM.Colspan = 2;
        FORM.Border = 0;
        tablesnewone.AddCell(FORM);

        PdfPCell CLAIMid = new PdfPCell(new Phrase("(For EPFO Use only)", FontFactory.GetFont(FontStyle, Fontsize - 2, Font.NORMAL, BaseColor.BLACK)));
        CLAIMid.HorizontalAlignment = 2;
        CLAIMid.Colspan = 2;
        CLAIMid.Border = 0;
        tablesnewone.AddCell(CLAIMid); tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        string imagepath = Server.MapPath("~/assets/BillLogo.png");
        if (File.Exists(imagepath))
        {
            iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);

            gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
            // gif2.SpacingBefore = 50;
            gif2.ScalePercent(40f);
            gif2.SetAbsolutePosition(60f, 870f);
            //document.Add(new Paragraph(" "));
            document.Add(gif2);
        }


        PdfPCell PROVIDENT = new PdfPCell(new Phrase("EMPLOYEE’S PROVIDENT FUND SCHEME, 1952 \n (PARA 57)", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        PROVIDENT.HorizontalAlignment = 1;
        PROVIDENT.Colspan = 4;
        PROVIDENT.Border = 0;
        tablesnewone.AddCell(PROVIDENT);

        PdfPCell APPLICATION = new PdfPCell(new Phrase("[APPLICATION FOR THE TRANSFER OF EPF ACCOUNT FROM UNEXEMPTED ESTABLISHMENT TOEXEMPTED OR UNEXEMPTED ESTABLISHMENT]", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        APPLICATION.HorizontalAlignment = 1;
        APPLICATION.Colspan = 4;
        APPLICATION.Border = 0;
        tablesnewone.AddCell(APPLICATION);

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell to1 = new PdfPCell(new Phrase("To,", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        to1.HorizontalAlignment = 0;
        to1.Colspan = 2;
        to1.Border = 0;
        tablesnewone.AddCell(to1);


        PdfPCell to2 = new PdfPCell(new Phrase("To,", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        to2.HorizontalAlignment = 0;
        to2.Colspan = 2;
        to2.Border = 0;
        tablesnewone.AddCell(to2);


        PdfPCell regional = new PdfPCell(new Phrase("The Regional PF Commissioner,", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        regional.HorizontalAlignment = 0;
        regional.Colspan = 2;
        regional.Border = 0;
        tablesnewone.AddCell(regional);


        PdfPCell trustname = new PdfPCell(new Phrase("Trust Name", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        trustname.HorizontalAlignment = 0;
        trustname.Colspan = 2;
        trustname.Border = 0;
        tablesnewone.AddCell(trustname);


        PdfPCell officename = new PdfPCell(new Phrase("Office Name:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        officename.HorizontalAlignment = 0;
        officename.Colspan = 2;
        officename.Border = 0;
        tablesnewone.AddCell(officename);


        PdfPCell trustnameadd = new PdfPCell(new Phrase("Trust Address:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        trustnameadd.HorizontalAlignment = 0;
        trustnameadd.Colspan = 2;
        trustnameadd.Border = 0;
        tablesnewone.AddCell(trustnameadd);


        PdfPCell addressoffice1 = new PdfPCell(new Phrase("Office Address :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        addressoffice1.HorizontalAlignment = 0;
        addressoffice1.Colspan = 2;
        addressoffice1.Border = 0;
        tablesnewone.AddCell(addressoffice1);


        PdfPCell addrsss1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        addrsss1.HorizontalAlignment = 0;
        addrsss1.Colspan = 2;
        addrsss1.Border = 0;
        tablesnewone.AddCell(addrsss1);


        PdfPCell addressoffice = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        addressoffice.HorizontalAlignment = 0;
        addressoffice.Colspan = 2;
        addressoffice.Border = 0;
        tablesnewone.AddCell(addressoffice);


        PdfPCell addrsss2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        addrsss2.HorizontalAlignment = 0;
        addrsss2.Colspan = 2;
        addrsss2.Border = 0;
        tablesnewone.AddCell(addrsss2);


        PdfPCell incase1 = new PdfPCell(new Phrase("(Please see instruction 3)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        incase1.HorizontalAlignment = 0;
        incase1.Colspan = 2;
        incase1.Border = 0;
        tablesnewone.AddCell(incase1);


        PdfPCell incase = new PdfPCell(new Phrase("(In case the PF A/C is with Exempted Establishment", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        incase.HorizontalAlignment = 0;
        incase.Colspan = 2;
        incase.Border = 0;
        tablesnewone.AddCell(incase);

        PdfPCell cellsir = new PdfPCell(new Phrase("Sir", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellsir.HorizontalAlignment = 0;
        cellsir.Colspan = 4;
        cellsir.Border = 0;
        tablesnewone.AddCell(cellsir);

        PdfPCell request = new PdfPCell(new Phrase("                 I request that my provident fund balance along with my pension service details may please be transferred to my present account under intimation to me. My details are as under:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        request.HorizontalAlignment = 0;
        request.Colspan = 4;
        request.SetLeading(0f, 1.5f);
        request.Border = 0;
        tablesnewone.AddCell(request);

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell Parta = new PdfPCell(new Phrase("PART A: PERSONAL INFORMATION", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        Parta.HorizontalAlignment = 1;
        Parta.Colspan = 4;
        Parta.Border = 0;
        tablesnewone.AddCell(Parta);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell nameemp = new PdfPCell(new Phrase("1. *Name", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameemp.HorizontalAlignment = 0;
        nameemp.Colspan = 4;
        nameemp.Border = 0;
        tablesnewone.AddCell(nameemp);
        tablesnewone.AddCell(space);


        PdfPCell fathername1 = new PdfPCell(new Phrase("2. *Father’s/Husband’s name", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        fathername1.HorizontalAlignment = 0;
        fathername1.Colspan = 4;
        fathername1.Border = 0;
        tablesnewone.AddCell(fathername1);
        tablesnewone.AddCell(space);


        PdfPCell mobileno = new PdfPCell(new Phrase("3. Mobile Number:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        mobileno.HorizontalAlignment = 0;
        mobileno.Colspan = 2;
        mobileno.Border = 0;
        tablesnewone.AddCell(mobileno);

        PdfPCell email = new PdfPCell(new Phrase("4. Email Id:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        email.HorizontalAlignment = 0;
        email.Colspan = 2;
        email.Border = 0;
        tablesnewone.AddCell(email);

        PdfPCell bankacno = new PdfPCell(new Phrase("5. Bank A/C Noumber:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        bankacno.HorizontalAlignment = 0;
        bankacno.Colspan = 2;
        bankacno.Border = 0;
        tablesnewone.AddCell(bankacno);

        PdfPCell ifscode = new PdfPCell(new Phrase("6. IFS Code of Bank branch:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        ifscode.HorizontalAlignment = 0;
        ifscode.Colspan = 2;
        ifscode.Border = 0;
        tablesnewone.AddCell(ifscode);

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell partb = new PdfPCell(new Phrase("PART B: DETAILS OF PREVIOUS ACCOUNT (WHICH IS TO BE TRANSFERRED)", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        partb.HorizontalAlignment = 1;
        partb.Colspan = 4;
        partb.Border = 0;
        tablesnewone.AddCell(partb);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell pfacno = new PdfPCell(new Phrase("1. *PF Account No. :_______________________________________________________In case the previous establishment is exempted under Employees’ Provident Fund Scheme, 1952 Pension Fund Account No. :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        pfacno.HorizontalAlignment = 0;
        pfacno.Colspan = 4;
        pfacno.Border = 0;
        pfacno.SetLeading(0f, 1.5f);
        tablesnewone.AddCell(pfacno);
        tablesnewone.AddCell(space);

        PdfPCell cellname1 = new PdfPCell(new Phrase("2. *Name and Address of the previous establishment:_____________________", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname1.HorizontalAlignment = 0;
        cellname1.Colspan = 4;
        cellname1.Border = 0;
        tablesnewone.AddCell(cellname1);
        tablesnewone.AddCell(space);

        PdfPCell pfaccno = new PdfPCell(new Phrase("3. *PF Account is held by: (Name of EPF Office/ PF Trust) ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        pfaccno.HorizontalAlignment = 0;
        pfaccno.Colspan = 4;
        pfaccno.Border = 0;
        tablesnewone.AddCell(pfaccno);
        tablesnewone.AddCell(space);

        PdfPCell dob = new PdfPCell(new Phrase("4. *Date of Birth:(dd/mm/yyyy)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dob.HorizontalAlignment = 0;
        dob.Colspan = 2;
        dob.Border = 0;
        tablesnewone.AddCell(dob);

        PdfPCell datejoining = new PdfPCell(new Phrase(" 5. *Date of joining:(dd/mm/yyyy)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        datejoining.HorizontalAlignment = 0;
        datejoining.Colspan = 2;
        datejoining.Border = 0;
        tablesnewone.AddCell(datejoining);
        tablesnewone.AddCell(space);

        PdfPCell dateleaving = new PdfPCell(new Phrase("6. *Date of leaving:(dd/mm/yyyy)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dateleaving.HorizontalAlignment = 0;
        dateleaving.Colspan = 4;
        dateleaving.Border = 0;
        tablesnewone.AddCell(dateleaving);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);




        PdfPCell partc = new PdfPCell(new Phrase("PART C: DETAILS OF PRESENT ACCOUNT", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        partc.HorizontalAlignment = 1;
        partc.Colspan = 4;
        partc.Border = 0;
        tablesnewone.AddCell(partc);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell pfacno1 = new PdfPCell(new Phrase("1. *PF Account No. :_______________________________________________________In case the previous establishment is exempted under Employees’ Provident Fund Scheme, 1952 Pension Fund Account No. :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        pfacno1.HorizontalAlignment = 0;
        pfacno1.Colspan = 4;
        pfacno1.Border = 0;
        pfacno1.SetLeading(0f, 1.5f);
        tablesnewone.AddCell(pfacno1);
        tablesnewone.AddCell(space);

        PdfPCell cellname11 = new PdfPCell(new Phrase("2. *Name and Address of the previous establishment:_____________________", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname11.HorizontalAlignment = 0;
        cellname11.Colspan = 4;
        cellname11.Border = 0;
        tablesnewone.AddCell(cellname11);
        tablesnewone.AddCell(space);

        PdfPCell pfaccno1 = new PdfPCell(new Phrase("3. *Account is held by: (Name of EPF Office / PF Trust)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        pfaccno1.HorizontalAlignment = 0;
        pfaccno1.Colspan = 4;
        pfaccno1.Border = 0;
        tablesnewone.AddCell(pfaccno1);
        tablesnewone.AddCell(space);

        PdfPCell datejoining1 = new PdfPCell(new Phrase("4. *Date of joining:(dd/mm/yyyy)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        datejoining1.HorizontalAlignment = 0;
        datejoining1.Colspan = 4;
        datejoining1.Border = 0;
        tablesnewone.AddCell(datejoining1);
        tablesnewone.AddCell(space);

        PdfPCell nameoftrust = new PdfPCell(new Phrase("5. #Name of Trust (to whom funds are to be paid in case of present establishment being exempted under EPF Scheme, 1952): ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameoftrust.HorizontalAlignment = 0;
        nameoftrust.Colspan = 4;
        nameoftrust.SetLeading(0f, 1.5f);
        nameoftrust.Border = 0;
        tablesnewone.AddCell(nameoftrust);
        tablesnewone.AddCell(space);



        PdfPCell empcode = new PdfPCell(new Phrase("6. #Employee code under the Trust: ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empcode.HorizontalAlignment = 0;
        empcode.Colspan = 4;
        empcode.Border = 0;
        tablesnewone.AddCell(empcode);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell indicates = new PdfPCell(new Phrase("(* indicates mandatory fields)	", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        indicates.HorizontalAlignment = 0;
        indicates.Colspan = 2;
        indicates.Border = 0;
        tablesnewone.AddCell(indicates);

        PdfPCell strike = new PdfPCell(new Phrase("(# Strike off if not applicable)", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        strike.HorizontalAlignment = 1;
        strike.Colspan = 2;
        strike.Border = 0;
        tablesnewone.AddCell(strike);


        document.Add(tablesnewone);

        document.NewPage();
        Document document1 = new Document(PageSize.LEGAL);


        PdfPTable tablesnewone1 = new PdfPTable(4);
        tablesnewone1.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width1 = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone1.SetWidths(width1);

        PdfPCell cellspace = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 0;
        cellspace.Colspan = 4;
        cellspace.Border = 0;
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);




        PdfPCell Certify = new PdfPCell(new Phrase("I, Certify that all the information given above is true to the best of my knowledge and I have ensured the correctness of my present and previous account numbers.", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        Certify.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        Certify.Colspan = 4;
        Certify.SetLeading(0f, 1.5f);
        Certify.Border = 0;
        tablesnewone1.AddCell(Certify);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);

        PdfPCell Attested = new PdfPCell(new Phrase("Signature of the Member", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        Attested.HorizontalAlignment = 2;
        Attested.Colspan = 4;
        Attested.Border = 0;
        tablesnewone1.AddCell(Attested);

        tablesnewone1.AddCell(cellspace);


        PdfPCell cell5 = new PdfPCell(new Phrase("Date:_____________________", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cell5.HorizontalAlignment = 2;
        cell5.Colspan = 4;
        cell5.Border = 0;
        tablesnewone1.AddCell(cell5);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);

        PdfPCell IMPORTANT = new PdfPCell(new Phrase("IMPORTANT: Member has the option to get the claim form attested by present or previous employer.In case of attestation by the previous employer, time taken in settlement will be relatively less.", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        IMPORTANT.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        IMPORTANT.Colspan = 4;
        IMPORTANT.Border = 0;
        tablesnewone1.AddCell(IMPORTANT);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);


        PdfPCell fellname1 = new PdfPCell(new Phrase("Certified that I have verified the data in Part B in respect of the member mentioned in Part A of this form and the signature of the member.	", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        fellname1.HorizontalAlignment = 0;
        fellname1.Colspan = 4;
        fellname1.Border = 0;
        tablesnewone1.AddCell(fellname1);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);

        PdfPCell insno = new PdfPCell(new Phrase("Signature of Previous Employer", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        insno.HorizontalAlignment = 2;
        insno.Colspan = 4;
        insno.Border = 0;
        tablesnewone1.AddCell(insno); tablesnewone1.AddCell(cellspace);

        PdfPCell insno1 = new PdfPCell(new Phrase("Seal of the Establishment", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        insno1.HorizontalAlignment = 0;
        insno1.Colspan = 2;
        insno1.Border = 0;
        tablesnewone1.AddCell(insno1);


        PdfPCell namedesignation = new PdfPCell(new Phrase("Date:____________________", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        namedesignation.HorizontalAlignment = 2;
        namedesignation.Colspan = 2;
        namedesignation.Border = 0;
        tablesnewone1.AddCell(namedesignation);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);



        PdfPCell application = new PdfPCell(new Phrase("Certified that I have verified the data in Part C in respect of the member mentioned in Part A of this form.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        application.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        application.Colspan = 4;
        application.SetLeading(0.0f, 1.5f);
        application.Border = 0;
        tablesnewone1.AddCell(application);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);

        PdfPCell codeno = new PdfPCell(new Phrase("Signature of Present Employer", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        codeno.HorizontalAlignment = 2;
        codeno.Colspan = 4;
        codeno.Border = 0;
        tablesnewone1.AddCell(codeno);
        tablesnewone1.AddCell(cellspace);


        PdfPCell codeno1 = new PdfPCell(new Phrase("Seal of the Establishment", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        codeno1.HorizontalAlignment = 0;
        codeno1.Colspan = 2;
        codeno1.Border = 0;
        tablesnewone1.AddCell(codeno1);



        PdfPCell lono = new PdfPCell(new Phrase("Date:__________________", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        lono.HorizontalAlignment = 2;
        lono.Colspan = 2;
        lono.Border = 0;
        tablesnewone1.AddCell(lono);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);

        PdfPCell empty = new PdfPCell(new Phrase("", FontFactory.GetFont(FontFactory.TIMES_ROMAN, Fontsize, Font.BOLD, BaseColor.BLACK)));
        empty.HorizontalAlignment = 0;
        empty.Colspan = 4;
        empty.BorderWidthBottom = 0;
        empty.BorderWidthLeft = 0;
        empty.BorderWidthRight = 0;
        empty.BorderWidthTop = .7f;
        tablesnewone1.AddCell(empty);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);

        PdfPCell lono1 = new PdfPCell(new Phrase("INSTRUCTIONS AND GUIDELINES", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        lono1.HorizontalAlignment = 1;
        lono1.Colspan = 4;
        lono1.Border = 0;
        tablesnewone1.AddCell(lono1);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);


        PdfPCell no1 = new PdfPCell(new Phrase("1.	The Bank A/C details are for verification purpose even if the Fund is transferred to the EPFO Office/Trust maintaining the present account number.\n 2.In case the Previous Account was maintained by PF Trust of the exempted establishment, the member should submit a Transfer Claim Form { Form - 13(Revised) } to the Trust while sending another Transfer Claim Form { Form - 13(Revised)} to the PF Office for transferring the service details under the Pension Fund to the new account.\n 3.The Form should be submitted to that PF Office under which previous or the present account is maintained, depending upon as to which employer has attested the claim. (In case the claim is attested by the present employer, claim should be submitted with the PF Office under which the present account is maintained, and so on).\n 4.The mobile number(wherever provided) of the member would be used for sending an SMS alert informing him / her the processing of his / her claim and is non - mandatory for Physical form.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        no1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        no1.Colspan = 4;
        no1.Border = 0;
        no1.SetLeading(0f, 1.5f);
        tablesnewone1.AddCell(no1);






        document.Add(tablesnewone1);



        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "formX.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnform16_Click(object sender, EventArgs e)
    {

        int Fontsize = 11;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(4);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell space = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        space.HorizontalAlignment = 1;
        space.Colspan = 4;
        space.Border = 0;

        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);




        PdfPCell form16 = new PdfPCell(new Phrase("FORM 16", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
        form16.HorizontalAlignment = 1;
        form16.Colspan = 4;
        form16.Border = 0;
        tablesnewone.AddCell(form16);

        PdfPCell CLAIM = new PdfPCell(new Phrase("ACCIDENT REPORT FROM EMPLOYER", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        CLAIM.HorizontalAlignment = 1;
        CLAIM.Colspan = 4;
        CLAIM.Border = 0;
        tablesnewone.AddCell(CLAIM);

        PdfPCell FORM = new PdfPCell(new Phrase("[Regulation 68].", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        FORM.HorizontalAlignment = 1;
        FORM.Colspan = 4;
        FORM.Border = 0;
        tablesnewone.AddCell(FORM);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);

        PdfPCell nameofemplyr = new PdfPCell(new Phrase("1.Name of employer  ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameofemplyr.HorizontalAlignment = 0;
        nameofemplyr.Colspan = 2;
        nameofemplyr.Border = 0;
        tablesnewone.AddCell(nameofemplyr);

        PdfPCell nameofemplyr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameofemplyr1.HorizontalAlignment = 0;
        nameofemplyr1.Colspan = 2;
        nameofemplyr1.Border = 0;
        tablesnewone.AddCell(nameofemplyr1);
        tablesnewone.AddCell(space);




        PdfPCell emplyrcodeno = new PdfPCell(new Phrase("2.Employer’s Code No", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        emplyrcodeno.HorizontalAlignment = 0;
        emplyrcodeno.Colspan = 2;
        emplyrcodeno.Border = 0;
        tablesnewone.AddCell(emplyrcodeno);

        PdfPCell emplyrcodeno1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        emplyrcodeno1.HorizontalAlignment = 0;
        emplyrcodeno1.Colspan = 2;
        emplyrcodeno1.Border = 0;
        tablesnewone.AddCell(emplyrcodeno1);
        tablesnewone.AddCell(space);

        PdfPCell addofpremis = new PdfPCell(new Phrase("3.Address of premises where accident happened  ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        addofpremis.HorizontalAlignment = 0;
        addofpremis.Colspan = 2;
        addofpremis.Border = 0;
        tablesnewone.AddCell(addofpremis);

        PdfPCell addofpremis1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        addofpremis1.HorizontalAlignment = 0;
        addofpremis1.Colspan = 2;
        addofpremis1.Border = 0;
        tablesnewone.AddCell(addofpremis1);
        tablesnewone.AddCell(space);


        PdfPCell Nature = new PdfPCell(new Phrase("4.Nature of industry or business ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Nature.HorizontalAlignment = 0;
        Nature.Colspan = 2;
        Nature.Border = 0;
        tablesnewone.AddCell(Nature);

        PdfPCell Nature1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Nature1.HorizontalAlignment = 0;
        Nature1.Colspan = 2;
        Nature1.Border = 0;
        tablesnewone.AddCell(Nature1);
        tablesnewone.AddCell(space);

        PdfPCell Department = new PdfPCell(new Phrase("5.Department, shift, hours, (if any), and exact place where the accident happened", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Department.HorizontalAlignment = 0;
        Department.Colspan = 2;
        Department.Border = 0;
        tablesnewone.AddCell(Department);

        PdfPCell Department1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Department1.HorizontalAlignment = 0;
        Department1.Colspan = 2;
        Department1.Border = 0;
        tablesnewone.AddCell(Department1);
        tablesnewone.AddCell(space);




        PdfPCell injured = new PdfPCell(new Phrase("6.Name of the injured person  ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        injured.HorizontalAlignment = 0;
        injured.Colspan = 2;
        injured.Border = 0;
        tablesnewone.AddCell(injured);


        PdfPCell injured1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        injured1.HorizontalAlignment = 0;
        injured1.Colspan = 2;
        injured1.Border = 0;
        tablesnewone.AddCell(injured1);
        tablesnewone.AddCell(space);


        PdfPCell Insurance = new PdfPCell(new Phrase("7.Insurance No", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Insurance.HorizontalAlignment = 0;
        Insurance.Colspan = 2;
        Insurance.Border = 0;
        tablesnewone.AddCell(Insurance);


        PdfPCell Insurance1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Insurance1.HorizontalAlignment = 0;
        Insurance1.Colspan = 2;
        Insurance1.Border = 0;
        tablesnewone.AddCell(Insurance1);
        tablesnewone.AddCell(space);

        PdfPCell trustnameadd = new PdfPCell(new Phrase("8.Address of the injured person", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        trustnameadd.HorizontalAlignment = 0;
        trustnameadd.Colspan = 4;
        trustnameadd.Border = 0;
        tablesnewone.AddCell(trustnameadd);


        PdfPCell addressoffice1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        addressoffice1.HorizontalAlignment = 0;
        addressoffice1.Colspan = 4;
        addressoffice1.Border = 0;
        tablesnewone.AddCell(addressoffice1);
        tablesnewone.AddCell(space);


        PdfPCell addrsss1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        addrsss1.HorizontalAlignment = 0;
        addrsss1.Colspan = 4;
        addrsss1.Border = 0;
        tablesnewone.AddCell(addrsss1);
        tablesnewone.AddCell(space);


        PdfPCell addressoffice = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        addressoffice.HorizontalAlignment = 0;
        addressoffice.Colspan = 4;
        addressoffice.Border = 0;
        tablesnewone.AddCell(addressoffice);
        tablesnewone.AddCell(space);


        PdfPCell addrsss2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        addrsss2.HorizontalAlignment = 0;
        addrsss2.Colspan = 4;
        addrsss2.Border = 0;
        tablesnewone.AddCell(addrsss2);
        tablesnewone.AddCell(space);


        PdfPCell incase1 = new PdfPCell(new Phrase("9)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        incase1.HorizontalAlignment = 0;
        incase1.Colspan = 4;
        incase1.Border = 0;
        tablesnewone.AddCell(incase1);
        tablesnewone.AddCell(space);


        PdfPCell incase = new PdfPCell(new Phrase("     (a) Sex", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        incase.HorizontalAlignment = 0;
        incase.Colspan = 4;
        incase.Border = 0;
        tablesnewone.AddCell(incase);
        tablesnewone.AddCell(space);

        PdfPCell cellsir = new PdfPCell(new Phrase("     (b) Age (last birthday)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellsir.HorizontalAlignment = 0;
        cellsir.Colspan = 4;
        cellsir.Border = 0;
        tablesnewone.AddCell(cellsir);
        tablesnewone.AddCell(space);

        PdfPCell request = new PdfPCell(new Phrase("     (c) Occupation of injured person", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        request.HorizontalAlignment = 0;
        request.Colspan = 4;
        request.Border = 0;
        tablesnewone.AddCell(request);
        tablesnewone.AddCell(space);



        PdfPCell Parta = new PdfPCell(new Phrase("     (d) Local Office to which attached", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Parta.HorizontalAlignment = 0;
        Parta.Colspan = 4;
        Parta.Border = 0;
        tablesnewone.AddCell(Parta);
        tablesnewone.AddCell(space);



        PdfPCell Date12 = new PdfPCell(new Phrase("10. Date and hour of accident", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Date12.HorizontalAlignment = 0;
        Date12.Colspan = 4;
        Date12.Border = 0;
        tablesnewone.AddCell(Date12);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell Hour = new PdfPCell(new Phrase("11.(a) Hour at which he started work on day of accident.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Hour.HorizontalAlignment = 0;
        Hour.Colspan = 4;
        Hour.Border = 0;
        tablesnewone.AddCell(Hour);
        tablesnewone.AddCell(space);


        PdfPCell wages = new PdfPCell(new Phrase("     (b) Whether wages in full or part are payable to him for the day of his accident.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        wages.HorizontalAlignment = 0;
        wages.Colspan = 4;
        wages.Border = 0;
        tablesnewone.AddCell(wages);
        tablesnewone.AddCell(space);

        PdfPCell injureda = new PdfPCell(new Phrase("     (c) Whether the injured person was on the day of accident an employee as defined in  Section ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        injureda.HorizontalAlignment = 0;
        injureda.Colspan = 4;
        injureda.Border = 0;
        tablesnewone.AddCell(injureda);
        tablesnewone.AddCell(space);

        PdfPCell contribution = new PdfPCell(new Phrase("     2(9)of the Act and whether contribution was payable by him for the day on which the accident occurred", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        contribution.HorizontalAlignment = 0;
        contribution.Colspan = 4;
        contribution.Border = 0;
        tablesnewone.AddCell(contribution);
        tablesnewone.AddCell(space);

        PdfPCell accident = new PdfPCell(new Phrase("12. Cause of accident:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        accident.HorizontalAlignment = 0;
        accident.Colspan = 4;
        accident.Border = 0;
        tablesnewone.AddCell(accident);
        tablesnewone.AddCell(space);


        PdfPCell machinery = new PdfPCell(new Phrase("     (a) If caused by machinery, -", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        machinery.HorizontalAlignment = 0;
        machinery.Colspan = 4;
        machinery.Border = 0;
        tablesnewone.AddCell(machinery);
        tablesnewone.AddCell(space);

        PdfPCell machine = new PdfPCell(new Phrase("          (i) Give name of the machine and part causing the accident, and", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        machine.HorizontalAlignment = 0;
        machine.Colspan = 4;
        machine.Border = 0;
        tablesnewone.AddCell(machine);
        tablesnewone.AddCell(space);

        PdfPCell whether = new PdfPCell(new Phrase("         (ii) State whether it was moved by mechanical power at that time.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        whether.HorizontalAlignment = 0;
        whether.Colspan = 4;
        whether.Border = 0;
        tablesnewone.AddCell(whether);
        tablesnewone.AddCell(space);

        PdfPCell State = new PdfPCell(new Phrase("     (b) State exactly what the injured person was doing at that time. ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        State.HorizontalAlignment = 0;
        State.Colspan = 4;
        State.Border = 0;
        tablesnewone.AddCell(State);
        tablesnewone.AddCell(space);

        PdfPCell opinion = new PdfPCell(new Phrase("     (c) In your opinion, was the injured person at the time of accident ---", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        opinion.HorizontalAlignment = 0;
        opinion.Colspan = 4;
        opinion.Border = 0;
        tablesnewone.AddCell(opinion);
        tablesnewone.AddCell(space);

        PdfPCell Acting = new PdfPCell(new Phrase("          (i) Acting in contravention of the provisions of any law applicable to him, or ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Acting.HorizontalAlignment = 0;
        Acting.Colspan = 4;
        Acting.Border = 0;
        tablesnewone.AddCell(Acting);
        tablesnewone.AddCell(space);

        PdfPCell contravention = new PdfPCell(new Phrase("          (ii) Acting in contravention of any orders given by or on behalf of his employer; or ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        contravention.HorizontalAlignment = 0;
        contravention.Colspan = 4;
        contravention.Border = 0;
        tablesnewone.AddCell(contravention);
        tablesnewone.AddCell(space);


        PdfPCell instruction = new PdfPCell(new Phrase("          (iii) Acting without instruction from his employer.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        instruction.HorizontalAlignment = 0;
        instruction.Colspan = 4;
        instruction.Border = 0;
        tablesnewone.AddCell(instruction);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);


        PdfPCell case1 = new PdfPCell(new Phrase("       (d) In case reply to (c) (i), (ii) pr (iii) is in affirmative, state whether the act was done for the purpose of an in connection with the employer’s trade or business.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        case1.HorizontalAlignment = 0;
        case1.Colspan = 4;
        case1.Border = 0;
        tablesnewone.AddCell(case1);
        tablesnewone.AddCell(space);

        PdfPCell traveling = new PdfPCell(new Phrase("13. In case the accident while traveling in the employer’s transport, state whether, ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        traveling.HorizontalAlignment = 0;
        traveling.Colspan = 4;
        traveling.Border = 0;
        tablesnewone.AddCell(traveling);
        tablesnewone.AddCell(space);

        PdfPCell passenger = new PdfPCell(new Phrase("          (i) The injured person was traveling as a passenger to a from his place of work;", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        passenger.HorizontalAlignment = 0;
        passenger.Colspan = 4;
        passenger.Border = 0;
        tablesnewone.AddCell(passenger);
        tablesnewone.AddCell(space);

        PdfPCell permission = new PdfPCell(new Phrase("          (ii) The injured person was traveling with the express or implied permission of his employer; and", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        permission.HorizontalAlignment = 0;
        permission.Colspan = 4;
        permission.Border = 0;
        tablesnewone.AddCell(permission);
        tablesnewone.AddCell(space);

        PdfPCell transport = new PdfPCell(new Phrase("          (iii) The transport is being operated by or on behalf of the employer or some other person by whom it is provided in pursuance or arrangements made with the employer; and", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        transport.HorizontalAlignment = 0;
        transport.Colspan = 4;
        transport.SetLeading(0f, 1.5f);
        transport.Border = 0;
        tablesnewone.AddCell(transport);
        tablesnewone.AddCell(space);



        PdfPCell vehicle = new PdfPCell(new Phrase("          (iv) the vehicle was being / not being operated in the ordinary course of public transport service.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        vehicle.HorizontalAlignment = 0;
        vehicle.Colspan = 4;
        vehicle.Border = 0;
        tablesnewone.AddCell(vehicle);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);
        tablesnewone.AddCell(space);





        document.Add(tablesnewone);
        //document.SetPageSize(PageSize.LEGAL);
        document.NewPage();


        PdfPTable tablesnewone1 = new PdfPTable(4);
        tablesnewone1.TotalWidth = 500f;
        tablesnewone1.LockedWidth = true;
        float[] width1 = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone1.SetWidths(width1);

        PdfPCell cellspace = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 0;
        cellspace.Colspan = 4;
        cellspace.Border = 0;
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);
        tablesnewone1.AddCell(cellspace);

        PdfPCell happened = new PdfPCell(new Phrase("14. In case the accident happened while meeting emergency; state", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        happened.HorizontalAlignment = 0;
        happened.Colspan = 4;
        happened.Border = 0;
        tablesnewone1.AddCell(happened);
        tablesnewone1.AddCell(cellspace);

        PdfPCell Attested = new PdfPCell(new Phrase("          (i) its nature;", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Attested.HorizontalAlignment = 0;
        Attested.Colspan = 4;
        Attested.Border = 0;
        tablesnewone1.AddCell(Attested);
        tablesnewone1.AddCell(cellspace);


        PdfPCell business = new PdfPCell(new Phrase("          (ii)Whether the injured person at the time of accident was employed for the purpose of his employer’s trade or business in or about the premises which the accident took place.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        business.HorizontalAlignment = 0;
        business.Colspan = 4;
        business.Border = 0;
        tablesnewone1.AddCell(business);
        tablesnewone1.AddCell(cellspace);

        PdfPCell IMPORTANT = new PdfPCell(new Phrase("15. Describe briefly how the accident occurred.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        IMPORTANT.HorizontalAlignment = 0;
        IMPORTANT.Colspan = 4;
        IMPORTANT.Border = 0;
        tablesnewone1.AddCell(IMPORTANT);
        tablesnewone1.AddCell(cellspace);



        PdfPCell fellname1 = new PdfPCell(new Phrase("16. Name and address of witnesses :", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        fellname1.HorizontalAlignment = 0;
        fellname1.Colspan = 4;
        fellname1.Border = 0;
        tablesnewone1.AddCell(fellname1);
        tablesnewone1.AddCell(cellspace);


        PdfPCell insno = new PdfPCell(new Phrase("     1)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        insno.HorizontalAlignment = 0;
        insno.Colspan = 4;
        insno.Border = 0;
        tablesnewone1.AddCell(insno);
        tablesnewone1.AddCell(cellspace);

        PdfPCell insno1 = new PdfPCell(new Phrase("     2)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        insno1.HorizontalAlignment = 0;
        insno1.Colspan = 4;
        insno1.Border = 0;
        tablesnewone1.AddCell(insno1);
        tablesnewone1.AddCell(cellspace);


        PdfPCell namedesignation = new PdfPCell(new Phrase("17.(a) Nature and extent of injury(e.g.fatal, loss of finger, fracture of leg, scald, etc.,)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        namedesignation.HorizontalAlignment = 0;
        namedesignation.Colspan = 4;
        namedesignation.Border = 0;
        tablesnewone1.AddCell(namedesignation);
        tablesnewone1.AddCell(cellspace);




        PdfPCell application = new PdfPCell(new Phrase("     (b) Location of injury(right leg, left hand or left eye, etc.)..", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        application.HorizontalAlignment = 0;
        application.Colspan = 4;
        application.Border = 0;
        tablesnewone1.AddCell(application);
        tablesnewone1.AddCell(cellspace);


        PdfPCell fatal = new PdfPCell(new Phrase("     (c)(i) if the accident is not fatal state whether the injured person has return to work.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        fatal.HorizontalAlignment = 0;
        fatal.Colspan = 4;
        fatal.Border = 0;
        tablesnewone1.AddCell(fatal);
        tablesnewone1.AddCell(cellspace);


        PdfPCell return1 = new PdfPCell(new Phrase("         (ii) If so, date and hour of return to work.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        return1.HorizontalAlignment = 0;
        return1.Colspan = 4;
        return1.Border = 0;
        tablesnewone1.AddCell(return1);
        tablesnewone1.AddCell(cellspace);


        PdfPCell lono = new PdfPCell(new Phrase("18.(a) Physician, dispensary or hospital from whom or where the injured person received or is receiving treatment.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        lono.HorizontalAlignment = 0;
        lono.Colspan = 4;
        lono.Border = 0;
        tablesnewone1.AddCell(lono);
        tablesnewone1.AddCell(cellspace);

        PdfPCell empty = new PdfPCell(new Phrase("     (b) Name of dispensary / penal doctor, elected by the injured person", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty.HorizontalAlignment = 0;
        empty.Colspan = 4;
        empty.Border = 0;
        tablesnewone1.AddCell(empty);
        tablesnewone1.AddCell(cellspace);

        PdfPCell lono1 = new PdfPCell(new Phrase("19. (i) Has injured person died (i)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        lono1.HorizontalAlignment = 0;
        lono1.Colspan = 4;
        lono1.Border = 0;
        tablesnewone1.AddCell(lono1);
        tablesnewone1.AddCell(cellspace);


        PdfPCell no1 = new PdfPCell(new Phrase("       (ii)If so, date of death(ii)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        no1.HorizontalAlignment = 0;
        no1.Colspan = 4;
        no1.Border = 0;
        no1.SetLeading(0f, 1.5f);
        tablesnewone1.AddCell(no1);
        tablesnewone1.AddCell(cellspace);


        PdfPCell dispatch1 = new PdfPCell(new Phrase("  I certify that to the best of my knowledge and belief the above particulars are correct in every respect.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dispatch1.HorizontalAlignment = 0;
        dispatch1.Colspan = 4;
        dispatch1.Border = 0;
        dispatch1.SetLeading(0f, 1.5f);
        tablesnewone1.AddCell(dispatch1);
        tablesnewone1.AddCell(cellspace);

        PdfPCell dispatch = new PdfPCell(new Phrase("Date of dispatch of report", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dispatch.HorizontalAlignment = 0;
        dispatch.Colspan = 2;
        dispatch.Border = 0;
        dispatch.SetLeading(0f, 1.5f);
        tablesnewone1.AddCell(dispatch);
        PdfPCell signature = new PdfPCell(new Phrase("Signature   …………………………", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        signature.HorizontalAlignment = 2;
        signature.Colspan = 2;
        signature.Border = 0;
        signature.SetLeading(0f, 1.5f);
        tablesnewone1.AddCell(signature);

        PdfPCell designation = new PdfPCell(new Phrase("Designation  …………………………", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        designation.HorizontalAlignment = 2;
        designation.Colspan = 4;
        designation.Border = 0;
        designation.SetLeading(0f, 1.5f);
        tablesnewone1.AddCell(designation);

        PdfPCell empylrname = new PdfPCell(new Phrase(" Employer’s name  …………………", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empylrname.HorizontalAlignment = 2;
        empylrname.Colspan = 4;
        empylrname.Border = 0;
        empylrname.SetLeading(0f, 1.5f);
        tablesnewone1.AddCell(empylrname);

        PdfPCell address = new PdfPCell(new Phrase(" Address  …………………………", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        address.HorizontalAlignment = 2;
        address.Colspan = 4;
        address.Border = 0;
        address.SetLeading(0f, 1.5f);
        tablesnewone1.AddCell(address);

        PdfPCell codeno = new PdfPCell(new Phrase(" Code No. …………………………", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        codeno.HorizontalAlignment = 2;
        codeno.Colspan = 4;
        codeno.Border = 0;
        codeno.SetLeading(0f, 1.5f);
        tablesnewone1.AddCell(codeno);



        document.Add(tablesnewone1);



        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "Form16.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnforma1_Click(object sender, EventArgs e)
    {

        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(7);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell cellHead1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead1.HorizontalAlignment = 1;
        cellHead1.Colspan = 7;
        cellHead1.Border = 0;
        cellHead1.PaddingBottom = 15;
        tablesnewone.AddCell(cellHead1);

        PdfPCell cellHead = new PdfPCell(new Phrase("Forma 1 - B", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 7;
        cellHead.Border = 0;
        tablesnewone.AddCell(cellHead);

        PdfPCell cellmuster = new PdfPCell(new Phrase("(Regulation 15-B)", FontFactory.GetFont(FontStyle, 13, Font.BOLD, BaseColor.BLACK)));
        cellmuster.HorizontalAlignment = 1;
        cellmuster.Colspan = 7;
        cellmuster.Border = 0;
        tablesnewone.AddCell(cellmuster);

        PdfPCell cellRule32 = new PdfPCell(new Phrase("Change in Family Declaration form", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellRule32.HorizontalAlignment = 1;
        cellRule32.Colspan = 7;
        cellRule32.Border = 0;
        tablesnewone.AddCell(cellRule32);


        PdfPCell cellHead2 = new PdfPCell(new Phrase("Name of the Insured Person", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellHead2.HorizontalAlignment = 0;
        cellHead2.Colspan = 7;
        cellHead2.Border = 0;
        cellHead2.PaddingBottom = 15;
        tablesnewone.AddCell(cellHead2);


        PdfPCell nameofmine = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameofmine.HorizontalAlignment = 0;
        nameofmine.Colspan = 7;
        nameofmine.Border = 0;
        tablesnewone.AddCell(nameofmine);

        PdfPCell cell1 = new PdfPCell(new Phrase("Insurance Number  ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell1.HorizontalAlignment = 0;
        cell1.Colspan = 7;
        cell1.Border = 0;
        tablesnewone.AddCell(cell1);

        PdfPCell cell2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell2.HorizontalAlignment = 0;
        cell2.Colspan = 7;
        cell2.Border = 0;
        tablesnewone.AddCell(cell2);

        PdfPCell cell3 = new PdfPCell(new Phrase("I hereby declare that the person/Persons whose particulars are given below has/have now become/ceased to be members of my family:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell3.HorizontalAlignment = 0;
        cell3.Colspan = 7;
        cell3.Border = 0;
        tablesnewone.AddCell(cell3);

        PdfPCell slno = new PdfPCell(new Phrase("SL. No", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno.HorizontalAlignment = 0;
        tablesnewone.AddCell(slno);

        PdfPCell names = new PdfPCell(new Phrase("Name", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        names.HorizontalAlignment = 0;
        tablesnewone.AddCell(names);

        PdfPCell doc = new PdfPCell(new Phrase("Date of Change", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        doc.HorizontalAlignment = 0;
        tablesnewone.AddCell(doc);

        PdfPCell dob = new PdfPCell(new Phrase("Date of Birth", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dob.HorizontalAlignment = 1;
        tablesnewone.AddCell(dob);
        PdfPCell relation = new PdfPCell(new Phrase("Relationship with the insured person", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));

        relation.HorizontalAlignment = 1;
        tablesnewone.AddCell(relation);

        PdfPCell idmarks = new PdfPCell(new Phrase("Identification Marks (for new entrants)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmarks.HorizontalAlignment = 1;
        tablesnewone.AddCell(idmarks);



        PdfPCell reason = new PdfPCell(new Phrase("Reasons for Change", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        reason.HorizontalAlignment = 1;
        tablesnewone.AddCell(reason);

        PdfPCell month = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        month.HorizontalAlignment = 0;
        month.Colspan = 1;
        tablesnewone.AddCell(month);



        PdfPCell slno1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno1.HorizontalAlignment = 0;
        slno1.FixedHeight = 170;
        tablesnewone.AddCell(slno1);

        PdfPCell names1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        names1.HorizontalAlignment = 0;
        tablesnewone.AddCell(names1);

        PdfPCell doc1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        doc1.HorizontalAlignment = 0;
        tablesnewone.AddCell(doc1);

        PdfPCell dob1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dob1.HorizontalAlignment = 1;
        tablesnewone.AddCell(dob1);

        PdfPCell relation1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        relation1.HorizontalAlignment = 1;
        tablesnewone.AddCell(relation1);

        PdfPCell idmarks1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmarks1.HorizontalAlignment = 1;
        tablesnewone.AddCell(idmarks1);


        PdfPCell reason1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        reason1.HorizontalAlignment = 1;
        reason.FixedHeight = 170;
        tablesnewone.AddCell(reason1);

        document.Add(tablesnewone);
        document.NewPage();

        PdfPTable tablesnewone1 = new PdfPTable(4);
        tablesnewone1.TotalWidth = 500f;
        tablesnewone1.LockedWidth = true;
        float[] width1 = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone1.SetWidths(width1);

        PdfPCell spacingcell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        spacingcell.HorizontalAlignment = 0;
        spacingcell.Colspan = 4;
        spacingcell.Border = 0;
        tablesnewone1.AddCell(spacingcell);


        PdfPCell notes = new PdfPCell(new Phrase("My family Declaration Form may kindly be corrected accordingly.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        notes.HorizontalAlignment = 1;
        notes.Colspan = 4;
        notes.Border = 0;
        tablesnewone1.AddCell(notes);
        tablesnewone1.AddCell(spacingcell);
        tablesnewone1.AddCell(spacingcell);


        PdfPCell hereby = new PdfPCell(new Phrase("I hereby declare that the particulars given above are true to the best of my knowledge and belief.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        hereby.HorizontalAlignment = 0;
        hereby.Colspan = 4;
        hereby.Border = 0;
        tablesnewone1.AddCell(hereby);
        tablesnewone1.AddCell(spacingcell);
        tablesnewone1.AddCell(spacingcell);


        PdfPCell Date = new PdfPCell(new Phrase("Date :-", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Date.HorizontalAlignment = 0;
        Date.Colspan = 4;
        Date.Border = 0;
        tablesnewone1.AddCell(Date);
        tablesnewone1.AddCell(spacingcell);
        tablesnewone1.AddCell(spacingcell);
        tablesnewone1.AddCell(spacingcell);
        tablesnewone1.AddCell(spacingcell);
        tablesnewone1.AddCell(spacingcell);


        PdfPCell Signature = new PdfPCell(new Phrase("Signature/Thumb impression \n of the Insured person", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Signature.HorizontalAlignment = 2;
        Signature.Colspan = 4;
        Signature.Border = 0;
        tablesnewone1.AddCell(Signature);
        tablesnewone1.AddCell(spacingcell);


        PdfPCell Number = new PdfPCell(new Phrase("Name, Address and Code Number of the Employer", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Number.HorizontalAlignment = 0;
        Number.Colspan = 4;
        Number.Border = 0;
        tablesnewone1.AddCell(Number);


        PdfPCell Responsible = new PdfPCell(new Phrase("Responsible Person", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Responsible.HorizontalAlignment = 0;
        Responsible.Colspan = 2;
        tablesnewone1.AddCell(Responsible);

        PdfPCell Responsible1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Responsible1.HorizontalAlignment = 0;
        Responsible1.Colspan = 2;
        tablesnewone1.AddCell(Responsible1);



        PdfPCell Address = new PdfPCell(new Phrase("Address \n Code No.: 53000111260001001", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Address.HorizontalAlignment = 0;
        Address.Colspan = 2;
        tablesnewone1.AddCell(Address);

        PdfPCell Address1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Address1.HorizontalAlignment = 0;
        Address1.Colspan = 2;
        tablesnewone1.AddCell(Address1);

        PdfPCell notes1 = new PdfPCell(new Phrase("Note:-", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        notes1.HorizontalAlignment = 0;
        notes1.Colspan = 4;
        tablesnewone1.AddCell(notes1);



        PdfPCell note = new PdfPCell(new Phrase(" According to Section 2. clause (11) of the ESI Act 1948 Family means all or any of the following  relatives of an insured person, namely.\n (i)a Spouse; (ii)a minor legitimate or adopted child dependent upon the Insured person; (iii)a child who is wholly dependent on the earnings of the Insured person and who is (a)receiving education, till he or she attains the age of twenty - one years. (b) an unmarried daughter(iv) a child who is infirm by reason of any physical or mental abnormality or injury and is wholly dependent on the earnings of the insured person, so long as the infirmity continues; (v)dependent parents;", FontFactory.GetFont(FontStyle, Fontsize - 3, Font.NORMAL, BaseColor.BLACK)));
        note.HorizontalAlignment = 0;
        note.Colspan = 4;
        tablesnewone1.AddCell(note);



        document.Add(tablesnewone1);
        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "FormA1.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnformq_Click(object sender, EventArgs e)
    {

        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region
        PdfPTable table = new PdfPTable(6);
        table.TotalWidth = 500f;
        table.LockedWidth = true;
        float[] width = new float[] { 1.5f, 2f, 2f, 2f, 1.5f, 2f };
        table.SetWidths(width);

        PdfPCell cellspace = new PdfPCell(new Phrase("  ", FontFactory.GetFont(fontsyle, Fontsize - 2, Font.NORMAL, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace.Colspan = 6;
        cellspace.Border = 0;
        cellspace.PaddingTop = -5;

        PdfPCell celllogoHead = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize + 4, Font.NORMAL, BaseColor.BLACK)));
        celllogoHead.HorizontalAlignment = 2;
        celllogoHead.Colspan = 3;
        celllogoHead.Border = 0;
        table.AddCell(celllogoHead);

        PdfPCell cellHead = new PdfPCell(new Phrase("FORM Q", FontFactory.GetFont(fontsyle, Fontsize + 4, Font.NORMAL, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 0;
        cellHead.Colspan = 3;
        cellHead.Border = 0;
        cellHead.PaddingLeft = -30;
        table.AddCell(cellHead);

        PdfPCell cellrule = new PdfPCell(new Phrase("(see rule 24(9A)) ", FontFactory.GetFont(fontsyle, 12, Font.NORMAL, BaseColor.BLACK)));
        cellrule.HorizontalAlignment = 0;
        cellrule.Colspan = 6;
        cellrule.Border = 0;
        cellrule.PaddingLeft = 198;
        table.AddCell(cellrule);


        PdfPCell cellHead4 = new PdfPCell(new Phrase("APPOINTMENT ORDER", FontFactory.GetFont(fontsyle, Fontsize + 3, Font.NORMAL, BaseColor.BLACK)));
        cellHead4.HorizontalAlignment = 1;
        cellHead4.Colspan = 6;
        cellHead4.Border = 0;
        table.AddCell(cellHead4);
        document.Add(table);


        PdfPTable table2 = new PdfPTable(3);
        table2.TotalWidth = 500f;
        table2.LockedWidth = true;
        float[] width1 = new float[] { 0.7f, 6f, 7f };
        table2.SetWidths(width1);

        PdfPCell cellspace3 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellspace3.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        cellspace3.Colspan = 3;
        cellspace3.Border = 0;
        table2.AddCell(cellspace3);
        //table2.AddCell(cellspace3);

        PdfPCell cellSno1 = new PdfPCell(new Phrase(" \n1.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        table2.AddCell(cellSno1);

        PdfPCell cellName2 = new PdfPCell(new Phrase("\nName and address of Establishment", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName2.HorizontalAlignment = 0;
        cellName2.Colspan = 0;
        cellName2.Border = 0;
        cellName2.BorderWidthLeft = 0.5f;
        cellName2.BorderWidthRight = 0.2f;
        cellName2.BorderWidthTop = 0.5f;
        cellName2.BorderWidthBottom = 0.5f;
        cellName2.PaddingLeft = 10;
        table2.AddCell(cellName2);


        PdfPCell cellName3 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName3.HorizontalAlignment = 0;
        cellName3.Colspan = 0;
        cellName3.Border = 0;
        cellName3.PaddingLeft = 10;
        cellName3.BorderWidthLeft = 0;
        cellName3.BorderWidthRight = 0.9f;
        cellName3.BorderWidthTop = 0.5f;
        cellName3.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName3);

        PdfPCell cellSno2 = new PdfPCell(new Phrase("\n2. ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        table2.AddCell(cellSno2);

        PdfPCell cellName11 = new PdfPCell(new Phrase("\nName and address of the Employer", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName11.HorizontalAlignment = 0;
        cellName11.Colspan = 0;
        cellName11.Border = 0;
        cellName11.BorderWidthLeft = 0.5f;
        cellName11.BorderWidthRight = 0.2f;
        cellName11.BorderWidthTop = 0;
        cellName11.BorderWidthBottom = 0.5f;
        cellName11.PaddingLeft = 10;
        table2.AddCell(cellName11);


        PdfPCell cellName10 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName10.HorizontalAlignment = 0;
        cellName10.Colspan = 0;
        cellName10.Border = 0;
        cellName10.BorderWidthLeft = 0;
        cellName10.BorderWidthRight = 0.9f;
        cellName10.BorderWidthTop = 0;
        cellName10.BorderWidthBottom = 0.5f;
        cellName10.PaddingLeft = 10;
        table2.AddCell(cellName10);


        PdfPCell cellSno3 = new PdfPCell(new Phrase("\n3. ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno3.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        table2.AddCell(cellSno3);

        PdfPCell cellName16 = new PdfPCell(new Phrase("\nName of the Employee", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName16.HorizontalAlignment = 0;
        cellName16.Colspan = 0;
        cellName16.Border = 0;
        cellName16.BorderWidthLeft = 0.5f;
        cellName16.BorderWidthRight = 0.2f;
        cellName16.BorderWidthTop = 0;
        cellName16.BorderWidthBottom = 0.5f;
        cellName16.PaddingLeft = 10;
        table2.AddCell(cellName16);

        PdfPCell cellName17 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName17.HorizontalAlignment = 0;
        cellName17.Colspan = 0;
        cellName17.Border = 0;
        cellName17.BorderWidthLeft = 0;
        cellName17.BorderWidthRight = 0.9f;
        cellName17.BorderWidthTop = 0;
        cellName17.BorderWidthBottom = 0.5f;
        cellName17.PaddingLeft = 10;
        table2.AddCell(cellName17);


        PdfPCell cellSno4 = new PdfPCell(new Phrase("\n4.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno4.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        table2.AddCell(cellSno4);

        PdfPCell cellName19 = new PdfPCell(new Phrase("\nHis / Her Postal Address", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName19.HorizontalAlignment = 0;
        cellName19.Colspan = 0;
        cellName19.Border = 0;
        cellName19.BorderWidthLeft = 0.5f;
        cellName19.BorderWidthRight = 0.2f;
        cellName19.BorderWidthTop = 0;
        cellName19.BorderWidthBottom = 0.5f;
        cellName19.PaddingLeft = 10;
        table2.AddCell(cellName19);

        #region Present address String array

        //string[] PrAdress = new string[8];
        //if (prdoorno.Length > 0)
        //{
        //    PrAdress[0] = prdoorno;
        //}
        //else
        //{
        //    PrAdress[0] = "";
        //}
        //if (prstreet.Length > 0)
        //{
        //    PrAdress[1] = prstreet;
        //}
        //else
        //{
        //    PrAdress[1] = "";
        //}
        //if (prLmark.Length > 0)
        //{
        //    PrAdress[2] = prLmark;
        //}
        //else
        //{
        //    PrAdress[2] = "";
        //}
        //if (prarea.Length > 0)
        //{
        //    PrAdress[3] = prarea;
        //}
        //else
        //{
        //    PrAdress[3] = "";
        //}
        //if (prcity.Length > 0)
        //{
        //    PrAdress[4] = prcity;
        //}
        //else
        //{
        //    PrAdress[4] = "";
        //}
        //if (prDistrict.Length > 0)
        //{
        //    PrAdress[5] = prDistrict;
        //}
        //else
        //{
        //    PrAdress[5] = "";
        //}
        //if (prPincode.Length > 0)
        //{
        //    PrAdress[6] = prPincode;
        //}
        //else
        //{
        //    PrAdress[6] = "";
        //}
        //if (prState.Length > 0)
        //{
        //    PrAdress[7] = prState;
        //}
        //else
        //{
        //    PrAdress[7] = "";
        //}

        //string Address1 = string.Empty;

        //for (int i = 0; i < 8; i++)
        //{
        //    Address1 += "  " + PrAdress[i];
        //}


        #endregion


        PdfPCell cellName18 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName18.HorizontalAlignment = 0;
        cellName18.Colspan = 0;
        cellName18.Border = 0;
        cellName18.BorderWidthLeft = 0;
        cellName18.BorderWidthRight = 0.9f;
        cellName18.BorderWidthTop = 0;
        cellName18.BorderWidthBottom = 0.5f;
        cellName18.PaddingLeft = 10;
        table2.AddCell(cellName18);


        PdfPCell cellSno5 = new PdfPCell(new Phrase(" \n5.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno5.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

        table2.AddCell(cellSno5);

        #region Present address String array

        //string[] PeAdress = new string[8];
        //if (pedoor.Length > 0)
        //{
        //    PeAdress[0] = pedoor;
        //}
        //else
        //{
        //    PeAdress[0] = "";
        //}
        //if (pestreet.Length > 0)
        //{
        //    PeAdress[1] = pestreet;
        //}
        //else
        //{
        //    PeAdress[1] = "";
        //}
        //if (pelmark.Length > 0)
        //{
        //    PeAdress[2] = pelmark;
        //}
        //else
        //{
        //    PeAdress[2] = "";
        //}
        //if (pearea.Length > 0)
        //{
        //    PeAdress[3] = pearea;
        //}
        //else
        //{
        //    PeAdress[3] = "";
        //}
        //if (pecity.Length > 0)
        //{
        //    PeAdress[4] = pecity;
        //}
        //else
        //{
        //    PeAdress[4] = "";
        //}
        //if (peDistrict.Length > 0)
        //{
        //    PeAdress[5] = peDistrict;
        //}
        //else
        //{
        //    PeAdress[5] = "";
        //}
        //if (pePincode.Length > 0)
        //{
        //    PeAdress[6] = pePincode;
        //}
        //else
        //{
        //    PeAdress[6] = "";
        //}
        //if (peState.Length > 0)
        //{
        //    PeAdress[7] = peState;
        //}
        //else
        //{
        //    PeAdress[7] = "";
        //}

        //string Address2 = string.Empty;

        //for (int i = 0; i < 8; i++)
        //{
        //    Address2 += "  " + PeAdress[i];
        //}


        #endregion

        PdfPCell cellPermanentAdd = new PdfPCell(new Phrase("\nHis / Her Permanent Address", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellPermanentAdd.HorizontalAlignment = 0;
        cellPermanentAdd.Colspan = 0;
        cellPermanentAdd.Border = 0;
        cellPermanentAdd.BorderWidthLeft = 0.5f;
        cellPermanentAdd.BorderWidthRight = 0.2f;
        cellPermanentAdd.BorderWidthTop = 0;
        cellPermanentAdd.BorderWidthBottom = 0.5f;
        cellPermanentAdd.PaddingLeft = 10;
        table2.AddCell(cellPermanentAdd);


        PdfPCell cellpermaddval = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellpermaddval.HorizontalAlignment = 0;
        cellpermaddval.Colspan = 0;
        cellpermaddval.Border = 0;
        cellpermaddval.BorderWidthLeft = 0;
        cellpermaddval.BorderWidthRight = 0.9f;
        cellpermaddval.BorderWidthTop = 0;
        cellpermaddval.PaddingLeft = 10;
        cellpermaddval.BorderWidthBottom = 0.5f;
        table2.AddCell(cellpermaddval);

        PdfPCell cellSno6 = new PdfPCell(new Phrase("\n6.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno6.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        table2.AddCell(cellSno6);

        PdfPCell cellFatherHusband = new PdfPCell(new Phrase("\nFather's / Husband's Name", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellFatherHusband.HorizontalAlignment = 0;
        cellFatherHusband.Colspan = 0;
        cellFatherHusband.Border = 0;
        cellFatherHusband.BorderWidthLeft = 0.5f;
        cellFatherHusband.BorderWidthRight = 0.2f;
        cellFatherHusband.BorderWidthTop = 0;
        cellFatherHusband.BorderWidthBottom = 0.5f;
        cellFatherHusband.PaddingLeft = 10;
        table2.AddCell(cellFatherHusband);



        PdfPCell cellFatherHusbandval = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellFatherHusbandval.HorizontalAlignment = 0;
        cellFatherHusbandval.Colspan = 0;
        cellFatherHusbandval.Border = 0;
        cellFatherHusbandval.PaddingLeft = 10;
        cellFatherHusbandval.BorderWidthLeft = 0;
        cellFatherHusbandval.BorderWidthRight = 0.9f;
        cellFatherHusbandval.BorderWidthTop = 0;
        cellFatherHusbandval.BorderWidthBottom = 0.5f;
        table2.AddCell(cellFatherHusbandval);


        PdfPCell cellSno7 = new PdfPCell(new Phrase("\n7.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno7.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        table2.AddCell(cellSno7);

        PdfPCell cellDOB = new PdfPCell(new Phrase("\nDate of Birth / Age", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDOB.HorizontalAlignment = 0;
        cellDOB.Colspan = 0;
        cellDOB.Border = 0;
        cellDOB.BorderWidthLeft = 0.5f;
        cellDOB.BorderWidthRight = 0.2f;
        cellDOB.BorderWidthTop = 0;
        cellDOB.BorderWidthBottom = 0.5f;
        cellDOB.PaddingLeft = 10;
        table2.AddCell(cellDOB);


        PdfPCell cellDOBval = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellDOBval.HorizontalAlignment = 0;
        cellDOBval.Colspan = 0;
        cellDOBval.Border = 0;
        cellDOBval.PaddingLeft = 10;
        cellDOBval.BorderWidthLeft = 0;
        cellDOBval.BorderWidthRight = 0.9f;
        cellDOBval.BorderWidthTop = 0;
        cellDOBval.BorderWidthBottom = 0.5f;
        table2.AddCell(cellDOBval);


        PdfPCell cellSno8 = new PdfPCell(new Phrase("\n8.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno8.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        table2.AddCell(cellSno8);

        PdfPCell cellDOJ = new PdfPCell(new Phrase("\nDate of His / Her entry into employment", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDOJ.HorizontalAlignment = 0;
        cellDOJ.Colspan = 0;
        cellDOJ.Border = 0;
        cellDOJ.BorderWidthLeft = 0.5f;
        cellDOJ.BorderWidthRight = 0.2f;
        cellDOJ.BorderWidthTop = 0;
        cellDOJ.BorderWidthBottom = 0.5f;
        cellDOJ.PaddingLeft = 10;
        table2.AddCell(cellDOJ);


        PdfPCell cellDOJVal = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellDOJVal.HorizontalAlignment = 0;
        cellDOJVal.Colspan = 0;
        cellDOJVal.Border = 0;
        cellDOJVal.BorderWidthLeft = 0;
        cellDOJVal.BorderWidthRight = 0.9f;
        cellDOJVal.BorderWidthTop = 0;
        cellDOJVal.BorderWidthBottom = 0.5f;
        cellDOJVal.PaddingLeft = 10;
        table2.AddCell(cellDOJVal);


        PdfPCell cellSno9 = new PdfPCell(new Phrase("\n9. ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno9.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        table2.AddCell(cellSno9);


        PdfPCell cellName21 = new PdfPCell(new Phrase("\nDesignation", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName21.HorizontalAlignment = 0;
        cellName21.Colspan = 0;
        cellName21.Border = 0;
        cellName21.BorderWidthLeft = 0.5f;
        cellName21.BorderWidthRight = 0.2f;
        cellName21.BorderWidthTop = 0;
        cellName21.BorderWidthBottom = 0.5f;
        cellName21.PaddingLeft = 10;
        table2.AddCell(cellName21);


        PdfPCell cellName20 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName20.HorizontalAlignment = 0;
        cellName20.Colspan = 0;
        cellName20.Border = 0;
        cellName20.BorderWidthLeft = 0;
        cellName20.BorderWidthRight = 0.9f;
        cellName20.BorderWidthTop = 0;
        cellName20.PaddingLeft = 10;
        cellName20.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName20);

        PdfPCell cellSno10 = new PdfPCell(new Phrase("\n10. ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno10.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        table2.AddCell(cellSno10);


        PdfPCell cellNatureofwork = new PdfPCell(new Phrase("\nNature of entrusted to him", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNatureofwork.HorizontalAlignment = 0;
        cellNatureofwork.Colspan = 0;
        cellNatureofwork.Border = 0;
        cellNatureofwork.BorderWidthLeft = 0.5f;
        cellNatureofwork.BorderWidthRight = 0.2f;
        cellNatureofwork.BorderWidthTop = 0;
        cellNatureofwork.BorderWidthBottom = 0.5f;
        cellNatureofwork.PaddingLeft = 10;
        table2.AddCell(cellNatureofwork);


        PdfPCell cellNatureofworkVal = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellNatureofworkVal.HorizontalAlignment = 0;
        cellNatureofworkVal.Colspan = 0;
        cellNatureofworkVal.Border = 0;
        cellNatureofworkVal.BorderWidthLeft = 0;
        cellNatureofworkVal.BorderWidthRight = 0.9f;
        cellNatureofworkVal.BorderWidthTop = 0;
        cellNatureofworkVal.BorderWidthBottom = 0.5f;
        cellNatureofworkVal.PaddingLeft = 10;
        table2.AddCell(cellNatureofworkVal);

        PdfPCell cellSno11 = new PdfPCell(new Phrase("\n11. ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno11.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        table2.AddCell(cellSno11);



        PdfPCell cellName14 = new PdfPCell(new Phrase("\nHis / Her serial number in the Register of Employment\n\n", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName14.HorizontalAlignment = 0;
        cellName14.Colspan = 0;
        cellName14.Border = 0;
        cellName14.BorderWidthLeft = 0.5f;
        cellName14.BorderWidthRight = 0.2f;
        cellName14.BorderWidthTop = 0;
        cellName14.BorderWidthBottom = 0.5f;
        cellName14.PaddingLeft = 10;
        table2.AddCell(cellName14);


        PdfPCell cellName15 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName15.HorizontalAlignment = 0;
        cellName15.Colspan = 0;
        cellName15.Border = 0;
        cellName15.BorderWidthLeft = 0;
        cellName15.BorderWidthRight = 0.9f;
        cellName15.BorderWidthTop = 0;
        cellName15.BorderWidthBottom = 0.5f;
        cellName15.PaddingLeft = 10;
        table2.AddCell(cellName15);

        PdfPCell cellSno12 = new PdfPCell(new Phrase("\n12. ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno12.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        table2.AddCell(cellSno12);


        PdfPCell cellName22 = new PdfPCell(new Phrase("\nRates of Wages payable to him/her as on   ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName22.HorizontalAlignment = 0;
        cellName22.Colspan = 0;
        cellName22.Border = 0;
        cellName22.BorderWidthLeft = 0.5f;
        cellName22.BorderWidthRight = 0.2f;
        cellName22.BorderWidthTop = 0;
        cellName22.BorderWidthBottom = 0.5f;
        cellName22.PaddingLeft = 10;
        table2.AddCell(cellName22);


        PdfPCell cellName29 = new PdfPCell(new Phrase("a) Basic               :  \nb) VDA               :  \nc) Other Allowances if any   : \n  TOTAL          :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName29.HorizontalAlignment = 0;
        cellName29.Colspan = 0;
        cellName29.Border = 0;
        cellName29.PaddingTop = 20;
        cellName29.PaddingBottom = 20;
        cellName29.BorderWidthLeft = 0;
        cellName29.BorderWidthRight = 0.9f;
        cellName29.BorderWidthTop = 0;
        cellName29.BorderWidthBottom = 0.5f;
        table2.AddCell(cellName29);

        PdfPCell cellSno13 = new PdfPCell(new Phrase("\n13. ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno13.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        table2.AddCell(cellSno13);


        PdfPCell cellName24 = new PdfPCell(new Phrase("\nE.S.I. Number\n\n", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName24.HorizontalAlignment = 0;
        cellName24.Colspan = 0;
        cellName24.Border = 0;
        cellName24.BorderWidthLeft = 0.5f;
        cellName24.BorderWidthRight = 0.2f;
        cellName24.BorderWidthTop = 0;
        cellName24.BorderWidthBottom = 0.5f;
        cellName24.PaddingLeft = 10;
        table2.AddCell(cellName24);

        PdfPCell cellName25 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName25.HorizontalAlignment = 0;
        cellName25.Colspan = 0;
        cellName25.Border = 0;
        cellName25.BorderWidthLeft = 0;
        cellName25.BorderWidthRight = 0.9f;
        cellName25.BorderWidthTop = 0f;
        cellName25.BorderWidthBottom = 0.5f;
        cellName25.PaddingLeft = 10;
        table2.AddCell(cellName25);

        PdfPCell cellSno14 = new PdfPCell(new Phrase("\n14. ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellSno14.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        table2.AddCell(cellSno14);

        PdfPCell cellName26 = new PdfPCell(new Phrase("\nP.F. Account Number\n\n ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName26.HorizontalAlignment = 0;
        cellName26.Colspan = 0;
        cellName26.Border = 0;
        cellName26.BorderWidthLeft = 0.5f;
        cellName26.BorderWidthRight = 0.2f;
        cellName26.BorderWidthTop = 0;
        cellName26.BorderWidthBottom = 0.5f;
        cellName26.PaddingLeft = 10;
        table2.AddCell(cellName26);

        PdfPCell cellName27 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellName27.HorizontalAlignment = 0;
        cellName27.Colspan = 0;
        cellName27.Border = 0;
        cellName27.BorderWidthLeft = 0;
        cellName27.BorderWidthRight = 0.9f;
        cellName27.BorderWidthTop = 0;
        cellName27.BorderWidthBottom = 0.5f;
        cellName27.PaddingLeft = 10;
        table2.AddCell(cellName27);

        document.Add(table2);

        PdfPTable tblFingerprints = new PdfPTable(3);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 2f, 2f };
        tblFingerprints.SetWidths(widthfinger);


        PdfPCell cellName2911 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName2911.HorizontalAlignment = 0;
        cellName2911.Colspan = 3;
        cellName2911.Border = 0;
        cellName2911.PaddingBottom = 20;
        tblFingerprints.AddCell(cellName2911);

        PdfPCell cellName291 = new PdfPCell(new Phrase("Place: ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellName291.HorizontalAlignment = 0;
        cellName291.Colspan = 1;
        cellName291.Border = 0;
        tblFingerprints.AddCell(cellName291);

        PdfPCell accpted = new PdfPCell(new Phrase("Accepted by", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        accpted.HorizontalAlignment = 1;
        accpted.Colspan = 1;
        accpted.Border = 0;
        tblFingerprints.AddCell(accpted);

        PdfPCell signaturemp = new PdfPCell(new Phrase("Signature of Employer", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        signaturemp.HorizontalAlignment = 2;
        signaturemp.Colspan = 1;
        signaturemp.Border = 0;
        tblFingerprints.AddCell(signaturemp);
        tblFingerprints.AddCell(cellName2911);
        tblFingerprints.AddCell(cellName2911);
        tblFingerprints.AddCell(cellName2911);
        tblFingerprints.AddCell(cellName2911);


        PdfPCell cellNames28 = new PdfPCell(new Phrase("Date:                                                                                    Signature of Employee\n\n", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellNames28.HorizontalAlignment = 0;
        cellNames28.Colspan = 3;
        cellNames28.BorderWidthTop = 0;
        cellNames28.BorderWidthRight = 0;
        cellNames28.BorderWidthLeft = 0;
        cellNames28.BorderWidthBottom = 0.5f;
        tblFingerprints.AddCell(cellNames28);


        document.Add(tblFingerprints);
        #endregion Basic Information of the Employee

        document.NewPage();



        string filename = "formQ.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnpoliceverification_Click(object sender, EventArgs e)
    {

        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(6);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell cellHead1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead1.HorizontalAlignment = 1;
        cellHead1.Colspan = 6;
        cellHead1.Border = 0;
        tablesnewone.AddCell(cellHead1);

        PdfPCell cellHead = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 6;
        cellHead.Border = 0;
        tablesnewone.AddCell(cellHead);

        PdfPCell cellmuster = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 13, Font.BOLD, BaseColor.BLACK)));
        cellmuster.HorizontalAlignment = 1;
        cellmuster.Colspan = 6;
        cellmuster.Border = 0;
        tablesnewone.AddCell(cellmuster);

        PdfPCell cellRule32 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellRule32.HorizontalAlignment = 1;
        cellRule32.Colspan = 6;
        cellRule32.Border = 0;
        tablesnewone.AddCell(cellRule32);


        PdfPCell cellHead2 = new PdfPCell(new Phrase("To,", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellHead2.HorizontalAlignment = 0;
        cellHead2.Colspan = 4;
        cellHead2.Border = 0;
        tablesnewone.AddCell(cellHead2);


        PdfPCell nameofmine = new PdfPCell(new Phrase("Date:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameofmine.HorizontalAlignment = 1;
        nameofmine.Colspan = 2;
        nameofmine.Border = 0;
        tablesnewone.AddCell(nameofmine);

        PdfPCell cell1 = new PdfPCell(new Phrase("     The Inspector / Sub-Inspector of Police", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell1.HorizontalAlignment = 0;
        cell1.Colspan = 6;
        cell1.Border = 0;
        tablesnewone.AddCell(cell1);

        PdfPCell cell2 = new PdfPCell(new Phrase("     .....................................", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell2.HorizontalAlignment = 0;
        cell2.Colspan = 6;
        cell2.Border = 0;
        tablesnewone.AddCell(cell2);

        PdfPCell cell3 = new PdfPCell(new Phrase("     .....................................", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell3.HorizontalAlignment = 0;
        cell3.Colspan = 6;
        cell3.Border = 0;
        tablesnewone.AddCell(cell3);

        PdfPCell slno = new PdfPCell(new Phrase("     .....................................", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno.HorizontalAlignment = 0;
        slno.Border = 0;
        slno.Colspan = 6;
        tablesnewone.AddCell(slno);

        PdfPCell names = new PdfPCell(new Phrase("Dear Sir,", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        names.HorizontalAlignment = 0;
        names.Border = 0;
        names.Colspan = 6;
        tablesnewone.AddCell(names);

        PdfPCell doc = new PdfPCell(new Phrase("Sub:Police Verification", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        doc.HorizontalAlignment = 1;
        doc.Border = 0;
        doc.Colspan = 6;
        tablesnewone.AddCell(doc);

        PdfPCell dob = new PdfPCell(new Phrase("Mr......................................Age	..............Son/Wife of Mr...................................... A resident of Village......................................, Police Station....................................., Post Office.....................................Taluk.....................................District.....................................,State.....................................has been recruited by us subject to satisfactory Police verificationas Security.....................................for our Security Department.He / She state in his / her application dated.....................................that he / she has not been involved / convicted in any criminal case nor he / she has any criminal case / record against him / her.We shall greatly appriciate, if you would kindly cause verification of the same and  advice us, as soon as possible about his / her antecedents.Please return this form after endorsing your verification report in respect of his individual either by post to the above mentioned address orthrough the individual himself.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        dob.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        dob.Border = 0;
        dob.Colspan = 6;
        dob.SetLeading(0f, 1.5f);
        dob.PaddingBottom = 10;
        tablesnewone.AddCell(dob);

        PdfPCell relation = new PdfPCell(new Phrase("Thanking you,", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        relation.Border = 0;
        relation.Colspan = 6;
        relation.PaddingBottom = 10;
        relation.HorizontalAlignment = 0;
        tablesnewone.AddCell(relation);

        PdfPCell idmarks = new PdfPCell(new Phrase("Yours faithfully", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmarks.HorizontalAlignment = 0;
        idmarks.Border = 0;
        idmarks.Colspan = 6;
        idmarks.PaddingBottom = 20;
        tablesnewone.AddCell(idmarks);



        PdfPCell reason = new PdfPCell(new Phrase("Signature of the Candidate", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        reason.HorizontalAlignment = 2;
        reason.Border = 0;
        reason.PaddingBottom = 20;
        reason.Colspan = 6;
        tablesnewone.AddCell(reason);

        PdfPCell month = new PdfPCell(new Phrase("Enrollment Officer", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        month.HorizontalAlignment = 0;
        month.Colspan = 1;
        month.Border = 0;
        month.Colspan = 6;
        tablesnewone.AddCell(month);

        document.Add(tablesnewone);
        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "Police verification.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnpfdeclaration_Click(object sender, EventArgs e)
    {
        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(6);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell cellHead1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead1.HorizontalAlignment = 1;
        cellHead1.Colspan = 6;
        cellHead1.Border = 0;

        PdfPCell cellHead = new PdfPCell(new Phrase("EPF FORM NO 11", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 6;
        cellHead.Border = 0;
        tablesnewone.AddCell(cellHead);

        PdfPCell cellmuster = new PdfPCell(new Phrase("DECLARATION UNDER PROVIDENT FUND ACT 1952 ", FontFactory.GetFont(FontStyle, 13, Font.BOLD, BaseColor.BLACK)));
        cellmuster.HorizontalAlignment = 1;
        cellmuster.Colspan = 6;
        cellmuster.Border = 0;
        tablesnewone.AddCell(cellmuster);

        PdfPCell cellRule32 = new PdfPCell(new Phrase("I.............................................Son of / Wife of / Daughter of...................................do hereby solemnly declare that:I was employed in M / s....................................................", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellRule32.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        cellRule32.Colspan = 6;
        cellRule32.SetLeading(0f, 1.5f);
        cellRule32.Border = 0;
        tablesnewone.AddCell(cellRule32);


        PdfPCell cellfullname = new PdfPCell(new Phrase("(Name&full address of the establishment) and left the service on...............prior to that, I was employed in.......................from..................to...................I was member of Provident Fund and also / but not of the Pension Fund from........to.........and my account number(s) was / were................", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfullname.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        cellfullname.Colspan = 6;
        cellfullname.Border = 0;
        cellfullname.SetLeading(0f, 1.5f);

        tablesnewone.AddCell(cellfullname);

        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);


        PdfPCell cellHead2 = new PdfPCell(new Phrase(" I was employed with the Government or in an establishment which was not covered under the Employee’s Provident Fund.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellHead2.HorizontalAlignment = 0;
        cellHead2.Colspan = 6;
        cellHead2.Border = 0;
        tablesnewone.AddCell(cellHead2);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);


        PdfPCell nameofmine = new PdfPCell(new Phrase("I have never been employed prior to above employment.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameofmine.HorizontalAlignment = 0;
        nameofmine.Colspan = 6;
        nameofmine.Border = 0;
        tablesnewone.AddCell(nameofmine);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);

        PdfPCell cell1 = new PdfPCell(new Phrase("I have / have not withdrawn the amount of Provident Fund / Pension Fund.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell1.HorizontalAlignment = 0;
        cell1.Colspan = 6;
        cell1.Border = 0;
        tablesnewone.AddCell(cell1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);

        PdfPCell cell2 = new PdfPCell(new Phrase("I have/have not drawn any superannuation benefits in respect of my past service from any employer.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell2.HorizontalAlignment = 0;
        cell2.Colspan = 6;
        cell2.Border = 0;
        tablesnewone.AddCell(cell2);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);

        PdfPCell cell3 = new PdfPCell(new Phrase("I am drawing/ not drawing Pension under EPS 95.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell3.HorizontalAlignment = 0;
        cell3.Colspan = 6;
        cell3.Border = 0;
        tablesnewone.AddCell(cell3);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);

        PdfPCell slno = new PdfPCell(new Phrase("I am a holder / not holder of Scheme Certificate.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno.HorizontalAlignment = 0;
        slno.Border = 0;
        slno.Colspan = 6;
        tablesnewone.AddCell(slno);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);

        PdfPCell names = new PdfPCell(new Phrase("Scheme Certificates Surrendered/ not Surrendered.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        names.HorizontalAlignment = 0;
        names.Border = 0;
        names.Colspan = 6;
        tablesnewone.AddCell(names);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);

        PdfPCell month = new PdfPCell(new Phrase("SIGNATURE OF THE EMPLOYEE", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        month.HorizontalAlignment = 2;
        month.Colspan = 6;
        month.Border = 0;
        tablesnewone.AddCell(month);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);



        PdfPCell idmarks = new PdfPCell(new Phrase("(To be filled by the employer only when the person employed had not already been a member of the Employees’ Provident Fund)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmarks.HorizontalAlignment = 1;
        idmarks.Border = 0;
        idmarks.Colspan = 6;
        tablesnewone.AddCell(idmarks);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);


        PdfPCell relation = new PdfPCell(new Phrase("Shri......................................is appointed as.......................................in M/s...................................................", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        relation.Border = 0;
        relation.HorizontalAlignment = 1;
        relation.Colspan = 6;
        tablesnewone.AddCell(relation);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);
        tablesnewone.AddCell(cellHead1);

        PdfPCell doc = new PdfPCell(new Phrase("Dated:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        doc.HorizontalAlignment = 0;
        doc.Border = 0;
        doc.Colspan = 3;
        tablesnewone.AddCell(doc);



        PdfPCell reason = new PdfPCell(new Phrase("Signature of the Employer/Manager\n  or other Authorised Officer", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        reason.HorizontalAlignment = 0;
        reason.Border = 0;
        reason.Colspan = 3;
        tablesnewone.AddCell(reason);


        document.Add(tablesnewone);
        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "PF Declaration.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }
    protected void btnmedicalcertificate_Click(object sender, EventArgs e)
    {
        int Fontsize = 11;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();


        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(2);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2.7f, 5.5f };
        tablesnewone.SetWidths(width);

        PdfPCell cellHead1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead1.HorizontalAlignment = 1;
        cellHead1.Colspan = 6;
        cellHead1.Border = 0;

        PdfPCell cellHead = new PdfPCell(new Phrase("MEDICAL CERTIFICATE", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 2;
        cellHead.Border = 0;
        tablesnewone.AddCell(cellHead);

        PdfPCell cellmuster = new PdfPCell(new Phrase("1) Name of the Applicant", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellmuster.HorizontalAlignment = 0;
        cellmuster.Colspan = 1;
        tablesnewone.AddCell(cellmuster);
        PdfPCell cellmuster1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellmuster1.HorizontalAlignment = 1;
        cellmuster1.Colspan = 1;
        tablesnewone.AddCell(cellmuster1);

        PdfPCell cellRule32 = new PdfPCell(new Phrase("2) Identification  Marks              1", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellRule32.HorizontalAlignment = 0;
        cellRule32.Colspan = 1;
        cellRule32.BorderWidthBottom = 0;
        cellRule32.BorderWidthLeft = .5f;
        cellRule32.BorderWidthRight = .5f;
        cellRule32.BorderWidthTop = .5f;
        tablesnewone.AddCell(cellRule32);
        PdfPCell cellfullname = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfullname.HorizontalAlignment = 0;
        cellfullname.Colspan = 1;
        tablesnewone.AddCell(cellfullname);


        PdfPCell cellHead2 = new PdfPCell(new Phrase("2", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellHead2.HorizontalAlignment = 2;
        cellHead2.Colspan = 1;
        cellHead2.BorderWidthBottom = .5f;
        cellHead2.BorderWidthLeft = .5f;
        cellHead2.BorderWidthRight = .5f;
        cellHead2.BorderWidthTop = 0;
        tablesnewone.AddCell(cellHead2);
        PdfPCell nameofmine = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameofmine.HorizontalAlignment = 0;
        nameofmine.Colspan = 1;
        tablesnewone.AddCell(nameofmine);

        document.Add(tablesnewone);

        PdfPTable table = new PdfPTable(2);
        table.TotalWidth = 500f;
        table.LockedWidth = true;
        float[] width1 = new float[] { 6f, 1f };
        table.SetWidths(width1);

        PdfPCell cell1 = new PdfPCell(new Phrase("\n3) a)	Does the applicant to the best of your judgement suffer from any defect of vision If so, has it been corrected by  suitable specticles?	", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell1.HorizontalAlignment = 0;
        cell1.Colspan = 1;
        cell1.FixedHeight = 50;
        table.AddCell(cell1);
        PdfPCell cell2 = new PdfPCell(new Phrase("\n YES/NO", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell2.HorizontalAlignment = 1;
        cell2.Colspan = 1;
        table.AddCell(cell2);

        PdfPCell cell3 = new PdfPCell(new Phrase("\n   b)	Can the applicant to the best of your judgement readily distinguish the pigmentary colours, Red and Green? ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell3.HorizontalAlignment = 0;
        cell3.Colspan = 1;
        cell3.FixedHeight = 50;
        table.AddCell(cell3);
        PdfPCell slno = new PdfPCell(new Phrase("\n YES/NO", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno.HorizontalAlignment = 1;
        slno.Colspan = 1;
        table.AddCell(slno);


        PdfPCell names = new PdfPCell(new Phrase("\n   c)	In your opinion,is he / she able to distinguish with his eye sight at a distance of 25 meters in a good day light a person?", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        names.HorizontalAlignment = 0;
        names.Colspan = 1;
        names.FixedHeight = 50;
        table.AddCell(names);
        PdfPCell month = new PdfPCell(new Phrase("\n YES/NO", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        month.HorizontalAlignment = 1;
        month.Colspan = 1;
        table.AddCell(month);



        PdfPCell idmarks = new PdfPCell(new Phrase("\n   d)	In your opinion, does the applicant suffer from a degree of deafness which would prevent his hearing the ordinary sound signals?", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmarks.HorizontalAlignment = 0;
        idmarks.Colspan = 1;
        idmarks.FixedHeight = 50;
        table.AddCell(idmarks);
        PdfPCell relation = new PdfPCell(new Phrase("\n YES/NO", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        relation.HorizontalAlignment = 1;
        relation.Colspan = 1;
        table.AddCell(relation);

        PdfPCell doc = new PdfPCell(new Phrase("\n   e)	In your opinion, does the applicant suffer from night blindness?", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        doc.HorizontalAlignment = 0;
        doc.Colspan = 1;
        doc.FixedHeight = 50;
        table.AddCell(doc);
        PdfPCell relation1 = new PdfPCell(new Phrase("\n YES/NO", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        relation1.HorizontalAlignment = 1;
        relation1.Colspan = 1;
        table.AddCell(relation1);


        PdfPCell reason = new PdfPCell(new Phrase("\n   f)	Has the applicant any defect or deformity or loss of memory which would interfere with the  efficient performance of his/ her duties as a Security Staff? If so give your reason in details", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        reason.HorizontalAlignment = 0;
        reason.FixedHeight = 60;
        reason.Colspan = 1;
        table.AddCell(reason);
        PdfPCell relation2 = new PdfPCell(new Phrase("\n YES/NO", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        relation2.HorizontalAlignment = 1;
        relation2.Colspan = 1;
        table.AddCell(relation2);




        PdfPCell reason1 = new PdfPCell(new Phrase("\n   g)	OPTIONAL:", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        reason1.HorizontalAlignment = 0;
        reason1.BorderWidthTop = .5f;
        reason1.BorderWidthRight = .5f;
        reason1.BorderWidthLeft = .5f;
        reason1.BorderWidthBottom = 0;
        reason1.Colspan = 2;
        table.AddCell(reason1);
        PdfPCell reason2 = new PdfPCell(new Phrase("      a.Blood group and RH factor of the applicant ( if the applicant desire that the information may be noted) Blood Group         RH Factor", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        reason2.HorizontalAlignment = 0;
        reason2.BorderWidthTop = 0;
        reason2.BorderWidthRight = .5f;
        reason2.BorderWidthLeft = .5f;
        reason2.BorderWidthBottom = .5f;
        reason2.Colspan = 2;
        table.AddCell(reason2);

        PdfPCell cellspace = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellspace.HorizontalAlignment = 0;
        cellspace.Border = 0;
        cellspace.Colspan = 2;
        table.AddCell(cellspace);
        table.AddCell(cellspace);
        table.AddCell(cellspace);
        table.AddCell(cellspace);
        table.AddCell(cellspace);
        table.AddCell(cellspace);
        table.AddCell(cellspace);


        PdfPCell reason3 = new PdfPCell(new Phrase("Declaration made by the applicant in Form - I as to his physical fitness is attached.", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        reason3.HorizontalAlignment = 1;
        reason3.Border = 0;
        reason3.Colspan = 2;
        table.AddCell(reason3);
        table.AddCell(cellspace);
        table.AddCell(cellspace);
        table.AddCell(cellspace);

        PdfPCell reason4 = new PdfPCell(new Phrase(" I Certify that I have personally examined the applicant............................also certify that while examining the applicant I have directed special attention to the distant vision and hearing ability, the condition of the arms, legs, hands and joint of both extremities of the candidate and, therefore I certify that to the best of my judgement, he/ she is medically fit to be employed as Security Staff.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        reason4.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        reason4.Border = 0;
        reason4.Colspan = 2;
        table.AddCell(reason4);

        table.AddCell(cellspace);
        table.AddCell(cellspace);
        table.AddCell(cellspace);
        PdfPCell doc1 = new PdfPCell(new Phrase("The applicant is not medically fit to be appointed as Security Staff for the following reasons:-", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        doc1.HorizontalAlignment = 0;
        doc1.Border = 0;
        doc1.Colspan = 2;
        table.AddCell(doc1);


        PdfPCell mt1 = new PdfPCell(new Phrase(".............................................................................................................................", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        mt1.HorizontalAlignment = 0;
        mt1.Border = 0;
        mt1.Colspan = 2;
        table.AddCell(mt1);
        PdfPCell mt2 = new PdfPCell(new Phrase("...............................................................................................................................", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        mt2.HorizontalAlignment = 0;
        mt2.Border = 0;
        mt2.Colspan = 2;
        table.AddCell(mt2);
        PdfPCell mt3 = new PdfPCell(new Phrase(".................................................................................................................................", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        mt3.HorizontalAlignment = 0;
        mt3.Border = 0;
        mt3.Colspan = 2;
        table.AddCell(mt3);
        document.Add(table);

        PdfPTable table4 = new PdfPTable(2);
        table4.TotalWidth = 500f;
        table4.LockedWidth = true;
        float[] width111 = new float[] { 1.3f, 4f };
        table4.SetWidths(width111);

        PdfPCell cellspace1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellspace1.HorizontalAlignment = 0;
        cellspace1.Border = 0;
        cellspace1.Colspan = 2;

        PdfPCell photo = new PdfPCell(new Phrase("\n\n\n\n  \n          photo", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        photo.HorizontalAlignment = 0;
        photo.FixedHeight = 140;
        photo.Colspan = 1;
        table4.AddCell(photo);

        PdfPCell sign = new PdfPCell(new Phrase("\n\n\n\n\n\n\n\n Signature\n  Name and designation of the Medical Officer / Practitioner \n Seal with Registration Number", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        sign.HorizontalAlignment = 1;
        sign.Border = 0;
        sign.Colspan = 1;
        table4.AddCell(sign);
        table4.AddCell(cellspace1);
        table4.AddCell(cellspace1);
        table4.AddCell(cellspace1);
        table4.AddCell(cellspace1);
        table4.AddCell(cellspace1);
        table4.AddCell(cellspace1);
        table4.AddCell(cellspace1);
        table4.AddCell(cellspace1);
        table4.AddCell(cellspace1); table4.AddCell(cellspace1);
        table4.AddCell(cellspace1);
        table4.AddCell(cellspace1);

        PdfPCell datea = new PdfPCell(new Phrase("Date:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        datea.HorizontalAlignment = 0;
        datea.Border = 0;
        datea.Colspan = 1;
        table4.AddCell(datea);

        PdfPCell signature = new PdfPCell(new Phrase("Signature or Thumb-impression of the Candidate", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        signature.HorizontalAlignment = 1;
        signature.Border = 0;
        signature.Colspan = 1;
        table4.AddCell(signature);

        document.Add(table4);


        document.NewPage();

        PdfPTable table1 = new PdfPTable(2);
        table1.TotalWidth = 500f;
        table1.LockedWidth = true;
        float[] width11 = new float[] { 3f, 4f };
        table1.SetWidths(width11);



        PdfPCell space = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        space.HorizontalAlignment = 0;
        space.Border = 0;
        space.Colspan = 2;
        table1.AddCell(space);



        table1.AddCell(space);
        table1.AddCell(space);
        table1.AddCell(space);
        table1.AddCell(space);
        table1.AddCell(space);
        table1.AddCell(space);




        PdfPCell note = new PdfPCell();
        Paragraph Nnote = new Paragraph();
        Nnote.Add(new Chunk("Note:", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        Nnote.Add(new Chunk("The Medical officer shall affix his signature over the photograph in a such a manner that part of his signature is upon the photograph affixed and part on the certificate.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        note.AddElement(Nnote);
        note.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        note.Colspan = 2;
        note.Border = 0;// 15;
        table1.AddCell(note);


        PdfPCell application = new PdfPCell(new Phrase("APPLICATION - CUM -DECLARATION FOR PHYSICAL FITNESS", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        application.HorizontalAlignment = 1;
        application.Border = 0;
        application.Colspan = 2;
        table1.AddCell(application);

        PdfPCell nameoftheappli = new PdfPCell(new Phrase("1) Name of the  Applicant", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameoftheappli.HorizontalAlignment = 0;
        nameoftheappli.Border = 0;
        nameoftheappli.Colspan = 1;
        table1.AddCell(nameoftheappli);
        PdfPCell nameoftheappli1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        nameoftheappli1.HorizontalAlignment = 0;
        nameoftheappli1.Border = 0;
        nameoftheappli1.Colspan = 1;
        table1.AddCell(nameoftheappli1);

        PdfPCell sonanddau = new PdfPCell(new Phrase("2) Son/Wife/Daughter of", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        sonanddau.HorizontalAlignment = 0;
        sonanddau.Border = 0;
        sonanddau.Colspan = 1;
        table1.AddCell(sonanddau);
        PdfPCell sonanddau1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        sonanddau1.HorizontalAlignment = 0;
        sonanddau1.Border = 0;
        sonanddau1.Colspan = 1;
        table1.AddCell(sonanddau1);


        PdfPCell permanent = new PdfPCell(new Phrase("3) Permanent Address", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        permanent.HorizontalAlignment = 0;
        permanent.Border = 0;
        permanent.Colspan = 2;
        table1.AddCell(permanent);
        PdfPCell permanent1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        permanent1.HorizontalAlignment = 1;
        permanent1.Border = 0;
        permanent1.Colspan = 2;
        table1.AddCell(permanent1);

        PdfPCell temporaray = new PdfPCell(new Phrase("4) Temporary / Official Address(if any)", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        temporaray.HorizontalAlignment = 0;
        temporaray.Border = 0;
        temporaray.Colspan = 1;
        table1.AddCell(temporaray);
        PdfPCell temporaray1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        temporaray1.HorizontalAlignment = 0;
        temporaray1.Border = 0;
        temporaray1.Colspan = 1;
        table1.AddCell(temporaray1);


        PdfPCell dateofbirtha = new PdfPCell(new Phrase("5) Date Of Birth", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dateofbirtha.HorizontalAlignment = 0;
        dateofbirtha.Border = 0;
        dateofbirtha.Colspan = 1;
        table1.AddCell(dateofbirtha);
        PdfPCell dateofbirth1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        dateofbirth1.HorizontalAlignment = 0;
        dateofbirth1.Border = 0;
        dateofbirth1.Colspan = 1;
        table1.AddCell(dateofbirth1);


        PdfPCell identificationmarks = new PdfPCell(new Phrase("6) Identification Marks", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        identificationmarks.HorizontalAlignment = 0;
        identificationmarks.Border = 0;
        identificationmarks.Colspan = 1;
        table1.AddCell(identificationmarks);
        PdfPCell identificationmarks1 = new PdfPCell(new Phrase("1.", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        identificationmarks1.HorizontalAlignment = 0;
        identificationmarks1.Border = 0;
        identificationmarks1.Colspan = 1;
        table1.AddCell(identificationmarks1);
        PdfPCell identificationmarks2 = new PdfPCell(new Phrase("2.", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        identificationmarks2.HorizontalAlignment = 1;
        identificationmarks2.Border = 0;
        identificationmarks2.Colspan = 2;
        identificationmarks2.PaddingRight = 57;
        identificationmarks2.PaddingBottom = 15;
        table1.AddCell(identificationmarks2);

        document.Add(table1);

        PdfPTable table2 = new PdfPTable(2);
        table2.TotalWidth = 500f;
        table2.LockedWidth = true;
        float[] width12 = new float[] { 3.5f, 0.5f };
        table2.SetWidths(width12);
        PdfPCell DECLARATION = new PdfPCell(new Phrase("DECLARATION", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        DECLARATION.HorizontalAlignment = 1;
        DECLARATION.Border = 0;
        DECLARATION.Colspan = 2;
        table2.AddCell(DECLARATION);

        PdfPCell cellaa = new PdfPCell(new Phrase("  \na)	Do you suffer from epilepsy or from sudden attacks or loss of Consciousness or Giddiness from any Cause?", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellaa.HorizontalAlignment = 0;
        cellaa.Colspan = 1;
        cellaa.FixedHeight = 50;
        table2.AddCell(cellaa);
        PdfPCell cellaa1 = new PdfPCell(new Phrase("\nYES / NO", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.BOLD, BaseColor.BLACK)));
        cellaa1.HorizontalAlignment = 0;
        cellaa1.Colspan = 1;
        table2.AddCell(cellaa1);


        PdfPCell cellab = new PdfPCell(new Phrase("\nb)	Have you Lost either hand or foot, or you suffer from any defect or musculer power or either arm or leg ?", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellab.HorizontalAlignment = 0;
        cellab.Colspan = 1;
        cellab.FixedHeight = 50;
        table2.AddCell(cellab);
        PdfPCell cellab1 = new PdfPCell(new Phrase("\nYES / NO", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.BOLD, BaseColor.BLACK)));
        cellab1.HorizontalAlignment = 0;
        cellab1.Colspan = 1;
        table2.AddCell(cellab1);

        PdfPCell cellac1 = new PdfPCell(new Phrase("\nc)	Do you suffer from night blindness?						", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellac1.HorizontalAlignment = 0;
        cellac1.Colspan = 1;
        cellac1.FixedHeight = 50;
        table2.AddCell(cellac1);
        PdfPCell cellac = new PdfPCell(new Phrase("\nYES / NO", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.BOLD, BaseColor.BLACK)));
        cellac.HorizontalAlignment = 0;
        cellac.Colspan = 1;
        table2.AddCell(cellac);


        PdfPCell cellad = new PdfPCell(new Phrase("\nd)	Are you so deaf as to hear the ordinary sound signal ?", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellad.HorizontalAlignment = 0;
        cellad.Colspan = 1;
        cellad.FixedHeight = 50;
        table2.AddCell(cellad);
        PdfPCell cellad1 = new PdfPCell(new Phrase("\nYES / NO", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.BOLD, BaseColor.BLACK)));
        cellad1.HorizontalAlignment = 0;
        cellad1.Colspan = 1;
        table2.AddCell(cellad1);


        PdfPCell cellae = new PdfPCell(new Phrase("\ne)	Do you suffer from any other disease ?", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellae.HorizontalAlignment = 0;
        cellae.Colspan = 1;
        cellae.FixedHeight = 50;
        table2.AddCell(cellae);
        PdfPCell cellae1 = new PdfPCell(new Phrase("\nYES / NO", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.BOLD, BaseColor.BLACK)));
        cellae1.HorizontalAlignment = 0;
        cellae1.Colspan = 1;
        table2.AddCell(cellae1);


        PdfPCell cellempty = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellempty.HorizontalAlignment = 0;
        cellempty.Colspan = 2;
        cellempty.FixedHeight = 50;
        table2.AddCell(cellempty);

        PdfPCell ihereby = new PdfPCell(new Phrase("	I hereby declared that to the best of  my knowledge and belief, the particulars given above and the declaration made therein are true.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        ihereby.HorizontalAlignment = 0;
        ihereby.Colspan = 2;
        ihereby.Border = 0;
        ihereby.PaddingBottom = 40;
        table2.AddCell(ihereby);


        PdfPCell impression = new PdfPCell(new Phrase("Signature or Thumb-impression of the Candidate", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        impression.HorizontalAlignment = 2;
        impression.Border = 0;
        impression.Colspan = 2;
        table2.AddCell(impression);

        document.Add(table2);

        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "Medical Certificate.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnresign_Click(object sender, EventArgs e)
    {
        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();
        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(3);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 1f, 0.1f, 4f };
        tablesnewone.SetWidths(width);

        PdfPCell cellHead1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead1.HorizontalAlignment = 1;
        cellHead1.Colspan = 2;
        cellHead1.Border = 0;

        PdfPCell cellHead = new PdfPCell(new Phrase("Date:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 2;
        cellHead.Colspan = 3;
        cellHead.Border = 0;
        tablesnewone.AddCell(cellHead);
        PdfPCell nameapplicant = new PdfPCell(new Phrase("Place:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameapplicant.HorizontalAlignment = 2;
        nameapplicant.Colspan = 3;
        nameapplicant.Border = 0;
        nameapplicant.PaddingBottom = 30;
        tablesnewone.AddCell(nameapplicant);

        PdfPCell nameapplicant1 = new PdfPCell(new Phrase("     From", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameapplicant1.HorizontalAlignment = 0;
        nameapplicant1.Colspan = 1;
        nameapplicant1.Border = 0;
        tablesnewone.AddCell(nameapplicant1);
        PdfPCell semicoloum = new PdfPCell(new Phrase(":", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        semicoloum.HorizontalAlignment = 0;
        semicoloum.Colspan = 1;
        semicoloum.Border = 0;
        tablesnewone.AddCell(semicoloum);
        PdfPCell nameapplicant11 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameapplicant11.HorizontalAlignment = 0;
        nameapplicant11.Colspan = 1;
        nameapplicant11.Border = 0;
        tablesnewone.AddCell(nameapplicant11);


        PdfPCell idmark1 = new PdfPCell(new Phrase("     Name", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmark1.HorizontalAlignment = 0;
        idmark1.Colspan = 1;
        idmark1.Border = 0;
        tablesnewone.AddCell(idmark1);
        PdfPCell semicoloum1 = new PdfPCell(new Phrase(":", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        semicoloum1.HorizontalAlignment = 0;
        semicoloum1.Colspan = 1;
        semicoloum1.Border = 0;
        tablesnewone.AddCell(semicoloum1);
        PdfPCell idmark1a = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmark1a.HorizontalAlignment = 0;
        idmark1a.Colspan = 1;
        idmark1a.Border = 0;
        tablesnewone.AddCell(idmark1a);


        PdfPCell idmark2 = new PdfPCell(new Phrase("     Unit", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmark2.HorizontalAlignment = 0;
        idmark2.Colspan = 1;
        idmark2.Border = 0;
        tablesnewone.AddCell(idmark2);
        PdfPCell semicoloum2 = new PdfPCell(new Phrase(":", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        semicoloum2.HorizontalAlignment = 0;
        semicoloum2.Colspan = 1;
        semicoloum2.Border = 0;
        tablesnewone.AddCell(semicoloum2);
        PdfPCell idmark2a = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmark2a.HorizontalAlignment = 0;
        idmark2a.Colspan = 1;
        idmark2a.Border = 0;
        tablesnewone.AddCell(idmark2a);

        PdfPCell cell3a = new PdfPCell(new Phrase("     Address", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cell3a.HorizontalAlignment = 0;
        cell3a.Colspan = 1;
        cell3a.Border = 0;
        tablesnewone.AddCell(cell3a);
        PdfPCell semicoloum3 = new PdfPCell(new Phrase(":", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        semicoloum3.HorizontalAlignment = 0;
        semicoloum3.Colspan = 1;
        semicoloum3.Border = 0;
        tablesnewone.AddCell(semicoloum3);
        PdfPCell cell3ab = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell3ab.HorizontalAlignment = 0;
        cell3ab.Colspan = 1;
        cell3ab.Border = 0;
        tablesnewone.AddCell(cell3ab);


        PdfPCell cellb = new PdfPCell(new Phrase("     Date", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellb.HorizontalAlignment = 0;
        cellb.Colspan = 1;
        cellb.Border = 0;
        tablesnewone.AddCell(cellb);
        PdfPCell semicoloum4 = new PdfPCell(new Phrase(":", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        semicoloum4.HorizontalAlignment = 0;
        semicoloum4.Colspan = 1;
        semicoloum4.Border = 0;
        tablesnewone.AddCell(semicoloum4);
        PdfPCell cellb1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellb1.HorizontalAlignment = 0;
        cellb1.Colspan = 1;
        cellb1.Border = 0;
        cellb1.PaddingBottom = 30;
        tablesnewone.AddCell(cellb1);


        PdfPCell cellc = new PdfPCell(new Phrase("To,", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellc.HorizontalAlignment = 0;
        cellc.Colspan = 3;
        cellc.Border = 0;
        tablesnewone.AddCell(cellc);
        PdfPCell cellc1 = new PdfPCell(new Phrase("The Manager", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellc1.HorizontalAlignment = 0;
        cellc1.Colspan = 3;
        cellc1.Border = 0;
        tablesnewone.AddCell(cellc1);
        PdfPCell celld = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        celld.HorizontalAlignment = 0;
        celld.Colspan = 3;
        celld.Border = 0;
        tablesnewone.AddCell(celld);
        PdfPCell celld1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        celld1.HorizontalAlignment = 0;
        celld1.Colspan = 3;
        celld1.Border = 0;
        tablesnewone.AddCell(celld1);
        PdfPCell celld2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        celld2.HorizontalAlignment = 0;
        celld2.Colspan = 3;
        celld2.Border = 0;
        tablesnewone.AddCell(celld2);


        PdfPCell dear = new PdfPCell(new Phrase("Dear  Sir,", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        dear.HorizontalAlignment = 0;
        dear.Border = 0;
        dear.Colspan = 3;
        tablesnewone.AddCell(dear);
        PdfPCell celld3 = new PdfPCell(new Phrase("	Subject: Resignation for my present post.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celld3.HorizontalAlignment = 1;
        celld3.Colspan = 3;
        celld3.Border = 0;
        celld3.PaddingBottom = 20;
        tablesnewone.AddCell(celld3);


        PdfPCell celle = new PdfPCell(new Phrase(" I hereby tender my resignation from the Organisation with effect from.....................................\n due to my personal reasons.Kindly accept my resignation and settle my accounts.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        celle.HorizontalAlignment = 0;
        celle.Colspan = 3;
        celle.Border = 0;
        celle.PaddingBottom = 20;
        tablesnewone.AddCell(celle);


        PdfPCell celle1 = new PdfPCell(new Phrase("Thanking you,", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celle1.HorizontalAlignment = 0;
        celle1.Colspan = 3;
        celle1.Border = 0;
        tablesnewone.AddCell(celle1);
        PdfPCell cellf = new PdfPCell(new Phrase("Yours faithfully", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellf.HorizontalAlignment = 0;
        cellf.Colspan = 3;
        cellf.Border = 0;
        cellf.PaddingBottom = 40;
        tablesnewone.AddCell(cellf);




        PdfPCell cellf1 = new PdfPCell(new Phrase("Name of the employee", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellf1.HorizontalAlignment = 0;
        cellf1.Colspan = 3;
        cellf1.Border = 0;
        tablesnewone.AddCell(cellf1);
        PdfPCell slno = new PdfPCell(new Phrase("Token Number", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno.HorizontalAlignment = 0;
        slno.Border = 0;
        slno.Colspan = 3;
        tablesnewone.AddCell(slno);


        document.Add(tablesnewone);



        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "Resign.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }
    protected void btnb2_Click(object sender, EventArgs e)
    {
        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();
        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(4);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 0.3f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell cellHead1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead1.HorizontalAlignment = 1;
        cellHead1.Colspan = 2;
        cellHead1.Border = 0;

        PdfPCell cellHead = new PdfPCell(new Phrase("EMPLOYMENT OF GRATUITY (CENTRAL) RULES 1972", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 4;
        cellHead.Border = 0;
        tablesnewone.AddCell(cellHead);
        PdfPCell nameapplicant = new PdfPCell(new Phrase("STATEMENT", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        nameapplicant.HorizontalAlignment = 1;
        nameapplicant.Colspan = 4;
        nameapplicant.Border = 0;
        nameapplicant.PaddingBottom = 30;
        tablesnewone.AddCell(nameapplicant);
        PdfPCell nameapplicant1 = new PdfPCell(new Phrase("See Sub, Rule (1) of Rule 6", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        nameapplicant1.HorizontalAlignment = 1;
        nameapplicant1.Colspan = 4;
        nameapplicant1.Border = 0;
        tablesnewone.AddCell(nameapplicant1);
        PdfPCell semicoloum = new PdfPCell(new Phrase("Nomination", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        semicoloum.HorizontalAlignment = 1;
        semicoloum.Colspan = 4;
        semicoloum.Border = 0;
        tablesnewone.AddCell(semicoloum);




        PdfPCell nameapplicant11 = new PdfPCell(new Phrase("To,", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameapplicant11.HorizontalAlignment = 0;
        nameapplicant11.Colspan = 4;
        nameapplicant11.Border = 0;
        tablesnewone.AddCell(nameapplicant11);
        PdfPCell idmark1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmark1.HorizontalAlignment = 0;
        idmark1.Colspan = 4;
        idmark1.Border = 0;
        tablesnewone.AddCell(idmark1);
        PdfPCell semicoloum1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        semicoloum1.HorizontalAlignment = 0;
        semicoloum1.Colspan = 4;
        semicoloum1.Border = 0;
        tablesnewone.AddCell(semicoloum1);
        PdfPCell idmark1a = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmark1a.HorizontalAlignment = 0;
        idmark1a.Colspan = 4;
        idmark1a.Border = 0;
        tablesnewone.AddCell(idmark1a);



        PdfPCell idmark2 = new PdfPCell(new Phrase("1.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmark2.HorizontalAlignment = 0;
        idmark2.Colspan = 1;
        idmark2.Border = 0;
        tablesnewone.AddCell(idmark2);
        PdfPCell idmark21 = new PdfPCell(new Phrase("Shri /Smt/Kumari				                                 whose particulars are given in the statementbelow,here by nominate the person(s) mentioned below to receive the gratuity payable after my death as also the gratuity standing to my credit in the event of my death before that amount has become payable has not been paid and direct that said amount shall be paid in proportion indicated against the name(s) othe nominee(s).\n I here certify that the person(s) mentioned is/are members of my family within the meaning of clause (h) of section 2 of the payment of gratuity Act 1972.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmark21.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        idmark21.Colspan = 3;
        idmark21.SetLeading(0f, 1.5f);
        idmark21.Border = 0;
        tablesnewone.AddCell(idmark21);


        PdfPCell semicoloum2 = new PdfPCell(new Phrase("2.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        semicoloum2.HorizontalAlignment = 0;
        semicoloum2.Colspan = 1;
        semicoloum2.Border = 0;
        tablesnewone.AddCell(semicoloum2);
        PdfPCell idmark2a = new PdfPCell(new Phrase("2 of The Payment of gratuity Act 1972.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmark2a.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        idmark2a.Colspan = 3;
        idmark2a.Border = 0;
        tablesnewone.AddCell(idmark2a);

        PdfPCell cell3a = new PdfPCell(new Phrase("3.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cell3a.HorizontalAlignment = 0;
        cell3a.Colspan = 1;
        cell3a.Border = 0;
        tablesnewone.AddCell(cell3a);
        PdfPCell semicoloum3 = new PdfPCell(new Phrase("I hereby declare that I have no family within the meaning of clause(h) of section 2 of the said act.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        semicoloum3.HorizontalAlignment = 0;
        semicoloum3.Colspan = 3;
        semicoloum3.Border = 0;
        semicoloum3.SetLeading(0f, 1.5f);
        tablesnewone.AddCell(semicoloum3);


        PdfPCell cellc = new PdfPCell(new Phrase("4.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellc.HorizontalAlignment = 0;
        cellc.Colspan = 1;
        cellc.Border = 0;
        tablesnewone.AddCell(cellc);
        PdfPCell cellc1 = new PdfPCell(new Phrase("A) My father/Mother/Parents are not dependent on me.\nB) My husbands Father/Mother/Parents are not dependent on my husband.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellc1.HorizontalAlignment = 0;
        cellc1.Colspan = 3;
        cellc1.Border = 0;
        cellc1.SetLeading(0f, 1.5f);
        tablesnewone.AddCell(cellc1);



        PdfPCell cell3ab = new PdfPCell(new Phrase("5.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cell3ab.HorizontalAlignment = 0;
        cell3ab.Colspan = 1;
        cell3ab.Border = 0;
        tablesnewone.AddCell(cell3ab);
        PdfPCell cellb = new PdfPCell(new Phrase("I have excluded my husband from my family by a notice date theto the controlling authority in terms of the provisions to claus(h) clause (h) of section 2 of the said Act.", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellb.HorizontalAlignment = 0;
        cellb.Colspan = 3;
        cellb.Border = 0;
        cellb.SetLeading(0f, 1.5f);
        tablesnewone.AddCell(cellb);

        PdfPCell semicoloum4 = new PdfPCell(new Phrase("6.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        semicoloum4.HorizontalAlignment = 0;
        semicoloum4.Colspan = 1;
        semicoloum4.Border = 0;
        tablesnewone.AddCell(semicoloum4);
        PdfPCell cellb1 = new PdfPCell(new Phrase("Nomination made herein invalidates my previous nominations.", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellb1.HorizontalAlignment = 0;
        cellb1.Colspan = 3;
        cellb1.Border = 0;
        cellb1.PaddingBottom = 20;
        tablesnewone.AddCell(cellb1);

        document.Add(tablesnewone);

        PdfPTable table = new PdfPTable(4);
        table.TotalWidth = 500f;
        table.LockedWidth = true;
        float[] width1 = new float[] { 2f, 2f, 2f, 2f };
        table.SetWidths(width1);

        PdfPCell celld = new PdfPCell(new Phrase("Name in full with Full  Address of Nominee(S)", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        celld.HorizontalAlignment = 0;
        celld.Colspan = 1;
        table.AddCell(celld);
        PdfPCell celld1 = new PdfPCell(new Phrase("Relationship With the employee", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        celld1.HorizontalAlignment = 0;
        celld1.Colspan = 1;
        table.AddCell(celld1);
        PdfPCell celld2 = new PdfPCell(new Phrase("Age of nominee", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        celld2.HorizontalAlignment = 0;
        celld2.Colspan = 1;
        table.AddCell(celld2);
        PdfPCell dear = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        dear.HorizontalAlignment = 0;
        dear.Colspan = 1;
        table.AddCell(dear);



        PdfPCell celld3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celld3.HorizontalAlignment = 1;
        celld3.Colspan = 1;
        celld3.FixedHeight = 120;
        table.AddCell(celld3);
        PdfPCell celle = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        celle.HorizontalAlignment = 0;
        celle.Colspan = 1;
        table.AddCell(celle);
        PdfPCell celle1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        celle1.HorizontalAlignment = 0;
        celle1.Colspan = 1;
        table.AddCell(celle1);
        PdfPCell cellf = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cellf.HorizontalAlignment = 0;
        cellf.Colspan = 1;
        table.AddCell(cellf);

        document.Add(table);
        //,---........................


        PdfPTable table2 = new PdfPTable(4);
        table2.TotalWidth = 500f;
        table2.LockedWidth = true;
        float[] width2 = new float[] { 0.3f, 3.5f, 2f, 2f };
        table2.SetWidths(width2);

        PdfPCell empty12 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty12.HorizontalAlignment = 0;
        empty12.Colspan = 4;
        empty12.Border = 0;
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);

        PdfPCell cellInsuranceno2 = new PdfPCell(new Phrase("1.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellInsuranceno2.HorizontalAlignment = 0;
        cellInsuranceno2.Colspan = 1;
        cellInsuranceno2.Border = 0;
        table2.AddCell(cellInsuranceno2);
        PdfPCell cellInsuranceno4 = new PdfPCell(new Phrase("Name Of the Employee full", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellInsuranceno4.HorizontalAlignment = 0;
        cellInsuranceno4.Colspan = 1;
        cellInsuranceno4.Border = 0;
        table2.AddCell(cellInsuranceno4);
        PdfPCell cellInsuranceno3 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellInsuranceno3.HorizontalAlignment = 0;
        cellInsuranceno3.Colspan = 2;
        cellInsuranceno3.Border = 0;
        //cellInsuranceno3.PaddingBottom = 20;
        table2.AddCell(cellInsuranceno3);


        PdfPCell cellspace4 = new PdfPCell(new Phrase("2.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellspace4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        cellspace4.Colspan = 1;
        cellspace4.Border = 0;
        table2.AddCell(cellspace4);
        PdfPCell cellname2 = new PdfPCell(new Phrase("Sex", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname2.HorizontalAlignment = 0;
        cellname2.Colspan = 1;
        cellname2.Border = 0;
        table2.AddCell(cellname2);
        PdfPCell cellname4 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname4.HorizontalAlignment = 0;
        cellname4.Colspan = 2;
        cellname4.Border = 0;
        table2.AddCell(cellname4);

        PdfPCell cellspace41 = new PdfPCell(new Phrase("3.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellspace41.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        cellspace41.Colspan = 1;
        cellspace41.Border = 0;
        table2.AddCell(cellspace41);
        PdfPCell cellname21 = new PdfPCell(new Phrase("Religion", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname21.HorizontalAlignment = 0;
        cellname21.Colspan = 1;
        cellname21.Border = 0;
        table2.AddCell(cellname21);
        PdfPCell cellname41 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname41.HorizontalAlignment = 0;
        cellname41.Colspan = 2;
        cellname41.Border = 0;
        table2.AddCell(cellname41);


        PdfPCell cellfather = new PdfPCell(new Phrase("4.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfather.HorizontalAlignment = 0;
        cellfather.Colspan = 1;
        cellfather.Border = 0;
        table2.AddCell(cellfather);
        PdfPCell cellname3 = new PdfPCell(new Phrase("Marital Status", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname3.HorizontalAlignment = 0;
        cellname3.Colspan = 1;
        cellname3.Border = 0;
        table2.AddCell(cellname3);
        PdfPCell cellfather1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfather1.HorizontalAlignment = 0;
        cellfather1.Colspan = 2;
        cellfather1.Border = 0;
        table2.AddCell(cellfather1);


        PdfPCell cellfather3 = new PdfPCell(new Phrase("5.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfather3.HorizontalAlignment = 0;
        cellfather3.Colspan = 1;
        cellfather3.Border = 0;
        table2.AddCell(cellfather3);
        PdfPCell cellDateofbirth = new PdfPCell(new Phrase("Department/Branch/Section", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDateofbirth.HorizontalAlignment = 0;
        cellDateofbirth.Colspan = 1;
        cellDateofbirth.Border = 0;
        table2.AddCell(cellDateofbirth);
        PdfPCell cellDateofbirth2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDateofbirth2.HorizontalAlignment = 0;
        cellDateofbirth2.Colspan = 2;
        cellDateofbirth2.Border = 0;
        table2.AddCell(cellDateofbirth2);



        PdfPCell Maritalstatus = new PdfPCell(new Phrase("7.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Maritalstatus.HorizontalAlignment = 0;
        Maritalstatus.Colspan = 1;
        Maritalstatus.Border = 0;
        table2.AddCell(Maritalstatus);
        PdfPCell cellDateofbirth1 = new PdfPCell(new Phrase("Date of Appointment", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDateofbirth1.HorizontalAlignment = 0;
        cellDateofbirth1.Colspan = 1;
        cellDateofbirth1.Border = 0;
        table2.AddCell(cellDateofbirth1);
        PdfPCell Maritalstatus2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Maritalstatus2.HorizontalAlignment = 0;
        Maritalstatus2.Colspan = 2;
        Maritalstatus2.Border = 0;
        table2.AddCell(Maritalstatus2);


        PdfPCell Maritalstatus1 = new PdfPCell(new Phrase("8.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Maritalstatus1.HorizontalAlignment = 0;
        Maritalstatus1.Colspan = 1;
        Maritalstatus1.Border = 0;
        table2.AddCell(Maritalstatus1);
        PdfPCell perminent = new PdfPCell(new Phrase("Permanent Address", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        perminent.HorizontalAlignment = 0;
        perminent.Colspan = 1;
        perminent.Border = 0;
        table2.AddCell(perminent);
        PdfPCell village = new PdfPCell(new Phrase("Village :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        village.HorizontalAlignment = 0;
        village.Colspan = 1;
        village.Border = 0;
        table2.AddCell(village);
        PdfPCell taluka = new PdfPCell(new Phrase("Taluk   :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        taluka.HorizontalAlignment = 0;
        taluka.Colspan = 1;
        taluka.Border = 0;
        table2.AddCell(taluka);


        PdfPCell district11 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        district11.HorizontalAlignment = 0;
        district11.Colspan = 1;
        district11.Border = 0;
        table2.AddCell(district11);
        PdfPCell post = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        post.HorizontalAlignment = 0;
        post.Colspan = 1;
        post.Border = 0;
        table2.AddCell(post);
        PdfPCell district1 = new PdfPCell(new Phrase("Post     :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        district1.HorizontalAlignment = 0;
        district1.Colspan = 1;
        district1.Border = 0;
        table2.AddCell(district1);
        PdfPCell district = new PdfPCell(new Phrase("District :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        district.HorizontalAlignment = 0;
        district.Colspan = 1;
        district.Border = 0;
        table2.AddCell(district);

        PdfPCell empty = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty.HorizontalAlignment = 0;
        empty.Colspan = 1;
        empty.Border = 0;
        table2.AddCell(empty);
        PdfPCell empty1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty1.HorizontalAlignment = 0;
        empty1.Colspan = 1;
        empty1.Border = 0;
        table2.AddCell(empty1);
        PdfPCell policestn = new PdfPCell(new Phrase("P. Stn  : ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        policestn.HorizontalAlignment = 0;
        policestn.Colspan = 1;
        policestn.Border = 0;
        table2.AddCell(policestn);
        PdfPCell star = new PdfPCell(new Phrase("State    :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        star.HorizontalAlignment = 0;
        star.Colspan = 1;
        star.Border = 0;
        table2.AddCell(star);


        PdfPCell Hobli = new PdfPCell(new Phrase("          Hobli    :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Hobli.HorizontalAlignment = 1;
        Hobli.Colspan = 4;
        Hobli.Border = 0;
        table2.AddCell(Hobli);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);
        table2.AddCell(empty12);

        PdfPCell datesd = new PdfPCell(new Phrase("Date:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        datesd.HorizontalAlignment = 0;
        datesd.Colspan = 2;
        datesd.Border = 0;
        table2.AddCell(datesd);
        PdfPCell sign = new PdfPCell(new Phrase("Signature/ Thumb impression of The Employee", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        sign.HorizontalAlignment = 2;
        sign.Colspan = 2;
        sign.Border = 0;
        table2.AddCell(sign);






        document.Add(table2);
        //page 2nd
        document.NewPage();
        PdfPTable table3 = new PdfPTable(4);
        table3.TotalWidth = 500f;
        table3.LockedWidth = true;
        float[] width3 = new float[] { 2f, 2f, 2f, 2f };
        table3.SetWidths(width3);


        PdfPCell declaration = new PdfPCell(new Phrase("DECLARATION BY WITNESS", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        declaration.HorizontalAlignment = 0;
        declaration.Colspan = 4;
        declaration.Border = 0;
        table3.AddCell(declaration);

        PdfPCell namenominee = new PdfPCell(new Phrase("Name in full with address of witness", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        namenominee.HorizontalAlignment = 0;
        namenominee.Colspan = 2;
        namenominee.Border = 0;
        table3.AddCell(namenominee);
        PdfPCell signata = new PdfPCell(new Phrase("Signature of wintness", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        signata.HorizontalAlignment = 2;
        signata.Colspan = 2;
        signata.Border = 0;
        table3.AddCell(signata);


        PdfPCell namenominee1 = new PdfPCell(new Phrase("1.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        namenominee1.HorizontalAlignment = 0;
        namenominee1.Colspan = 4;
        namenominee1.Border = 0;
        namenominee1.PaddingBottom = 25;
        table3.AddCell(namenominee1);
        PdfPCell namenominee2 = new PdfPCell(new Phrase("2.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        namenominee2.HorizontalAlignment = 0;
        namenominee2.Colspan = 4;
        namenominee2.Border = 0;
        namenominee2.PaddingBottom = 25;
        table3.AddCell(namenominee2);

        PdfPCell places = new PdfPCell(new Phrase("Place:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        places.HorizontalAlignment = 0;
        places.Colspan = 4;
        places.Border = 0;
        table3.AddCell(places);
        PdfPCell ddate = new PdfPCell(new Phrase("Date:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        ddate.HorizontalAlignment = 0;
        ddate.Colspan = 4;
        ddate.Border = 0;
        ddate.PaddingBottom = 25;
        table3.AddCell(ddate);

        PdfPCell ddate14 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        ddate14.HorizontalAlignment = 0;
        ddate14.Colspan = 4;
        ddate14.BorderWidthBottom = 0;
        ddate14.BorderWidthLeft = 0;
        ddate14.BorderWidthRight = 0;
        ddate14.BorderWidthTop = .5f;
        table3.AddCell(ddate14);




        PdfPCell CERTIFICATE = new PdfPCell(new Phrase("CERTIFICATE BY THE EMPLOYER", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        CERTIFICATE.HorizontalAlignment = 0;
        CERTIFICATE.Colspan = 4;
        CERTIFICATE.Border = 0;
        table3.AddCell(CERTIFICATE);
        PdfPCell Certified = new PdfPCell(new Phrase("Certified that thte particulars of the above nomination have been verified and recovered in this establishment", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Certified.HorizontalAlignment = 0;
        Certified.Colspan = 4;
        Certified.Border = 0;
        table3.AddCell(Certified);


        PdfPCell Reference = new PdfPCell(new Phrase("Employers Reference Number if any", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Reference.HorizontalAlignment = 0;
        Reference.Colspan = 4;
        Reference.Border = 0;
        Reference.PaddingBottom = 25;
        table3.AddCell(Reference);

        PdfPCell Designation = new PdfPCell(new Phrase("Designation", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Designation.HorizontalAlignment = 0;
        Designation.Colspan = 4;
        Designation.Border = 0;
        Designation.PaddingBottom = 40;
        table3.AddCell(Designation);

        PdfPCell dater = new PdfPCell(new Phrase("Date", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        dater.HorizontalAlignment = 0;
        dater.Colspan = 2;
        dater.Border = 0;
        table3.AddCell(dater);

        PdfPCell Officer = new PdfPCell(new Phrase("Signature of the Employer Officer Authority", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Officer.HorizontalAlignment = 2;
        Officer.Colspan = 2;
        Officer.Border = 0;
        Officer.PaddingBottom = 25;
        table3.AddCell(Officer);



        PdfPCell ACKNOWLEDGEMENT = new PdfPCell(new Phrase("ACKNOWLEDGEMENT BY THE EMPLOYEE", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        ACKNOWLEDGEMENT.HorizontalAlignment = 1;
        ACKNOWLEDGEMENT.Colspan = 4;
        ACKNOWLEDGEMENT.Border = 0;
        table3.AddCell(ACKNOWLEDGEMENT);
        PdfPCell ddate141 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        ddate141.HorizontalAlignment = 0;
        ddate141.Colspan = 4;
        ddate141.BorderWidthBottom = 0;
        ddate141.BorderWidthLeft = 0;
        ddate141.BorderWidthRight = 0;
        ddate141.BorderWidthTop = .5f;
        table3.AddCell(ddate141);


        PdfPCell establishment = new PdfPCell(new Phrase("Name and address of the establishment  of rubber stamp thereofReceived the duplicate copy of nomination from F filled by and duly verified by the employer.", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        establishment.HorizontalAlignment = 1;
        establishment.Colspan = 4;
        establishment.Border = 0;
        establishment.PaddingBottom = 40;
        table3.AddCell(establishment);


        PdfPCell ddate15 = new PdfPCell(new Phrase("Date", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        ddate15.HorizontalAlignment = 0;
        ddate15.Colspan = 2;
        ddate15.Border = 0;
        table3.AddCell(ddate15);

        PdfPCell Signature = new PdfPCell(new Phrase("Signature of the employee", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Signature.HorizontalAlignment = 2;
        Signature.Colspan = 2;
        Signature.Border = 0;
        Signature.PaddingBottom = 40;

        table3.AddCell(Signature);


        PdfPCell Stikeout = new PdfPCell(new Phrase("Stikeout the whichever is no applicable", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        Stikeout.HorizontalAlignment = 1;
        Stikeout.Colspan = 4;
        Stikeout.Border = 0;
        table3.AddCell(Stikeout);

        document.Add(table3);






        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "B2 Form.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }
    protected void btnb5_Click(object sender, EventArgs e)
    {
        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();
        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(4);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell cellHead1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead1.HorizontalAlignment = 1;
        cellHead1.Colspan = 2;
        cellHead1.Border = 0;




        PdfPTable table2 = new PdfPTable(4);
        table2.TotalWidth = 500f;
        table2.LockedWidth = true;
        float[] width2 = new float[] { 2f, 0.5f, 2f, 2f };
        table2.SetWidths(width2);

        PdfPCell cellHead = new PdfPCell(new Phrase("EMPLOYEE BACKGROUND AND ADDRESS VERIFICATION", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 4;
        cellHead.Border = 0;
        cellHead.PaddingBottom = 40;
        table2.AddCell(cellHead);



        PdfPCell space = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        space.HorizontalAlignment = 0;
        space.Colspan = 4;
        space.Border = 0;

        PdfPCell cellInsuranceno4 = new PdfPCell(new Phrase("Name", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellInsuranceno4.HorizontalAlignment = 0;
        cellInsuranceno4.Colspan = 1;
        cellInsuranceno4.Border = 0;
        table2.AddCell(cellInsuranceno4);
        PdfPCell cellInsuranceno2 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellInsuranceno2.HorizontalAlignment = 0;
        cellInsuranceno2.Colspan = 1;
        cellInsuranceno2.Border = 0;
        table2.AddCell(cellInsuranceno2);
        PdfPCell cellInsuranceno3 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellInsuranceno3.HorizontalAlignment = 0;
        cellInsuranceno3.Colspan = 2;
        cellInsuranceno3.Border = 0;
        cellInsuranceno3.PaddingTop = 5;
        table2.AddCell(cellInsuranceno3);
        table2.AddCell(space);
        table2.AddCell(space);


        PdfPCell cellspace4 = new PdfPCell(new Phrase("Father's Name", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellspace4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        cellspace4.Colspan = 1;
        cellspace4.Border = 0;
        table2.AddCell(cellspace4);
        PdfPCell cellname2 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname2.HorizontalAlignment = 0;
        cellname2.Colspan = 1;
        cellname2.Border = 0;
        table2.AddCell(cellname2);
        PdfPCell cellname4 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname4.HorizontalAlignment = 0;
        cellname4.Colspan = 2;
        cellname4.Border = 0;
        table2.AddCell(cellname4);
        table2.AddCell(space);
        table2.AddCell(space);

        PdfPCell cellspace41 = new PdfPCell(new Phrase("Employee No.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellspace41.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        cellspace41.Colspan = 1;
        cellspace41.Border = 0;
        table2.AddCell(cellspace41);
        PdfPCell cellname21 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname21.HorizontalAlignment = 0;
        cellname21.Colspan = 1;
        cellname21.Border = 0;
        table2.AddCell(cellname21);
        PdfPCell cellname41 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname41.HorizontalAlignment = 0;
        cellname41.Colspan = 2;
        cellname41.Border = 0;
        table2.AddCell(cellname41);
        table2.AddCell(space);
        table2.AddCell(space);


        PdfPCell cellfather = new PdfPCell(new Phrase("Designation", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfather.HorizontalAlignment = 0;
        cellfather.Colspan = 1;
        cellfather.Border = 0;
        table2.AddCell(cellfather);
        PdfPCell cellname3 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellname3.HorizontalAlignment = 0;
        cellname3.Colspan = 1;
        cellname3.Border = 0;
        table2.AddCell(cellname3);
        PdfPCell cellfather1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfather1.HorizontalAlignment = 0;
        cellfather1.Colspan = 2;
        cellfather1.Border = 0;
        table2.AddCell(cellfather1);
        table2.AddCell(space);
        table2.AddCell(space);



        PdfPCell perminent = new PdfPCell(new Phrase("Verified Address", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        perminent.HorizontalAlignment = 0;
        perminent.Colspan = 1;
        perminent.Border = 0;
        table2.AddCell(perminent);
        PdfPCell Maritalstatus1 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Maritalstatus1.HorizontalAlignment = 0;
        Maritalstatus1.Colspan = 1;
        Maritalstatus1.Border = 0;
        table2.AddCell(Maritalstatus1);
        PdfPCell village = new PdfPCell(new Phrase("Village :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        village.HorizontalAlignment = 0;
        village.Colspan = 1;
        village.Border = 0;
        table2.AddCell(village);
        PdfPCell taluka = new PdfPCell(new Phrase("Post :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        taluka.HorizontalAlignment = 0;
        taluka.Colspan = 1;
        taluka.Border = 0;
        table2.AddCell(taluka);


        PdfPCell district11 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        district11.HorizontalAlignment = 0;
        district11.Colspan = 1;
        district11.Border = 0;
        table2.AddCell(district11);
        PdfPCell post = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        post.HorizontalAlignment = 0;
        post.Colspan = 1;
        post.Border = 0;
        table2.AddCell(post);
        PdfPCell district1 = new PdfPCell(new Phrase("p.stn :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        district1.HorizontalAlignment = 0;
        district1.Colspan = 1;
        district1.Border = 0;
        table2.AddCell(district1);
        PdfPCell district = new PdfPCell(new Phrase("Hobli :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        district.HorizontalAlignment = 0;
        district.Colspan = 1;
        district.Border = 0;
        table2.AddCell(district);

        PdfPCell empty = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty.HorizontalAlignment = 0;
        empty.Colspan = 1;
        empty.Border = 0;
        table2.AddCell(empty);
        PdfPCell empty1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty1.HorizontalAlignment = 0;
        empty1.Colspan = 1;
        empty1.Border = 0;
        table2.AddCell(empty1);
        PdfPCell policestn = new PdfPCell(new Phrase("Taluk :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        policestn.HorizontalAlignment = 0;
        policestn.Colspan = 1;
        policestn.Border = 0;
        table2.AddCell(policestn);
        PdfPCell star = new PdfPCell(new Phrase("District :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        star.HorizontalAlignment = 0;
        star.Colspan = 1;
        star.Border = 0;
        table2.AddCell(star);


        PdfPCell Hobli = new PdfPCell(new Phrase("                                                      Sate :", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Hobli.HorizontalAlignment = 0;
        Hobli.Colspan = 4;
        Hobli.Border = 0;
        table2.AddCell(Hobli);
        table2.AddCell(space);
        table2.AddCell(space);



        PdfPCell cellfather3 = new PdfPCell(new Phrase("Reference", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfather3.HorizontalAlignment = 0;
        cellfather3.Colspan = 1;
        cellfather3.Border = 0;
        table2.AddCell(cellfather3);
        PdfPCell cellDateofbirth = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDateofbirth.HorizontalAlignment = 0;
        cellDateofbirth.Colspan = 1;
        cellDateofbirth.Border = 0;
        table2.AddCell(cellDateofbirth);
        PdfPCell cellDateofbirth2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDateofbirth2.HorizontalAlignment = 0;
        cellDateofbirth2.Colspan = 2;
        cellDateofbirth2.Border = 0;
        table2.AddCell(cellDateofbirth2);
        table2.AddCell(space);
        table2.AddCell(space);



        PdfPCell Maritalstatus = new PdfPCell(new Phrase("Comments", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Maritalstatus.HorizontalAlignment = 0;
        Maritalstatus.Colspan = 1;
        Maritalstatus.Border = 0;
        table2.AddCell(Maritalstatus);
        PdfPCell cellDateofbirth1 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDateofbirth1.HorizontalAlignment = 0;
        cellDateofbirth1.Colspan = 1;
        cellDateofbirth1.Border = 0;
        table2.AddCell(cellDateofbirth1);
        PdfPCell Maritalstatus2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Maritalstatus2.HorizontalAlignment = 0;
        Maritalstatus2.Colspan = 2;
        Maritalstatus2.Border = 0;
        table2.AddCell(Maritalstatus2);
        table2.AddCell(space);
        table2.AddCell(space);




        PdfPCell datesd = new PdfPCell(new Phrase("Police Station", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        datesd.HorizontalAlignment = 0;
        datesd.Colspan = 1;
        datesd.Border = 0;
        table2.AddCell(datesd);
        PdfPCell sign = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        sign.HorizontalAlignment = 0;
        sign.Colspan = 1;
        sign.Border = 0;
        table2.AddCell(sign);

        PdfPCell sign123 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        sign123.HorizontalAlignment = 0;
        sign123.Colspan = 2;
        sign123.Border = 0;
        table2.AddCell(sign123);
        table2.AddCell(space);
        table2.AddCell(space);


        PdfPCell declaration = new PdfPCell(new Phrase("Background verified", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        declaration.HorizontalAlignment = 0;
        declaration.Colspan = 1;
        declaration.Border = 0;
        table2.AddCell(declaration);
        PdfPCell signat = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        signat.HorizontalAlignment = 0;
        signat.Colspan = 1;
        signat.Border = 0;
        table2.AddCell(signat);
        PdfPCell namenominee = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        namenominee.HorizontalAlignment = 0;
        namenominee.Colspan = 2;
        namenominee.Border = 0;
        table2.AddCell(namenominee);

        document.Add(table2);


        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "B5 Form.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }



    protected void btnfinsettle_Click(object sender, EventArgs e)
    {
        int Fontsize = 11;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();
        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(4);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 2f, 2f, 2f, 2f };
        tablesnewone.SetWidths(width);

        PdfPCell cellHead1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead1.HorizontalAlignment = 1;
        cellHead1.Colspan = 2;
        cellHead1.Border = 0;




        PdfPTable table2 = new PdfPTable(5);
        table2.TotalWidth = 500f;
        table2.LockedWidth = true;
        float[] width2 = new float[] { 0.5f, 3f, 0.3f, 3f, 2.5f };
        table2.SetWidths(width2);

        PdfPCell cellHead = new PdfPCell(new Phrase("FORM OF FINAL SETTLEMENT", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 5;
        cellHead.Border = 0;
        cellHead.PaddingBottom = 40;
        table2.AddCell(cellHead);


        PdfPCell space = new PdfPCell(new Phrase("Remarks", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        space.HorizontalAlignment = 2;
        space.Colspan = 5;
        space.Border = 0;
        space.PaddingRight = 50;
        table2.AddCell(space);
        PdfPCell slno1 = new PdfPCell(new Phrase("1", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno1.HorizontalAlignment = 0;
        slno1.Colspan = 1;
        slno1.Border = 0;
        table2.AddCell(slno1);
        PdfPCell cellInsuranceno4 = new PdfPCell(new Phrase("STAFF NO", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellInsuranceno4.HorizontalAlignment = 0;
        cellInsuranceno4.Colspan = 1;
        cellInsuranceno4.Border = 0;
        table2.AddCell(cellInsuranceno4);
        PdfPCell cellInsuranceno2 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellInsuranceno2.HorizontalAlignment = 0;
        cellInsuranceno2.Colspan = 1;
        cellInsuranceno2.Border = 0;
        table2.AddCell(cellInsuranceno2);
        PdfPCell cellInsuranceno3 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellInsuranceno3.HorizontalAlignment = 0;
        cellInsuranceno3.Colspan = 1;
        // cellInsuranceno3.Border = 0;
        table2.AddCell(cellInsuranceno3);
        PdfPCell cellInsuranceno31 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellInsuranceno31.HorizontalAlignment = 0;
        cellInsuranceno31.Colspan = 1;
        // cellInsuranceno31.Border = 0;
        table2.AddCell(cellInsuranceno31);


        PdfPCell slno2 = new PdfPCell(new Phrase("2", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno2.HorizontalAlignment = 0;
        slno2.Colspan = 1;
        slno2.Border = 0;
        table2.AddCell(slno2);
        PdfPCell cellspace4 = new PdfPCell(new Phrase("RANK", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellspace4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        cellspace4.Colspan = 1;
        cellspace4.Border = 0;
        table2.AddCell(cellspace4);
        PdfPCell cellname2 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname2.HorizontalAlignment = 0;
        cellname2.Colspan = 1;
        cellname2.Border = 0;
        table2.AddCell(cellname2);
        PdfPCell cellname4 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname4.HorizontalAlignment = 0;
        cellname4.Colspan = 1;
        // cellname4.Border = 0;
        table2.AddCell(cellname4);
        PdfPCell cellname41 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname41.HorizontalAlignment = 0;
        cellname41.Colspan = 1;
        // cellname41.Border = 0;
        table2.AddCell(cellname41);
        // table2.AddCell(space);
        //table2.AddCell(space);

        PdfPCell slno3 = new PdfPCell(new Phrase("3", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno3.HorizontalAlignment = 0;
        slno3.Colspan = 1;
        slno3.Border = 0;
        table2.AddCell(slno3);
        PdfPCell cellspace41 = new PdfPCell(new Phrase("NAME", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellspace41.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        cellspace41.Colspan = 1;
        cellspace41.Border = 0;
        table2.AddCell(cellspace41);
        PdfPCell cellname21 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname21.HorizontalAlignment = 0;
        cellname21.Colspan = 1;
        cellname21.Border = 0;
        table2.AddCell(cellname21);
        PdfPCell cellname411 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname411.HorizontalAlignment = 0;
        cellname411.Colspan = 1;
        // cellname411.Border = 0;
        table2.AddCell(cellname411);
        PdfPCell cellname4111 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellname4111.HorizontalAlignment = 0;
        cellname4111.Colspan = 1;
        // cellname4111.Border = 0;
        table2.AddCell(cellname4111);


        PdfPCell slno4 = new PdfPCell(new Phrase("4", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno4.HorizontalAlignment = 0;
        slno4.Colspan = 1;
        slno4.Border = 0;
        table2.AddCell(slno4);
        PdfPCell cellfather = new PdfPCell(new Phrase("UNIT LAST SERVED", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfather.HorizontalAlignment = 0;
        cellfather.Colspan = 1;
        cellfather.Border = 0;
        table2.AddCell(cellfather);
        PdfPCell cellname3 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellname3.HorizontalAlignment = 0;
        cellname3.Colspan = 1;
        cellname3.Border = 0;
        table2.AddCell(cellname3);
        PdfPCell cellfather1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfather1.HorizontalAlignment = 0;
        cellfather1.Colspan = 1;
        // cellfather1.Border = 0;
        table2.AddCell(cellfather1);
        PdfPCell cellfather11 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfather11.HorizontalAlignment = 0;
        cellfather11.Colspan = 1;
        // cellfather11.Border = 0;
        table2.AddCell(cellfather11);
        //  table2.AddCell(space);
        //  table2.AddCell(space);

        PdfPCell slno5 = new PdfPCell(new Phrase("5", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno5.HorizontalAlignment = 0;
        slno5.Colspan = 1;
        slno5.Border = 0;
        table2.AddCell(slno5);
        PdfPCell pparagraph341 = new PdfPCell();
        Paragraph PPparagraph341 = new Paragraph();
        PPparagraph341.Add(new Chunk("NUMBER OF DUTIES ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        PPparagraph341.Add(new Chunk("\n PERFORMED INCLUDING O.T.DURING THE PREVIOUS MONTH.", FontFactory.GetFont(FontStyle, Fontsize - 4, Font.NORMAL, BaseColor.BLACK)));
        pparagraph341.AddElement(PPparagraph341);
        pparagraph341.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        pparagraph341.Colspan = 1;
        pparagraph341.Border = 0;// 15;
        table2.AddCell(pparagraph341);
        PdfPCell Maritalstatus1 = new PdfPCell(new Phrase("\n\n:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Maritalstatus1.HorizontalAlignment = 0;
        Maritalstatus1.Colspan = 1;
        Maritalstatus1.Border = 0;
        table2.AddCell(Maritalstatus1);
        PdfPCell village = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        village.HorizontalAlignment = 0;
        village.Colspan = 1;
        // village.Border = 0;
        table2.AddCell(village);
        PdfPCell taluka = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        taluka.HorizontalAlignment = 0;
        taluka.Colspan = 1;
        // taluka.Border = 0;
        table2.AddCell(taluka);


        PdfPCell slno6 = new PdfPCell(new Phrase("6", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno6.HorizontalAlignment = 0;
        slno6.Colspan = 1;
        slno6.Border = 0;
        table2.AddCell(slno6);
        PdfPCell pparagraph34 = new PdfPCell();
        Paragraph PPparagraph34 = new Paragraph();
        PPparagraph34.Add(new Chunk("NUMBER OF DUTIES ", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        PPparagraph34.Add(new Chunk("\n PERFORMED INCLUDING O.T.DURING THE CURRENT MONTH.", FontFactory.GetFont(FontStyle, Fontsize - 4, Font.NORMAL, BaseColor.BLACK)));
        pparagraph34.AddElement(PPparagraph34);
        pparagraph34.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
        pparagraph34.Colspan = 1;
        pparagraph34.Border = 0;// 15;
        table2.AddCell(pparagraph34);
        PdfPCell post = new PdfPCell(new Phrase("\n\n:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        post.HorizontalAlignment = 0;
        post.Colspan = 1;
        post.Border = 0;
        table2.AddCell(post);
        PdfPCell district1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        district1.HorizontalAlignment = 0;
        district1.Colspan = 1;
        // district1.Border = 0;
        table2.AddCell(district1);
        PdfPCell district = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        district.HorizontalAlignment = 0;
        district.Colspan = 1;
        // district.Border = 0;
        table2.AddCell(district);


        PdfPCell slno7 = new PdfPCell(new Phrase("7", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno7.HorizontalAlignment = 0;
        slno7.Colspan = 1;
        slno7.Border = 0;
        table2.AddCell(slno7);
        PdfPCell empty = new PdfPCell(new Phrase("Welfare Fund", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty.HorizontalAlignment = 0;
        empty.Colspan = 1;
        empty.Border = 0;
        table2.AddCell(empty);
        PdfPCell empty1 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        empty1.HorizontalAlignment = 0;
        empty1.Colspan = 1;
        empty1.Border = 0;
        table2.AddCell(empty1);
        PdfPCell policestn = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        policestn.HorizontalAlignment = 0;
        policestn.Colspan = 1;
        // policestn.Border = 0;
        table2.AddCell(policestn);
        PdfPCell star = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        star.HorizontalAlignment = 0;
        star.Colspan = 1;
        // star.Border = 0;
        table2.AddCell(star);

        PdfPCell slno8 = new PdfPCell(new Phrase("8", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno8.HorizontalAlignment = 0;
        slno8.Colspan = 1;
        slno8.Border = 0;
        table2.AddCell(slno8);
        PdfPCell Hobli = new PdfPCell(new Phrase("TOTAL AMOUNT DUE", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Hobli.HorizontalAlignment = 0;
        Hobli.Colspan = 1;
        Hobli.Border = 0;
        table2.AddCell(Hobli);
        PdfPCell cellfather3 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellfather3.HorizontalAlignment = 0;
        cellfather3.Colspan = 1;
        cellfather3.Border = 0;
        table2.AddCell(cellfather3);
        PdfPCell cellDateofbirth = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDateofbirth.HorizontalAlignment = 0;
        cellDateofbirth.Colspan = 1;
        // cellDateofbirth.Border = 0;
        table2.AddCell(cellDateofbirth);
        PdfPCell cellDateofbirth2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDateofbirth2.HorizontalAlignment = 0;
        cellDateofbirth2.Colspan = 1;
        //  cellDateofbirth2.Border = 0;
        table2.AddCell(cellDateofbirth2);

        PdfPCell slno9 = new PdfPCell(new Phrase("9", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno9.HorizontalAlignment = 0;
        slno9.Colspan = 1;
        slno9.Border = 0;
        table2.AddCell(slno9);
        PdfPCell Maritalstatus = new PdfPCell(new Phrase("RECOVERABLE DUES IF A", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Maritalstatus.HorizontalAlignment = 0;
        Maritalstatus.Colspan = 1;
        Maritalstatus.Border = 0;
        table2.AddCell(Maritalstatus);
        PdfPCell cellDateofbirth1 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        cellDateofbirth1.HorizontalAlignment = 0;
        cellDateofbirth1.Colspan = 1;
        cellDateofbirth1.Border = 0;
        table2.AddCell(cellDateofbirth1);
        PdfPCell Maritalstatus2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Maritalstatus2.HorizontalAlignment = 0;
        Maritalstatus2.Colspan = 1;
        // Maritalstatus2.Border = 0;
        table2.AddCell(Maritalstatus2);
        PdfPCell datesd = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        datesd.HorizontalAlignment = 0;
        datesd.Colspan = 1;
        // datesd.Border = 0;
        table2.AddCell(datesd);


        PdfPCell sign = new PdfPCell(new Phrase("         A) CANTEEN", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        sign.HorizontalAlignment = 0;
        sign.Colspan = 2;
        sign.Border = 0;
        table2.AddCell(sign);
        PdfPCell CANTEEN = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        CANTEEN.HorizontalAlignment = 0;
        CANTEEN.Colspan = 1;
        CANTEEN.Border = 0;
        table2.AddCell(CANTEEN);
        PdfPCell CANTEEN1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        CANTEEN1.HorizontalAlignment = 0;
        CANTEEN1.Colspan = 1;
        // CANTEEN1.Border = 0;
        table2.AddCell(CANTEEN1);
        PdfPCell CANTEEN2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        CANTEEN2.HorizontalAlignment = 0;
        CANTEEN2.Colspan = 1;
        // CANTEEN2.Border = 0;
        table2.AddCell(CANTEEN2);


        PdfPCell sign123 = new PdfPCell(new Phrase("         B) LOAN IF ANY ", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        sign123.HorizontalAlignment = 0;
        sign123.Colspan = 2;
        sign123.Border = 0;
        table2.AddCell(sign123);
        PdfPCell LOAN = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        LOAN.HorizontalAlignment = 0;
        LOAN.Colspan = 1;
        LOAN.Border = 0;
        table2.AddCell(LOAN);
        PdfPCell LOAN1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        LOAN1.HorizontalAlignment = 0;
        LOAN1.Colspan = 1;
        //LOAN1.Border = 0;
        table2.AddCell(LOAN1);
        PdfPCell LOAN2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        LOAN2.HorizontalAlignment = 0;
        LOAN2.Colspan = 1;
        //LOAN2.Border = 0;
        table2.AddCell(LOAN2);


        PdfPCell declaration = new PdfPCell(new Phrase("         C) UNIFORMS", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        declaration.HorizontalAlignment = 0;
        declaration.Colspan = 2;
        declaration.Border = 0;
        table2.AddCell(declaration);
        PdfPCell UNIFORMS = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        UNIFORMS.HorizontalAlignment = 0;
        UNIFORMS.Colspan = 1;
        UNIFORMS.Border = 0;
        table2.AddCell(UNIFORMS);
        PdfPCell UNIFORMS1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        UNIFORMS1.HorizontalAlignment = 0;
        UNIFORMS1.Colspan = 1;
        //  UNIFORMS1.Border = 0;
        table2.AddCell(UNIFORMS1);
        PdfPCell UNIFORMS2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        UNIFORMS2.HorizontalAlignment = 0;
        UNIFORMS2.Colspan = 1;
        // UNIFORMS2.Border = 0;
        table2.AddCell(UNIFORMS2);

        PdfPCell signat = new PdfPCell(new Phrase("         D) ANY OTHER DUES", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        signat.HorizontalAlignment = 0;
        signat.Colspan = 2;
        signat.Border = 0;
        table2.AddCell(signat);
        PdfPCell OTHER = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        OTHER.HorizontalAlignment = 0;
        OTHER.Colspan = 1;
        OTHER.Border = 0;
        table2.AddCell(OTHER);
        PdfPCell OTHER1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        OTHER1.HorizontalAlignment = 0;
        OTHER1.Colspan = 1;
        //  OTHER1.Border = 0;
        table2.AddCell(OTHER1);
        PdfPCell OTHER2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        OTHER2.HorizontalAlignment = 0;
        OTHER2.Colspan = 1;
        // OTHER2.Border = 0;
        table2.AddCell(OTHER2);

        PdfPCell namenominee = new PdfPCell(new Phrase("                 TOTAL", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        namenominee.HorizontalAlignment = 0;
        namenominee.Colspan = 2;
        namenominee.Border = 0;
        table2.AddCell(namenominee);
        PdfPCell TOTAL = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        TOTAL.HorizontalAlignment = 0;
        TOTAL.Colspan = 1;
        TOTAL.Border = 0;
        table2.AddCell(TOTAL);
        PdfPCell TOTAL1 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        TOTAL1.HorizontalAlignment = 0;
        TOTAL1.Colspan = 1;
        //TOTAL1.Border = 0;
        table2.AddCell(TOTAL1);
        PdfPCell TOTAL2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        TOTAL2.HorizontalAlignment = 0;
        TOTAL2.Colspan = 1;
        //TOTAL2.Border = 0;
        table2.AddCell(TOTAL2);



        PdfPCell slno10 = new PdfPCell(new Phrase("10", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        slno10.HorizontalAlignment = 0;
        slno10.Colspan = 1;
        slno10.Border = 0;
        table2.AddCell(slno10);
        PdfPCell PAYABLE = new PdfPCell(new Phrase("NET PAYABLE", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        PAYABLE.HorizontalAlignment = 0;
        PAYABLE.Colspan = 1;
        PAYABLE.Border = 0;
        table2.AddCell(PAYABLE);
        PdfPCell PAYABLE1 = new PdfPCell(new Phrase(":", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        PAYABLE1.HorizontalAlignment = 0;
        PAYABLE1.Colspan = 1;
        PAYABLE1.Border = 0;
        table2.AddCell(PAYABLE1);
        PdfPCell PAYABLE2 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        PAYABLE2.HorizontalAlignment = 0;
        PAYABLE2.Colspan = 1;
        //  PAYABLE2.Border = 0;
        table2.AddCell(PAYABLE2);
        PdfPCell PAYABLE3 = new PdfPCell(new Phrase("", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        PAYABLE3.HorizontalAlignment = 0;
        PAYABLE3.Colspan = 1;
        // PAYABLE3.Border = 0;
        table2.AddCell(PAYABLE3);



        PdfPCell hereby = new PdfPCell(new Phrase("I hereby declare that, I have received the above amount in full and final settlement as per company rules and nothing is due to me from the management.", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        hereby.HorizontalAlignment = 0;
        hereby.Colspan = 5;
        hereby.Border = 0;
        table2.AddCell(hereby);
        PdfPCell Manager = new PdfPCell(new Phrase("Manager", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Manager.HorizontalAlignment = 0;
        Manager.Colspan = 5;
        Manager.Border = 0;
        Manager.PaddingBottom = 20;
        table2.AddCell(Manager);
        PdfPCell Managerf = new PdfPCell(new Phrase(" F.Manager", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Managerf.HorizontalAlignment = 0;
        Managerf.Colspan = 5;
        Managerf.Border = 0;
        Managerf.PaddingBottom = 40;
        table2.AddCell(Managerf);
        PdfPCell AUTHORISED = new PdfPCell(new Phrase("AUTHORISED SIGNATURE", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        AUTHORISED.HorizontalAlignment = 0;
        AUTHORISED.Colspan = 2;
        AUTHORISED.Border = 0;
        table2.AddCell(AUTHORISED);
        PdfPCell Signature = new PdfPCell(new Phrase("(Signature of the Employee)", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Signature.HorizontalAlignment = 2;
        Signature.Colspan = 3;
        Signature.Border = 0;
        Signature.PaddingBottom = 30;
        table2.AddCell(Signature);
        PdfPCell Date = new PdfPCell(new Phrase(" Date:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Date.HorizontalAlignment = 0;
        Date.Colspan = 5;
        Date.Border = 0;
        table2.AddCell(Date);
        PdfPCell Place = new PdfPCell(new Phrase(" Place:", FontFactory.GetFont(fontsyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        Place.HorizontalAlignment = 0;
        Place.Colspan = 5;
        Place.Border = 0;
        table2.AddCell(Place);











        document.Add(table2);


        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "Finsettle.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }

    protected void btnb3_Click(object sender, EventArgs e)
    {
        int Fontsize = 13;
        string fontsyle = "verdana";

        #region Variable Declaration

        string contactno = "";
        string Idno = "";
        string date = "";
        string postappliedfor = "";
        string name = "";
        string fathername = "";
        string dateofbirth = "";
        string educationqualification = "";
        string TechnicalQualification = "";
        string previouspost = "";
        string nationality = "";
        string community = "";
        string maritalstatus = "";
        string height = "";
        string weight = "";
        string chest = "";
        string bloodgroup = "";
        string identificationmark1 = "";
        string identificationmark2 = "";

        string prdoorno = "";
        string prstreet = "";
        string prarea = "";
        string prcity = "";
        string prLmark = "";
        string prDistrict = "";
        string prPincode = "";
        string prState = "";


        string pedoor = "";
        string pestreet = "";
        string pearea = "";
        string pecity = "";
        string pelmark = "";
        string peDistrict = "";
        string pePincode = "";
        string peState = "";

        string refaddress1 = "";
        string refaddress2 = "";

        string sscschool = "";
        string sscbduniversity = "";
        string sscstdyear = "";

        string imschool = "";
        string imbduniversity = "";
        string imstdyear = "";

        string dgschool = "";
        string dgbduniversity = "";
        string dgstdyear = "";

        string pgschool = "";
        string pgbduniversity = "";
        string pgstdyear = "";
        string EmpCertfDet1 = "";

        float EmpsecurityDeposit = 0;
        string Referedby = "";
        string clientname = "";


        string relationName = "";
        string relationAge = "";
        string relationType = "";


        string EmpCertfDet2 = "";
        string EmpCertfDet3 = "";
        string EmpCertfDet4 = "";

        string Original1 = "";
        string Original2 = "";
        string Original3 = "";
        string Original4 = "";

        string Xerox1 = "";
        string Xerox2 = "";
        string Xerox3 = "";
        string Xerox4 = "";

        string Ref1Phone1 = "";
        string Ref1Phone2 = "";
        string Ref2Phone1 = "";
        string Ref2Phone2 = "";

        string ReplacementFor = "";
        string PlaceofBirth = "";
        string Haircolour = "";
        string eyecolour = "";
        string Complexion = "";
        string Languagesknown = "";
        string EmergencyPhone = "";
        string Fname = "";
        string Fage = "";
        string Mname = "";
        string Mage = "";
        string relationoccupation = "";
        string relationresidence = "";
        string relationplace = "";
        string Esino = "";
        string prphone = "";
        string pephone = "";

        #endregion

        #region
        //if (ddlEmpID.SelectedIndex == 0)
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Please select Employee');", true);
        //    return;
        //}

        //#region  Begin  New Code


        //string query = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Father' ";
        //DataTable dtfather = SqlHelper.Instance.GetTableByQuery(query);

        //if (dtfather.Rows.Count > 0)
        //{
        //    Fname = dtfather.Rows[0]["RName"].ToString();
        //    Fage = dtfather.Rows[0]["age"].ToString();
        //    if (Fage == "0")
        //    {
        //        Fage = "";
        //    }
        //    else
        //    {
        //        Fage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}
        //string query1 = " select RName,age from EmpRelationships where EmpId='" + ddlEmpID.SelectedValue + "' and RType='Mother' ";
        //DataTable dtmother = SqlHelper.Instance.GetTableByQuery(query1);

        //if (dtmother.Rows.Count > 0)
        //{
        //    Mname = dtmother.Rows[0]["RName"].ToString();
        //    Mage = dtmother.Rows[0]["age"].ToString();
        //    if (Mage == "0")
        //    {
        //        Mage = "";
        //    }
        //    else
        //    {
        //        Mage = dtfather.Rows[0]["age"].ToString();
        //    }
        //}

        //string query2 = " select EmpESINo from EmpESICodes where Empid='" + ddlEmpID.SelectedValue + "'  ";
        //DataTable dtesi = SqlHelper.Instance.GetTableByQuery(query2);
        //if (dtesi.Rows.Count > 0)
        //{
        //    Esino = dtesi.Rows[0]["EmpESINo"].ToString();

        //}



        //#region Begin Variable Declaration

        //string SPName = "";
        //Hashtable HTEmpBiodata = new Hashtable();
        //string Empid = "";
        //DataTable dtEmpdetails = null;

        //#endregion end Variable Declaration


        //#region Begin Assign Values to The Variables
        //SPName = "GetEmpBiodataForPrint";
        //Empid = ddlEmpID.SelectedValue;
        //#endregion End Assign values To the Variables

        //#region Begin Pass values to the Hash table
        //HTEmpBiodata.Add("@empid", Empid);
        //#endregion  end Pass values to the Hash table

        //#region Begin  Call Stored Procedure
        //dtEmpdetails = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTEmpBiodata);
        //#endregion  End  Call Stored Procedure

        //#endregion End New Code As on [31-05-2014]


        //string datejoin = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //DateTime CurrentDate = DateTime.Now;
        //TimeSpan diffDate = new TimeSpan();
        //if (datejoin.Length > 0)
        //{
        //    DateTime joinDate = DateTime.Parse(datejoin, CultureInfo.GetCultureInfo("en-GB"));
        //    diffDate = CurrentDate.Subtract(joinDate);
        //}

        //string Gender = dtEmpdetails.Rows[0]["EmpSex"].ToString();
        //string EmpGender = "";

        //if (Gender == "True")
        //{
        //    EmpGender = "Male";
        //}
        //if (Gender == "False")
        //{
        //    EmpGender = "Female";
        //}

        //int diffdays = diffDate.Days;

        //if (dtEmpdetails.Rows.Count > 0)
        //{

        //    #region Assining data to Variables

        //    contactno = dtEmpdetails.Rows[0]["EmpPhone"].ToString();
        //    Idno = dtEmpdetails.Rows[0]["EmpId"].ToString();
        //    postappliedfor = dtEmpdetails.Rows[0]["EmpDesgn"].ToString();
        //    name = dtEmpdetails.Rows[0]["Fullname"].ToString();
        //    fathername = dtEmpdetails.Rows[0]["EmpFatherName"].ToString();
        //    dateofbirth = dtEmpdetails.Rows[0]["EmpDtofBirth"].ToString();
        //    if (dateofbirth == "01/01/1900")
        //    {
        //        dateofbirth = string.Empty;
        //    }

        //    PlaceofBirth = dtEmpdetails.Rows[0]["EmpPlaceofBirth"].ToString();
        //    Languagesknown = dtEmpdetails.Rows[0]["EmpLanguagesKnown"].ToString();
        //    educationqualification = dtEmpdetails.Rows[0]["EmpQualification"].ToString();
        //    date = dtEmpdetails.Rows[0]["EmpDtofJoining"].ToString();
        //    if (date == "01/01/1900")
        //    {
        //        date = string.Empty;
        //    }
        //    previouspost = dtEmpdetails.Rows[0]["EmpPreviousExp"].ToString();
        //    nationality = dtEmpdetails.Rows[0]["Nationality"].ToString();
        //    community = dtEmpdetails.Rows[0]["community"].ToString();
        //    if (community == "0")
        //    {
        //        community = "Others";
        //    }
        //    if (community == "1")
        //    {
        //        community = "SC";
        //    }
        //    if (community == "2")
        //    {
        //        community = "ST";
        //    }
        //    if (community == "3")
        //    {
        //        community = "OBC";
        //    }
        //    string Nationalorcommunity = string.Empty;

        //    if (nationality.Length > 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = nationality + "/ " + community;
        //    }
        //    if (nationality.Length > 0 && community.Length == 0)
        //    {
        //        Nationalorcommunity = nationality;
        //    }
        //    if (nationality.Length == 0 && community.Length > 0)
        //    {
        //        Nationalorcommunity = community;
        //    }
        //    maritalstatus = dtEmpdetails.Rows[0]["EmpMaritalStatus"].ToString();
        //    height = dtEmpdetails.Rows[0]["EmpHeight"].ToString();
        //    weight = dtEmpdetails.Rows[0]["EmpWeight"].ToString();
        //    EmergencyPhone = dtEmpdetails.Rows[0]["EmpEmergencyPhone"].ToString();
        //    chest = dtEmpdetails.Rows[0]["EmpChestExp"].ToString();
        //    Haircolour = dtEmpdetails.Rows[0]["EmpHairColor"].ToString();
        //    eyecolour = dtEmpdetails.Rows[0]["EmpEyesColor"].ToString();
        //    Complexion = dtEmpdetails.Rows[0]["EmpComplexion"].ToString();
        //    bloodgroup = dtEmpdetails.Rows[0]["EmpBloodGroup"].ToString();

        //    if (bloodgroup == "0")
        //    {
        //        bloodgroup = string.Empty;
        //    }

        //    identificationmark1 = dtEmpdetails.Rows[0]["EmpIdMark1"].ToString();
        //    identificationmark2 = dtEmpdetails.Rows[0]["EmpIdMark2"].ToString();

        //    refaddress1 = dtEmpdetails.Rows[0]["EmpRefAddr1"].ToString();
        //    refaddress2 = dtEmpdetails.Rows[0]["EmpRefAddr2"].ToString();

        //    prdoorno = dtEmpdetails.Rows[0]["prdoorno"].ToString();
        //    prstreet = dtEmpdetails.Rows[0]["prstreet"].ToString();
        //    prarea = dtEmpdetails.Rows[0]["prarea"].ToString();
        //    prcity = dtEmpdetails.Rows[0]["prcity"].ToString();
        //    prLmark = dtEmpdetails.Rows[0]["prLmark"].ToString();
        //    prDistrict = dtEmpdetails.Rows[0]["prDistrict"].ToString();
        //    prPincode = dtEmpdetails.Rows[0]["prPincode"].ToString();
        //    prState = dtEmpdetails.Rows[0]["prState"].ToString();
        //    prphone = dtEmpdetails.Rows[0]["prphone"].ToString();


        //    pedoor = dtEmpdetails.Rows[0]["pedoor"].ToString();
        //    pestreet = dtEmpdetails.Rows[0]["pestreet"].ToString();
        //    pearea = dtEmpdetails.Rows[0]["pearea"].ToString();
        //    pecity = dtEmpdetails.Rows[0]["pecity"].ToString();
        //    pelmark = dtEmpdetails.Rows[0]["pelmark"].ToString();
        //    peDistrict = dtEmpdetails.Rows[0]["peDistrict"].ToString();
        //    pePincode = dtEmpdetails.Rows[0]["pePincode"].ToString();
        //    peState = dtEmpdetails.Rows[0]["peState"].ToString();
        //    pephone = dtEmpdetails.Rows[0]["pephone"].ToString();

        //    sscschool = dtEmpdetails.Rows[0]["sscschool"].ToString();
        //    sscbduniversity = dtEmpdetails.Rows[0]["sscbduniversity"].ToString();
        //    sscstdyear = dtEmpdetails.Rows[0]["sscstdyear"].ToString();
        //    imschool = dtEmpdetails.Rows[0]["imschool"].ToString();
        //    imbduniversity = dtEmpdetails.Rows[0]["imbduniversity"].ToString();
        //    imstdyear = dtEmpdetails.Rows[0]["imstdyear"].ToString();
        //    dgschool = dtEmpdetails.Rows[0]["dgschool"].ToString();
        //    dgbduniversity = dtEmpdetails.Rows[0]["dgbduniversity"].ToString();
        //    dgstdyear = dtEmpdetails.Rows[0]["dgstdyear"].ToString();
        //    pgschool = dtEmpdetails.Rows[0]["pgschool"].ToString();
        //    pgbduniversity = dtEmpdetails.Rows[0]["pgbduniversity"].ToString();
        //    pgstdyear = dtEmpdetails.Rows[0]["pgstdyear"].ToString();

        //    EmpCertfDet1 = dtEmpdetails.Rows[0]["EmpCertfDet"].ToString();

        //    // EmpsecurityDeposit = float.Parse(dtEmpdetails.Rows[0]["EmpsecurityDeposit"].ToString());
        //    Referedby = dtEmpdetails.Rows[0]["Referedby"].ToString();




        //    if (Referedby == "0")
        //    {
        //        Referedby = string.Empty;
        //    }
        //    else
        //    {

        //        Referedby = dtEmpdetails.Rows[0]["name"].ToString();

        //    }

        //    clientname = dtEmpdetails.Rows[0]["clientname"].ToString();

        //    string Marital = "";

        //    if (maritalstatus == "1")
        //    {
        //        Marital = "Married";
        //    }
        //    if (maritalstatus == "0")
        //    {
        //        Marital = "Single";
        //    }

        //    EmpCertfDet2 = dtEmpdetails.Rows[0]["EmpCertfDet2"].ToString();
        //    EmpCertfDet3 = dtEmpdetails.Rows[0]["EmpCertfDet3"].ToString();
        //    EmpCertfDet4 = dtEmpdetails.Rows[0]["EmpCertfDet4"].ToString();

        //    bool original1 = false;
        //    bool original2 = false;
        //    bool original3 = false;
        //    bool original4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original1"].ToString()) == false)
        //    {
        //        original1 = Boolean.Parse(dtEmpdetails.Rows[0]["Original1"].ToString());
        //    }
        //    if (original1 == true)
        //    {
        //        Original1 = "Yes";
        //    }
        //    else
        //    {
        //        Original1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original2"].ToString()) == false)
        //    {
        //        original2 = Boolean.Parse(dtEmpdetails.Rows[0]["Original2"].ToString());
        //    }
        //    if (original2 == true)
        //    {
        //        Original2 = "Yes";
        //    }
        //    else
        //    {
        //        Original2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original3"].ToString()) == false)
        //    {
        //        original3 = Boolean.Parse(dtEmpdetails.Rows[0]["Original3"].ToString());
        //    }
        //    if (original3 == true)
        //    {
        //        Original3 = "Yes";
        //    }
        //    else
        //    {
        //        Original3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Original4"].ToString()) == false)
        //    {
        //        original4 = Boolean.Parse(dtEmpdetails.Rows[0]["Original4"].ToString());
        //    }
        //    if (original4 == true)
        //    {
        //        Original4 = "Yes";
        //    }
        //    else
        //    {
        //        Original4 = "No";
        //    }



        //    bool xerox1 = false;
        //    bool xerox2 = false;
        //    bool xerox3 = false;
        //    bool xerox4 = false;

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox1"].ToString()) == false)
        //    {
        //        xerox1 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox1"].ToString());
        //    }
        //    if (xerox1 == true)
        //    {
        //        Xerox1 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox1 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox2"].ToString()) == false)
        //    {
        //        xerox2 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox2"].ToString());
        //    }
        //    if (xerox2 == true)
        //    {
        //        Xerox2 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox2 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox3"].ToString()) == false)
        //    {
        //        xerox3 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox3"].ToString());
        //    }
        //    if (xerox3 == true)
        //    {
        //        Xerox3 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox3 = "No";
        //    }

        //    if (String.IsNullOrEmpty(dtEmpdetails.Rows[0]["Xerox4"].ToString()) == false)
        //    {
        //        xerox4 = Boolean.Parse(dtEmpdetails.Rows[0]["Xerox4"].ToString());
        //    }
        //    if (xerox4 == true)
        //    {
        //        Xerox4 = "Yes";
        //    }
        //    else
        //    {
        //        Xerox4 = "No";
        //    }

        //    Ref1Phone1 = dtEmpdetails.Rows[0]["Ref1Phone1"].ToString();
        //    Ref1Phone2 = dtEmpdetails.Rows[0]["Ref1Phone2"].ToString();
        //    Ref2Phone1 = dtEmpdetails.Rows[0]["Ref2Phone1"].ToString();
        //    Ref2Phone2 = dtEmpdetails.Rows[0]["Ref2Phone2"].ToString();

        //    ReplacementFor = dtEmpdetails.Rows[0]["ReplacementFor"].ToString();



        //    if (ReplacementFor == "0")
        //    {
        //        ReplacementFor = "";
        //    }

        //    #endregion

        #endregion
        MemoryStream ms = new MemoryStream();
        Document document = new Document(PageSize.LEGAL);
        // var output = new FileStream(fileheader2, FileMode., FileAccess.Write, FileShare.None);
        var writer = PdfWriter.GetInstance(document, ms);
        document.Open();
        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        string imagepath1 = Server.MapPath("images");
        #region

        PdfPTable tablesnewone = new PdfPTable(3);
        tablesnewone.TotalWidth = 500f;
        tablesnewone.LockedWidth = true;
        float[] width = new float[] { 1f, 0.1f, 4f };
        tablesnewone.SetWidths(width);

        PdfPCell cellHead1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead1.HorizontalAlignment = 1;
        cellHead1.Colspan = 3;
        cellHead1.Border = 0;

        PdfPCell cellHead = new PdfPCell(new Phrase("FORM OF NOMINATION", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        cellHead.HorizontalAlignment = 1;
        cellHead.Colspan = 3;
        cellHead.Border = 0;
        tablesnewone.AddCell(cellHead);
        PdfPCell nameapplicant = new PdfPCell(new Phrase("FORM NO.25(See Rule 126)", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        nameapplicant.HorizontalAlignment = 1;
        nameapplicant.Colspan = 3;
        nameapplicant.Border = 0;
        tablesnewone.AddCell(nameapplicant);
        PdfPCell nameapplicant1 = new PdfPCell(new Phrase("K.F.R 1969", FontFactory.GetFont(FontStyle, Fontsize, Font.BOLD, BaseColor.BLACK)));
        nameapplicant1.HorizontalAlignment = 1;
        nameapplicant1.Colspan = 3;
        nameapplicant1.Border = 0;
        tablesnewone.AddCell(nameapplicant1);


        PdfPCell semicoloum = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        semicoloum.HorizontalAlignment = 0;
        semicoloum.Colspan = 3;
        semicoloum.Border = 0;
        tablesnewone.AddCell(semicoloum);
        PdfPCell nameapplicant11 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        nameapplicant11.HorizontalAlignment = 0;
        nameapplicant11.Colspan = 3;
        nameapplicant11.Border = 0;
        tablesnewone.AddCell(nameapplicant11);


        PdfPCell idmark1 = new PdfPCell(new Phrase("Name Of the Worker....................................Name of the Factory.................................", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmark1.HorizontalAlignment = 0;
        idmark1.Colspan = 3;
        idmark1.Border = 0;
        tablesnewone.AddCell(idmark1);
        PdfPCell semicoloum1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        semicoloum1.HorizontalAlignment = 0;
        semicoloum1.Colspan = 2;
        semicoloum1.Border = 0;
       // tablesnewone.AddCell(semicoloum1);
        PdfPCell idmark1a = new PdfPCell(new Phrase("Token No...........................", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmark1a.HorizontalAlignment = 0;
        idmark1a.Colspan = 3;
        idmark1a.Border = 0;
        idmark1a.PaddingBottom = 20;

        tablesnewone.AddCell(idmark1a);

        PdfPCell idmark2 = new PdfPCell(new Phrase(" I hereby declare that in the event of my death before resuming work the balance of my pay due for the period of leave with wages not avail of shall be paid to                                   who is my and resident at                          Village                       Post                   Policestation              Hobli              Taluk                   District                     State                     .", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmark2.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        idmark2.Colspan = 3;
        //idmark2.SetLeading(0f, 1.5f);
        idmark2.Border = 0;
        idmark2.PaddingBottom = 20;
        tablesnewone.AddCell(idmark2);
        PdfPCell semicoloum2 = new PdfPCell(new Phrase("1. Witness", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        semicoloum2.HorizontalAlignment = 0;
        semicoloum2.Colspan = 3;
        semicoloum2.Border = 0;
        semicoloum2.PaddingBottom = 20;
        tablesnewone.AddCell(semicoloum2);
        PdfPCell idmark2a = new PdfPCell(new Phrase("2. Witness", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        idmark2a.HorizontalAlignment = 0;
        idmark2a.Colspan = 3;
        idmark2a.Border = 0;
        idmark2a.PaddingBottom = 40;
        tablesnewone.AddCell(idmark2a);


        PdfPCell cell3a = new PdfPCell(new Phrase("Signature or Thumb impression of the Employee \n NAME IN BLOCK LETTER", FontFactory.GetFont(FontStyle, Fontsize - 1, Font.NORMAL, BaseColor.BLACK)));
        cell3a.HorizontalAlignment = 2;
        cell3a.Colspan = 3;
        cell3a.Border = 0;
        tablesnewone.AddCell(cell3a);
        PdfPCell semicoloum3 = new PdfPCell(new Phrase("Date:", FontFactory.GetFont(FontStyle, Fontsize, Font.NORMAL, BaseColor.BLACK)));
        semicoloum3.HorizontalAlignment = 0;
        semicoloum3.Colspan = 3;
        semicoloum3.Border = 0;
        tablesnewone.AddCell(semicoloum3);
        document.Add(tablesnewone);



        #endregion Basic Information of the Employee

        document.NewPage();

        PdfPTable tblFingerprints = new PdfPTable(6);
        tblFingerprints.TotalWidth = 500f;
        tblFingerprints.LockedWidth = true;
        float[] widthfinger = new float[] { 2f, 1.5f, 2f, 2f, 1.5f, 2f };
        tblFingerprints.SetWidths(widthfinger);

        string filename = "b3.pdf";

        document.Close();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment;filename=" + filename);
        Response.Buffer = true;
        Response.Clear();
        Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
        Response.OutputStream.Flush();
        Response.End();
        //}

        //else
        //{
        //    ScriptManager.RegisterStartupScript(this, GetType(), "Showalert", "alert('Duration expired');", true);
        //    return;
        //}
    }


}


//float sum = 0;
//        for (int i = 0; i<gvresources.Rows.Count; i++)
//        //foreach (GridViewRow gvr in gvresources.Rows)
//        {
//            if (CbChecked.Checked == true)
//            {

//                TextBox txttotalqty = gvr.FindControl("txtQty") as TextBox;
//TextBox txttotalamt = gvr.FindControl("txtresourceprice") as TextBox;
//float TotalAmount = Convert.ToSingle(txttotalqty.Text) * Convert.ToSingle(txttotalamt.Text);
//sum = +TotalAmount;
//            }
//        }

//        txttotal.Text = sum.ToString();

#endregion




    }

